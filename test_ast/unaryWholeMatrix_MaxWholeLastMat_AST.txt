TranslationUnitDecl 0x7fb792838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fb7928394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fb7928391a0 '__int128'
|-TypedefDecl 0x7fb792839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fb7928391c0 'unsigned __int128'
|-TypedefDecl 0x7fb7928397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fb7928395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fb792839568 '__NSConstantString_tag'
|-TypedefDecl 0x7fb792839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fb792839850 'char *'
|   `-BuiltinType 0x7fb792838ca0 'char'
|-TypedefDecl 0x7fb792839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fb792839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fb792839970 'struct __va_list_tag'
|     `-Record 0x7fb7928398e8 '__va_list_tag'
|-TypedefDecl 0x7fb792891600 <./tree_src/unaryWholeMatrix_MaxWholeLastMat.c:4:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fb792838d60 'unsigned char'
|-FunctionDecl 0x7fb792891c28 <line:12:1, line:24:1> line:12:6 MaxWholeLastMat 'void (int, int, double (*)[m], double *)'
| |-ParmVarDecl 0x7fb792891670 <line:13:5, col:9> col:9 used n 'int'
| |-ParmVarDecl 0x7fb7928916f0 <col:12, col:16> col:16 used m 'int'
| |-ParmVarDecl 0x7fb7928918f0 <col:19, col:32> col:26 used x 'double (*)[m]':'double (*)[m]'
| |-ParmVarDecl 0x7fb792891a70 <col:35, col:45> col:42 used z 'double *':'double *'
| `-CompoundStmt 0x7fb792894740 <col:49, line:24:1>
|   |-DeclStmt 0x7fb792891e48 <line:15:5, col:13>
|   | |-VarDecl 0x7fb792891d48 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x7fb792891dc8 <col:5, col:12> col:12 used j 'int'
|   |-DeclStmt 0x7fb792891ee0 <line:16:5, col:15>
|   | `-VarDecl 0x7fb792891e78 <col:5, col:12> col:12 used val 'double'
|   `-ForStmt 0x7fb792894708 <line:17:5, line:23:5>
|     |-BinaryOperator 0x7fb792891f38 <line:17:10, col:12> 'int' '='
|     | |-DeclRefExpr 0x7fb792891ef8 <col:10> 'int' lvalue Var 0x7fb792891d48 'i' 'int'
|     | `-IntegerLiteral 0x7fb792891f18 <col:12> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fb792891fc8 <col:15, col:17> 'int' '<'
|     | |-ImplicitCastExpr 0x7fb792891f98 <col:15> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fb792891f58 <col:15> 'int' lvalue Var 0x7fb792891d48 'i' 'int'
|     | `-ImplicitCastExpr 0x7fb792891fb0 <col:17> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fb792891f78 <col:17> 'int' lvalue ParmVar 0x7fb792891670 'n' 'int'
|     |-UnaryOperator 0x7fb792892008 <col:20, col:21> 'int' postfix '++'
|     | `-DeclRefExpr 0x7fb792891fe8 <col:20> 'int' lvalue Var 0x7fb792891d48 'i' 'int'
|     `-CompoundStmt 0x7fb7928946e8 <col:26, line:23:5>
|       |-ForStmt 0x7fb7928925b8 <line:19:9, line:21:9>
|       | |-BinaryOperator 0x7fb792892080 <line:19:14, col:17> 'int' '='
|       | | |-DeclRefExpr 0x7fb792892040 <col:14> 'int' lvalue Var 0x7fb792891dc8 'j' 'int'
|       | | `-IntegerLiteral 0x7fb792892060 <col:17> 'int' 0
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x7fb792892110 <col:20, col:22> 'int' '<'
|       | | |-ImplicitCastExpr 0x7fb7928920e0 <col:20> 'int' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7fb7928920a0 <col:20> 'int' lvalue Var 0x7fb792891dc8 'j' 'int'
|       | | `-ImplicitCastExpr 0x7fb7928920f8 <col:22> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fb7928920c0 <col:22> 'int' lvalue ParmVar 0x7fb7928916f0 'm' 'int'
|       | |-UnaryOperator 0x7fb792892150 <col:25, col:26> 'int' postfix '++'
|       | | `-DeclRefExpr 0x7fb792892130 <col:25> 'int' lvalue Var 0x7fb792891dc8 'j' 'int'
|       | `-CompoundStmt 0x7fb7928925a0 <col:31, line:21:9>
|       |   `-BinaryOperator 0x7fb792892580 <line:20:6, col:29> 'double' '='
|       |     |-DeclRefExpr 0x7fb792892168 <col:6> 'double' lvalue Var 0x7fb792891e78 'val' 'double'
|       |     `-CallExpr 0x7fb792892520 <col:12, col:29> 'double'
|       |       |-ImplicitCastExpr 0x7fb792892508 <col:12> 'double (*)(double, double)' <FunctionToPointerDecay>
|       |       | `-DeclRefExpr 0x7fb792892398 <col:12> 'double (double, double)' Function 0x7fb7928921c8 'fmax' 'double (double, double)'
|       |       |-ImplicitCastExpr 0x7fb792892550 <col:17> 'double' <LValueToRValue>
|       |       | `-DeclRefExpr 0x7fb7928923b8 <col:17> 'double' lvalue Var 0x7fb792891e78 'val' 'double'
|       |       `-ImplicitCastExpr 0x7fb792892568 <col:22, col:28> 'double' <LValueToRValue>
|       |         `-ArraySubscriptExpr 0x7fb7928924b8 <col:22, col:28> 'double' lvalue
|       |           |-ImplicitCastExpr 0x7fb792892488 <col:22, col:25> 'double *' <ArrayToPointerDecay>
|       |           | `-ArraySubscriptExpr 0x7fb792892448 <col:22, col:25> 'double [m]' lvalue
|       |           |   |-ImplicitCastExpr 0x7fb792892418 <col:22> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
|       |           |   | `-DeclRefExpr 0x7fb7928923d8 <col:22> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fb7928918f0 'x' 'double (*)[m]':'double (*)[m]'
|       |           |   `-ImplicitCastExpr 0x7fb792892430 <col:24> 'int' <LValueToRValue>
|       |           |     `-DeclRefExpr 0x7fb7928923f8 <col:24> 'int' lvalue Var 0x7fb792891d48 'i' 'int'
|       |           `-ImplicitCastExpr 0x7fb7928924a0 <col:27> 'int' <LValueToRValue>
|       |             `-DeclRefExpr 0x7fb792892468 <col:27> 'int' lvalue Var 0x7fb792891dc8 'j' 'int'
|       `-BinaryOperator 0x7fb7928946c8 <line:22:9, col:16> 'double' '='
|         |-ArraySubscriptExpr 0x7fb792894670 <col:9, col:12> 'double' lvalue
|         | |-ImplicitCastExpr 0x7fb792894640 <col:9> 'double *':'double *' <LValueToRValue>
|         | | `-DeclRefExpr 0x7fb792894600 <col:9> 'double *':'double *' lvalue ParmVar 0x7fb792891a70 'z' 'double *':'double *'
|         | `-ImplicitCastExpr 0x7fb792894658 <col:11> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x7fb792894620 <col:11> 'int' lvalue Var 0x7fb792891d48 'i' 'int'
|         `-ImplicitCastExpr 0x7fb7928946b0 <col:16> 'double' <LValueToRValue>
|           `-DeclRefExpr 0x7fb792894690 <col:16> 'double' lvalue Var 0x7fb792891e78 'val' 'double'
`-FunctionDecl 0x7fb7928921c8 <line:20:12> col:12 implicit used fmax 'double (double, double)' extern
  |-ParmVarDecl 0x7fb792892268 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x7fb7928922d0 <<invalid sloc>> <invalid sloc> 'double'
  |-NoThrowAttr 0x7fb792892348 <col:12> Implicit
  `-ConstAttr 0x7fb792892388 <col:12> Implicit
