TranslationUnitDecl 0x7fa11c838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fa11c8394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fa11c8391a0 '__int128'
|-TypedefDecl 0x7fa11c839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fa11c8391c0 'unsigned __int128'
|-TypedefDecl 0x7fa11c8397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fa11c8395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fa11c839568 '__NSConstantString_tag'
|-TypedefDecl 0x7fa11c839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fa11c839850 'char *'
|   `-BuiltinType 0x7fa11c838ca0 'char'
|-TypedefDecl 0x7fa11c839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fa11c839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fa11c839970 'struct __va_list_tag'
|     `-Record 0x7fa11c8398e8 '__va_list_tag'
|-TypedefDecl 0x7fa11d02f200 <./tree_src/unaryWholeMatrix_ProdWholeFirstMat.c:4:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fa11c838d60 'unsigned char'
`-FunctionDecl 0x7fa11d02f828 <line:11:1, line:23:1> line:11:6 ProdWholeFirstMat 'void (int, int, double (*)[m], double *)'
  |-ParmVarDecl 0x7fa11d02f270 <line:12:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7fa11d02f2f0 <col:12, col:16> col:16 used m 'int'
  |-ParmVarDecl 0x7fa11d02f4f0 <col:19, col:32> col:26 used x 'double (*)[m]':'double (*)[m]'
  |-ParmVarDecl 0x7fa11d02f670 <col:35, col:45> col:42 used z 'double *':'double *'
  `-CompoundStmt 0x7fa11d0300a8 <col:49, line:23:1>
    |-DeclStmt 0x7fa11d02fa48 <line:14:5, col:13>
    | |-VarDecl 0x7fa11d02f948 <col:5, col:9> col:9 used i 'int'
    | `-VarDecl 0x7fa11d02f9c8 <col:5, col:12> col:12 used j 'int'
    |-DeclStmt 0x7fa11d02fae0 <line:15:5, col:15>
    | `-VarDecl 0x7fa11d02fa78 <col:5, col:12> col:12 used val 'double'
    `-ForStmt 0x7fa11d030070 <line:16:5, line:22:5>
      |-BinaryOperator 0x7fa11d02fb38 <line:16:10, col:13> 'int' '='
      | |-DeclRefExpr 0x7fa11d02faf8 <col:10> 'int' lvalue Var 0x7fa11d02f948 'i' 'int'
      | `-IntegerLiteral 0x7fa11d02fb18 <col:13> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x7fa11d02fbc8 <col:16, col:18> 'int' '<'
      | |-ImplicitCastExpr 0x7fa11d02fb98 <col:16> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fa11d02fb58 <col:16> 'int' lvalue Var 0x7fa11d02f948 'i' 'int'
      | `-ImplicitCastExpr 0x7fa11d02fbb0 <col:18> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fa11d02fb78 <col:18> 'int' lvalue ParmVar 0x7fa11d02f270 'n' 'int'
      |-UnaryOperator 0x7fa11d02fc08 <col:21, col:22> 'int' postfix '++'
      | `-DeclRefExpr 0x7fa11d02fbe8 <col:21> 'int' lvalue Var 0x7fa11d02f948 'i' 'int'
      `-CompoundStmt 0x7fa11d030050 <col:27, line:22:5>
        |-ForStmt 0x7fa11d02ff30 <line:18:9, line:20:9>
        | |-BinaryOperator 0x7fa11d02fc80 <line:18:14, col:17> 'int' '='
        | | |-DeclRefExpr 0x7fa11d02fc40 <col:14> 'int' lvalue Var 0x7fa11d02f9c8 'j' 'int'
        | | `-IntegerLiteral 0x7fa11d02fc60 <col:17> 'int' 0
        | |-<<<NULL>>>
        | |-BinaryOperator 0x7fa11d02fd10 <col:20, col:22> 'int' '<'
        | | |-ImplicitCastExpr 0x7fa11d02fce0 <col:20> 'int' <LValueToRValue>
        | | | `-DeclRefExpr 0x7fa11d02fca0 <col:20> 'int' lvalue Var 0x7fa11d02f9c8 'j' 'int'
        | | `-ImplicitCastExpr 0x7fa11d02fcf8 <col:22> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fa11d02fcc0 <col:22> 'int' lvalue ParmVar 0x7fa11d02f2f0 'm' 'int'
        | |-UnaryOperator 0x7fa11d02fd50 <col:25, col:26> 'int' postfix '++'
        | | `-DeclRefExpr 0x7fa11d02fd30 <col:25> 'int' lvalue Var 0x7fa11d02f9c8 'j' 'int'
        | `-CompoundStmt 0x7fa11d02ff18 <col:31, line:20:9>
        |   `-BinaryOperator 0x7fa11d02fef8 <line:19:6, col:24> 'double' '='
        |     |-DeclRefExpr 0x7fa11d02fd68 <col:6> 'double' lvalue Var 0x7fa11d02fa78 'val' 'double'
        |     `-BinaryOperator 0x7fa11d02fed8 <col:12, col:24> 'double' '*'
        |       |-ImplicitCastExpr 0x7fa11d02fea8 <col:12> 'double' <LValueToRValue>
        |       | `-DeclRefExpr 0x7fa11d02fd88 <col:12> 'double' lvalue Var 0x7fa11d02fa78 'val' 'double'
        |       `-ImplicitCastExpr 0x7fa11d02fec0 <col:18, col:24> 'double' <LValueToRValue>
        |         `-ArraySubscriptExpr 0x7fa11d02fe88 <col:18, col:24> 'double' lvalue
        |           |-ImplicitCastExpr 0x7fa11d02fe58 <col:18, col:21> 'double *' <ArrayToPointerDecay>
        |           | `-ArraySubscriptExpr 0x7fa11d02fe18 <col:18, col:21> 'double [m]' lvalue
        |           |   |-ImplicitCastExpr 0x7fa11d02fde8 <col:18> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
        |           |   | `-DeclRefExpr 0x7fa11d02fda8 <col:18> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fa11d02f4f0 'x' 'double (*)[m]':'double (*)[m]'
        |           |   `-ImplicitCastExpr 0x7fa11d02fe00 <col:20> 'int' <LValueToRValue>
        |           |     `-DeclRefExpr 0x7fa11d02fdc8 <col:20> 'int' lvalue Var 0x7fa11d02f9c8 'j' 'int'
        |           `-ImplicitCastExpr 0x7fa11d02fe70 <col:23> 'int' <LValueToRValue>
        |             `-DeclRefExpr 0x7fa11d02fe38 <col:23> 'int' lvalue Var 0x7fa11d02f948 'i' 'int'
        `-BinaryOperator 0x7fa11d030030 <line:21:9, col:16> 'double' '='
          |-ArraySubscriptExpr 0x7fa11d02ffd8 <col:9, col:12> 'double' lvalue
          | |-ImplicitCastExpr 0x7fa11d02ffa8 <col:9> 'double *':'double *' <LValueToRValue>
          | | `-DeclRefExpr 0x7fa11d02ff68 <col:9> 'double *':'double *' lvalue ParmVar 0x7fa11d02f670 'z' 'double *':'double *'
          | `-ImplicitCastExpr 0x7fa11d02ffc0 <col:11> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x7fa11d02ff88 <col:11> 'int' lvalue Var 0x7fa11d02f948 'i' 'int'
          `-ImplicitCastExpr 0x7fa11d030018 <col:16> 'double' <LValueToRValue>
            `-DeclRefExpr 0x7fa11d02fff8 <col:16> 'double' lvalue Var 0x7fa11d02fa78 'val' 'double'
