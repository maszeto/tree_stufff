TranslationUnitDecl 0x7f9ee7818608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f9ee7818ea0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f9ee7818ba0 '__int128'
|-TypedefDecl 0x7f9ee7818f10 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f9ee7818bc0 'unsigned __int128'
|-TypedefDecl 0x7f9ee78191f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f9ee7818ff0 'struct __NSConstantString_tag'
|   `-Record 0x7f9ee7818f68 '__NSConstantString_tag'
|-TypedefDecl 0x7f9ee7819290 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f9ee7819250 'char *'
|   `-BuiltinType 0x7f9ee78186a0 'char'
|-TypedefDecl 0x7f9ee7819568 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f9ee7819510 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f9ee7819370 'struct __va_list_tag'
|     `-Record 0x7f9ee78192e8 '__va_list_tag'
|-TypedefDecl 0x7f9ee704f800 <./tree_src/unaryWholeMatrix_IdxMaxWholeLastMat.c:4:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7f9ee7818760 'unsigned char'
`-FunctionDecl 0x7f9ee704fe28 <line:12:1, line:28:1> line:12:6 IdxMaxWholeLastMat 'void (int, int, double (*)[m], int *)'
  |-ParmVarDecl 0x7f9ee704f870 <line:13:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7f9ee704f8f0 <col:12, col:16> col:16 used m 'int'
  |-ParmVarDecl 0x7f9ee704faf0 <col:19, col:32> col:26 used x 'double (*)[m]':'double (*)[m]'
  |-ParmVarDecl 0x7f9ee704fc70 <col:35, col:42> col:39 used z 'int *':'int *'
  `-CompoundStmt 0x7f9ee7052ab8 <col:46, line:28:1>
    |-DeclStmt 0x7f9ee704ffb0 <line:15:5, col:15>
    | `-VarDecl 0x7f9ee704ff48 <col:5, col:12> col:12 used val 'double'
    |-DeclStmt 0x7f9ee7050168 <line:16:5, col:18>
    | |-VarDecl 0x7f9ee704ffe0 <col:5, col:9> col:9 used i 'int'
    | |-VarDecl 0x7f9ee7050060 <col:5, col:12> col:12 used j 'int'
    | `-VarDecl 0x7f9ee70500e0 <col:5, col:15> col:15 used loc 'int'
    `-ForStmt 0x7f9ee7052a80 <line:17:5, line:27:5>
      |-BinaryOperator 0x7f9ee70501c0 <line:17:10, col:13> 'int' '='
      | |-DeclRefExpr 0x7f9ee7050180 <col:10> 'int' lvalue Var 0x7f9ee704ffe0 'i' 'int'
      | `-IntegerLiteral 0x7f9ee70501a0 <col:13> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x7f9ee7050250 <col:16, col:18> 'int' '<'
      | |-ImplicitCastExpr 0x7f9ee7050220 <col:16> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7f9ee70501e0 <col:16> 'int' lvalue Var 0x7f9ee704ffe0 'i' 'int'
      | `-ImplicitCastExpr 0x7f9ee7050238 <col:18> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f9ee7050200 <col:18> 'int' lvalue ParmVar 0x7f9ee704f870 'n' 'int'
      |-UnaryOperator 0x7f9ee7050290 <col:21, col:22> 'int' postfix '++'
      | `-DeclRefExpr 0x7f9ee7050270 <col:21> 'int' lvalue Var 0x7f9ee704ffe0 'i' 'int'
      `-CompoundStmt 0x7f9ee7052a50 <col:27, line:27:5>
        |-BinaryOperator 0x7f9ee70502e8 <line:18:9, col:15> 'int' '='
        | |-DeclRefExpr 0x7f9ee70502a8 <col:9> 'int' lvalue Var 0x7f9ee70500e0 'loc' 'int'
        | `-IntegerLiteral 0x7f9ee70502c8 <col:15> 'int' 0
        |-BinaryOperator 0x7f9ee7050458 <line:19:9, col:22> 'double' '='
        | |-DeclRefExpr 0x7f9ee7050308 <col:9> 'double' lvalue Var 0x7f9ee704ff48 'val' 'double'
        | `-ImplicitCastExpr 0x7f9ee7050440 <col:16, col:22> 'double' <LValueToRValue>
        |   `-ArraySubscriptExpr 0x7f9ee7050420 <col:16, col:22> 'double' lvalue
        |     |-ImplicitCastExpr 0x7f9ee7050408 <col:16, col:19> 'double *' <ArrayToPointerDecay>
        |     | `-ArraySubscriptExpr 0x7f9ee7050398 <col:16, col:19> 'double [m]' lvalue
        |     |   |-ImplicitCastExpr 0x7f9ee7050368 <col:16> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
        |     |   | `-DeclRefExpr 0x7f9ee7050328 <col:16> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f9ee704faf0 'x' 'double (*)[m]':'double (*)[m]'
        |     |   `-ImplicitCastExpr 0x7f9ee7050380 <col:18> 'int' <LValueToRValue>
        |     |     `-DeclRefExpr 0x7f9ee7050348 <col:18> 'int' lvalue Var 0x7f9ee704ffe0 'i' 'int'
        |     `-IntegerLiteral 0x7f9ee70503b8 <col:21> 'int' 0
        |-ForStmt 0x7f9ee7052930 <line:20:9, line:25:9>
        | |-BinaryOperator 0x7f9ee70504b8 <line:20:14, col:18> 'int' '='
        | | |-DeclRefExpr 0x7f9ee7050478 <col:14> 'int' lvalue Var 0x7f9ee7050060 'j' 'int'
        | | `-IntegerLiteral 0x7f9ee7050498 <col:18> 'int' 1
        | |-<<<NULL>>>
        | |-BinaryOperator 0x7f9ee7050548 <col:21, col:23> 'int' '<'
        | | |-ImplicitCastExpr 0x7f9ee7050518 <col:21> 'int' <LValueToRValue>
        | | | `-DeclRefExpr 0x7f9ee70504d8 <col:21> 'int' lvalue Var 0x7f9ee7050060 'j' 'int'
        | | `-ImplicitCastExpr 0x7f9ee7050530 <col:23> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7f9ee70504f8 <col:23> 'int' lvalue ParmVar 0x7f9ee704f8f0 'm' 'int'
        | |-UnaryOperator 0x7f9ee7050588 <col:26, col:27> 'int' postfix '++'
        | | `-DeclRefExpr 0x7f9ee7050568 <col:26> 'int' lvalue Var 0x7f9ee7050060 'j' 'int'
        | `-CompoundStmt 0x7f9ee7052918 <col:32, line:25:9>
        |   `-IfStmt 0x7f9ee7052900 <line:21:6, line:24:6>
        |     |-BinaryOperator 0x7f9ee70506f0 <line:21:10, col:20> 'int' '>'
        |     | |-ImplicitCastExpr 0x7f9ee70506c0 <col:10, col:16> 'double' <LValueToRValue>
        |     | | `-ArraySubscriptExpr 0x7f9ee7050680 <col:10, col:16> 'double' lvalue
        |     | |   |-ImplicitCastExpr 0x7f9ee7050650 <col:10, col:13> 'double *' <ArrayToPointerDecay>
        |     | |   | `-ArraySubscriptExpr 0x7f9ee7050610 <col:10, col:13> 'double [m]' lvalue
        |     | |   |   |-ImplicitCastExpr 0x7f9ee70505e0 <col:10> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
        |     | |   |   | `-DeclRefExpr 0x7f9ee70505a0 <col:10> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f9ee704faf0 'x' 'double (*)[m]':'double (*)[m]'
        |     | |   |   `-ImplicitCastExpr 0x7f9ee70505f8 <col:12> 'int' <LValueToRValue>
        |     | |   |     `-DeclRefExpr 0x7f9ee70505c0 <col:12> 'int' lvalue Var 0x7f9ee704ffe0 'i' 'int'
        |     | |   `-ImplicitCastExpr 0x7f9ee7050668 <col:15> 'int' <LValueToRValue>
        |     | |     `-DeclRefExpr 0x7f9ee7050630 <col:15> 'int' lvalue Var 0x7f9ee7050060 'j' 'int'
        |     | `-ImplicitCastExpr 0x7f9ee70506d8 <col:20> 'double' <LValueToRValue>
        |     |   `-DeclRefExpr 0x7f9ee70506a0 <col:20> 'double' lvalue Var 0x7f9ee704ff48 'val' 'double'
        |     `-CompoundStmt 0x7f9ee70528e0 <col:26, line:24:6>
        |       |-BinaryOperator 0x7f9ee7050768 <line:22:7, col:13> 'int' '='
        |       | |-DeclRefExpr 0x7f9ee7050710 <col:7> 'int' lvalue Var 0x7f9ee70500e0 'loc' 'int'
        |       | `-ImplicitCastExpr 0x7f9ee7050750 <col:13> 'int' <LValueToRValue>
        |       |   `-DeclRefExpr 0x7f9ee7050730 <col:13> 'int' lvalue Var 0x7f9ee7050060 'j' 'int'
        |       `-BinaryOperator 0x7f9ee70528c0 <line:23:7, col:20> 'double' '='
        |         |-DeclRefExpr 0x7f9ee7050788 <col:7> 'double' lvalue Var 0x7f9ee704ff48 'val' 'double'
        |         `-ImplicitCastExpr 0x7f9ee70528a8 <col:14, col:20> 'double' <LValueToRValue>
        |           `-ArraySubscriptExpr 0x7f9ee7052888 <col:14, col:20> 'double' lvalue
        |             |-ImplicitCastExpr 0x7f9ee7052858 <col:14, col:17> 'double *' <ArrayToPointerDecay>
        |             | `-ArraySubscriptExpr 0x7f9ee7052818 <col:14, col:17> 'double [m]' lvalue
        |             |   |-ImplicitCastExpr 0x7f9ee70507e8 <col:14> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
        |             |   | `-DeclRefExpr 0x7f9ee70507a8 <col:14> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f9ee704faf0 'x' 'double (*)[m]':'double (*)[m]'
        |             |   `-ImplicitCastExpr 0x7f9ee7052800 <col:16> 'int' <LValueToRValue>
        |             |     `-DeclRefExpr 0x7f9ee70507c8 <col:16> 'int' lvalue Var 0x7f9ee704ffe0 'i' 'int'
        |             `-ImplicitCastExpr 0x7f9ee7052870 <col:19> 'int' <LValueToRValue>
        |               `-DeclRefExpr 0x7f9ee7052838 <col:19> 'int' lvalue Var 0x7f9ee7050060 'j' 'int'
        `-BinaryOperator 0x7f9ee7052a30 <line:26:9, col:16> 'int' '='
          |-ArraySubscriptExpr 0x7f9ee70529d8 <col:9, col:12> 'int' lvalue
          | |-ImplicitCastExpr 0x7f9ee70529a8 <col:9> 'int *':'int *' <LValueToRValue>
          | | `-DeclRefExpr 0x7f9ee7052968 <col:9> 'int *':'int *' lvalue ParmVar 0x7f9ee704fc70 'z' 'int *':'int *'
          | `-ImplicitCastExpr 0x7f9ee70529c0 <col:11> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x7f9ee7052988 <col:11> 'int' lvalue Var 0x7f9ee704ffe0 'i' 'int'
          `-ImplicitCastExpr 0x7f9ee7052a18 <col:16> 'int' <LValueToRValue>
            `-DeclRefExpr 0x7f9ee70529f8 <col:16> 'int' lvalue Var 0x7f9ee70500e0 'loc' 'int'
