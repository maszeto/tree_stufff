TranslationUnitDecl 0x7f85c9838608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f85c9838ea0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f85c9838ba0 '__int128'
|-TypedefDecl 0x7f85c9838f10 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f85c9838bc0 'unsigned __int128'
|-TypedefDecl 0x7f85c98391f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f85c9838ff0 'struct __NSConstantString_tag'
|   `-Record 0x7f85c9838f68 '__NSConstantString_tag'
|-TypedefDecl 0x7f85c9839290 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f85c9839250 'char *'
|   `-BuiltinType 0x7f85c98386a0 'char'
|-TypedefDecl 0x7f85c9839568 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f85c9839510 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f85c9839370 'struct __va_list_tag'
|     `-Record 0x7f85c98392e8 '__va_list_tag'
|-TypedefDecl 0x7f85c902f800 <./tree_src/dyadicOneMatrix_DivOneScaMatRow.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7f85c9838760 'unsigned char'
`-FunctionDecl 0x7f85c9030048 <line:6:1, line:13:1> line:6:6 DivOneScaMatRow 'void (int, int, int, double, double (*)[m], double (*)[m])'
  |-ParmVarDecl 0x7f85c902f870 <line:7:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7f85c902f8f0 <col:12, col:16> col:16 used m 'int'
  |-ParmVarDecl 0x7f85c902f970 <col:19, col:23> col:23 used p 'int'
  |-ParmVarDecl 0x7f85c902f9f0 <col:26, col:33> col:33 used x 'double'
  |-ParmVarDecl 0x7f85c902fbf0 <col:36, col:49> col:43 used y 'double (*)[m]':'double (*)[m]'
  |-ParmVarDecl 0x7f85c902fdf0 <col:52, col:65> col:59 used z 'double (*)[m]':'double (*)[m]'
  `-CompoundStmt 0x7f85c90306c8 <col:69, line:13:1>
    |-DeclStmt 0x7f85c9030278 <line:9:5, col:13>
    | |-VarDecl 0x7f85c9030178 <col:5, col:9> col:9 i 'int'
    | `-VarDecl 0x7f85c90301f8 <col:5, col:12> col:12 used j 'int'
    `-ForStmt 0x7f85c9030690 <line:10:5, line:12:5>
      |-BinaryOperator 0x7f85c90302d0 <line:10:10, col:13> 'int' '='
      | |-DeclRefExpr 0x7f85c9030290 <col:10> 'int' lvalue Var 0x7f85c90301f8 'j' 'int'
      | `-IntegerLiteral 0x7f85c90302b0 <col:13> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x7f85c9030360 <col:16, col:18> 'int' '<'
      | |-ImplicitCastExpr 0x7f85c9030330 <col:16> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7f85c90302f0 <col:16> 'int' lvalue Var 0x7f85c90301f8 'j' 'int'
      | `-ImplicitCastExpr 0x7f85c9030348 <col:18> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f85c9030310 <col:18> 'int' lvalue ParmVar 0x7f85c902f8f0 'm' 'int'
      |-UnaryOperator 0x7f85c90303a0 <col:21, col:22> 'int' postfix '++'
      | `-DeclRefExpr 0x7f85c9030380 <col:21> 'int' lvalue Var 0x7f85c90301f8 'j' 'int'
      `-CompoundStmt 0x7f85c9030678 <col:27, line:12:5>
        `-BinaryOperator 0x7f85c9030658 <line:11:9, col:29> 'double' '='
          |-ArraySubscriptExpr 0x7f85c90304c8 <col:9, col:15> 'double' lvalue
          | |-ImplicitCastExpr 0x7f85c9030498 <col:9, col:12> 'double *' <ArrayToPointerDecay>
          | | `-ArraySubscriptExpr 0x7f85c9030428 <col:9, col:12> 'double [m]' lvalue
          | |   |-ImplicitCastExpr 0x7f85c90303f8 <col:9> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
          | |   | `-DeclRefExpr 0x7f85c90303b8 <col:9> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f85c902fdf0 'z' 'double (*)[m]':'double (*)[m]'
          | |   `-ImplicitCastExpr 0x7f85c9030410 <col:11> 'int' <LValueToRValue>
          | |     `-DeclRefExpr 0x7f85c90303d8 <col:11> 'int' lvalue ParmVar 0x7f85c902f970 'p' 'int'
          | `-ImplicitCastExpr 0x7f85c90304b0 <col:14> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x7f85c9030448 <col:14> 'int' lvalue Var 0x7f85c90301f8 'j' 'int'
          `-BinaryOperator 0x7f85c9030638 <col:19, col:29> 'double' '/'
            |-ImplicitCastExpr 0x7f85c9030608 <col:19> 'double' <LValueToRValue>
            | `-DeclRefExpr 0x7f85c90304e8 <col:19> 'double' lvalue ParmVar 0x7f85c902f9f0 'x' 'double'
            `-ImplicitCastExpr 0x7f85c9030620 <col:23, col:29> 'double' <LValueToRValue>
              `-ArraySubscriptExpr 0x7f85c90305e8 <col:23, col:29> 'double' lvalue
                |-ImplicitCastExpr 0x7f85c90305b8 <col:23, col:26> 'double *' <ArrayToPointerDecay>
                | `-ArraySubscriptExpr 0x7f85c9030578 <col:23, col:26> 'double [m]' lvalue
                |   |-ImplicitCastExpr 0x7f85c9030548 <col:23> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
                |   | `-DeclRefExpr 0x7f85c9030508 <col:23> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f85c902fbf0 'y' 'double (*)[m]':'double (*)[m]'
                |   `-ImplicitCastExpr 0x7f85c9030560 <col:25> 'int' <LValueToRValue>
                |     `-DeclRefExpr 0x7f85c9030528 <col:25> 'int' lvalue ParmVar 0x7f85c902f970 'p' 'int'
                `-ImplicitCastExpr 0x7f85c90305d0 <col:28> 'int' <LValueToRValue>
                  `-DeclRefExpr 0x7f85c9030598 <col:28> 'int' lvalue Var 0x7f85c90301f8 'j' 'int'
