TranslationUnitDecl 0x7fad47038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fad470394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fad470391a0 '__int128'
|-TypedefDecl 0x7fad47039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fad470391c0 'unsigned __int128'
|-TypedefDecl 0x7fad470397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fad470395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fad47039568 '__NSConstantString_tag'
|-TypedefDecl 0x7fad47039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fad47039850 'char *'
|   `-BuiltinType 0x7fad47038ca0 'char'
|-TypedefDecl 0x7fad47039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fad47039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fad47039970 'struct __va_list_tag'
|     `-Record 0x7fad470398e8 '__va_list_tag'
|-TypedefDecl 0x7fad47091600 <./tree_src/extendWholeMatrix_MulWholeMatSca.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fad47038d60 'unsigned char'
`-FunctionDecl 0x7fad47091da8 <line:6:1, line:15:1> line:6:6 MulWholeMatSca 'void (int, int, double (*)[m], double, double (*)[m])'
  |-ParmVarDecl 0x7fad47091670 <line:7:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7fad470916f0 <col:12, col:16> col:16 used m 'int'
  |-ParmVarDecl 0x7fad470918f0 <col:19, col:32> col:26 used x 'double (*)[m]':'double (*)[m]'
  |-ParmVarDecl 0x7fad47091970 <col:35, col:42> col:42 used y 'double'
  |-ParmVarDecl 0x7fad47091b70 <col:45, col:58> col:52 used z 'double (*)[m]':'double (*)[m]'
  `-CompoundStmt 0x7fad47092598 <col:62, line:15:1>
    |-DeclStmt 0x7fad47091fd0 <line:9:5, col:13>
    | |-VarDecl 0x7fad47091ed0 <col:5, col:9> col:9 used i 'int'
    | `-VarDecl 0x7fad47091f50 <col:5, col:12> col:12 used j 'int'
    `-ForStmt 0x7fad47092560 <line:10:5, line:14:5>
      |-BinaryOperator 0x7fad47092028 <line:10:10, col:13> 'int' '='
      | |-DeclRefExpr 0x7fad47091fe8 <col:10> 'int' lvalue Var 0x7fad47091ed0 'i' 'int'
      | `-IntegerLiteral 0x7fad47092008 <col:13> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x7fad470920b8 <col:16, col:18> 'int' '<'
      | |-ImplicitCastExpr 0x7fad47092088 <col:16> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fad47092048 <col:16> 'int' lvalue Var 0x7fad47091ed0 'i' 'int'
      | `-ImplicitCastExpr 0x7fad470920a0 <col:18> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fad47092068 <col:18> 'int' lvalue ParmVar 0x7fad47091670 'n' 'int'
      |-UnaryOperator 0x7fad470920f8 <col:21, col:22> 'int' postfix '++'
      | `-DeclRefExpr 0x7fad470920d8 <col:21> 'int' lvalue Var 0x7fad47091ed0 'i' 'int'
      `-CompoundStmt 0x7fad47092548 <col:27, line:14:5>
        `-ForStmt 0x7fad47092510 <line:11:9, line:13:9>
          |-BinaryOperator 0x7fad47092150 <line:11:14, col:17> 'int' '='
          | |-DeclRefExpr 0x7fad47092110 <col:14> 'int' lvalue Var 0x7fad47091f50 'j' 'int'
          | `-IntegerLiteral 0x7fad47092130 <col:17> 'int' 0
          |-<<<NULL>>>
          |-BinaryOperator 0x7fad470921e0 <col:20, col:22> 'int' '<'
          | |-ImplicitCastExpr 0x7fad470921b0 <col:20> 'int' <LValueToRValue>
          | | `-DeclRefExpr 0x7fad47092170 <col:20> 'int' lvalue Var 0x7fad47091f50 'j' 'int'
          | `-ImplicitCastExpr 0x7fad470921c8 <col:22> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x7fad47092190 <col:22> 'int' lvalue ParmVar 0x7fad470916f0 'm' 'int'
          |-UnaryOperator 0x7fad47092220 <col:25, col:26> 'int' postfix '++'
          | `-DeclRefExpr 0x7fad47092200 <col:25> 'int' lvalue Var 0x7fad47091f50 'j' 'int'
          `-CompoundStmt 0x7fad470924f8 <col:31, line:13:9>
            `-BinaryOperator 0x7fad470924d8 <line:12:6, col:26> 'double' '='
              |-ArraySubscriptExpr 0x7fad47092348 <col:6, col:12> 'double' lvalue
              | |-ImplicitCastExpr 0x7fad47092318 <col:6, col:9> 'double *' <ArrayToPointerDecay>
              | | `-ArraySubscriptExpr 0x7fad470922a8 <col:6, col:9> 'double [m]' lvalue
              | |   |-ImplicitCastExpr 0x7fad47092278 <col:6> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
              | |   | `-DeclRefExpr 0x7fad47092238 <col:6> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fad47091b70 'z' 'double (*)[m]':'double (*)[m]'
              | |   `-ImplicitCastExpr 0x7fad47092290 <col:8> 'int' <LValueToRValue>
              | |     `-DeclRefExpr 0x7fad47092258 <col:8> 'int' lvalue Var 0x7fad47091ed0 'i' 'int'
              | `-ImplicitCastExpr 0x7fad47092330 <col:11> 'int' <LValueToRValue>
              |   `-DeclRefExpr 0x7fad470922c8 <col:11> 'int' lvalue Var 0x7fad47091f50 'j' 'int'
              `-BinaryOperator 0x7fad470924b8 <col:16, col:26> 'double' '*'
                |-ImplicitCastExpr 0x7fad47092488 <col:16, col:22> 'double' <LValueToRValue>
                | `-ArraySubscriptExpr 0x7fad47092448 <col:16, col:22> 'double' lvalue
                |   |-ImplicitCastExpr 0x7fad47092418 <col:16, col:19> 'double *' <ArrayToPointerDecay>
                |   | `-ArraySubscriptExpr 0x7fad470923d8 <col:16, col:19> 'double [m]' lvalue
                |   |   |-ImplicitCastExpr 0x7fad470923a8 <col:16> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
                |   |   | `-DeclRefExpr 0x7fad47092368 <col:16> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fad470918f0 'x' 'double (*)[m]':'double (*)[m]'
                |   |   `-ImplicitCastExpr 0x7fad470923c0 <col:18> 'int' <LValueToRValue>
                |   |     `-DeclRefExpr 0x7fad47092388 <col:18> 'int' lvalue Var 0x7fad47091ed0 'i' 'int'
                |   `-ImplicitCastExpr 0x7fad47092430 <col:21> 'int' <LValueToRValue>
                |     `-DeclRefExpr 0x7fad470923f8 <col:21> 'int' lvalue Var 0x7fad47091f50 'j' 'int'
                `-ImplicitCastExpr 0x7fad470924a0 <col:26> 'double' <LValueToRValue>
                  `-DeclRefExpr 0x7fad47092468 <col:26> 'double' lvalue ParmVar 0x7fad47091970 'y' 'double'
