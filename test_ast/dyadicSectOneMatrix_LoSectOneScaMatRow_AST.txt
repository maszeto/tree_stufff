TranslationUnitDecl 0x7feba981f808 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7feba98200a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7feba981fda0 '__int128'
|-TypedefDecl 0x7feba9820110 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7feba981fdc0 'unsigned __int128'
|-TypedefDecl 0x7feba98203f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7feba98201f0 'struct __NSConstantString_tag'
|   `-Record 0x7feba9820168 '__NSConstantString_tag'
|-TypedefDecl 0x7feba9820490 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7feba9820450 'char *'
|   `-BuiltinType 0x7feba981f8a0 'char'
|-TypedefDecl 0x7feba9820768 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7feba9820710 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7feba9820570 'struct __va_list_tag'
|     `-Record 0x7feba98204e8 '__va_list_tag'
|-TypedefDecl 0x7febaa02f200 <./tree_src/dyadicSectOneMatrix_LoSectOneScaMatRow.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7feba981f960 'unsigned char'
|-FunctionDecl 0x7febaa02fdd8 <line:6:1, line:16:1> line:6:6 LoSectOneScaMatRow 'void (int, int, int, double, double (*)[m], double (*)[m], int, int, int, int, int, int)'
| |-ParmVarDecl 0x7febaa02f270 <line:7:5, col:9> col:9 used m 'int'
| |-ParmVarDecl 0x7febaa02f2f0 <col:12, col:16> col:16 used n 'int'
| |-ParmVarDecl 0x7febaa02f370 <col:19, col:23> col:23 used p 'int'
| |-ParmVarDecl 0x7febaa02f3f0 <col:26, col:33> col:33 used x 'double'
| |-ParmVarDecl 0x7febaa02f5f0 <col:36, col:49> col:43 used z 'double (*)[m]':'double (*)[m]'
| |-ParmVarDecl 0x7febaa02f7f0 <col:52, col:65> col:59 used y 'double (*)[m]':'double (*)[m]'
| |-ParmVarDecl 0x7febaa02f870 <line:8:5, col:9> col:9 used sz1 'int'
| |-ParmVarDecl 0x7febaa02f8f0 <col:14, col:18> col:18 ez1 'int'
| |-ParmVarDecl 0x7febaa02f970 <col:23, col:27> col:27 used bz1 'int'
| |-ParmVarDecl 0x7febaa02f9f0 <col:32, col:36> col:36 used sy1 'int'
| |-ParmVarDecl 0x7febaa02fa70 <col:41, col:45> col:45 used ey1 'int'
| |-ParmVarDecl 0x7febaa02faf0 <col:50, col:54> col:54 used by1 'int'
| `-CompoundStmt 0x7febaa031890 <col:60, line:16:1>
|   |-DeclStmt 0x7febaa030038 <line:10:5, col:12>
|   | |-VarDecl 0x7febaa02ff38 <col:5, col:9> col:9 used j 'int'
|   | `-VarDecl 0x7febaa02ffb8 <col:5, col:11> col:11 used i 'int'
|   |-BinaryOperator 0x7febaa0300a8 <line:11:5, col:8> 'int' '='
|   | |-DeclRefExpr 0x7febaa030050 <col:5> 'int' lvalue Var 0x7febaa02ff38 'j' 'int'
|   | `-ImplicitCastExpr 0x7febaa030090 <col:8> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7febaa030070 <col:8> 'int' lvalue ParmVar 0x7febaa02f970 'bz1' 'int'
|   `-ForStmt 0x7febaa031858 <line:12:5, line:15:5>
|     |-BinaryOperator 0x7febaa030120 <line:12:10, col:13> 'int' '='
|     | |-DeclRefExpr 0x7febaa0300c8 <col:10> 'int' lvalue Var 0x7febaa02ffb8 'i' 'int'
|     | `-ImplicitCastExpr 0x7febaa030108 <col:13> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7febaa0300e8 <col:13> 'int' lvalue ParmVar 0x7febaa02faf0 'by1' 'int'
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7febaa0301b0 <col:18, col:20> 'int' '<'
|     | |-ImplicitCastExpr 0x7febaa030180 <col:18> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7febaa030140 <col:18> 'int' lvalue Var 0x7febaa02ffb8 'i' 'int'
|     | `-ImplicitCastExpr 0x7febaa030198 <col:20> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7febaa030160 <col:20> 'int' lvalue ParmVar 0x7febaa02fa70 'ey1' 'int'
|     |-CompoundAssignOperator 0x7febaa031238 <col:25, col:29> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     | |-DeclRefExpr 0x7febaa0301d0 <col:25> 'int' lvalue Var 0x7febaa02ffb8 'i' 'int'
|     | `-ImplicitCastExpr 0x7febaa031220 <col:29> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7febaa031200 <col:29> 'int' lvalue ParmVar 0x7febaa02f9f0 'sy1' 'int'
|     `-CompoundStmt 0x7febaa031838 <col:35, line:15:5>
|       |-BinaryOperator 0x7febaa031790 <line:13:2, col:25> 'double' '='
|       | |-ArraySubscriptExpr 0x7febaa031378 <col:2, col:8> 'double' lvalue
|       | | |-ImplicitCastExpr 0x7febaa031348 <col:2, col:5> 'double *' <ArrayToPointerDecay>
|       | | | `-ArraySubscriptExpr 0x7febaa0312d8 <col:2, col:5> 'double [m]' lvalue
|       | | |   |-ImplicitCastExpr 0x7febaa0312a8 <col:2> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
|       | | |   | `-DeclRefExpr 0x7febaa031268 <col:2> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7febaa02f5f0 'z' 'double (*)[m]':'double (*)[m]'
|       | | |   `-ImplicitCastExpr 0x7febaa0312c0 <col:4> 'int' <LValueToRValue>
|       | | |     `-DeclRefExpr 0x7febaa031288 <col:4> 'int' lvalue ParmVar 0x7febaa02f370 'p' 'int'
|       | | `-ImplicitCastExpr 0x7febaa031360 <col:7> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7febaa0312f8 <col:7> 'int' lvalue Var 0x7febaa02ff38 'j' 'int'
|       | `-CallExpr 0x7febaa031730 <col:11, col:25> 'double'
|       |   |-ImplicitCastExpr 0x7febaa031718 <col:11> 'double (*)(double, double)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x7febaa0315a8 <col:11> 'double (double, double)' Function 0x7febaa0313d8 'fmin' 'double (double, double)'
|       |   |-ImplicitCastExpr 0x7febaa031760 <col:16> 'double' <LValueToRValue>
|       |   | `-DeclRefExpr 0x7febaa0315c8 <col:16> 'double' lvalue ParmVar 0x7febaa02f3f0 'x' 'double'
|       |   `-ImplicitCastExpr 0x7febaa031778 <col:18, col:24> 'double' <LValueToRValue>
|       |     `-ArraySubscriptExpr 0x7febaa0316c8 <col:18, col:24> 'double' lvalue
|       |       |-ImplicitCastExpr 0x7febaa031698 <col:18, col:21> 'double *' <ArrayToPointerDecay>
|       |       | `-ArraySubscriptExpr 0x7febaa031658 <col:18, col:21> 'double [m]' lvalue
|       |       |   |-ImplicitCastExpr 0x7febaa031628 <col:18> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
|       |       |   | `-DeclRefExpr 0x7febaa0315e8 <col:18> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7febaa02f7f0 'y' 'double (*)[m]':'double (*)[m]'
|       |       |   `-ImplicitCastExpr 0x7febaa031640 <col:20> 'int' <LValueToRValue>
|       |       |     `-DeclRefExpr 0x7febaa031608 <col:20> 'int' lvalue ParmVar 0x7febaa02f370 'p' 'int'
|       |       `-ImplicitCastExpr 0x7febaa0316b0 <col:23> 'int' <LValueToRValue>
|       |         `-DeclRefExpr 0x7febaa031678 <col:23> 'int' lvalue Var 0x7febaa02ffb8 'i' 'int'
|       `-CompoundAssignOperator 0x7febaa031808 <line:14:9, col:13> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|         |-DeclRefExpr 0x7febaa0317b0 <col:9> 'int' lvalue Var 0x7febaa02ff38 'j' 'int'
|         `-ImplicitCastExpr 0x7febaa0317f0 <col:13> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x7febaa0317d0 <col:13> 'int' lvalue ParmVar 0x7febaa02f870 'sz1' 'int'
`-FunctionDecl 0x7febaa0313d8 <line:13:11> col:11 implicit used fmin 'double (double, double)' extern
  |-ParmVarDecl 0x7febaa031478 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x7febaa0314e0 <<invalid sloc>> <invalid sloc> 'double'
  |-NoThrowAttr 0x7febaa031558 <col:11> Implicit
  `-ConstAttr 0x7febaa031598 <col:11> Implicit
