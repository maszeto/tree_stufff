TranslationUnitDecl 0x7fa96c834c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fa96c8354a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fa96c8351a0 '__int128'
|-TypedefDecl 0x7fa96c835510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fa96c8351c0 'unsigned __int128'
|-TypedefDecl 0x7fa96c8357f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fa96c8355f0 'struct __NSConstantString_tag'
|   `-Record 0x7fa96c835568 '__NSConstantString_tag'
|-TypedefDecl 0x7fa96c835890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fa96c835850 'char *'
|   `-BuiltinType 0x7fa96c834ca0 'char'
|-TypedefDecl 0x7fa96c835b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fa96c835b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fa96c835970 'struct __va_list_tag'
|     `-Record 0x7fa96c8358e8 '__va_list_tag'
|-TypedefDecl 0x7fa96c032c00 <./tree_src/unarySectVector_MaxSuffixSectVec.c:4:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fa96c834d60 'unsigned char'
|-FunctionDecl 0x7fa96c0333f8 <line:11:1, line:25:1> line:11:6 MaxSuffixSectVec 'void (int, double *, double *, int, int, int, int, int, int)'
| |-ParmVarDecl 0x7fa96c032c70 <line:12:5, col:9> col:9 used n 'int'
| |-ParmVarDecl 0x7fa96c032df0 <col:12, col:22> col:19 used x 'double *':'double *'
| |-ParmVarDecl 0x7fa96c032f40 <col:25, col:35> col:32 used y 'double *':'double *'
| |-ParmVarDecl 0x7fa96c032fc0 <line:13:5, col:9> col:9 used startx 'int'
| |-ParmVarDecl 0x7fa96c033040 <col:17, col:21> col:21 used stopx 'int'
| |-ParmVarDecl 0x7fa96c0330c0 <col:28, col:32> col:32 used stepx 'int'
| |-ParmVarDecl 0x7fa96c033140 <line:14:5, col:9> col:9 starty 'int'
| |-ParmVarDecl 0x7fa96c0331c0 <col:17, col:21> col:21 used stopy 'int'
| |-ParmVarDecl 0x7fa96c033240 <col:28, col:32> col:32 used stepy 'int'
| `-CompoundStmt 0x7fa96c036438 <col:40, line:25:1>
|   |-DeclStmt 0x7fa96c033640 <line:16:5, col:15>
|   | |-VarDecl 0x7fa96c033540 <col:5, col:9> col:9 used ix 'int'
|   | `-VarDecl 0x7fa96c0335c0 <col:5, col:13> col:13 used iy 'int'
|   |-BinaryOperator 0x7fa96c0338e8 <line:17:5, col:23> 'int' '='
|   | |-DeclRefExpr 0x7fa96c033658 <col:5> 'int' lvalue ParmVar 0x7fa96c0330c0 'stepx' 'int'
|   | `-UnaryOperator 0x7fa96c0338d0 <col:13, col:23> 'int' prefix '-'
|   |   `-CallExpr 0x7fa96c033890 <col:14, col:23> 'int'
|   |     |-ImplicitCastExpr 0x7fa96c033878 <col:14> 'int (*)(int)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fa96c033810 <col:14> 'int (int)' Function 0x7fa96c0336b0 'abs' 'int (int)'
|   |     `-ImplicitCastExpr 0x7fa96c0338b8 <col:18> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fa96c033830 <col:18> 'int' lvalue ParmVar 0x7fa96c0330c0 'stepx' 'int'
|   |-BinaryOperator 0x7fa96c0339d8 <line:18:5, col:23> 'int' '='
|   | |-DeclRefExpr 0x7fa96c033908 <col:5> 'int' lvalue ParmVar 0x7fa96c033240 'stepy' 'int'
|   | `-UnaryOperator 0x7fa96c0339c0 <col:13, col:23> 'int' prefix '-'
|   |   `-CallExpr 0x7fa96c033980 <col:14, col:23> 'int'
|   |     |-ImplicitCastExpr 0x7fa96c033968 <col:14> 'int (*)(int)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fa96c033928 <col:14> 'int (int)' Function 0x7fa96c0336b0 'abs' 'int (int)'
|   |     `-ImplicitCastExpr 0x7fa96c0339a8 <col:18> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fa96c033948 <col:18> 'int' lvalue ParmVar 0x7fa96c033240 'stepy' 'int'
|   |-BinaryOperator 0x7fa96c033b30 <line:19:5, col:23> 'double' '='
|   | |-ArraySubscriptExpr 0x7fa96c033a68 <col:5, col:12> 'double' lvalue
|   | | |-ImplicitCastExpr 0x7fa96c033a38 <col:5> 'double *':'double *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fa96c0339f8 <col:5> 'double *':'double *' lvalue ParmVar 0x7fa96c032f40 'y' 'double *':'double *'
|   | | `-ImplicitCastExpr 0x7fa96c033a50 <col:7> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fa96c033a18 <col:7> 'int' lvalue ParmVar 0x7fa96c0331c0 'stopy' 'int'
|   | `-ImplicitCastExpr 0x7fa96c033b18 <col:16, col:23> 'double' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x7fa96c033af8 <col:16, col:23> 'double' lvalue
|   |     |-ImplicitCastExpr 0x7fa96c033ac8 <col:16> 'double *':'double *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fa96c033a88 <col:16> 'double *':'double *' lvalue ParmVar 0x7fa96c032df0 'x' 'double *':'double *'
|   |     `-ImplicitCastExpr 0x7fa96c033ae0 <col:18> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fa96c033aa8 <col:18> 'int' lvalue ParmVar 0x7fa96c033040 'stopx' 'int'
|   |-BinaryOperator 0x7fa96c035c00 <line:20:5, col:19> 'int' '='
|   | |-DeclRefExpr 0x7fa96c033b50 <col:5> 'int' lvalue Var 0x7fa96c0335c0 'iy' 'int'
|   | `-BinaryOperator 0x7fa96c033bc8 <col:13, col:19> 'int' '-'
|   |   |-ImplicitCastExpr 0x7fa96c033bb0 <col:13> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x7fa96c033b70 <col:13> 'int' lvalue ParmVar 0x7fa96c0331c0 'stopy' 'int'
|   |   `-IntegerLiteral 0x7fa96c033b90 <col:19> 'int' 1
|   `-ForStmt 0x7fa96c036400 <line:21:5, line:24:5>
|     |-BinaryOperator 0x7fa96c035cb8 <line:21:10, col:20> 'int' '='
|     | |-DeclRefExpr 0x7fa96c035c20 <col:10> 'int' lvalue Var 0x7fa96c033540 'ix' 'int'
|     | `-BinaryOperator 0x7fa96c035c98 <col:14, col:20> 'int' '-'
|     |   |-ImplicitCastExpr 0x7fa96c035c80 <col:14> 'int' <LValueToRValue>
|     |   | `-DeclRefExpr 0x7fa96c035c40 <col:14> 'int' lvalue ParmVar 0x7fa96c033040 'stopx' 'int'
|     |   `-IntegerLiteral 0x7fa96c035c60 <col:20> 'int' 2
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fa96c035d88 <col:23, col:33> 'int' '>'
|     | |-ImplicitCastExpr 0x7fa96c035d70 <col:23> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fa96c035cd8 <col:23> 'int' lvalue Var 0x7fa96c033540 'ix' 'int'
|     | `-BinaryOperator 0x7fa96c035d50 <col:26, col:33> 'int' '-'
|     |   |-ImplicitCastExpr 0x7fa96c035d38 <col:26> 'int' <LValueToRValue>
|     |   | `-DeclRefExpr 0x7fa96c035cf8 <col:26> 'int' lvalue ParmVar 0x7fa96c032fc0 'startx' 'int'
|     |   `-IntegerLiteral 0x7fa96c035d18 <col:33> 'int' 1
|     |-CompoundAssignOperator 0x7fa96c035e00 <col:36, col:41> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|     | |-DeclRefExpr 0x7fa96c035da8 <col:36> 'int' lvalue Var 0x7fa96c033540 'ix' 'int'
|     | `-ImplicitCastExpr 0x7fa96c035de8 <col:41> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fa96c035dc8 <col:41> 'int' lvalue ParmVar 0x7fa96c0330c0 'stepx' 'int'
|     `-CompoundStmt 0x7fa96c0363e0 <col:49, line:24:5>
|       |-BinaryOperator 0x7fa96c0362f0 <line:22:9, col:36> 'double' '='
|       | |-ArraySubscriptExpr 0x7fa96c035ea0 <col:9, col:13> 'double' lvalue
|       | | |-ImplicitCastExpr 0x7fa96c035e70 <col:9> 'double *':'double *' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7fa96c035e30 <col:9> 'double *':'double *' lvalue ParmVar 0x7fa96c032f40 'y' 'double *':'double *'
|       | | `-ImplicitCastExpr 0x7fa96c035e88 <col:11> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fa96c035e50 <col:11> 'int' lvalue Var 0x7fa96c0335c0 'iy' 'int'
|       | `-CallExpr 0x7fa96c036290 <col:17, col:36> 'double'
|       |   |-ImplicitCastExpr 0x7fa96c036278 <col:17> 'double (*)(double, double)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x7fa96c0360c8 <col:17> 'double (double, double)' Function 0x7fa96c035ef8 'fmax' 'double (double, double)'
|       |   |-ImplicitCastExpr 0x7fa96c0362c0 <col:22, col:28> 'double' <LValueToRValue>
|       |   | `-ArraySubscriptExpr 0x7fa96c036198 <col:22, col:28> 'double' lvalue
|       |   |   |-ImplicitCastExpr 0x7fa96c036180 <col:22> 'double *':'double *' <LValueToRValue>
|       |   |   | `-DeclRefExpr 0x7fa96c0360e8 <col:22> 'double *':'double *' lvalue ParmVar 0x7fa96c032f40 'y' 'double *':'double *'
|       |   |   `-BinaryOperator 0x7fa96c036160 <col:24, col:27> 'int' '+'
|       |   |     |-ImplicitCastExpr 0x7fa96c036148 <col:24> 'int' <LValueToRValue>
|       |   |     | `-DeclRefExpr 0x7fa96c036108 <col:24> 'int' lvalue Var 0x7fa96c0335c0 'iy' 'int'
|       |   |     `-IntegerLiteral 0x7fa96c036128 <col:27> 'int' 1
|       |   `-ImplicitCastExpr 0x7fa96c0362d8 <col:31, col:35> 'double' <LValueToRValue>
|       |     `-ArraySubscriptExpr 0x7fa96c036228 <col:31, col:35> 'double' lvalue
|       |       |-ImplicitCastExpr 0x7fa96c0361f8 <col:31> 'double *':'double *' <LValueToRValue>
|       |       | `-DeclRefExpr 0x7fa96c0361b8 <col:31> 'double *':'double *' lvalue ParmVar 0x7fa96c032df0 'x' 'double *':'double *'
|       |       `-ImplicitCastExpr 0x7fa96c036210 <col:33> 'int' <LValueToRValue>
|       |         `-DeclRefExpr 0x7fa96c0361d8 <col:33> 'int' lvalue Var 0x7fa96c033540 'ix' 'int'
|       `-BinaryOperator 0x7fa96c0363c0 <line:23:9, col:21> 'int' '='
|         |-DeclRefExpr 0x7fa96c036310 <col:9> 'int' lvalue Var 0x7fa96c0335c0 'iy' 'int'
|         `-BinaryOperator 0x7fa96c0363a0 <col:16, col:21> 'int' '+'
|           |-ImplicitCastExpr 0x7fa96c036370 <col:16> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x7fa96c036330 <col:16> 'int' lvalue Var 0x7fa96c0335c0 'iy' 'int'
|           `-ImplicitCastExpr 0x7fa96c036388 <col:21> 'int' <LValueToRValue>
|             `-DeclRefExpr 0x7fa96c036350 <col:21> 'int' lvalue ParmVar 0x7fa96c033240 'stepy' 'int'
|-FunctionDecl 0x7fa96c0336b0 <line:17:14> col:14 implicit used abs 'int (int)' extern
| |-ParmVarDecl 0x7fa96c033750 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x7fa96c0337c0 <col:14> Implicit
| `-ConstAttr 0x7fa96c033800 <col:14> Implicit
`-FunctionDecl 0x7fa96c035ef8 <line:22:17> col:17 implicit used fmax 'double (double, double)' extern
  |-ParmVarDecl 0x7fa96c035f98 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x7fa96c036000 <<invalid sloc>> <invalid sloc> 'double'
  |-NoThrowAttr 0x7fa96c036078 <col:17> Implicit
  `-ConstAttr 0x7fa96c0360b8 <col:17> Implicit
