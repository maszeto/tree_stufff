TranslationUnitDecl 0x7fad91038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fad910394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fad910391a0 '__int128'
|-TypedefDecl 0x7fad91039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fad910391c0 'unsigned __int128'
|-TypedefDecl 0x7fad910397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fad910395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fad91039568 '__NSConstantString_tag'
|-TypedefDecl 0x7fad91039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fad91039850 'char *'
|   `-BuiltinType 0x7fad91038ca0 'char'
|-TypedefDecl 0x7fad91039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fad91039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fad91039970 'struct __va_list_tag'
|     `-Record 0x7fad910398e8 '__va_list_tag'
|-TypedefDecl 0x7fad9182f200 <./tree_src/unarySectMatrix_MinPrefixSectFirstMat.c:4:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fad91038d60 'unsigned char'
|-FunctionDecl 0x7fad91832200 <line:11:1, line:25:1> line:11:6 MinPrefixSectFirstMat 'void (int, int, int, int, double (*)[mx], double (*)[my], int, int, int, int, int, int, int, int, int, int, int, int)'
| |-ParmVarDecl 0x7fad9182f270 <line:12:5, col:9> col:9 used nx 'int'
| |-ParmVarDecl 0x7fad9182f2f0 <col:13, col:17> col:17 used mx 'int'
| |-ParmVarDecl 0x7fad9182f370 <col:21, col:25> col:25 used ny 'int'
| |-ParmVarDecl 0x7fad9182f3f0 <col:29, col:33> col:33 used my 'int'
| |-ParmVarDecl 0x7fad9182f5f0 <col:37, col:52> col:44 used x 'double (*)[mx]':'double (*)[mx]'
| |-ParmVarDecl 0x7fad9182f7f0 <col:55, col:70> col:62 used y 'double (*)[my]':'double (*)[my]'
| |-ParmVarDecl 0x7fad9182f870 <line:13:5, col:9> col:9 used startx1 'int'
| |-ParmVarDecl 0x7fad9182f8f0 <col:18, col:22> col:22 used stopx1 'int'
| |-ParmVarDecl 0x7fad9182f970 <col:30, col:34> col:34 used stepx1 'int'
| |-ParmVarDecl 0x7fad9182f9f0 <col:42, col:46> col:46 used startx2 'int'
| |-ParmVarDecl 0x7fad9182fa70 <col:55, col:59> col:59 used stopx2 'int'
| |-ParmVarDecl 0x7fad9182faf0 <col:67, col:71> col:71 used stepx2 'int'
| |-ParmVarDecl 0x7fad9182fb70 <line:14:5, col:9> col:9 used starty1 'int'
| |-ParmVarDecl 0x7fad9182fbf0 <col:18, col:22> col:22 stopy1 'int'
| |-ParmVarDecl 0x7fad9182fc70 <col:30, col:34> col:34 stepy1 'int'
| |-ParmVarDecl 0x7fad9182fcf0 <col:42, col:46> col:46 used starty2 'int'
| |-ParmVarDecl 0x7fad9182fd70 <col:55, col:59> col:59 stopy2 'int'
| |-ParmVarDecl 0x7fad9182fdf0 <col:67, col:71> col:71 stepy2 'int'
| `-CompoundStmt 0x7fad91833390 <col:79, line:25:1>
|   |-DeclStmt 0x7fad918325a0 <line:16:5, col:23>
|   | |-VarDecl 0x7fad91832390 <col:5, col:9> col:9 used ix 'int'
|   | |-VarDecl 0x7fad91832410 <col:5, col:13> col:13 used jx 'int'
|   | |-VarDecl 0x7fad91832490 <col:5, col:17> col:17 used iy 'int'
|   | `-VarDecl 0x7fad91832510 <col:5, col:21> col:21 used jy 'int'
|   |-BinaryOperator 0x7fad91832610 <line:17:5, col:10> 'int' '='
|   | |-DeclRefExpr 0x7fad918325b8 <col:5> 'int' lvalue Var 0x7fad91832490 'iy' 'int'
|   | `-ImplicitCastExpr 0x7fad918325f8 <col:10> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fad918325d8 <col:10> 'int' lvalue ParmVar 0x7fad9182fb70 'starty1' 'int'
|   `-ForStmt 0x7fad91833358 <line:18:5, line:24:5>
|     |-BinaryOperator 0x7fad91832688 <line:18:10, col:14> 'int' '='
|     | |-DeclRefExpr 0x7fad91832630 <col:10> 'int' lvalue Var 0x7fad91832390 'ix' 'int'
|     | `-ImplicitCastExpr 0x7fad91832670 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fad91832650 <col:14> 'int' lvalue ParmVar 0x7fad9182f870 'startx1' 'int'
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fad91832718 <col:23, col:26> 'int' '<'
|     | |-ImplicitCastExpr 0x7fad918326e8 <col:23> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fad918326a8 <col:23> 'int' lvalue Var 0x7fad91832390 'ix' 'int'
|     | `-ImplicitCastExpr 0x7fad91832700 <col:26> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fad918326c8 <col:26> 'int' lvalue ParmVar 0x7fad9182f8f0 'stopx1' 'int'
|     |-CompoundAssignOperator 0x7fad91832790 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     | |-DeclRefExpr 0x7fad91832738 <col:34> 'int' lvalue Var 0x7fad91832390 'ix' 'int'
|     | `-ImplicitCastExpr 0x7fad91832778 <col:39> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fad91832758 <col:39> 'int' lvalue ParmVar 0x7fad9182f970 'stepx1' 'int'
|     `-CompoundStmt 0x7fad91833330 <col:48, line:24:5>
|       |-BinaryOperator 0x7fad91832a00 <line:19:9, col:39> 'double' '='
|       | |-ArraySubscriptExpr 0x7fad918328c8 <col:9, col:22> 'double' lvalue
|       | | |-ImplicitCastExpr 0x7fad91832898 <col:9, col:18> 'double *' <ArrayToPointerDecay>
|       | | | `-ArraySubscriptExpr 0x7fad91832830 <col:9, col:18> 'double [my]' lvalue
|       | | |   |-ImplicitCastExpr 0x7fad91832800 <col:9> 'double (*)[my]':'double (*)[my]' <LValueToRValue>
|       | | |   | `-DeclRefExpr 0x7fad918327c0 <col:9> 'double (*)[my]':'double (*)[my]' lvalue ParmVar 0x7fad9182f7f0 'y' 'double (*)[my]':'double (*)[my]'
|       | | |   `-ImplicitCastExpr 0x7fad91832818 <col:11> 'int' <LValueToRValue>
|       | | |     `-DeclRefExpr 0x7fad918327e0 <col:11> 'int' lvalue ParmVar 0x7fad9182fb70 'starty1' 'int'
|       | | `-ImplicitCastExpr 0x7fad918328b0 <col:20> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fad91832850 <col:20> 'int' lvalue Var 0x7fad91832490 'iy' 'int'
|       | `-ImplicitCastExpr 0x7fad918329e8 <col:26, col:39> 'double' <LValueToRValue>
|       |   `-ArraySubscriptExpr 0x7fad918329c8 <col:26, col:39> 'double' lvalue
|       |     |-ImplicitCastExpr 0x7fad91832998 <col:26, col:35> 'double *' <ArrayToPointerDecay>
|       |     | `-ArraySubscriptExpr 0x7fad91832958 <col:26, col:35> 'double [mx]' lvalue
|       |     |   |-ImplicitCastExpr 0x7fad91832928 <col:26> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
|       |     |   | `-DeclRefExpr 0x7fad918328e8 <col:26> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7fad9182f5f0 'x' 'double (*)[mx]':'double (*)[mx]'
|       |     |   `-ImplicitCastExpr 0x7fad91832940 <col:28> 'int' <LValueToRValue>
|       |     |     `-DeclRefExpr 0x7fad91832908 <col:28> 'int' lvalue ParmVar 0x7fad9182f870 'startx1' 'int'
|       |     `-ImplicitCastExpr 0x7fad918329b0 <col:37> 'int' <LValueToRValue>
|       |       `-DeclRefExpr 0x7fad91832978 <col:37> 'int' lvalue Var 0x7fad91832390 'ix' 'int'
|       |-BinaryOperator 0x7fad91832ab8 <line:20:9, col:22> 'int' '='
|       | |-DeclRefExpr 0x7fad91832a20 <col:9> 'int' lvalue Var 0x7fad91832510 'jy' 'int'
|       | `-BinaryOperator 0x7fad91832a98 <col:14, col:22> 'int' '+'
|       |   |-ImplicitCastExpr 0x7fad91832a80 <col:14> 'int' <LValueToRValue>
|       |   | `-DeclRefExpr 0x7fad91832a40 <col:14> 'int' lvalue ParmVar 0x7fad9182fcf0 'starty2' 'int'
|       |   `-IntegerLiteral 0x7fad91832a60 <col:22> 'int' 1
|       `-ForStmt 0x7fad918332f8 <line:21:9, line:23:9>
|         |-BinaryOperator 0x7fad91832b70 <line:21:14, col:26> 'int' '='
|         | |-DeclRefExpr 0x7fad91832ad8 <col:14> 'int' lvalue Var 0x7fad91832410 'jx' 'int'
|         | `-BinaryOperator 0x7fad91832b50 <col:18, col:26> 'int' '+'
|         |   |-ImplicitCastExpr 0x7fad91832b38 <col:18> 'int' <LValueToRValue>
|         |   | `-DeclRefExpr 0x7fad91832af8 <col:18> 'int' lvalue ParmVar 0x7fad9182f9f0 'startx2' 'int'
|         |   `-IntegerLiteral 0x7fad91832b18 <col:26> 'int' 1
|         |-<<<NULL>>>
|         |-BinaryOperator 0x7fad91832c00 <col:29, col:32> 'int' '<'
|         | |-ImplicitCastExpr 0x7fad91832bd0 <col:29> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x7fad91832b90 <col:29> 'int' lvalue Var 0x7fad91832410 'jx' 'int'
|         | `-ImplicitCastExpr 0x7fad91832be8 <col:32> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x7fad91832bb0 <col:32> 'int' lvalue ParmVar 0x7fad9182fa70 'stopx2' 'int'
|         |-CompoundAssignOperator 0x7fad91832c78 <col:40, col:45> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|         | |-DeclRefExpr 0x7fad91832c20 <col:40> 'int' lvalue Var 0x7fad91832410 'jx' 'int'
|         | `-ImplicitCastExpr 0x7fad91832c60 <col:45> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x7fad91832c40 <col:45> 'int' lvalue ParmVar 0x7fad9182faf0 'stepx2' 'int'
|         `-CompoundStmt 0x7fad918332e0 <col:54, line:23:9>
|           `-BinaryOperator 0x7fad918332c0 <line:22:13, col:53> 'double' '='
|             |-ArraySubscriptExpr 0x7fad91832d88 <col:13, col:21> 'double' lvalue
|             | |-ImplicitCastExpr 0x7fad91832d58 <col:13, col:17> 'double *' <ArrayToPointerDecay>
|             | | `-ArraySubscriptExpr 0x7fad91832d18 <col:13, col:17> 'double [my]' lvalue
|             | |   |-ImplicitCastExpr 0x7fad91832ce8 <col:13> 'double (*)[my]':'double (*)[my]' <LValueToRValue>
|             | |   | `-DeclRefExpr 0x7fad91832ca8 <col:13> 'double (*)[my]':'double (*)[my]' lvalue ParmVar 0x7fad9182f7f0 'y' 'double (*)[my]':'double (*)[my]'
|             | |   `-ImplicitCastExpr 0x7fad91832d00 <col:15> 'int' <LValueToRValue>
|             | |     `-DeclRefExpr 0x7fad91832cc8 <col:15> 'int' lvalue Var 0x7fad91832510 'jy' 'int'
|             | `-ImplicitCastExpr 0x7fad91832d70 <col:19> 'int' <LValueToRValue>
|             |   `-DeclRefExpr 0x7fad91832d38 <col:19> 'int' lvalue Var 0x7fad91832490 'iy' 'int'
|             `-CallExpr 0x7fad91833260 <col:25, col:53> 'double'
|               |-ImplicitCastExpr 0x7fad91833248 <col:25> 'double (*)(double, double)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x7fad91832fb8 <col:25> 'double (double, double)' Function 0x7fad91832de8 'fmin' 'double (double, double)'
|               |-ImplicitCastExpr 0x7fad91833290 <col:31, col:41> 'double' <LValueToRValue>
|               | `-ArraySubscriptExpr 0x7fad918330f8 <col:31, col:41> 'double' lvalue
|               |   |-ImplicitCastExpr 0x7fad918330c8 <col:31, col:37> 'double *' <ArrayToPointerDecay>
|               |   | `-ArraySubscriptExpr 0x7fad91833088 <col:31, col:37> 'double [my]' lvalue
|               |   |   |-ImplicitCastExpr 0x7fad91833070 <col:31> 'double (*)[my]':'double (*)[my]' <LValueToRValue>
|               |   |   | `-DeclRefExpr 0x7fad91832fd8 <col:31> 'double (*)[my]':'double (*)[my]' lvalue ParmVar 0x7fad9182f7f0 'y' 'double (*)[my]':'double (*)[my]'
|               |   |   `-BinaryOperator 0x7fad91833050 <col:33, col:36> 'int' '-'
|               |   |     |-ImplicitCastExpr 0x7fad91833038 <col:33> 'int' <LValueToRValue>
|               |   |     | `-DeclRefExpr 0x7fad91832ff8 <col:33> 'int' lvalue Var 0x7fad91832510 'jy' 'int'
|               |   |     `-IntegerLiteral 0x7fad91833018 <col:36> 'int' 1
|               |   `-ImplicitCastExpr 0x7fad918330e0 <col:39> 'int' <LValueToRValue>
|               |     `-DeclRefExpr 0x7fad918330a8 <col:39> 'int' lvalue Var 0x7fad91832490 'iy' 'int'
|               `-ImplicitCastExpr 0x7fad918332a8 <col:44, col:52> 'double' <LValueToRValue>
|                 `-ArraySubscriptExpr 0x7fad91833200 <col:44, col:52> 'double' lvalue
|                   |-ImplicitCastExpr 0x7fad918331c8 <col:44, col:48> 'double *' <ArrayToPointerDecay>
|                   | `-ArraySubscriptExpr 0x7fad91833188 <col:44, col:48> 'double [mx]' lvalue
|                   |   |-ImplicitCastExpr 0x7fad91833158 <col:44> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
|                   |   | `-DeclRefExpr 0x7fad91833118 <col:44> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7fad9182f5f0 'x' 'double (*)[mx]':'double (*)[mx]'
|                   |   `-ImplicitCastExpr 0x7fad91833170 <col:46> 'int' <LValueToRValue>
|                   |     `-DeclRefExpr 0x7fad91833138 <col:46> 'int' lvalue Var 0x7fad91832410 'jx' 'int'
|                   `-ImplicitCastExpr 0x7fad918331e0 <col:50> 'int' <LValueToRValue>
|                     `-DeclRefExpr 0x7fad918331a8 <col:50> 'int' lvalue Var 0x7fad91832390 'ix' 'int'
`-FunctionDecl 0x7fad91832de8 <col:25> col:25 implicit used fmin 'double (double, double)' extern
  |-ParmVarDecl 0x7fad91832e88 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x7fad91832ef0 <<invalid sloc>> <invalid sloc> 'double'
  |-NoThrowAttr 0x7fad91832f68 <col:25> Implicit
  `-ConstAttr 0x7fad91832fa8 <col:25> Implicit
