TranslationUnitDecl 0x7fc789816e08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fc7898176a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fc7898173a0 '__int128'
|-TypedefDecl 0x7fc789817710 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fc7898173c0 'unsigned __int128'
|-TypedefDecl 0x7fc7898179f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fc7898177f0 'struct __NSConstantString_tag'
|   `-Record 0x7fc789817768 '__NSConstantString_tag'
|-TypedefDecl 0x7fc789817a90 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fc789817a50 'char *'
|   `-BuiltinType 0x7fc789816ea0 'char'
|-TypedefDecl 0x7fc789817d68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fc789817d10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fc789817b70 'struct __va_list_tag'
|     `-Record 0x7fc789817ae8 '__va_list_tag'
`-FunctionDecl 0x7fc7898703f8 <./tree_src/monadicWhole_NegWholeVec.c:5:1, line:12:1> line:5:6 NegWholeVec 'void (int, double *, double *)'
  |-ParmVarDecl 0x7fc789870000 <line:6:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7fc789870180 <col:12, col:22> col:19 used x 'double *':'double *'
  |-ParmVarDecl 0x7fc7898702d0 <col:25, col:35> col:32 used z 'double *':'double *'
  `-CompoundStmt 0x7fc789870820 <col:39, line:12:1>
    |-DeclStmt 0x7fc789870578 <line:8:5, col:10>
    | `-VarDecl 0x7fc789870510 <col:5, col:9> col:9 used i 'int'
    `-ForStmt 0x7fc7898707e8 <line:9:5, line:11:5>
      |-BinaryOperator 0x7fc7898705d0 <line:9:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7fc789870590 <col:10> 'int' lvalue Var 0x7fc789870510 'i' 'int'
      | `-IntegerLiteral 0x7fc7898705b0 <col:14> 'int' 0
      |-<<<NULL>>>
      |-ImplicitCastExpr 0x7fc789870610 <col:17> 'int' <LValueToRValue>
      | `-DeclRefExpr 0x7fc7898705f0 <col:17> 'int' lvalue ParmVar 0x7fc789870000 'n' 'int'
      |-UnaryOperator 0x7fc789870648 <col:20, col:21> 'int' postfix '++'
      | `-DeclRefExpr 0x7fc789870628 <col:20> 'int' lvalue Var 0x7fc789870510 'i' 'int'
      `-CompoundStmt 0x7fc7898707d0 <col:26, line:11:5>
        `-BinaryOperator 0x7fc7898707b0 <line:10:9, col:20> 'double' '='
          |-ArraySubscriptExpr 0x7fc7898706d0 <col:9, col:12> 'double' lvalue
          | |-ImplicitCastExpr 0x7fc7898706a0 <col:9> 'double *':'double *' <LValueToRValue>
          | | `-DeclRefExpr 0x7fc789870660 <col:9> 'double *':'double *' lvalue ParmVar 0x7fc7898702d0 'z' 'double *':'double *'
          | `-ImplicitCastExpr 0x7fc7898706b8 <col:11> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x7fc789870680 <col:11> 'int' lvalue Var 0x7fc789870510 'i' 'int'
          `-UnaryOperator 0x7fc789870798 <col:16, col:20> 'double' prefix '-'
            `-ImplicitCastExpr 0x7fc789870780 <col:17, col:20> 'double' <LValueToRValue>
              `-ArraySubscriptExpr 0x7fc789870760 <col:17, col:20> 'double' lvalue
                |-ImplicitCastExpr 0x7fc789870730 <col:17> 'double *':'double *' <LValueToRValue>
                | `-DeclRefExpr 0x7fc7898706f0 <col:17> 'double *':'double *' lvalue ParmVar 0x7fc789870180 'x' 'double *':'double *'
                `-ImplicitCastExpr 0x7fc789870748 <col:19> 'int' <LValueToRValue>
                  `-DeclRefExpr 0x7fc789870710 <col:19> 'int' lvalue Var 0x7fc789870510 'i' 'int'
