TranslationUnitDecl 0x7f92f8018608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f92f8018ea0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f92f8018ba0 '__int128'
|-TypedefDecl 0x7f92f8018f10 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f92f8018bc0 'unsigned __int128'
|-TypedefDecl 0x7f92f80191f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f92f8018ff0 'struct __NSConstantString_tag'
|   `-Record 0x7f92f8018f68 '__NSConstantString_tag'
|-TypedefDecl 0x7f92f8019290 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f92f8019250 'char *'
|   `-BuiltinType 0x7f92f80186a0 'char'
|-TypedefDecl 0x7f92f8019568 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f92f8019510 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f92f8019370 'struct __va_list_tag'
|     `-Record 0x7f92f80192e8 '__va_list_tag'
|-TypedefDecl 0x7f92f882f200 <./tree_src/unarySectMatrix_IdxMaxSectLastMat.c:4:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7f92f8018760 'unsigned char'
`-FunctionDecl 0x7f92f882fe18 <line:12:1, line:33:1> line:12:6 IdxMaxSectLastMat 'void (int, int, int, double (*)[mx], int *, int, int, int, int, int, int, int, int, int)'
  |-ParmVarDecl 0x7f92f882f270 <line:13:5, col:9> col:9 used nx 'int'
  |-ParmVarDecl 0x7f92f882f2f0 <col:13, col:17> col:17 used mx 'int'
  |-ParmVarDecl 0x7f92f882f370 <col:21, col:25> col:25 used nz 'int'
  |-ParmVarDecl 0x7f92f882f570 <col:29, col:44> col:36 used x 'double (*)[mx]':'double (*)[mx]'
  |-ParmVarDecl 0x7f92f882f6f0 <col:47, col:55> col:51 used z 'int *':'int *'
  |-ParmVarDecl 0x7f92f882f770 <line:14:5, col:9> col:9 used startx1 'int'
  |-ParmVarDecl 0x7f92f882f7f0 <col:18, col:22> col:22 used stopx1 'int'
  |-ParmVarDecl 0x7f92f882f870 <col:30, col:34> col:34 used stepx1 'int'
  |-ParmVarDecl 0x7f92f882f8f0 <col:42, col:46> col:46 used startx2 'int'
  |-ParmVarDecl 0x7f92f882f970 <col:55, col:59> col:59 used stopx2 'int'
  |-ParmVarDecl 0x7f92f882f9f0 <col:67, col:71> col:71 used stepx2 'int'
  |-ParmVarDecl 0x7f92f882fa70 <line:15:5, col:9> col:9 used startz 'int'
  |-ParmVarDecl 0x7f92f882faf0 <col:17, col:21> col:21 stopz 'int'
  |-ParmVarDecl 0x7f92f882fb70 <col:28, col:32> col:32 used stepz 'int'
  `-CompoundStmt 0x7f92f8832f58 <col:40, line:33:1>
    |-DeclStmt 0x7f92f882fff0 <line:17:5, col:15>
    | `-VarDecl 0x7f92f882ff88 <col:5, col:12> col:12 used val 'double'
    |-DeclStmt 0x7f92f8832318 <line:18:5, col:27>
    | |-VarDecl 0x7f92f8830020 <col:5, col:9> col:9 used ix 'int'
    | |-VarDecl 0x7f92f88300a0 <col:5, col:13> col:13 used jx 'int'
    | |-VarDecl 0x7f92f8830120 <col:5, col:17> col:17 iy 'int'
    | |-VarDecl 0x7f92f8832200 <col:5, col:21> col:21 jy 'int'
    | `-VarDecl 0x7f92f8832280 <col:5, col:25> col:25 used iz 'int'
    |-DeclStmt 0x7f92f88323b0 <line:19:5, col:12>
    | `-VarDecl 0x7f92f8832348 <col:5, col:9> col:9 used loc 'int'
    |-BinaryOperator 0x7f92f8832420 <line:20:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7f92f88323c8 <col:5> 'int' lvalue Var 0x7f92f8832280 'iz' 'int'
    | `-ImplicitCastExpr 0x7f92f8832408 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7f92f88323e8 <col:10> 'int' lvalue ParmVar 0x7f92f882fa70 'startz' 'int'
    `-ForStmt 0x7f92f8832f20 <line:21:5, line:32:5>
      |-BinaryOperator 0x7f92f8832498 <line:21:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7f92f8832440 <col:10> 'int' lvalue Var 0x7f92f8830020 'ix' 'int'
      | `-ImplicitCastExpr 0x7f92f8832480 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f92f8832460 <col:14> 'int' lvalue ParmVar 0x7f92f882f770 'startx1' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7f92f8832528 <col:23, col:26> 'int' '<'
      | |-ImplicitCastExpr 0x7f92f88324f8 <col:23> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7f92f88324b8 <col:23> 'int' lvalue Var 0x7f92f8830020 'ix' 'int'
      | `-ImplicitCastExpr 0x7f92f8832510 <col:26> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f92f88324d8 <col:26> 'int' lvalue ParmVar 0x7f92f882f7f0 'stopx1' 'int'
      |-CompoundAssignOperator 0x7f92f88325a0 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7f92f8832548 <col:34> 'int' lvalue Var 0x7f92f8830020 'ix' 'int'
      | `-ImplicitCastExpr 0x7f92f8832588 <col:39> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f92f8832568 <col:39> 'int' lvalue ParmVar 0x7f92f882f870 'stepx1' 'int'
      `-CompoundStmt 0x7f92f8832ee8 <col:48, line:32:5>
        |-BinaryOperator 0x7f92f8832628 <line:22:9, col:15> 'int' '='
        | |-DeclRefExpr 0x7f92f88325d0 <col:9> 'int' lvalue Var 0x7f92f8832348 'loc' 'int'
        | `-ImplicitCastExpr 0x7f92f8832610 <col:15> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x7f92f88325f0 <col:15> 'int' lvalue ParmVar 0x7f92f882f770 'startx1' 'int'
        |-BinaryOperator 0x7f92f88327b0 <line:23:9, col:29> 'double' '='
        | |-DeclRefExpr 0x7f92f8832648 <col:9> 'double' lvalue Var 0x7f92f882ff88 'val' 'double'
        | `-ImplicitCastExpr 0x7f92f8832798 <col:16, col:29> 'double' <LValueToRValue>
        |   `-ArraySubscriptExpr 0x7f92f8832778 <col:16, col:29> 'double' lvalue
        |     |-ImplicitCastExpr 0x7f92f8832748 <col:16, col:20> 'double *' <ArrayToPointerDecay>
        |     | `-ArraySubscriptExpr 0x7f92f88326d8 <col:16, col:20> 'double [mx]' lvalue
        |     |   |-ImplicitCastExpr 0x7f92f88326a8 <col:16> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
        |     |   | `-DeclRefExpr 0x7f92f8832668 <col:16> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7f92f882f570 'x' 'double (*)[mx]':'double (*)[mx]'
        |     |   `-ImplicitCastExpr 0x7f92f88326c0 <col:18> 'int' <LValueToRValue>
        |     |     `-DeclRefExpr 0x7f92f8832688 <col:18> 'int' lvalue Var 0x7f92f8830020 'ix' 'int'
        |     `-ImplicitCastExpr 0x7f92f8832760 <col:22> 'int' <LValueToRValue>
        |       `-DeclRefExpr 0x7f92f88326f8 <col:22> 'int' lvalue ParmVar 0x7f92f882f8f0 'startx2' 'int'
        |-ForStmt 0x7f92f8832d40 <line:24:9, line:29:9>
        | |-BinaryOperator 0x7f92f8832868 <line:24:14, col:26> 'int' '='
        | | |-DeclRefExpr 0x7f92f88327d0 <col:14> 'int' lvalue Var 0x7f92f88300a0 'jx' 'int'
        | | `-BinaryOperator 0x7f92f8832848 <col:18, col:26> 'int' '+'
        | |   |-ImplicitCastExpr 0x7f92f8832830 <col:18> 'int' <LValueToRValue>
        | |   | `-DeclRefExpr 0x7f92f88327f0 <col:18> 'int' lvalue ParmVar 0x7f92f882f8f0 'startx2' 'int'
        | |   `-IntegerLiteral 0x7f92f8832810 <col:26> 'int' 1
        | |-<<<NULL>>>
        | |-BinaryOperator 0x7f92f88328f8 <col:29, col:32> 'int' '<'
        | | |-ImplicitCastExpr 0x7f92f88328c8 <col:29> 'int' <LValueToRValue>
        | | | `-DeclRefExpr 0x7f92f8832888 <col:29> 'int' lvalue Var 0x7f92f88300a0 'jx' 'int'
        | | `-ImplicitCastExpr 0x7f92f88328e0 <col:32> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7f92f88328a8 <col:32> 'int' lvalue ParmVar 0x7f92f882f970 'stopx2' 'int'
        | |-CompoundAssignOperator 0x7f92f8832970 <col:40, col:45> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
        | | |-DeclRefExpr 0x7f92f8832918 <col:40> 'int' lvalue Var 0x7f92f88300a0 'jx' 'int'
        | | `-ImplicitCastExpr 0x7f92f8832958 <col:45> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7f92f8832938 <col:45> 'int' lvalue ParmVar 0x7f92f882f9f0 'stepx2' 'int'
        | `-CompoundStmt 0x7f92f8832d20 <col:54, line:29:9>
        |   |-IfStmt 0x7f92f8832d00 <line:25:13, line:28:13>
        |   | |-BinaryOperator 0x7f92f8832af0 <line:25:17, col:29> 'int' '>'
        |   | | |-ImplicitCastExpr 0x7f92f8832ac0 <col:17, col:25> 'double' <LValueToRValue>
        |   | | | `-ArraySubscriptExpr 0x7f92f8832a80 <col:17, col:25> 'double' lvalue
        |   | | |   |-ImplicitCastExpr 0x7f92f8832a50 <col:17, col:21> 'double *' <ArrayToPointerDecay>
        |   | | |   | `-ArraySubscriptExpr 0x7f92f8832a10 <col:17, col:21> 'double [mx]' lvalue
        |   | | |   |   |-ImplicitCastExpr 0x7f92f88329e0 <col:17> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
        |   | | |   |   | `-DeclRefExpr 0x7f92f88329a0 <col:17> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7f92f882f570 'x' 'double (*)[mx]':'double (*)[mx]'
        |   | | |   |   `-ImplicitCastExpr 0x7f92f88329f8 <col:19> 'int' <LValueToRValue>
        |   | | |   |     `-DeclRefExpr 0x7f92f88329c0 <col:19> 'int' lvalue Var 0x7f92f8830020 'ix' 'int'
        |   | | |   `-ImplicitCastExpr 0x7f92f8832a68 <col:23> 'int' <LValueToRValue>
        |   | | |     `-DeclRefExpr 0x7f92f8832a30 <col:23> 'int' lvalue Var 0x7f92f88300a0 'jx' 'int'
        |   | | `-ImplicitCastExpr 0x7f92f8832ad8 <col:29> 'double' <LValueToRValue>
        |   | |   `-DeclRefExpr 0x7f92f8832aa0 <col:29> 'double' lvalue Var 0x7f92f882ff88 'val' 'double'
        |   | `-CompoundStmt 0x7f92f8832ce0 <col:35, line:28:13>
        |   |   |-BinaryOperator 0x7f92f8832b68 <line:26:14, col:20> 'int' '='
        |   |   | |-DeclRefExpr 0x7f92f8832b10 <col:14> 'int' lvalue Var 0x7f92f8832348 'loc' 'int'
        |   |   | `-ImplicitCastExpr 0x7f92f8832b50 <col:20> 'int' <LValueToRValue>
        |   |   |   `-DeclRefExpr 0x7f92f8832b30 <col:20> 'int' lvalue Var 0x7f92f88300a0 'jx' 'int'
        |   |   `-BinaryOperator 0x7f92f8832cc0 <line:27:14, col:29> 'double' '='
        |   |     |-DeclRefExpr 0x7f92f8832b88 <col:14> 'double' lvalue Var 0x7f92f882ff88 'val' 'double'
        |   |     `-ImplicitCastExpr 0x7f92f8832ca8 <col:21, col:29> 'double' <LValueToRValue>
        |   |       `-ArraySubscriptExpr 0x7f92f8832c88 <col:21, col:29> 'double' lvalue
        |   |         |-ImplicitCastExpr 0x7f92f8832c58 <col:21, col:25> 'double *' <ArrayToPointerDecay>
        |   |         | `-ArraySubscriptExpr 0x7f92f8832c18 <col:21, col:25> 'double [mx]' lvalue
        |   |         |   |-ImplicitCastExpr 0x7f92f8832be8 <col:21> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
        |   |         |   | `-DeclRefExpr 0x7f92f8832ba8 <col:21> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7f92f882f570 'x' 'double (*)[mx]':'double (*)[mx]'
        |   |         |   `-ImplicitCastExpr 0x7f92f8832c00 <col:23> 'int' <LValueToRValue>
        |   |         |     `-DeclRefExpr 0x7f92f8832bc8 <col:23> 'int' lvalue Var 0x7f92f8830020 'ix' 'int'
        |   |         `-ImplicitCastExpr 0x7f92f8832c70 <col:27> 'int' <LValueToRValue>
        |   |           `-DeclRefExpr 0x7f92f8832c38 <col:27> 'int' lvalue Var 0x7f92f88300a0 'jx' 'int'
        |   `-NullStmt 0x7f92f8832d18 <line:28:14>
        |-BinaryOperator 0x7f92f8832e40 <line:30:9, col:17> 'int' '='
        | |-ArraySubscriptExpr 0x7f92f8832de8 <col:9, col:13> 'int' lvalue
        | | |-ImplicitCastExpr 0x7f92f8832db8 <col:9> 'int *':'int *' <LValueToRValue>
        | | | `-DeclRefExpr 0x7f92f8832d78 <col:9> 'int *':'int *' lvalue ParmVar 0x7f92f882f6f0 'z' 'int *':'int *'
        | | `-ImplicitCastExpr 0x7f92f8832dd0 <col:11> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7f92f8832d98 <col:11> 'int' lvalue Var 0x7f92f8832280 'iz' 'int'
        | `-ImplicitCastExpr 0x7f92f8832e28 <col:17> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x7f92f8832e08 <col:17> 'int' lvalue Var 0x7f92f8832348 'loc' 'int'
        `-CompoundAssignOperator 0x7f92f8832eb8 <line:31:9, col:15> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
          |-DeclRefExpr 0x7f92f8832e60 <col:9> 'int' lvalue Var 0x7f92f8832280 'iz' 'int'
          `-ImplicitCastExpr 0x7f92f8832ea0 <col:15> 'int' <LValueToRValue>
            `-DeclRefExpr 0x7f92f8832e80 <col:15> 'int' lvalue ParmVar 0x7f92f882fb70 'stepz' 'int'
