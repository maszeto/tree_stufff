TranslationUnitDecl 0x7fc51f038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fc51f0394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fc51f0391a0 '__int128'
|-TypedefDecl 0x7fc51f039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fc51f0391c0 'unsigned __int128'
|-TypedefDecl 0x7fc51f0397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fc51f0395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fc51f039568 '__NSConstantString_tag'
|-TypedefDecl 0x7fc51f039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fc51f039850 'char *'
|   `-BuiltinType 0x7fc51f038ca0 'char'
|-TypedefDecl 0x7fc51f039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fc51f039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fc51f039970 'struct __va_list_tag'
|     `-Record 0x7fc51f0398e8 '__va_list_tag'
|-TypedefDecl 0x7fc520025c00 <./tree_src/extendSectVector_AndSectScaVec.c:3:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x7fc51f038d60 'unsigned char'
`-FunctionDecl 0x7fc5200265f8 <line:6:1, line:17:1> line:6:6 AndSectScaVec 'void (int, int, BOOL, BOOL *, BOOL *, int, int, int, int, int, int)'
  |-ParmVarDecl 0x7fc520025c70 <line:7:5, col:9> col:9 used ny 'int'
  |-ParmVarDecl 0x7fc520025cf0 <col:13, col:17> col:17 used nz 'int'
  |-ParmVarDecl 0x7fc520025d90 <line:8:5, col:10> col:10 used x 'BOOL':'unsigned char'
  |-ParmVarDecl 0x7fc520025f80 <col:13, col:22> col:18 used y 'BOOL *':'BOOL *'
  |-ParmVarDecl 0x7fc520026110 <col:25, col:34> col:30 used z 'BOOL *':'BOOL *'
  |-ParmVarDecl 0x7fc520026190 <line:9:5, col:9> col:9 used starty 'int'
  |-ParmVarDecl 0x7fc520026210 <col:17, col:21> col:21 used stopy 'int'
  |-ParmVarDecl 0x7fc520026290 <col:28, col:32> col:32 used stepy 'int'
  |-ParmVarDecl 0x7fc520026310 <col:39, col:43> col:43 used startz 'int'
  |-ParmVarDecl 0x7fc520026390 <col:51, col:55> col:55 stopz 'int'
  |-ParmVarDecl 0x7fc520026410 <col:62, col:66> col:66 used stepz 'int'
  `-CompoundStmt 0x7fc520028350 <col:74, line:17:1>
    |-DeclStmt 0x7fc520026850 <line:11:5, col:15>
    | |-VarDecl 0x7fc520026750 <col:5, col:9> col:9 used iy 'int'
    | `-VarDecl 0x7fc5200267d0 <col:5, col:13> col:13 used iz 'int'
    |-BinaryOperator 0x7fc5200268c0 <line:12:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7fc520026868 <col:5> 'int' lvalue Var 0x7fc5200267d0 'iz' 'int'
    | `-ImplicitCastExpr 0x7fc5200268a8 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7fc520026888 <col:10> 'int' lvalue ParmVar 0x7fc520026310 'startz' 'int'
    `-ForStmt 0x7fc520028318 <line:13:5, line:16:5>
      |-BinaryOperator 0x7fc520026938 <line:13:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7fc5200268e0 <col:10> 'int' lvalue Var 0x7fc520026750 'iy' 'int'
      | `-ImplicitCastExpr 0x7fc520026920 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fc520026900 <col:14> 'int' lvalue ParmVar 0x7fc520026190 'starty' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7fc5200269c8 <col:22, col:25> 'int' '<'
      | |-ImplicitCastExpr 0x7fc520026998 <col:22> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fc520026958 <col:22> 'int' lvalue Var 0x7fc520026750 'iy' 'int'
      | `-ImplicitCastExpr 0x7fc5200269b0 <col:25> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fc520026978 <col:25> 'int' lvalue ParmVar 0x7fc520026210 'stopy' 'int'
      |-CompoundAssignOperator 0x7fc520026a40 <col:32, col:37> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7fc5200269e8 <col:32> 'int' lvalue Var 0x7fc520026750 'iy' 'int'
      | `-ImplicitCastExpr 0x7fc520026a28 <col:37> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fc520026a08 <col:37> 'int' lvalue ParmVar 0x7fc520026290 'stepy' 'int'
      `-CompoundStmt 0x7fc5200282f8 <col:45, line:16:5>
        |-BinaryOperator 0x7fc520028250 <line:14:4, col:20> 'BOOL':'unsigned char' '='
        | |-ArraySubscriptExpr 0x7fc520026ae0 <col:4, col:8> 'BOOL':'unsigned char' lvalue
        | | |-ImplicitCastExpr 0x7fc520026ab0 <col:4> 'BOOL *':'BOOL *' <LValueToRValue>
        | | | `-DeclRefExpr 0x7fc520026a70 <col:4> 'BOOL *':'BOOL *' lvalue ParmVar 0x7fc520026110 'z' 'BOOL *':'BOOL *'
        | | `-ImplicitCastExpr 0x7fc520026ac8 <col:6> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fc520026a90 <col:6> 'int' lvalue Var 0x7fc5200267d0 'iz' 'int'
        | `-ImplicitCastExpr 0x7fc520028238 <col:12, col:20> 'BOOL':'unsigned char' <IntegralCast>
        |   `-BinaryOperator 0x7fc520028218 <col:12, col:20> 'int' '&'
        |     |-ImplicitCastExpr 0x7fc520026bc8 <col:12> 'int' <IntegralCast>
        |     | `-ImplicitCastExpr 0x7fc520026bb0 <col:12> 'BOOL':'unsigned char' <LValueToRValue>
        |     |   `-DeclRefExpr 0x7fc520026b00 <col:12> 'BOOL':'unsigned char' lvalue ParmVar 0x7fc520025d90 'x' 'BOOL':'unsigned char'
        |     `-ImplicitCastExpr 0x7fc520028200 <col:16, col:20> 'int' <IntegralCast>
        |       `-ImplicitCastExpr 0x7fc520026be0 <col:16, col:20> 'BOOL':'unsigned char' <LValueToRValue>
        |         `-ArraySubscriptExpr 0x7fc520026b90 <col:16, col:20> 'BOOL':'unsigned char' lvalue
        |           |-ImplicitCastExpr 0x7fc520026b60 <col:16> 'BOOL *':'BOOL *' <LValueToRValue>
        |           | `-DeclRefExpr 0x7fc520026b20 <col:16> 'BOOL *':'BOOL *' lvalue ParmVar 0x7fc520025f80 'y' 'BOOL *':'BOOL *'
        |           `-ImplicitCastExpr 0x7fc520026b78 <col:18> 'int' <LValueToRValue>
        |             `-DeclRefExpr 0x7fc520026b40 <col:18> 'int' lvalue Var 0x7fc520026750 'iy' 'int'
        `-CompoundAssignOperator 0x7fc5200282c8 <line:15:4, col:10> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
          |-DeclRefExpr 0x7fc520028270 <col:4> 'int' lvalue Var 0x7fc5200267d0 'iz' 'int'
          `-ImplicitCastExpr 0x7fc5200282b0 <col:10> 'int' <LValueToRValue>
            `-DeclRefExpr 0x7fc520028290 <col:10> 'int' lvalue ParmVar 0x7fc520026410 'stepz' 'int'
