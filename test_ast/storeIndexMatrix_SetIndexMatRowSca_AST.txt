TranslationUnitDecl 0x7fe3e1838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fe3e18394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fe3e18391a0 '__int128'
|-TypedefDecl 0x7fe3e1839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fe3e18391c0 'unsigned __int128'
|-TypedefDecl 0x7fe3e18397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fe3e18395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fe3e1839568 '__NSConstantString_tag'
|-TypedefDecl 0x7fe3e1839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fe3e1839850 'char *'
|   `-BuiltinType 0x7fe3e1838ca0 'char'
|-TypedefDecl 0x7fe3e1839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fe3e1839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fe3e1839970 'struct __va_list_tag'
|     `-Record 0x7fe3e18398e8 '__va_list_tag'
`-FunctionDecl 0x7fe3e202e818 <./tree_src/storeIndexMatrix_SetIndexMatRowSca.c:1:1, line:8:1> line:1:6 SetIndexMatRowSca 'void (int, int, double, double (*)[m], int, int *)'
  |-ParmVarDecl 0x7fe3e202e200 <line:2:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7fe3e202e280 <col:12, col:16> col:16 used m 'int'
  |-ParmVarDecl 0x7fe3e202e300 <col:19, col:26> col:26 used x 'double'
  |-ParmVarDecl 0x7fe3e202e500 <col:29, col:42> col:36 used z 'double (*)[m]':'double (*)[m]'
  |-ParmVarDecl 0x7fe3e202e580 <col:45, col:49> col:49 used p 'int'
  |-ParmVarDecl 0x7fe3e202e630 <col:52, col:57> col:57 used iz 'int *'
  `-CompoundStmt 0x7fe3e202ed30 <col:62, line:8:1>
    |-DeclStmt 0x7fe3e202e9b0 <line:4:5, col:10>
    | `-VarDecl 0x7fe3e202e948 <col:5, col:9> col:9 used i 'int'
    `-ForStmt 0x7fe3e202ecf8 <line:5:5, line:7:5>
      |-BinaryOperator 0x7fe3e202ea08 <line:5:10, col:13> 'int' '='
      | |-DeclRefExpr 0x7fe3e202e9c8 <col:10> 'int' lvalue Var 0x7fe3e202e948 'i' 'int'
      | `-IntegerLiteral 0x7fe3e202e9e8 <col:13> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x7fe3e202ea98 <col:16, col:18> 'int' '<'
      | |-ImplicitCastExpr 0x7fe3e202ea68 <col:16> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fe3e202ea28 <col:16> 'int' lvalue Var 0x7fe3e202e948 'i' 'int'
      | `-ImplicitCastExpr 0x7fe3e202ea80 <col:18> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fe3e202ea48 <col:18> 'int' lvalue ParmVar 0x7fe3e202e280 'm' 'int'
      |-UnaryOperator 0x7fe3e202ead8 <col:21, col:23> 'int' prefix '++'
      | `-DeclRefExpr 0x7fe3e202eab8 <col:23> 'int' lvalue Var 0x7fe3e202e948 'i' 'int'
      `-CompoundStmt 0x7fe3e202ece0 <col:27, line:7:5>
        `-BinaryOperator 0x7fe3e202ecc0 <line:6:9, col:22> 'double' '='
          |-ArraySubscriptExpr 0x7fe3e202ec68 <col:9, col:19> 'double' lvalue
          | |-ImplicitCastExpr 0x7fe3e202ec38 <col:9, col:12> 'double *' <ArrayToPointerDecay>
          | | `-ArraySubscriptExpr 0x7fe3e202eb60 <col:9, col:12> 'double [m]' lvalue
          | |   |-ImplicitCastExpr 0x7fe3e202eb30 <col:9> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
          | |   | `-DeclRefExpr 0x7fe3e202eaf0 <col:9> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fe3e202e500 'z' 'double (*)[m]':'double (*)[m]'
          | |   `-ImplicitCastExpr 0x7fe3e202eb48 <col:11> 'int' <LValueToRValue>
          | |     `-DeclRefExpr 0x7fe3e202eb10 <col:11> 'int' lvalue ParmVar 0x7fe3e202e580 'p' 'int'
          | `-ImplicitCastExpr 0x7fe3e202ec50 <col:14, col:18> 'int' <LValueToRValue>
          |   `-ArraySubscriptExpr 0x7fe3e202ebf0 <col:14, col:18> 'int' lvalue
          |     |-ImplicitCastExpr 0x7fe3e202ebc0 <col:14> 'int *' <LValueToRValue>
          |     | `-DeclRefExpr 0x7fe3e202eb80 <col:14> 'int *' lvalue ParmVar 0x7fe3e202e630 'iz' 'int *'
          |     `-ImplicitCastExpr 0x7fe3e202ebd8 <col:17> 'int' <LValueToRValue>
          |       `-DeclRefExpr 0x7fe3e202eba0 <col:17> 'int' lvalue Var 0x7fe3e202e948 'i' 'int'
          `-ImplicitCastExpr 0x7fe3e202eca8 <col:22> 'double' <LValueToRValue>
            `-DeclRefExpr 0x7fe3e202ec88 <col:22> 'double' lvalue ParmVar 0x7fe3e202e300 'x' 'double'
