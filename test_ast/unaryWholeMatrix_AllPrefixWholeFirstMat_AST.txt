TranslationUnitDecl 0x7fb429838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fb4298394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fb4298391a0 '__int128'
|-TypedefDecl 0x7fb429839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fb4298391c0 'unsigned __int128'
|-TypedefDecl 0x7fb4298397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fb4298395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fb429839568 '__NSConstantString_tag'
|-TypedefDecl 0x7fb429839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fb429839850 'char *'
|   `-BuiltinType 0x7fb429838ca0 'char'
|-TypedefDecl 0x7fb429839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fb429839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fb429839970 'struct __va_list_tag'
|     `-Record 0x7fb4298398e8 '__va_list_tag'
|-TypedefDecl 0x7fb42a02f200 <./tree_src/unaryWholeMatrix_AllPrefixWholeFirstMat.c:4:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x7fb429838d60 'unsigned char'
`-FunctionDecl 0x7fb42a02fa98 <line:11:1, line:21:1> line:11:6 AllPrefixWholeFirstMat 'void (int, int, BOOL (*)[m], BOOL (*)[m])'
  |-ParmVarDecl 0x7fb42a02f270 <line:12:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7fb42a02f2f0 <col:12, col:16> col:16 used m 'int'
  |-ParmVarDecl 0x7fb42a02f5c0 <col:19, col:30> col:24 used x 'BOOL (*)[m]':'BOOL (*)[m]'
  |-ParmVarDecl 0x7fb42a02f870 <col:33, col:44> col:38 used y 'BOOL (*)[m]':'BOOL (*)[m]'
  `-CompoundStmt 0x7fb42a032630 <col:48, line:21:1>
    |-DeclStmt 0x7fb42a02fcb8 <line:14:5, col:13>
    | |-VarDecl 0x7fb42a02fbb8 <col:5, col:9> col:9 used i 'int'
    | `-VarDecl 0x7fb42a02fc38 <col:5, col:12> col:12 used j 'int'
    `-ForStmt 0x7fb42a0325f8 <line:15:5, line:20:5>
      |-BinaryOperator 0x7fb42a02fd10 <line:15:10, col:13> 'int' '='
      | |-DeclRefExpr 0x7fb42a02fcd0 <col:10> 'int' lvalue Var 0x7fb42a02fbb8 'i' 'int'
      | `-IntegerLiteral 0x7fb42a02fcf0 <col:13> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x7fb42a02fda0 <col:16, col:18> 'int' '<'
      | |-ImplicitCastExpr 0x7fb42a02fd70 <col:16> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fb42a02fd30 <col:16> 'int' lvalue Var 0x7fb42a02fbb8 'i' 'int'
      | `-ImplicitCastExpr 0x7fb42a02fd88 <col:18> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fb42a02fd50 <col:18> 'int' lvalue ParmVar 0x7fb42a02f270 'n' 'int'
      |-UnaryOperator 0x7fb42a02fde0 <col:21, col:22> 'int' postfix '++'
      | `-DeclRefExpr 0x7fb42a02fdc0 <col:21> 'int' lvalue Var 0x7fb42a02fbb8 'i' 'int'
      `-CompoundStmt 0x7fb42a0325d8 <col:27, line:20:5>
        |-BinaryOperator 0x7fb42a030038 <line:16:9, col:25> 'BOOL':'unsigned char' '='
        | |-ArraySubscriptExpr 0x7fb42a02ff18 <col:9, col:15> 'BOOL':'unsigned char' lvalue
        | | |-ImplicitCastExpr 0x7fb42a02fee8 <col:9, col:12> 'BOOL *' <ArrayToPointerDecay>
        | | | `-ArraySubscriptExpr 0x7fb42a02fe50 <col:9, col:12> 'BOOL [m]' lvalue
        | | |   |-ImplicitCastExpr 0x7fb42a02fe38 <col:9> 'BOOL (*)[m]':'BOOL (*)[m]' <LValueToRValue>
        | | |   | `-DeclRefExpr 0x7fb42a02fdf8 <col:9> 'BOOL (*)[m]':'BOOL (*)[m]' lvalue ParmVar 0x7fb42a02f870 'y' 'BOOL (*)[m]':'BOOL (*)[m]'
        | | |   `-IntegerLiteral 0x7fb42a02fe18 <col:11> 'int' 0
        | | `-ImplicitCastExpr 0x7fb42a02ff00 <col:14> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fb42a02fe70 <col:14> 'int' lvalue Var 0x7fb42a02fbb8 'i' 'int'
        | `-ImplicitCastExpr 0x7fb42a030020 <col:19, col:25> 'BOOL':'unsigned char' <LValueToRValue>
        |   `-ArraySubscriptExpr 0x7fb42a030000 <col:19, col:25> 'BOOL':'unsigned char' lvalue
        |     |-ImplicitCastExpr 0x7fb42a02ffd0 <col:19, col:22> 'BOOL *' <ArrayToPointerDecay>
        |     | `-ArraySubscriptExpr 0x7fb42a02ff90 <col:19, col:22> 'BOOL [m]' lvalue
        |     |   |-ImplicitCastExpr 0x7fb42a02ff78 <col:19> 'BOOL (*)[m]':'BOOL (*)[m]' <LValueToRValue>
        |     |   | `-DeclRefExpr 0x7fb42a02ff38 <col:19> 'BOOL (*)[m]':'BOOL (*)[m]' lvalue ParmVar 0x7fb42a02f5c0 'x' 'BOOL (*)[m]':'BOOL (*)[m]'
        |     |   `-IntegerLiteral 0x7fb42a02ff58 <col:21> 'int' 0
        |     `-ImplicitCastExpr 0x7fb42a02ffe8 <col:24> 'int' <LValueToRValue>
        |       `-DeclRefExpr 0x7fb42a02ffb0 <col:24> 'int' lvalue Var 0x7fb42a02fbb8 'i' 'int'
        `-ForStmt 0x7fb42a0325a0 <line:17:9, line:19:9>
          |-BinaryOperator 0x7fb42a030098 <line:17:14, col:18> 'int' '='
          | |-DeclRefExpr 0x7fb42a030058 <col:14> 'int' lvalue Var 0x7fb42a02fc38 'j' 'int'
          | `-IntegerLiteral 0x7fb42a030078 <col:18> 'int' 1
          |-<<<NULL>>>
          |-BinaryOperator 0x7fb42a030128 <col:21, col:23> 'int' '<'
          | |-ImplicitCastExpr 0x7fb42a0300f8 <col:21> 'int' <LValueToRValue>
          | | `-DeclRefExpr 0x7fb42a0300b8 <col:21> 'int' lvalue Var 0x7fb42a02fc38 'j' 'int'
          | `-ImplicitCastExpr 0x7fb42a030110 <col:23> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x7fb42a0300d8 <col:23> 'int' lvalue ParmVar 0x7fb42a02f2f0 'm' 'int'
          |-UnaryOperator 0x7fb42a030168 <col:26, col:27> 'int' postfix '++'
          | `-DeclRefExpr 0x7fb42a030148 <col:26> 'int' lvalue Var 0x7fb42a02fc38 'j' 'int'
          `-CompoundStmt 0x7fb42a032588 <col:32, line:19:9>
            `-BinaryOperator 0x7fb42a032568 <line:18:6, col:34> 'BOOL':'unsigned char' '='
              |-ArraySubscriptExpr 0x7fb42a032270 <col:6, col:12> 'BOOL':'unsigned char' lvalue
              | |-ImplicitCastExpr 0x7fb42a032240 <col:6, col:9> 'BOOL *' <ArrayToPointerDecay>
              | | `-ArraySubscriptExpr 0x7fb42a032200 <col:6, col:9> 'BOOL [m]' lvalue
              | |   |-ImplicitCastExpr 0x7fb42a0301c0 <col:6> 'BOOL (*)[m]':'BOOL (*)[m]' <LValueToRValue>
              | |   | `-DeclRefExpr 0x7fb42a030180 <col:6> 'BOOL (*)[m]':'BOOL (*)[m]' lvalue ParmVar 0x7fb42a02f870 'y' 'BOOL (*)[m]':'BOOL (*)[m]'
              | |   `-ImplicitCastExpr 0x7fb42a0301d8 <col:8> 'int' <LValueToRValue>
              | |     `-DeclRefExpr 0x7fb42a0301a0 <col:8> 'int' lvalue Var 0x7fb42a02fc38 'j' 'int'
              | `-ImplicitCastExpr 0x7fb42a032258 <col:11> 'int' <LValueToRValue>
              |   `-DeclRefExpr 0x7fb42a032220 <col:11> 'int' lvalue Var 0x7fb42a02fbb8 'i' 'int'
              `-ImplicitCastExpr 0x7fb42a032550 <col:16, col:34> 'BOOL':'unsigned char' <IntegralCast>
                `-BinaryOperator 0x7fb42a032530 <col:16, col:34> 'int' '&'
                  |-ImplicitCastExpr 0x7fb42a0324e8 <col:16, col:24> 'int' <IntegralCast>
                  | `-ImplicitCastExpr 0x7fb42a0324d0 <col:16, col:24> 'BOOL':'unsigned char' <LValueToRValue>
                  |   `-ArraySubscriptExpr 0x7fb42a0323b0 <col:16, col:24> 'BOOL':'unsigned char' lvalue
                  |     |-ImplicitCastExpr 0x7fb42a032380 <col:16, col:21> 'BOOL *' <ArrayToPointerDecay>
                  |     | `-ArraySubscriptExpr 0x7fb42a032340 <col:16, col:21> 'BOOL [m]' lvalue
                  |     |   |-ImplicitCastExpr 0x7fb42a032328 <col:16> 'BOOL (*)[m]':'BOOL (*)[m]' <LValueToRValue>
                  |     |   | `-DeclRefExpr 0x7fb42a032290 <col:16> 'BOOL (*)[m]':'BOOL (*)[m]' lvalue ParmVar 0x7fb42a02f870 'y' 'BOOL (*)[m]':'BOOL (*)[m]'
                  |     |   `-BinaryOperator 0x7fb42a032308 <col:18, col:20> 'int' '-'
                  |     |     |-ImplicitCastExpr 0x7fb42a0322f0 <col:18> 'int' <LValueToRValue>
                  |     |     | `-DeclRefExpr 0x7fb42a0322b0 <col:18> 'int' lvalue Var 0x7fb42a02fc38 'j' 'int'
                  |     |     `-IntegerLiteral 0x7fb42a0322d0 <col:20> 'int' 1
                  |     `-ImplicitCastExpr 0x7fb42a032398 <col:23> 'int' <LValueToRValue>
                  |       `-DeclRefExpr 0x7fb42a032360 <col:23> 'int' lvalue Var 0x7fb42a02fbb8 'i' 'int'
                  `-ImplicitCastExpr 0x7fb42a032518 <col:28, col:34> 'int' <IntegralCast>
                    `-ImplicitCastExpr 0x7fb42a032500 <col:28, col:34> 'BOOL':'unsigned char' <LValueToRValue>
                      `-ArraySubscriptExpr 0x7fb42a0324b0 <col:28, col:34> 'BOOL':'unsigned char' lvalue
                        |-ImplicitCastExpr 0x7fb42a032480 <col:28, col:31> 'BOOL *' <ArrayToPointerDecay>
                        | `-ArraySubscriptExpr 0x7fb42a032440 <col:28, col:31> 'BOOL [m]' lvalue
                        |   |-ImplicitCastExpr 0x7fb42a032410 <col:28> 'BOOL (*)[m]':'BOOL (*)[m]' <LValueToRValue>
                        |   | `-DeclRefExpr 0x7fb42a0323d0 <col:28> 'BOOL (*)[m]':'BOOL (*)[m]' lvalue ParmVar 0x7fb42a02f5c0 'x' 'BOOL (*)[m]':'BOOL (*)[m]'
                        |   `-ImplicitCastExpr 0x7fb42a032428 <col:30> 'int' <LValueToRValue>
                        |     `-DeclRefExpr 0x7fb42a0323f0 <col:30> 'int' lvalue Var 0x7fb42a02fc38 'j' 'int'
                        `-ImplicitCastExpr 0x7fb42a032498 <col:33> 'int' <LValueToRValue>
                          `-DeclRefExpr 0x7fb42a032460 <col:33> 'int' lvalue Var 0x7fb42a02fbb8 'i' 'int'
