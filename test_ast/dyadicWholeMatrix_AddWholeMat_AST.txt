TranslationUnitDecl 0x7fcd0b838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fcd0b8394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fcd0b8391a0 '__int128'
|-TypedefDecl 0x7fcd0b839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fcd0b8391c0 'unsigned __int128'
|-TypedefDecl 0x7fcd0b8397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fcd0b8395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fcd0b839568 '__NSConstantString_tag'
|-TypedefDecl 0x7fcd0b839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fcd0b839850 'char *'
|   `-BuiltinType 0x7fcd0b838ca0 'char'
|-TypedefDecl 0x7fcd0b839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fcd0b839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fcd0b839970 'struct __va_list_tag'
|     `-Record 0x7fcd0b8398e8 '__va_list_tag'
|-TypedefDecl 0x7fcd0c02f200 <./tree_src/dyadicWholeMatrix_AddWholeMat.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fcd0b838d60 'unsigned char'
`-FunctionDecl 0x7fcd0c02fb98 <line:5:1, line:14:1> line:5:6 AddWholeMat 'void (int, int, double (*)[m], double (*)[m], double (*)[m])'
  |-ParmVarDecl 0x7fcd0c02f270 <line:6:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7fcd0c02f2f0 <col:12, col:16> col:16 used m 'int'
  |-ParmVarDecl 0x7fcd0c02f4f0 <col:19, col:32> col:26 used x 'double (*)[m]':'double (*)[m]'
  |-ParmVarDecl 0x7fcd0c02f6f0 <col:35, col:48> col:42 used y 'double (*)[m]':'double (*)[m]'
  |-ParmVarDecl 0x7fcd0c02f8f0 <col:51, col:64> col:58 used z 'double (*)[m]':'double (*)[m]'
  `-CompoundStmt 0x7fcd0c031480 <col:68, line:14:1>
    |-DeclStmt 0x7fcd0c02fdc0 <line:8:5, col:13>
    | |-VarDecl 0x7fcd0c02fcc0 <col:5, col:9> col:9 used i 'int'
    | `-VarDecl 0x7fcd0c02fd40 <col:5, col:12> col:12 used j 'int'
    `-ForStmt 0x7fcd0c031448 <line:9:5, line:13:5>
      |-BinaryOperator 0x7fcd0c02fe18 <line:9:10, col:12> 'int' '='
      | |-DeclRefExpr 0x7fcd0c02fdd8 <col:10> 'int' lvalue Var 0x7fcd0c02fcc0 'i' 'int'
      | `-IntegerLiteral 0x7fcd0c02fdf8 <col:12> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x7fcd0c02fea8 <col:15, col:17> 'int' '<'
      | |-ImplicitCastExpr 0x7fcd0c02fe78 <col:15> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fcd0c02fe38 <col:15> 'int' lvalue Var 0x7fcd0c02fcc0 'i' 'int'
      | `-ImplicitCastExpr 0x7fcd0c02fe90 <col:17> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fcd0c02fe58 <col:17> 'int' lvalue ParmVar 0x7fcd0c02f270 'n' 'int'
      |-UnaryOperator 0x7fcd0c02fee8 <col:20, col:21> 'int' postfix '++'
      | `-DeclRefExpr 0x7fcd0c02fec8 <col:20> 'int' lvalue Var 0x7fcd0c02fcc0 'i' 'int'
      `-CompoundStmt 0x7fcd0c031430 <col:26, line:13:5>
        `-ForStmt 0x7fcd0c0313f8 <line:10:9, line:12:9>
          |-BinaryOperator 0x7fcd0c02ff40 <line:10:14, col:16> 'int' '='
          | |-DeclRefExpr 0x7fcd0c02ff00 <col:14> 'int' lvalue Var 0x7fcd0c02fd40 'j' 'int'
          | `-IntegerLiteral 0x7fcd0c02ff20 <col:16> 'int' 0
          |-<<<NULL>>>
          |-BinaryOperator 0x7fcd0c02ffd0 <col:19, col:21> 'int' '<'
          | |-ImplicitCastExpr 0x7fcd0c02ffa0 <col:19> 'int' <LValueToRValue>
          | | `-DeclRefExpr 0x7fcd0c02ff60 <col:19> 'int' lvalue Var 0x7fcd0c02fd40 'j' 'int'
          | `-ImplicitCastExpr 0x7fcd0c02ffb8 <col:21> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x7fcd0c02ff80 <col:21> 'int' lvalue ParmVar 0x7fcd0c02f2f0 'm' 'int'
          |-UnaryOperator 0x7fcd0c030010 <col:24, col:25> 'int' postfix '++'
          | `-DeclRefExpr 0x7fcd0c02fff0 <col:24> 'int' lvalue Var 0x7fcd0c02fd40 'j' 'int'
          `-CompoundStmt 0x7fcd0c0313e0 <col:30, line:12:9>
            `-BinaryOperator 0x7fcd0c0313c0 <line:11:6, col:32> 'double' '='
              |-ArraySubscriptExpr 0x7fcd0c030138 <col:6, col:12> 'double' lvalue
              | |-ImplicitCastExpr 0x7fcd0c030108 <col:6, col:9> 'double *' <ArrayToPointerDecay>
              | | `-ArraySubscriptExpr 0x7fcd0c030098 <col:6, col:9> 'double [m]' lvalue
              | |   |-ImplicitCastExpr 0x7fcd0c030068 <col:6> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
              | |   | `-DeclRefExpr 0x7fcd0c030028 <col:6> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fcd0c02f8f0 'z' 'double (*)[m]':'double (*)[m]'
              | |   `-ImplicitCastExpr 0x7fcd0c030080 <col:8> 'int' <LValueToRValue>
              | |     `-DeclRefExpr 0x7fcd0c030048 <col:8> 'int' lvalue Var 0x7fcd0c02fcc0 'i' 'int'
              | `-ImplicitCastExpr 0x7fcd0c030120 <col:11> 'int' <LValueToRValue>
              |   `-DeclRefExpr 0x7fcd0c0300b8 <col:11> 'int' lvalue Var 0x7fcd0c02fd40 'j' 'int'
              `-BinaryOperator 0x7fcd0c0313a0 <col:16, col:32> 'double' '+'
                |-ImplicitCastExpr 0x7fcd0c031370 <col:16, col:22> 'double' <LValueToRValue>
                | `-ArraySubscriptExpr 0x7fcd0c031250 <col:16, col:22> 'double' lvalue
                |   |-ImplicitCastExpr 0x7fcd0c031220 <col:16, col:19> 'double *' <ArrayToPointerDecay>
                |   | `-ArraySubscriptExpr 0x7fcd0c0301c8 <col:16, col:19> 'double [m]' lvalue
                |   |   |-ImplicitCastExpr 0x7fcd0c030198 <col:16> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
                |   |   | `-DeclRefExpr 0x7fcd0c030158 <col:16> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fcd0c02f4f0 'x' 'double (*)[m]':'double (*)[m]'
                |   |   `-ImplicitCastExpr 0x7fcd0c0301b0 <col:18> 'int' <LValueToRValue>
                |   |     `-DeclRefExpr 0x7fcd0c030178 <col:18> 'int' lvalue Var 0x7fcd0c02fcc0 'i' 'int'
                |   `-ImplicitCastExpr 0x7fcd0c031238 <col:21> 'int' <LValueToRValue>
                |     `-DeclRefExpr 0x7fcd0c031200 <col:21> 'int' lvalue Var 0x7fcd0c02fd40 'j' 'int'
                `-ImplicitCastExpr 0x7fcd0c031388 <col:26, col:32> 'double' <LValueToRValue>
                  `-ArraySubscriptExpr 0x7fcd0c031350 <col:26, col:32> 'double' lvalue
                    |-ImplicitCastExpr 0x7fcd0c031320 <col:26, col:29> 'double *' <ArrayToPointerDecay>
                    | `-ArraySubscriptExpr 0x7fcd0c0312e0 <col:26, col:29> 'double [m]' lvalue
                    |   |-ImplicitCastExpr 0x7fcd0c0312b0 <col:26> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
                    |   | `-DeclRefExpr 0x7fcd0c031270 <col:26> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fcd0c02f6f0 'y' 'double (*)[m]':'double (*)[m]'
                    |   `-ImplicitCastExpr 0x7fcd0c0312c8 <col:28> 'int' <LValueToRValue>
                    |     `-DeclRefExpr 0x7fcd0c031290 <col:28> 'int' lvalue Var 0x7fcd0c02fcc0 'i' 'int'
                    `-ImplicitCastExpr 0x7fcd0c031338 <col:31> 'int' <LValueToRValue>
                      `-DeclRefExpr 0x7fcd0c031300 <col:31> 'int' lvalue Var 0x7fcd0c02fd40 'j' 'int'
