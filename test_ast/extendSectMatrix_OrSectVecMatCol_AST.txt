TranslationUnitDecl 0x7fe888838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fe8888394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fe8888391a0 '__int128'
|-TypedefDecl 0x7fe888839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fe8888391c0 'unsigned __int128'
|-TypedefDecl 0x7fe8888397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fe8888395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fe888839568 '__NSConstantString_tag'
|-TypedefDecl 0x7fe888839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fe888839850 'char *'
|   `-BuiltinType 0x7fe888838ca0 'char'
|-TypedefDecl 0x7fe888839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fe888839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fe888839970 'struct __va_list_tag'
|     `-Record 0x7fe8888398e8 '__va_list_tag'
|-TypedefDecl 0x7fe888891600 <./tree_src/extendSectMatrix_OrSectVecMatCol.c:3:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x7fe888838d60 'unsigned char'
`-FunctionDecl 0x7fe889808b68 <line:6:1, line:25:1> line:6:6 OrSectVecMatCol 'void (int, int, int, int, int, BOOL *, BOOL (*)[my], BOOL (*)[mz], int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)'
  |-ParmVarDecl 0x7fe888891670 <line:7:5, col:9> col:9 used mx 'int'
  |-ParmVarDecl 0x7fe8888916f0 <col:13, col:17> col:17 used ny 'int'
  |-ParmVarDecl 0x7fe888891770 <col:21, col:25> col:25 used my 'int'
  |-ParmVarDecl 0x7fe8888917f0 <col:29, col:33> col:33 used nz 'int'
  |-ParmVarDecl 0x7fe888891870 <col:37, col:41> col:41 used mz 'int'
  |-ParmVarDecl 0x7fe888891a80 <line:8:5, col:14> col:10 used x 'BOOL *':'BOOL *'
  |-ParmVarDecl 0x7fe888891d30 <col:17, col:30> col:22 used y 'BOOL (*)[my]':'BOOL (*)[my]'
  |-ParmVarDecl 0x7fe888891fe0 <col:33, col:46> col:38 used z 'BOOL (*)[mz]':'BOOL (*)[mz]'
  |-ParmVarDecl 0x7fe888892060 <line:9:5, col:9> col:9 used startx 'int'
  |-ParmVarDecl 0x7fe8888920e0 <col:17, col:21> col:21 stopx 'int'
  |-ParmVarDecl 0x7fe888892160 <col:28, col:32> col:32 used stepx 'int'
  |-ParmVarDecl 0x7fe8888921e0 <line:10:5, col:9> col:9 used starty1 'int'
  |-ParmVarDecl 0x7fe888892260 <col:18, col:22> col:22 used stopy1 'int'
  |-ParmVarDecl 0x7fe8888922e0 <col:30, col:34> col:34 used stepy1 'int'
  |-ParmVarDecl 0x7fe888892360 <col:42, col:46> col:46 used starty2 'int'
  |-ParmVarDecl 0x7fe8888923e0 <col:55, col:59> col:59 used stopy2 'int'
  |-ParmVarDecl 0x7fe888892460 <col:67, col:71> col:71 used stepy2 'int'
  |-ParmVarDecl 0x7fe8888924e0 <line:11:5, col:9> col:9 used startz1 'int'
  |-ParmVarDecl 0x7fe888892560 <col:18, col:22> col:22 stopz1 'int'
  |-ParmVarDecl 0x7fe889808600 <col:30, col:34> col:34 used stepz1 'int'
  |-ParmVarDecl 0x7fe889808680 <col:42, col:46> col:46 used startz2 'int'
  |-ParmVarDecl 0x7fe889808700 <col:55, col:59> col:59 stopz2 'int'
  |-ParmVarDecl 0x7fe889808780 <col:67, col:71> col:71 used stepz2 'int'
  `-CompoundStmt 0x7fe88980a160 <col:79, line:25:1>
    |-DeclStmt 0x7fe889809040 <line:13:5, col:31>
    | |-VarDecl 0x7fe889808d20 <col:5, col:9> col:9 ix 'int'
    | |-VarDecl 0x7fe889808da0 <col:5, col:13> col:13 used jx 'int'
    | |-VarDecl 0x7fe889808e20 <col:5, col:17> col:17 used iy 'int'
    | |-VarDecl 0x7fe889808ea0 <col:5, col:21> col:21 used jy 'int'
    | |-VarDecl 0x7fe889808f20 <col:5, col:25> col:25 used iz 'int'
    | `-VarDecl 0x7fe889808fa0 <col:5, col:29> col:29 used jz 'int'
    |-BinaryOperator 0x7fe8898090b0 <line:14:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7fe889809058 <col:5> 'int' lvalue Var 0x7fe889808f20 'iz' 'int'
    | `-ImplicitCastExpr 0x7fe889809098 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7fe889809078 <col:10> 'int' lvalue ParmVar 0x7fe8888924e0 'startz1' 'int'
    `-ForStmt 0x7fe88980a128 <line:15:5, line:24:5>
      |-BinaryOperator 0x7fe889809128 <line:15:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7fe8898090d0 <col:10> 'int' lvalue Var 0x7fe889808e20 'iy' 'int'
      | `-ImplicitCastExpr 0x7fe889809110 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fe8898090f0 <col:14> 'int' lvalue ParmVar 0x7fe8888921e0 'starty1' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7fe8898091b8 <col:23, col:26> 'int' '<'
      | |-ImplicitCastExpr 0x7fe889809188 <col:23> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fe889809148 <col:23> 'int' lvalue Var 0x7fe889808e20 'iy' 'int'
      | `-ImplicitCastExpr 0x7fe8898091a0 <col:26> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fe889809168 <col:26> 'int' lvalue ParmVar 0x7fe888892260 'stopy1' 'int'
      |-CompoundAssignOperator 0x7fe889809230 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7fe8898091d8 <col:34> 'int' lvalue Var 0x7fe889808e20 'iy' 'int'
      | `-ImplicitCastExpr 0x7fe889809218 <col:39> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fe8898091f8 <col:39> 'int' lvalue ParmVar 0x7fe8888922e0 'stepy1' 'int'
      `-CompoundStmt 0x7fe88980a0f8 <col:48, line:24:5>
        |-BinaryOperator 0x7fe8898092b8 <line:16:9, col:14> 'int' '='
        | |-DeclRefExpr 0x7fe889809260 <col:9> 'int' lvalue Var 0x7fe889808da0 'jx' 'int'
        | `-ImplicitCastExpr 0x7fe8898092a0 <col:14> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x7fe889809280 <col:14> 'int' lvalue ParmVar 0x7fe888892060 'startx' 'int'
        |-BinaryOperator 0x7fe889809330 <line:17:9, col:14> 'int' '='
        | |-DeclRefExpr 0x7fe8898092d8 <col:9> 'int' lvalue Var 0x7fe889808fa0 'jz' 'int'
        | `-ImplicitCastExpr 0x7fe889809318 <col:14> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x7fe8898092f8 <col:14> 'int' lvalue ParmVar 0x7fe889808680 'startz2' 'int'
        |-ForStmt 0x7fe889809ff0 <line:18:9, line:22:9>
        | |-BinaryOperator 0x7fe8898093a8 <line:18:14, col:18> 'int' '='
        | | |-DeclRefExpr 0x7fe889809350 <col:14> 'int' lvalue Var 0x7fe889808ea0 'jy' 'int'
        | | `-ImplicitCastExpr 0x7fe889809390 <col:18> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fe889809370 <col:18> 'int' lvalue ParmVar 0x7fe888892360 'starty2' 'int'
        | |-<<<NULL>>>
        | |-BinaryOperator 0x7fe889809438 <col:27, col:30> 'int' '<'
        | | |-ImplicitCastExpr 0x7fe889809408 <col:27> 'int' <LValueToRValue>
        | | | `-DeclRefExpr 0x7fe8898093c8 <col:27> 'int' lvalue Var 0x7fe889808ea0 'jy' 'int'
        | | `-ImplicitCastExpr 0x7fe889809420 <col:30> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fe8898093e8 <col:30> 'int' lvalue ParmVar 0x7fe8888923e0 'stopy2' 'int'
        | |-CompoundAssignOperator 0x7fe8898094b0 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
        | | |-DeclRefExpr 0x7fe889809458 <col:38> 'int' lvalue Var 0x7fe889808ea0 'jy' 'int'
        | | `-ImplicitCastExpr 0x7fe889809498 <col:43> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fe889809478 <col:43> 'int' lvalue ParmVar 0x7fe888892460 'stepy2' 'int'
        | `-CompoundStmt 0x7fe889809fc8 <col:52, line:22:9>
        |   |-BinaryOperator 0x7fe889809e08 <line:19:6, col:34> 'BOOL':'unsigned char' '='
        |   | |-ArraySubscriptExpr 0x7fe8898095c0 <col:6, col:14> 'BOOL':'unsigned char' lvalue
        |   | | |-ImplicitCastExpr 0x7fe889809590 <col:6, col:10> 'BOOL *' <ArrayToPointerDecay>
        |   | | | `-ArraySubscriptExpr 0x7fe889809550 <col:6, col:10> 'BOOL [mz]' lvalue
        |   | | |   |-ImplicitCastExpr 0x7fe889809520 <col:6> 'BOOL (*)[mz]':'BOOL (*)[mz]' <LValueToRValue>
        |   | | |   | `-DeclRefExpr 0x7fe8898094e0 <col:6> 'BOOL (*)[mz]':'BOOL (*)[mz]' lvalue ParmVar 0x7fe888891fe0 'z' 'BOOL (*)[mz]':'BOOL (*)[mz]'
        |   | | |   `-ImplicitCastExpr 0x7fe889809538 <col:8> 'int' <LValueToRValue>
        |   | | |     `-DeclRefExpr 0x7fe889809500 <col:8> 'int' lvalue Var 0x7fe889808fa0 'jz' 'int'
        |   | | `-ImplicitCastExpr 0x7fe8898095a8 <col:12> 'int' <LValueToRValue>
        |   | |   `-DeclRefExpr 0x7fe889809570 <col:12> 'int' lvalue Var 0x7fe889808f20 'iz' 'int'
        |   | `-ImplicitCastExpr 0x7fe889809df0 <col:18, col:34> 'BOOL':'unsigned char' <IntegralCast>
        |   |   `-BinaryOperator 0x7fe889809dd0 <col:18, col:34> 'int' '|'
        |   |     |-ImplicitCastExpr 0x7fe889809d88 <col:18, col:22> 'int' <IntegralCast>
        |   |     | `-ImplicitCastExpr 0x7fe889809d70 <col:18, col:22> 'BOOL':'unsigned char' <LValueToRValue>
        |   |     |   `-ArraySubscriptExpr 0x7fe889809c50 <col:18, col:22> 'BOOL':'unsigned char' lvalue
        |   |     |     |-ImplicitCastExpr 0x7fe889809c20 <col:18> 'BOOL *':'BOOL *' <LValueToRValue>
        |   |     |     | `-DeclRefExpr 0x7fe8898095e0 <col:18> 'BOOL *':'BOOL *' lvalue ParmVar 0x7fe888891a80 'x' 'BOOL *':'BOOL *'
        |   |     |     `-ImplicitCastExpr 0x7fe889809c38 <col:20> 'int' <LValueToRValue>
        |   |     |       `-DeclRefExpr 0x7fe889809c00 <col:20> 'int' lvalue Var 0x7fe889808da0 'jx' 'int'
        |   |     `-ImplicitCastExpr 0x7fe889809db8 <col:26, col:34> 'int' <IntegralCast>
        |   |       `-ImplicitCastExpr 0x7fe889809da0 <col:26, col:34> 'BOOL':'unsigned char' <LValueToRValue>
        |   |         `-ArraySubscriptExpr 0x7fe889809d50 <col:26, col:34> 'BOOL':'unsigned char' lvalue
        |   |           |-ImplicitCastExpr 0x7fe889809d20 <col:26, col:30> 'BOOL *' <ArrayToPointerDecay>
        |   |           | `-ArraySubscriptExpr 0x7fe889809ce0 <col:26, col:30> 'BOOL [my]' lvalue
        |   |           |   |-ImplicitCastExpr 0x7fe889809cb0 <col:26> 'BOOL (*)[my]':'BOOL (*)[my]' <LValueToRValue>
        |   |           |   | `-DeclRefExpr 0x7fe889809c70 <col:26> 'BOOL (*)[my]':'BOOL (*)[my]' lvalue ParmVar 0x7fe888891d30 'y' 'BOOL (*)[my]':'BOOL (*)[my]'
        |   |           |   `-ImplicitCastExpr 0x7fe889809cc8 <col:28> 'int' <LValueToRValue>
        |   |           |     `-DeclRefExpr 0x7fe889809c90 <col:28> 'int' lvalue Var 0x7fe889808ea0 'jy' 'int'
        |   |           `-ImplicitCastExpr 0x7fe889809d38 <col:32> 'int' <LValueToRValue>
        |   |             `-DeclRefExpr 0x7fe889809d00 <col:32> 'int' lvalue Var 0x7fe889808e20 'iy' 'int'
        |   |-BinaryOperator 0x7fe889809ed8 <line:20:6, col:16> 'int' '='
        |   | |-DeclRefExpr 0x7fe889809e28 <col:6> 'int' lvalue Var 0x7fe889808da0 'jx' 'int'
        |   | `-BinaryOperator 0x7fe889809eb8 <col:11, col:16> 'int' '+'
        |   |   |-ImplicitCastExpr 0x7fe889809e88 <col:11> 'int' <LValueToRValue>
        |   |   | `-DeclRefExpr 0x7fe889809e48 <col:11> 'int' lvalue Var 0x7fe889808da0 'jx' 'int'
        |   |   `-ImplicitCastExpr 0x7fe889809ea0 <col:16> 'int' <LValueToRValue>
        |   |     `-DeclRefExpr 0x7fe889809e68 <col:16> 'int' lvalue ParmVar 0x7fe888892160 'stepx' 'int'
        |   `-BinaryOperator 0x7fe889809fa8 <line:21:6, col:16> 'int' '='
        |     |-DeclRefExpr 0x7fe889809ef8 <col:6> 'int' lvalue Var 0x7fe889808fa0 'jz' 'int'
        |     `-BinaryOperator 0x7fe889809f88 <col:11, col:16> 'int' '+'
        |       |-ImplicitCastExpr 0x7fe889809f58 <col:11> 'int' <LValueToRValue>
        |       | `-DeclRefExpr 0x7fe889809f18 <col:11> 'int' lvalue Var 0x7fe889808fa0 'jz' 'int'
        |       `-ImplicitCastExpr 0x7fe889809f70 <col:16> 'int' <LValueToRValue>
        |         `-DeclRefExpr 0x7fe889809f38 <col:16> 'int' lvalue ParmVar 0x7fe889808780 'stepz2' 'int'
        `-BinaryOperator 0x7fe88980a0d8 <line:23:9, col:19> 'int' '='
          |-DeclRefExpr 0x7fe88980a028 <col:9> 'int' lvalue Var 0x7fe889808f20 'iz' 'int'
          `-BinaryOperator 0x7fe88980a0b8 <col:14, col:19> 'int' '+'
            |-ImplicitCastExpr 0x7fe88980a088 <col:14> 'int' <LValueToRValue>
            | `-DeclRefExpr 0x7fe88980a048 <col:14> 'int' lvalue Var 0x7fe889808f20 'iz' 'int'
            `-ImplicitCastExpr 0x7fe88980a0a0 <col:19> 'int' <LValueToRValue>
              `-DeclRefExpr 0x7fe88980a068 <col:19> 'int' lvalue ParmVar 0x7fe889808600 'stepz1' 'int'
