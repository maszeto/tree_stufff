TranslationUnitDecl 0x7fc0db038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fc0db0394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fc0db0391a0 '__int128'
|-TypedefDecl 0x7fc0db039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fc0db0391c0 'unsigned __int128'
|-TypedefDecl 0x7fc0db0397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fc0db0395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fc0db039568 '__NSConstantString_tag'
|-TypedefDecl 0x7fc0db039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fc0db039850 'char *'
|   `-BuiltinType 0x7fc0db038ca0 'char'
|-TypedefDecl 0x7fc0db039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fc0db039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fc0db039970 'struct __va_list_tag'
|     `-Record 0x7fc0db0398e8 '__va_list_tag'
`-FunctionDecl 0x7fc0db82e918 <./tree_src/storeSectMatrix_SetSectMatColSca.c:3:1, line:11:1> line:3:6 SetSectMatColSca 'void (int, int, double, double (*)[mz], int, int, int, int)'
  |-ParmVarDecl 0x7fc0db82e200 <line:4:5, col:9> col:9 used nz 'int'
  |-ParmVarDecl 0x7fc0db82e280 <col:13, col:17> col:17 used mz 'int'
  |-ParmVarDecl 0x7fc0db82e300 <col:21, col:28> col:28 used x 'double'
  |-ParmVarDecl 0x7fc0db82e500 <col:31, col:46> col:38 used z 'double (*)[mz]':'double (*)[mz]'
  |-ParmVarDecl 0x7fc0db82e580 <col:49, col:53> col:53 used p 'int'
  |-ParmVarDecl 0x7fc0db82e600 <line:5:5, col:9> col:9 used startz1 'int'
  |-ParmVarDecl 0x7fc0db82e680 <col:18, col:22> col:22 used stopz1 'int'
  |-ParmVarDecl 0x7fc0db82e700 <col:30, col:34> col:34 used stepz1 'int'
  `-CompoundStmt 0x7fc0db82ee40 <col:43, line:11:1>
    |-DeclStmt 0x7fc0db82eac0 <line:7:5, col:11>
    | `-VarDecl 0x7fc0db82ea58 <col:5, col:9> col:9 used iz 'int'
    `-ForStmt 0x7fc0db82ee08 <line:8:5, line:10:5>
      |-BinaryOperator 0x7fc0db82eb30 <line:8:10, col:15> 'int' '='
      | |-DeclRefExpr 0x7fc0db82ead8 <col:10> 'int' lvalue Var 0x7fc0db82ea58 'iz' 'int'
      | `-ImplicitCastExpr 0x7fc0db82eb18 <col:15> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fc0db82eaf8 <col:15> 'int' lvalue ParmVar 0x7fc0db82e600 'startz1' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7fc0db82ebc0 <col:24, col:27> 'int' '<'
      | |-ImplicitCastExpr 0x7fc0db82eb90 <col:24> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fc0db82eb50 <col:24> 'int' lvalue Var 0x7fc0db82ea58 'iz' 'int'
      | `-ImplicitCastExpr 0x7fc0db82eba8 <col:27> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fc0db82eb70 <col:27> 'int' lvalue ParmVar 0x7fc0db82e680 'stopz1' 'int'
      |-CompoundAssignOperator 0x7fc0db82ec38 <col:35, col:40> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7fc0db82ebe0 <col:35> 'int' lvalue Var 0x7fc0db82ea58 'iz' 'int'
      | `-ImplicitCastExpr 0x7fc0db82ec20 <col:40> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fc0db82ec00 <col:40> 'int' lvalue ParmVar 0x7fc0db82e700 'stepz1' 'int'
      `-CompoundStmt 0x7fc0db82edf0 <col:49, line:10:5>
        `-BinaryOperator 0x7fc0db82edd0 <line:9:9, col:20> 'double' '='
          |-ArraySubscriptExpr 0x7fc0db82ed78 <col:9, col:16> 'double' lvalue
          | |-ImplicitCastExpr 0x7fc0db82ed48 <col:9, col:13> 'double *' <ArrayToPointerDecay>
          | | `-ArraySubscriptExpr 0x7fc0db82ecd8 <col:9, col:13> 'double [mz]' lvalue
          | |   |-ImplicitCastExpr 0x7fc0db82eca8 <col:9> 'double (*)[mz]':'double (*)[mz]' <LValueToRValue>
          | |   | `-DeclRefExpr 0x7fc0db82ec68 <col:9> 'double (*)[mz]':'double (*)[mz]' lvalue ParmVar 0x7fc0db82e500 'z' 'double (*)[mz]':'double (*)[mz]'
          | |   `-ImplicitCastExpr 0x7fc0db82ecc0 <col:11> 'int' <LValueToRValue>
          | |     `-DeclRefExpr 0x7fc0db82ec88 <col:11> 'int' lvalue Var 0x7fc0db82ea58 'iz' 'int'
          | `-ImplicitCastExpr 0x7fc0db82ed60 <col:15> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x7fc0db82ecf8 <col:15> 'int' lvalue ParmVar 0x7fc0db82e580 'p' 'int'
          `-ImplicitCastExpr 0x7fc0db82edb8 <col:20> 'double' <LValueToRValue>
            `-DeclRefExpr 0x7fc0db82ed98 <col:20> 'double' lvalue ParmVar 0x7fc0db82e300 'x' 'double'
