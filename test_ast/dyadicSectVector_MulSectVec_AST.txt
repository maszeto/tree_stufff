TranslationUnitDecl 0x7fee04838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fee048394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fee048391a0 '__int128'
|-TypedefDecl 0x7fee04839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fee048391c0 'unsigned __int128'
|-TypedefDecl 0x7fee048397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fee048395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fee04839568 '__NSConstantString_tag'
|-TypedefDecl 0x7fee04839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fee04839850 'char *'
|   `-BuiltinType 0x7fee04838ca0 'char'
|-TypedefDecl 0x7fee04839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fee04839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fee04839970 'struct __va_list_tag'
|     `-Record 0x7fee048398e8 '__va_list_tag'
|-TypedefDecl 0x7fee0502f200 <./tree_src/dyadicSectVector_MulSectVec.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fee04838d60 'unsigned char'
`-FunctionDecl 0x7fee0502fd28 <line:6:1, line:19:1> line:6:6 MulSectVec 'void (int, double *, double *, double *, int, int, int, int, int, int, int, int, int)'
  |-ParmVarDecl 0x7fee0502f270 <line:7:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7fee0502f3f0 <col:12, col:22> col:19 used x 'double *':'double *'
  |-ParmVarDecl 0x7fee0502f540 <col:25, col:35> col:32 used y 'double *':'double *'
  |-ParmVarDecl 0x7fee0502f690 <col:38, col:48> col:45 used z 'double *':'double *'
  |-ParmVarDecl 0x7fee0502f710 <line:8:5, col:9> col:9 used startx 'int'
  |-ParmVarDecl 0x7fee0502f790 <col:17, col:21> col:21 used stopx 'int'
  |-ParmVarDecl 0x7fee0502f810 <col:28, col:32> col:32 used stepx 'int'
  |-ParmVarDecl 0x7fee0502f890 <col:39, col:43> col:43 used starty 'int'
  |-ParmVarDecl 0x7fee0502f910 <col:51, col:55> col:55 stopy 'int'
  |-ParmVarDecl 0x7fee0502f990 <col:62, col:66> col:66 used stepy 'int'
  |-ParmVarDecl 0x7fee0502fa10 <line:9:5, col:9> col:9 used startz 'int'
  |-ParmVarDecl 0x7fee0502fa90 <col:17, col:21> col:21 stopz 'int'
  |-ParmVarDecl 0x7fee0502fb10 <col:28, col:32> col:32 used stepz 'int'
  `-CompoundStmt 0x7fee050316e0 <col:40, line:19:1>
    |-DeclStmt 0x7fee05030018 <line:11:5, col:17>
    | |-VarDecl 0x7fee0502fe90 <col:5, col:9> col:9 used ix 'int'
    | |-VarDecl 0x7fee0502ff10 <col:5, col:12> col:12 used iy 'int'
    | `-VarDecl 0x7fee0502ff90 <col:5, col:15> col:15 used iz 'int'
    |-BinaryOperator 0x7fee05030088 <line:12:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7fee05030030 <col:5> 'int' lvalue Var 0x7fee0502ff10 'iy' 'int'
    | `-ImplicitCastExpr 0x7fee05030070 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7fee05030050 <col:10> 'int' lvalue ParmVar 0x7fee0502f890 'starty' 'int'
    |-BinaryOperator 0x7fee05030100 <line:13:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7fee050300a8 <col:5> 'int' lvalue Var 0x7fee0502ff90 'iz' 'int'
    | `-ImplicitCastExpr 0x7fee050300e8 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7fee050300c8 <col:10> 'int' lvalue ParmVar 0x7fee0502fa10 'startz' 'int'
    `-ForStmt 0x7fee050316a8 <line:14:5, line:18:5>
      |-BinaryOperator 0x7fee05030178 <line:14:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7fee05030120 <col:10> 'int' lvalue Var 0x7fee0502fe90 'ix' 'int'
      | `-ImplicitCastExpr 0x7fee05030160 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fee05030140 <col:14> 'int' lvalue ParmVar 0x7fee0502f710 'startx' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7fee05031218 <col:22, col:25> 'int' '<'
      | |-ImplicitCastExpr 0x7fee050301d8 <col:22> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fee05030198 <col:22> 'int' lvalue Var 0x7fee0502fe90 'ix' 'int'
      | `-ImplicitCastExpr 0x7fee05031200 <col:25> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fee050301b8 <col:25> 'int' lvalue ParmVar 0x7fee0502f790 'stopx' 'int'
      |-CompoundAssignOperator 0x7fee05031290 <col:32, col:37> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7fee05031238 <col:32> 'int' lvalue Var 0x7fee0502fe90 'ix' 'int'
      | `-ImplicitCastExpr 0x7fee05031278 <col:37> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fee05031258 <col:37> 'int' lvalue ParmVar 0x7fee0502f810 'stepx' 'int'
      `-CompoundStmt 0x7fee05031680 <col:45, line:18:5>
        |-BinaryOperator 0x7fee050314c0 <line:15:4, col:24> 'double' '='
        | |-ArraySubscriptExpr 0x7fee05031330 <col:4, col:8> 'double' lvalue
        | | |-ImplicitCastExpr 0x7fee05031300 <col:4> 'double *':'double *' <LValueToRValue>
        | | | `-DeclRefExpr 0x7fee050312c0 <col:4> 'double *':'double *' lvalue ParmVar 0x7fee0502f690 'z' 'double *':'double *'
        | | `-ImplicitCastExpr 0x7fee05031318 <col:6> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fee050312e0 <col:6> 'int' lvalue Var 0x7fee0502ff90 'iz' 'int'
        | `-BinaryOperator 0x7fee050314a0 <col:12, col:24> 'double' '*'
        |   |-ImplicitCastExpr 0x7fee05031470 <col:12, col:16> 'double' <LValueToRValue>
        |   | `-ArraySubscriptExpr 0x7fee050313c0 <col:12, col:16> 'double' lvalue
        |   |   |-ImplicitCastExpr 0x7fee05031390 <col:12> 'double *':'double *' <LValueToRValue>
        |   |   | `-DeclRefExpr 0x7fee05031350 <col:12> 'double *':'double *' lvalue ParmVar 0x7fee0502f3f0 'x' 'double *':'double *'
        |   |   `-ImplicitCastExpr 0x7fee050313a8 <col:14> 'int' <LValueToRValue>
        |   |     `-DeclRefExpr 0x7fee05031370 <col:14> 'int' lvalue Var 0x7fee0502fe90 'ix' 'int'
        |   `-ImplicitCastExpr 0x7fee05031488 <col:20, col:24> 'double' <LValueToRValue>
        |     `-ArraySubscriptExpr 0x7fee05031450 <col:20, col:24> 'double' lvalue
        |       |-ImplicitCastExpr 0x7fee05031420 <col:20> 'double *':'double *' <LValueToRValue>
        |       | `-DeclRefExpr 0x7fee050313e0 <col:20> 'double *':'double *' lvalue ParmVar 0x7fee0502f540 'y' 'double *':'double *'
        |       `-ImplicitCastExpr 0x7fee05031438 <col:22> 'int' <LValueToRValue>
        |         `-DeclRefExpr 0x7fee05031400 <col:22> 'int' lvalue Var 0x7fee0502ff10 'iy' 'int'
        |-BinaryOperator 0x7fee05031590 <line:16:4, col:14> 'int' '='
        | |-DeclRefExpr 0x7fee050314e0 <col:4> 'int' lvalue Var 0x7fee0502ff10 'iy' 'int'
        | `-BinaryOperator 0x7fee05031570 <col:9, col:14> 'int' '+'
        |   |-ImplicitCastExpr 0x7fee05031540 <col:9> 'int' <LValueToRValue>
        |   | `-DeclRefExpr 0x7fee05031500 <col:9> 'int' lvalue Var 0x7fee0502ff10 'iy' 'int'
        |   `-ImplicitCastExpr 0x7fee05031558 <col:14> 'int' <LValueToRValue>
        |     `-DeclRefExpr 0x7fee05031520 <col:14> 'int' lvalue ParmVar 0x7fee0502f990 'stepy' 'int'
        `-BinaryOperator 0x7fee05031660 <line:17:4, col:14> 'int' '='
          |-DeclRefExpr 0x7fee050315b0 <col:4> 'int' lvalue Var 0x7fee0502ff90 'iz' 'int'
          `-BinaryOperator 0x7fee05031640 <col:9, col:14> 'int' '+'
            |-ImplicitCastExpr 0x7fee05031610 <col:9> 'int' <LValueToRValue>
            | `-DeclRefExpr 0x7fee050315d0 <col:9> 'int' lvalue Var 0x7fee0502ff90 'iz' 'int'
            `-ImplicitCastExpr 0x7fee05031628 <col:14> 'int' <LValueToRValue>
              `-DeclRefExpr 0x7fee050315f0 <col:14> 'int' lvalue ParmVar 0x7fee0502fb10 'stepz' 'int'
