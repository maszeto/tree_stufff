TranslationUnitDecl 0x7fdeee838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fdeee8394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fdeee8391a0 '__int128'
|-TypedefDecl 0x7fdeee839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fdeee8391c0 'unsigned __int128'
|-TypedefDecl 0x7fdeee8397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fdeee8395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fdeee839568 '__NSConstantString_tag'
|-TypedefDecl 0x7fdeee839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fdeee839850 'char *'
|   `-BuiltinType 0x7fdeee838ca0 'char'
|-TypedefDecl 0x7fdeee839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fdeee839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fdeee839970 'struct __va_list_tag'
|     `-Record 0x7fdeee8398e8 '__va_list_tag'
|-TypedefDecl 0x7fdeef02f200 <./tree_src/extendWholeMatrix_PowWholeMatSca.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fdeee838d60 'unsigned char'
|-FunctionDecl 0x7fdeef02f9a8 <line:6:1, line:15:1> line:6:6 PowWholeMatSca 'void (int, int, double (*)[m], double, double (*)[m])'
| |-ParmVarDecl 0x7fdeef02f270 <line:7:5, col:9> col:9 used n 'int'
| |-ParmVarDecl 0x7fdeef02f2f0 <col:12, col:16> col:16 used m 'int'
| |-ParmVarDecl 0x7fdeef02f4f0 <col:19, col:32> col:26 used x 'double (*)[m]':'double (*)[m]'
| |-ParmVarDecl 0x7fdeef02f570 <col:35, col:42> col:42 used y 'double'
| |-ParmVarDecl 0x7fdeef02f770 <col:45, col:58> col:52 used z 'double (*)[m]':'double (*)[m]'
| `-CompoundStmt 0x7fdeef031430 <col:62, line:15:1>
|   |-DeclStmt 0x7fdeef02fbd0 <line:9:5, col:13>
|   | |-VarDecl 0x7fdeef02fad0 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x7fdeef02fb50 <col:5, col:12> col:12 used j 'int'
|   `-ForStmt 0x7fdeef0313f8 <line:10:5, line:14:5>
|     |-BinaryOperator 0x7fdeef02fc28 <line:10:10, col:13> 'int' '='
|     | |-DeclRefExpr 0x7fdeef02fbe8 <col:10> 'int' lvalue Var 0x7fdeef02fad0 'i' 'int'
|     | `-IntegerLiteral 0x7fdeef02fc08 <col:13> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fdeef02fcb8 <col:16, col:18> 'int' '<'
|     | |-ImplicitCastExpr 0x7fdeef02fc88 <col:16> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fdeef02fc48 <col:16> 'int' lvalue Var 0x7fdeef02fad0 'i' 'int'
|     | `-ImplicitCastExpr 0x7fdeef02fca0 <col:18> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fdeef02fc68 <col:18> 'int' lvalue ParmVar 0x7fdeef02f270 'n' 'int'
|     |-UnaryOperator 0x7fdeef02fcf8 <col:21, col:22> 'int' postfix '++'
|     | `-DeclRefExpr 0x7fdeef02fcd8 <col:21> 'int' lvalue Var 0x7fdeef02fad0 'i' 'int'
|     `-CompoundStmt 0x7fdeef0313e0 <col:27, line:14:5>
|       `-ForStmt 0x7fdeef0313a8 <line:11:9, line:13:9>
|         |-BinaryOperator 0x7fdeef02fd50 <line:11:14, col:17> 'int' '='
|         | |-DeclRefExpr 0x7fdeef02fd10 <col:14> 'int' lvalue Var 0x7fdeef02fb50 'j' 'int'
|         | `-IntegerLiteral 0x7fdeef02fd30 <col:17> 'int' 0
|         |-<<<NULL>>>
|         |-BinaryOperator 0x7fdeef02fde0 <col:20, col:22> 'int' '<'
|         | |-ImplicitCastExpr 0x7fdeef02fdb0 <col:20> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x7fdeef02fd70 <col:20> 'int' lvalue Var 0x7fdeef02fb50 'j' 'int'
|         | `-ImplicitCastExpr 0x7fdeef02fdc8 <col:22> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x7fdeef02fd90 <col:22> 'int' lvalue ParmVar 0x7fdeef02f2f0 'm' 'int'
|         |-UnaryOperator 0x7fdeef02fe20 <col:25, col:26> 'int' postfix '++'
|         | `-DeclRefExpr 0x7fdeef02fe00 <col:25> 'int' lvalue Var 0x7fdeef02fb50 'j' 'int'
|         `-CompoundStmt 0x7fdeef031390 <col:31, line:13:9>
|           `-BinaryOperator 0x7fdeef031370 <line:12:6, col:30> 'double' '='
|             |-ArraySubscriptExpr 0x7fdeef02ff48 <col:6, col:12> 'double' lvalue
|             | |-ImplicitCastExpr 0x7fdeef02ff18 <col:6, col:9> 'double *' <ArrayToPointerDecay>
|             | | `-ArraySubscriptExpr 0x7fdeef02fea8 <col:6, col:9> 'double [m]' lvalue
|             | |   |-ImplicitCastExpr 0x7fdeef02fe78 <col:6> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
|             | |   | `-DeclRefExpr 0x7fdeef02fe38 <col:6> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fdeef02f770 'z' 'double (*)[m]':'double (*)[m]'
|             | |   `-ImplicitCastExpr 0x7fdeef02fe90 <col:8> 'int' <LValueToRValue>
|             | |     `-DeclRefExpr 0x7fdeef02fe58 <col:8> 'int' lvalue Var 0x7fdeef02fad0 'i' 'int'
|             | `-ImplicitCastExpr 0x7fdeef02ff30 <col:11> 'int' <LValueToRValue>
|             |   `-DeclRefExpr 0x7fdeef02fec8 <col:11> 'int' lvalue Var 0x7fdeef02fb50 'j' 'int'
|             `-CallExpr 0x7fdeef031310 <col:16, col:30> 'double'
|               |-ImplicitCastExpr 0x7fdeef0312f8 <col:16> 'double (*)(double, double)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x7fdeef030178 <col:16> 'double (double, double)' Function 0x7fdeef02ffa8 'pow' 'double (double, double)'
|               |-ImplicitCastExpr 0x7fdeef031340 <col:20, col:26> 'double' <LValueToRValue>
|               | `-ArraySubscriptExpr 0x7fdeef031288 <col:20, col:26> 'double' lvalue
|               |   |-ImplicitCastExpr 0x7fdeef031258 <col:20, col:23> 'double *' <ArrayToPointerDecay>
|               |   | `-ArraySubscriptExpr 0x7fdeef031218 <col:20, col:23> 'double [m]' lvalue
|               |   |   |-ImplicitCastExpr 0x7fdeef0301d8 <col:20> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
|               |   |   | `-DeclRefExpr 0x7fdeef030198 <col:20> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fdeef02f4f0 'x' 'double (*)[m]':'double (*)[m]'
|               |   |   `-ImplicitCastExpr 0x7fdeef031200 <col:22> 'int' <LValueToRValue>
|               |   |     `-DeclRefExpr 0x7fdeef0301b8 <col:22> 'int' lvalue Var 0x7fdeef02fad0 'i' 'int'
|               |   `-ImplicitCastExpr 0x7fdeef031270 <col:25> 'int' <LValueToRValue>
|               |     `-DeclRefExpr 0x7fdeef031238 <col:25> 'int' lvalue Var 0x7fdeef02fb50 'j' 'int'
|               `-ImplicitCastExpr 0x7fdeef031358 <col:29> 'double' <LValueToRValue>
|                 `-DeclRefExpr 0x7fdeef0312a8 <col:29> 'double' lvalue ParmVar 0x7fdeef02f570 'y' 'double'
`-FunctionDecl 0x7fdeef02ffa8 <col:16> col:16 implicit used pow 'double (double, double)' extern
  |-ParmVarDecl 0x7fdeef030048 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x7fdeef0300b0 <<invalid sloc>> <invalid sloc> 'double'
  |-ConstAttr 0x7fdeef030128 <col:16> Implicit
  `-NoThrowAttr 0x7fdeef030168 <col:16> Implicit
