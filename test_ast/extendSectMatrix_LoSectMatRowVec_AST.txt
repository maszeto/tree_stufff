TranslationUnitDecl 0x7fc698838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fc6988394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fc6988391a0 '__int128'
|-TypedefDecl 0x7fc698839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fc6988391c0 'unsigned __int128'
|-TypedefDecl 0x7fc6988397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fc6988395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fc698839568 '__NSConstantString_tag'
|-TypedefDecl 0x7fc698839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fc698839850 'char *'
|   `-BuiltinType 0x7fc698838ca0 'char'
|-TypedefDecl 0x7fc698839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fc698839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fc698839970 'struct __va_list_tag'
|     `-Record 0x7fc6988398e8 '__va_list_tag'
|-TypedefDecl 0x7fc699809200 <./tree_src/extendSectMatrix_LoSectMatRowVec.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fc698838d60 'unsigned char'
|-FunctionDecl 0x7fc69980b978 <line:7:1, line:26:1> line:7:6 LoSectMatRowVec 'void (int, int, int, int, int, double (*)[mx], double *, double (*)[mz], int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)'
| |-ParmVarDecl 0x7fc699809270 <line:8:5, col:9> col:9 used nx 'int'
| |-ParmVarDecl 0x7fc6998092f0 <col:13, col:17> col:17 used mx 'int'
| |-ParmVarDecl 0x7fc699809370 <col:21, col:25> col:25 used ny 'int'
| |-ParmVarDecl 0x7fc6998093f0 <col:29, col:33> col:33 used nz 'int'
| |-ParmVarDecl 0x7fc699809470 <col:37, col:41> col:41 used mz 'int'
| |-ParmVarDecl 0x7fc699809670 <line:9:5, col:20> col:12 used x 'double (*)[mx]':'double (*)[mx]'
| |-ParmVarDecl 0x7fc6998097f0 <col:23, col:34> col:30 used y 'double *':'double *'
| |-ParmVarDecl 0x7fc6998099f0 <col:37, col:52> col:44 used z 'double (*)[mz]':'double (*)[mz]'
| |-ParmVarDecl 0x7fc699809a70 <line:10:5, col:9> col:9 used startx1 'int'
| |-ParmVarDecl 0x7fc699809af0 <col:18, col:22> col:22 used stopx1 'int'
| |-ParmVarDecl 0x7fc699809b70 <col:30, col:34> col:34 used stepx1 'int'
| |-ParmVarDecl 0x7fc699809bf0 <col:42, col:46> col:46 used startx2 'int'
| |-ParmVarDecl 0x7fc699809c70 <col:55, col:59> col:59 used stopx2 'int'
| |-ParmVarDecl 0x7fc699809cf0 <col:67, col:71> col:71 used stepx2 'int'
| |-ParmVarDecl 0x7fc699809d70 <line:11:5, col:9> col:9 used starty 'int'
| |-ParmVarDecl 0x7fc699809df0 <col:17, col:21> col:21 stopy 'int'
| |-ParmVarDecl 0x7fc699809e70 <col:28, col:32> col:32 used stepy 'int'
| |-ParmVarDecl 0x7fc699809ef0 <line:12:5, col:9> col:9 used startz1 'int'
| |-ParmVarDecl 0x7fc699809f70 <col:18, col:22> col:22 stopz1 'int'
| |-ParmVarDecl 0x7fc699809ff0 <col:30, col:34> col:34 used stepz1 'int'
| |-ParmVarDecl 0x7fc69980a070 <col:42, col:46> col:46 used startz2 'int'
| |-ParmVarDecl 0x7fc69980a0f0 <col:55, col:59> col:59 stopz2 'int'
| |-ParmVarDecl 0x7fc69980a170 <col:67, col:71> col:71 used stepz2 'int'
| `-CompoundStmt 0x7fc69980d1a8 <col:80, line:26:1>
|   |-DeclStmt 0x7fc69980be50 <line:14:5, col:31>
|   | |-VarDecl 0x7fc69980bb30 <col:5, col:9> col:9 used ix 'int'
|   | |-VarDecl 0x7fc69980bbb0 <col:5, col:13> col:13 used jx 'int'
|   | |-VarDecl 0x7fc69980bc30 <col:5, col:17> col:17 iy 'int'
|   | |-VarDecl 0x7fc69980bcb0 <col:5, col:21> col:21 used jy 'int'
|   | |-VarDecl 0x7fc69980bd30 <col:5, col:25> col:25 used iz 'int'
|   | `-VarDecl 0x7fc69980bdb0 <col:5, col:29> col:29 used jz 'int'
|   |-BinaryOperator 0x7fc69980bec0 <line:15:5, col:10> 'int' '='
|   | |-DeclRefExpr 0x7fc69980be68 <col:5> 'int' lvalue Var 0x7fc69980bd30 'iz' 'int'
|   | `-ImplicitCastExpr 0x7fc69980bea8 <col:10> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fc69980be88 <col:10> 'int' lvalue ParmVar 0x7fc699809ef0 'startz1' 'int'
|   `-ForStmt 0x7fc69980d170 <line:16:5, line:25:5>
|     |-BinaryOperator 0x7fc69980bf38 <line:16:10, col:14> 'int' '='
|     | |-DeclRefExpr 0x7fc69980bee0 <col:10> 'int' lvalue Var 0x7fc69980bb30 'ix' 'int'
|     | `-ImplicitCastExpr 0x7fc69980bf20 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fc69980bf00 <col:14> 'int' lvalue ParmVar 0x7fc699809a70 'startx1' 'int'
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fc69980bfc8 <col:23, col:26> 'int' '<'
|     | |-ImplicitCastExpr 0x7fc69980bf98 <col:23> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fc69980bf58 <col:23> 'int' lvalue Var 0x7fc69980bb30 'ix' 'int'
|     | `-ImplicitCastExpr 0x7fc69980bfb0 <col:26> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fc69980bf78 <col:26> 'int' lvalue ParmVar 0x7fc699809af0 'stopx1' 'int'
|     |-CompoundAssignOperator 0x7fc69980c040 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     | |-DeclRefExpr 0x7fc69980bfe8 <col:34> 'int' lvalue Var 0x7fc69980bb30 'ix' 'int'
|     | `-ImplicitCastExpr 0x7fc69980c028 <col:39> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fc69980c008 <col:39> 'int' lvalue ParmVar 0x7fc699809b70 'stepx1' 'int'
|     `-CompoundStmt 0x7fc69980d140 <col:48, line:25:5>
|       |-BinaryOperator 0x7fc69980c0c8 <line:17:9, col:14> 'int' '='
|       | |-DeclRefExpr 0x7fc69980c070 <col:9> 'int' lvalue Var 0x7fc69980bcb0 'jy' 'int'
|       | `-ImplicitCastExpr 0x7fc69980c0b0 <col:14> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x7fc69980c090 <col:14> 'int' lvalue ParmVar 0x7fc699809d70 'starty' 'int'
|       |-BinaryOperator 0x7fc69980c140 <line:18:9, col:14> 'int' '='
|       | |-DeclRefExpr 0x7fc69980c0e8 <col:9> 'int' lvalue Var 0x7fc69980bdb0 'jz' 'int'
|       | `-ImplicitCastExpr 0x7fc69980c128 <col:14> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x7fc69980c108 <col:14> 'int' lvalue ParmVar 0x7fc69980a070 'startz2' 'int'
|       |-ForStmt 0x7fc69980d038 <line:19:9, line:23:9>
|       | |-BinaryOperator 0x7fc69980c1b8 <line:19:14, col:18> 'int' '='
|       | | |-DeclRefExpr 0x7fc69980c160 <col:14> 'int' lvalue Var 0x7fc69980bbb0 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7fc69980c1a0 <col:18> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fc69980c180 <col:18> 'int' lvalue ParmVar 0x7fc699809bf0 'startx2' 'int'
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x7fc69980c248 <col:27, col:30> 'int' '<'
|       | | |-ImplicitCastExpr 0x7fc69980c218 <col:27> 'int' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7fc69980c1d8 <col:27> 'int' lvalue Var 0x7fc69980bbb0 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7fc69980c230 <col:30> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fc69980c1f8 <col:30> 'int' lvalue ParmVar 0x7fc699809c70 'stopx2' 'int'
|       | |-CompoundAssignOperator 0x7fc69980c2c0 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|       | | |-DeclRefExpr 0x7fc69980c268 <col:38> 'int' lvalue Var 0x7fc69980bbb0 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7fc69980c2a8 <col:43> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fc69980c288 <col:43> 'int' lvalue ParmVar 0x7fc699809cf0 'stepx2' 'int'
|       | `-CompoundStmt 0x7fc69980d010 <col:52, line:23:9>
|       |   |-BinaryOperator 0x7fc69980ce50 <line:20:6, col:38> 'double' '='
|       |   | |-ArraySubscriptExpr 0x7fc69980c3d0 <col:6, col:14> 'double' lvalue
|       |   | | |-ImplicitCastExpr 0x7fc69980c3a0 <col:6, col:10> 'double *' <ArrayToPointerDecay>
|       |   | | | `-ArraySubscriptExpr 0x7fc69980c360 <col:6, col:10> 'double [mz]' lvalue
|       |   | | |   |-ImplicitCastExpr 0x7fc69980c330 <col:6> 'double (*)[mz]':'double (*)[mz]' <LValueToRValue>
|       |   | | |   | `-DeclRefExpr 0x7fc69980c2f0 <col:6> 'double (*)[mz]':'double (*)[mz]' lvalue ParmVar 0x7fc6998099f0 'z' 'double (*)[mz]':'double (*)[mz]'
|       |   | | |   `-ImplicitCastExpr 0x7fc69980c348 <col:8> 'int' <LValueToRValue>
|       |   | | |     `-DeclRefExpr 0x7fc69980c310 <col:8> 'int' lvalue Var 0x7fc69980bd30 'iz' 'int'
|       |   | | `-ImplicitCastExpr 0x7fc69980c3b8 <col:12> 'int' <LValueToRValue>
|       |   | |   `-DeclRefExpr 0x7fc69980c380 <col:12> 'int' lvalue Var 0x7fc69980bdb0 'jz' 'int'
|       |   | `-CallExpr 0x7fc69980cdf0 <col:18, col:38> 'double'
|       |   |   |-ImplicitCastExpr 0x7fc69980cdd8 <col:18> 'double (*)(double, double)' <FunctionToPointerDecay>
|       |   |   | `-DeclRefExpr 0x7fc69980cc00 <col:18> 'double (double, double)' Function 0x7fc69980c428 'fmin' 'double (double, double)'
|       |   |   |-ImplicitCastExpr 0x7fc69980ce20 <col:23, col:31> 'double' <LValueToRValue>
|       |   |   | `-ArraySubscriptExpr 0x7fc69980cd00 <col:23, col:31> 'double' lvalue
|       |   |   |   |-ImplicitCastExpr 0x7fc69980ccd0 <col:23, col:27> 'double *' <ArrayToPointerDecay>
|       |   |   |   | `-ArraySubscriptExpr 0x7fc69980cc90 <col:23, col:27> 'double [mx]' lvalue
|       |   |   |   |   |-ImplicitCastExpr 0x7fc69980cc60 <col:23> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
|       |   |   |   |   | `-DeclRefExpr 0x7fc69980cc20 <col:23> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7fc699809670 'x' 'double (*)[mx]':'double (*)[mx]'
|       |   |   |   |   `-ImplicitCastExpr 0x7fc69980cc78 <col:25> 'int' <LValueToRValue>
|       |   |   |   |     `-DeclRefExpr 0x7fc69980cc40 <col:25> 'int' lvalue Var 0x7fc69980bb30 'ix' 'int'
|       |   |   |   `-ImplicitCastExpr 0x7fc69980cce8 <col:29> 'int' <LValueToRValue>
|       |   |   |     `-DeclRefExpr 0x7fc69980ccb0 <col:29> 'int' lvalue Var 0x7fc69980bbb0 'jx' 'int'
|       |   |   `-ImplicitCastExpr 0x7fc69980ce38 <col:33, col:37> 'double' <LValueToRValue>
|       |   |     `-ArraySubscriptExpr 0x7fc69980cd90 <col:33, col:37> 'double' lvalue
|       |   |       |-ImplicitCastExpr 0x7fc69980cd60 <col:33> 'double *':'double *' <LValueToRValue>
|       |   |       | `-DeclRefExpr 0x7fc69980cd20 <col:33> 'double *':'double *' lvalue ParmVar 0x7fc6998097f0 'y' 'double *':'double *'
|       |   |       `-ImplicitCastExpr 0x7fc69980cd78 <col:35> 'int' <LValueToRValue>
|       |   |         `-DeclRefExpr 0x7fc69980cd40 <col:35> 'int' lvalue Var 0x7fc69980bcb0 'jy' 'int'
|       |   |-BinaryOperator 0x7fc69980cf20 <line:21:6, col:16> 'int' '='
|       |   | |-DeclRefExpr 0x7fc69980ce70 <col:6> 'int' lvalue Var 0x7fc69980bcb0 'jy' 'int'
|       |   | `-BinaryOperator 0x7fc69980cf00 <col:11, col:16> 'int' '+'
|       |   |   |-ImplicitCastExpr 0x7fc69980ced0 <col:11> 'int' <LValueToRValue>
|       |   |   | `-DeclRefExpr 0x7fc69980ce90 <col:11> 'int' lvalue Var 0x7fc69980bcb0 'jy' 'int'
|       |   |   `-ImplicitCastExpr 0x7fc69980cee8 <col:16> 'int' <LValueToRValue>
|       |   |     `-DeclRefExpr 0x7fc69980ceb0 <col:16> 'int' lvalue ParmVar 0x7fc699809e70 'stepy' 'int'
|       |   `-BinaryOperator 0x7fc69980cff0 <line:22:6, col:16> 'int' '='
|       |     |-DeclRefExpr 0x7fc69980cf40 <col:6> 'int' lvalue Var 0x7fc69980bdb0 'jz' 'int'
|       |     `-BinaryOperator 0x7fc69980cfd0 <col:11, col:16> 'int' '+'
|       |       |-ImplicitCastExpr 0x7fc69980cfa0 <col:11> 'int' <LValueToRValue>
|       |       | `-DeclRefExpr 0x7fc69980cf60 <col:11> 'int' lvalue Var 0x7fc69980bdb0 'jz' 'int'
|       |       `-ImplicitCastExpr 0x7fc69980cfb8 <col:16> 'int' <LValueToRValue>
|       |         `-DeclRefExpr 0x7fc69980cf80 <col:16> 'int' lvalue ParmVar 0x7fc69980a170 'stepz2' 'int'
|       `-BinaryOperator 0x7fc69980d120 <line:24:9, col:19> 'int' '='
|         |-DeclRefExpr 0x7fc69980d070 <col:9> 'int' lvalue Var 0x7fc69980bd30 'iz' 'int'
|         `-BinaryOperator 0x7fc69980d100 <col:14, col:19> 'int' '+'
|           |-ImplicitCastExpr 0x7fc69980d0d0 <col:14> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x7fc69980d090 <col:14> 'int' lvalue Var 0x7fc69980bd30 'iz' 'int'
|           `-ImplicitCastExpr 0x7fc69980d0e8 <col:19> 'int' <LValueToRValue>
|             `-DeclRefExpr 0x7fc69980d0b0 <col:19> 'int' lvalue ParmVar 0x7fc699809ff0 'stepz1' 'int'
`-FunctionDecl 0x7fc69980c428 <line:20:18> col:18 implicit used fmin 'double (double, double)' extern
  |-ParmVarDecl 0x7fc69980c4c8 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x7fc69980c530 <<invalid sloc>> <invalid sloc> 'double'
  |-NoThrowAttr 0x7fc69980c5a8 <col:18> Implicit
  `-ConstAttr 0x7fc69980c5e8 <col:18> Implicit
