TranslationUnitDecl 0x7faa7a038008 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7faa7a0388a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7faa7a0385a0 '__int128'
|-TypedefDecl 0x7faa7a038910 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7faa7a0385c0 'unsigned __int128'
|-TypedefDecl 0x7faa7a038bf8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7faa7a0389f0 'struct __NSConstantString_tag'
|   `-Record 0x7faa7a038968 '__NSConstantString_tag'
|-TypedefDecl 0x7faa7a038c90 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7faa7a038c50 'char *'
|   `-BuiltinType 0x7faa7a0380a0 'char'
|-TypedefDecl 0x7faa7a038f68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7faa7a038f10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7faa7a038d70 'struct __va_list_tag'
|     `-Record 0x7faa7a038ce8 '__va_list_tag'
|-TypedefDecl 0x7faa7a82f200 <./tree_src/unarySectMatrix_MaxMagSectLastMat.c:4:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7faa7a038160 'unsigned char'
|-FunctionDecl 0x7faa7a82fe18 <line:12:1, line:28:1> line:12:6 MaxMagSectLastMat 'void (int, int, int, double (*)[mx], double *, int, int, int, int, int, int, int, int, int)'
| |-ParmVarDecl 0x7faa7a82f270 <line:13:5, col:9> col:9 used nx 'int'
| |-ParmVarDecl 0x7faa7a82f2f0 <col:13, col:17> col:17 used mx 'int'
| |-ParmVarDecl 0x7faa7a82f370 <col:21, col:25> col:25 used nz 'int'
| |-ParmVarDecl 0x7faa7a82f570 <col:29, col:44> col:36 used x 'double (*)[mx]':'double (*)[mx]'
| |-ParmVarDecl 0x7faa7a82f6f0 <col:47, col:58> col:54 used z 'double *':'double *'
| |-ParmVarDecl 0x7faa7a82f770 <line:14:5, col:9> col:9 used startx1 'int'
| |-ParmVarDecl 0x7faa7a82f7f0 <col:18, col:22> col:22 used stopx1 'int'
| |-ParmVarDecl 0x7faa7a82f870 <col:30, col:34> col:34 used stepx1 'int'
| |-ParmVarDecl 0x7faa7a82f8f0 <col:42, col:46> col:46 used startx2 'int'
| |-ParmVarDecl 0x7faa7a82f970 <col:55, col:59> col:59 used stopx2 'int'
| |-ParmVarDecl 0x7faa7a82f9f0 <col:67, col:71> col:71 used stepx2 'int'
| |-ParmVarDecl 0x7faa7a82fa70 <line:15:5, col:9> col:9 used startz 'int'
| |-ParmVarDecl 0x7faa7a82faf0 <col:17, col:21> col:21 stopz 'int'
| |-ParmVarDecl 0x7faa7a82fb70 <col:28, col:32> col:32 used stepz 'int'
| `-CompoundStmt 0x7faa7a832f08 <col:40, line:28:1>
|   |-DeclStmt 0x7faa7a832230 <line:17:5, col:27>
|   | |-VarDecl 0x7faa7a82ff88 <col:5, col:9> col:9 used ix 'int'
|   | |-VarDecl 0x7faa7a830008 <col:5, col:13> col:13 used jx 'int'
|   | |-VarDecl 0x7faa7a830088 <col:5, col:17> col:17 iy 'int'
|   | |-VarDecl 0x7faa7a830108 <col:5, col:21> col:21 jy 'int'
|   | `-VarDecl 0x7faa7a830188 <col:5, col:25> col:25 used iz 'int'
|   |-DeclStmt 0x7faa7a8322c8 <line:18:5, col:15>
|   | `-VarDecl 0x7faa7a832260 <col:5, col:12> col:12 used val 'double'
|   |-BinaryOperator 0x7faa7a832338 <line:19:5, col:10> 'int' '='
|   | |-DeclRefExpr 0x7faa7a8322e0 <col:5> 'int' lvalue Var 0x7faa7a830188 'iz' 'int'
|   | `-ImplicitCastExpr 0x7faa7a832320 <col:10> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7faa7a832300 <col:10> 'int' lvalue ParmVar 0x7faa7a82fa70 'startz' 'int'
|   `-ForStmt 0x7faa7a832ed0 <line:20:5, line:27:5>
|     |-BinaryOperator 0x7faa7a8323b0 <line:20:10, col:14> 'int' '='
|     | |-DeclRefExpr 0x7faa7a832358 <col:10> 'int' lvalue Var 0x7faa7a82ff88 'ix' 'int'
|     | `-ImplicitCastExpr 0x7faa7a832398 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7faa7a832378 <col:14> 'int' lvalue ParmVar 0x7faa7a82f770 'startx1' 'int'
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7faa7a832440 <col:23, col:26> 'int' '<'
|     | |-ImplicitCastExpr 0x7faa7a832410 <col:23> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7faa7a8323d0 <col:23> 'int' lvalue Var 0x7faa7a82ff88 'ix' 'int'
|     | `-ImplicitCastExpr 0x7faa7a832428 <col:26> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7faa7a8323f0 <col:26> 'int' lvalue ParmVar 0x7faa7a82f7f0 'stopx1' 'int'
|     |-CompoundAssignOperator 0x7faa7a8324b8 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     | |-DeclRefExpr 0x7faa7a832460 <col:34> 'int' lvalue Var 0x7faa7a82ff88 'ix' 'int'
|     | `-ImplicitCastExpr 0x7faa7a8324a0 <col:39> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7faa7a832480 <col:39> 'int' lvalue ParmVar 0x7faa7a82f870 'stepx1' 'int'
|     `-CompoundStmt 0x7faa7a832ea8 <col:48, line:27:5>
|       |-ForStmt 0x7faa7a832d00 <line:22:9, line:24:9>
|       | |-BinaryOperator 0x7faa7a832560 <line:22:14, col:18> 'int' '='
|       | | |-DeclRefExpr 0x7faa7a832508 <col:14> 'int' lvalue Var 0x7faa7a830008 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7faa7a832548 <col:18> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7faa7a832528 <col:18> 'int' lvalue ParmVar 0x7faa7a82f8f0 'startx2' 'int'
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x7faa7a8325f0 <col:27, col:30> 'int' '<'
|       | | |-ImplicitCastExpr 0x7faa7a8325c0 <col:27> 'int' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7faa7a832580 <col:27> 'int' lvalue Var 0x7faa7a830008 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7faa7a8325d8 <col:30> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7faa7a8325a0 <col:30> 'int' lvalue ParmVar 0x7faa7a82f970 'stopx2' 'int'
|       | |-CompoundAssignOperator 0x7faa7a832668 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|       | | |-DeclRefExpr 0x7faa7a832610 <col:38> 'int' lvalue Var 0x7faa7a830008 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7faa7a832650 <col:43> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7faa7a832630 <col:43> 'int' lvalue ParmVar 0x7faa7a82f9f0 'stepx2' 'int'
|       | `-CompoundStmt 0x7faa7a832ce8 <col:52, line:24:9>
|       |   `-BinaryOperator 0x7faa7a832cc8 <line:23:13, col:46> 'double' '='
|       |     |-DeclRefExpr 0x7faa7a832698 <col:13> 'double' lvalue Var 0x7faa7a832260 'val' 'double'
|       |     `-CallExpr 0x7faa7a832c80 <col:19, col:46> 'double'
|       |       |-ImplicitCastExpr 0x7faa7a832c68 <col:19> 'double (*)(double, double)' <FunctionToPointerDecay>
|       |       | `-DeclRefExpr 0x7faa7a8328c8 <col:19> 'double (double, double)' Function 0x7faa7a8326f8 'fmax' 'double (double, double)'
|       |       |-ImplicitCastExpr 0x7faa7a832cb0 <col:25> 'double' <LValueToRValue>
|       |       | `-DeclRefExpr 0x7faa7a8328e8 <col:25> 'double' lvalue Var 0x7faa7a832260 'val' 'double'
|       |       `-CallExpr 0x7faa7a832c00 <col:30, col:45> 'double'
|       |         |-ImplicitCastExpr 0x7faa7a832be8 <col:30> 'double (*)(double)' <FunctionToPointerDecay>
|       |         | `-DeclRefExpr 0x7faa7a832aa0 <col:30> 'double (double)' Function 0x7faa7a832940 'fabs' 'double (double)'
|       |         `-ImplicitCastExpr 0x7faa7a832c28 <col:36, col:44> 'double' <LValueToRValue>
|       |           `-ArraySubscriptExpr 0x7faa7a832ba0 <col:36, col:44> 'double' lvalue
|       |             |-ImplicitCastExpr 0x7faa7a832b70 <col:36, col:40> 'double *' <ArrayToPointerDecay>
|       |             | `-ArraySubscriptExpr 0x7faa7a832b30 <col:36, col:40> 'double [mx]' lvalue
|       |             |   |-ImplicitCastExpr 0x7faa7a832b00 <col:36> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
|       |             |   | `-DeclRefExpr 0x7faa7a832ac0 <col:36> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7faa7a82f570 'x' 'double (*)[mx]':'double (*)[mx]'
|       |             |   `-ImplicitCastExpr 0x7faa7a832b18 <col:38> 'int' <LValueToRValue>
|       |             |     `-DeclRefExpr 0x7faa7a832ae0 <col:38> 'int' lvalue Var 0x7faa7a82ff88 'ix' 'int'
|       |             `-ImplicitCastExpr 0x7faa7a832b88 <col:42> 'int' <LValueToRValue>
|       |               `-DeclRefExpr 0x7faa7a832b50 <col:42> 'int' lvalue Var 0x7faa7a830008 'jx' 'int'
|       |-BinaryOperator 0x7faa7a832e00 <line:25:9, col:17> 'double' '='
|       | |-ArraySubscriptExpr 0x7faa7a832da8 <col:9, col:13> 'double' lvalue
|       | | |-ImplicitCastExpr 0x7faa7a832d78 <col:9> 'double *':'double *' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7faa7a832d38 <col:9> 'double *':'double *' lvalue ParmVar 0x7faa7a82f6f0 'z' 'double *':'double *'
|       | | `-ImplicitCastExpr 0x7faa7a832d90 <col:11> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7faa7a832d58 <col:11> 'int' lvalue Var 0x7faa7a830188 'iz' 'int'
|       | `-ImplicitCastExpr 0x7faa7a832de8 <col:17> 'double' <LValueToRValue>
|       |   `-DeclRefExpr 0x7faa7a832dc8 <col:17> 'double' lvalue Var 0x7faa7a832260 'val' 'double'
|       `-CompoundAssignOperator 0x7faa7a832e78 <line:26:9, col:15> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|         |-DeclRefExpr 0x7faa7a832e20 <col:9> 'int' lvalue Var 0x7faa7a830188 'iz' 'int'
|         `-ImplicitCastExpr 0x7faa7a832e60 <col:15> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x7faa7a832e40 <col:15> 'int' lvalue ParmVar 0x7faa7a82fb70 'stepz' 'int'
|-FunctionDecl 0x7faa7a8326f8 <line:23:19> col:19 implicit used fmax 'double (double, double)' extern
| |-ParmVarDecl 0x7faa7a832798 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x7faa7a832800 <<invalid sloc>> <invalid sloc> 'double'
| |-NoThrowAttr 0x7faa7a832878 <col:19> Implicit
| `-ConstAttr 0x7faa7a8328b8 <col:19> Implicit
`-FunctionDecl 0x7faa7a832940 <col:30> col:30 implicit used fabs 'double (double)' extern
  |-ParmVarDecl 0x7faa7a8329e0 <<invalid sloc>> <invalid sloc> 'double'
  |-NoThrowAttr 0x7faa7a832a50 <col:30> Implicit
  `-ConstAttr 0x7faa7a832a90 <col:30> Implicit
