TranslationUnitDecl 0x7ff6e2038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7ff6e20394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7ff6e20391a0 '__int128'
|-TypedefDecl 0x7ff6e2039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7ff6e20391c0 'unsigned __int128'
|-TypedefDecl 0x7ff6e20397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7ff6e20395f0 'struct __NSConstantString_tag'
|   `-Record 0x7ff6e2039568 '__NSConstantString_tag'
|-TypedefDecl 0x7ff6e2039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7ff6e2039850 'char *'
|   `-BuiltinType 0x7ff6e2038ca0 'char'
|-TypedefDecl 0x7ff6e2039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7ff6e2039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7ff6e2039970 'struct __va_list_tag'
|     `-Record 0x7ff6e20398e8 '__va_list_tag'
|-TypedefDecl 0x7ff6e282f200 <./tree_src/extendSectMatrix_SubSectScaMat.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7ff6e2038d60 'unsigned char'
`-FunctionDecl 0x7ff6e2831200 <line:5:1, line:21:1> line:5:6 SubSectScaMat 'void (int, int, int, int, double, double (*)[my], double (*)[mz], int, int, int, int, int, int, int, int, int, int, int, int)'
  |-ParmVarDecl 0x7ff6e282f270 <line:6:5, col:9> col:9 used ny 'int'
  |-ParmVarDecl 0x7ff6e282f2f0 <col:13, col:17> col:17 used my 'int'
  |-ParmVarDecl 0x7ff6e282f370 <col:21, col:25> col:25 used nz 'int'
  |-ParmVarDecl 0x7ff6e282f3f0 <col:29, col:33> col:33 used mz 'int'
  |-ParmVarDecl 0x7ff6e282f470 <line:7:5, col:12> col:12 used x 'double'
  |-ParmVarDecl 0x7ff6e282f670 <col:15, col:30> col:22 used y 'double (*)[my]':'double (*)[my]'
  |-ParmVarDecl 0x7ff6e282f870 <col:33, col:48> col:40 used z 'double (*)[mz]':'double (*)[mz]'
  |-ParmVarDecl 0x7ff6e282f8f0 <line:8:5, col:9> col:9 used starty1 'int'
  |-ParmVarDecl 0x7ff6e282f970 <col:18, col:22> col:22 used stopy1 'int'
  |-ParmVarDecl 0x7ff6e282f9f0 <col:30, col:34> col:34 used stepy1 'int'
  |-ParmVarDecl 0x7ff6e282fa70 <col:42, col:46> col:46 used starty2 'int'
  |-ParmVarDecl 0x7ff6e282faf0 <col:55, col:59> col:59 used stopy2 'int'
  |-ParmVarDecl 0x7ff6e282fb70 <col:67, col:71> col:71 used stepy2 'int'
  |-ParmVarDecl 0x7ff6e282fbf0 <line:9:5, col:9> col:9 used startz1 'int'
  |-ParmVarDecl 0x7ff6e282fc70 <col:18, col:22> col:22 stopz1 'int'
  |-ParmVarDecl 0x7ff6e282fcf0 <col:30, col:34> col:34 used stepz1 'int'
  |-ParmVarDecl 0x7ff6e282fd70 <col:42, col:46> col:46 used startz2 'int'
  |-ParmVarDecl 0x7ff6e282fdf0 <col:55, col:59> col:59 stopz2 'int'
  |-ParmVarDecl 0x7ff6e282fe70 <col:67, col:71> col:71 used stepz2 'int'
  `-CompoundStmt 0x7ff6e2831ee0 <col:80, line:21:1>
    |-DeclStmt 0x7ff6e28315a8 <line:11:5, col:23>
    | |-VarDecl 0x7ff6e2831398 <col:5, col:9> col:9 used iy 'int'
    | |-VarDecl 0x7ff6e2831418 <col:5, col:13> col:13 used jy 'int'
    | |-VarDecl 0x7ff6e2831498 <col:5, col:17> col:17 used iz 'int'
    | `-VarDecl 0x7ff6e2831518 <col:5, col:21> col:21 used jz 'int'
    |-BinaryOperator 0x7ff6e2831618 <line:12:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7ff6e28315c0 <col:5> 'int' lvalue Var 0x7ff6e2831498 'iz' 'int'
    | `-ImplicitCastExpr 0x7ff6e2831600 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7ff6e28315e0 <col:10> 'int' lvalue ParmVar 0x7ff6e282fbf0 'startz1' 'int'
    `-ForStmt 0x7ff6e2831ea8 <line:13:5, line:20:5>
      |-BinaryOperator 0x7ff6e2831690 <line:13:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7ff6e2831638 <col:10> 'int' lvalue Var 0x7ff6e2831398 'iy' 'int'
      | `-ImplicitCastExpr 0x7ff6e2831678 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7ff6e2831658 <col:14> 'int' lvalue ParmVar 0x7ff6e282f8f0 'starty1' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7ff6e2831720 <col:23, col:26> 'int' '<'
      | |-ImplicitCastExpr 0x7ff6e28316f0 <col:23> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7ff6e28316b0 <col:23> 'int' lvalue Var 0x7ff6e2831398 'iy' 'int'
      | `-ImplicitCastExpr 0x7ff6e2831708 <col:26> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7ff6e28316d0 <col:26> 'int' lvalue ParmVar 0x7ff6e282f970 'stopy1' 'int'
      |-CompoundAssignOperator 0x7ff6e2831798 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7ff6e2831740 <col:34> 'int' lvalue Var 0x7ff6e2831398 'iy' 'int'
      | `-ImplicitCastExpr 0x7ff6e2831780 <col:39> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7ff6e2831760 <col:39> 'int' lvalue ParmVar 0x7ff6e282f9f0 'stepy1' 'int'
      `-CompoundStmt 0x7ff6e2831e80 <col:48, line:20:5>
        |-BinaryOperator 0x7ff6e2831820 <line:14:9, col:14> 'int' '='
        | |-DeclRefExpr 0x7ff6e28317c8 <col:9> 'int' lvalue Var 0x7ff6e2831518 'jz' 'int'
        | `-ImplicitCastExpr 0x7ff6e2831808 <col:14> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x7ff6e28317e8 <col:14> 'int' lvalue ParmVar 0x7ff6e282fd70 'startz2' 'int'
        |-ForStmt 0x7ff6e2831d78 <line:15:9, line:18:9>
        | |-BinaryOperator 0x7ff6e2831898 <line:15:14, col:18> 'int' '='
        | | |-DeclRefExpr 0x7ff6e2831840 <col:14> 'int' lvalue Var 0x7ff6e2831418 'jy' 'int'
        | | `-ImplicitCastExpr 0x7ff6e2831880 <col:18> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7ff6e2831860 <col:18> 'int' lvalue ParmVar 0x7ff6e282fa70 'starty2' 'int'
        | |-<<<NULL>>>
        | |-BinaryOperator 0x7ff6e2831928 <col:27, col:30> 'int' '<'
        | | |-ImplicitCastExpr 0x7ff6e28318f8 <col:27> 'int' <LValueToRValue>
        | | | `-DeclRefExpr 0x7ff6e28318b8 <col:27> 'int' lvalue Var 0x7ff6e2831418 'jy' 'int'
        | | `-ImplicitCastExpr 0x7ff6e2831910 <col:30> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7ff6e28318d8 <col:30> 'int' lvalue ParmVar 0x7ff6e282faf0 'stopy2' 'int'
        | |-CompoundAssignOperator 0x7ff6e28319a0 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
        | | |-DeclRefExpr 0x7ff6e2831948 <col:38> 'int' lvalue Var 0x7ff6e2831418 'jy' 'int'
        | | `-ImplicitCastExpr 0x7ff6e2831988 <col:43> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7ff6e2831968 <col:43> 'int' lvalue ParmVar 0x7ff6e282fb70 'stepy2' 'int'
        | `-CompoundStmt 0x7ff6e2831d58 <col:52, line:18:9>
        |   |-BinaryOperator 0x7ff6e2831c68 <line:16:6, col:30> 'double' '='
        |   | |-ArraySubscriptExpr 0x7ff6e2831ad8 <col:6, col:14> 'double' lvalue
        |   | | |-ImplicitCastExpr 0x7ff6e2831aa8 <col:6, col:10> 'double *' <ArrayToPointerDecay>
        |   | | | `-ArraySubscriptExpr 0x7ff6e2831a40 <col:6, col:10> 'double [mz]' lvalue
        |   | | |   |-ImplicitCastExpr 0x7ff6e2831a10 <col:6> 'double (*)[mz]':'double (*)[mz]' <LValueToRValue>
        |   | | |   | `-DeclRefExpr 0x7ff6e28319d0 <col:6> 'double (*)[mz]':'double (*)[mz]' lvalue ParmVar 0x7ff6e282f870 'z' 'double (*)[mz]':'double (*)[mz]'
        |   | | |   `-ImplicitCastExpr 0x7ff6e2831a28 <col:8> 'int' <LValueToRValue>
        |   | | |     `-DeclRefExpr 0x7ff6e28319f0 <col:8> 'int' lvalue Var 0x7ff6e2831498 'iz' 'int'
        |   | | `-ImplicitCastExpr 0x7ff6e2831ac0 <col:12> 'int' <LValueToRValue>
        |   | |   `-DeclRefExpr 0x7ff6e2831a60 <col:12> 'int' lvalue Var 0x7ff6e2831518 'jz' 'int'
        |   | `-BinaryOperator 0x7ff6e2831c48 <col:18, col:30> 'double' '-'
        |   |   |-ImplicitCastExpr 0x7ff6e2831c18 <col:18> 'double' <LValueToRValue>
        |   |   | `-DeclRefExpr 0x7ff6e2831af8 <col:18> 'double' lvalue ParmVar 0x7ff6e282f470 'x' 'double'
        |   |   `-ImplicitCastExpr 0x7ff6e2831c30 <col:22, col:30> 'double' <LValueToRValue>
        |   |     `-ArraySubscriptExpr 0x7ff6e2831bf8 <col:22, col:30> 'double' lvalue
        |   |       |-ImplicitCastExpr 0x7ff6e2831bc8 <col:22, col:26> 'double *' <ArrayToPointerDecay>
        |   |       | `-ArraySubscriptExpr 0x7ff6e2831b88 <col:22, col:26> 'double [my]' lvalue
        |   |       |   |-ImplicitCastExpr 0x7ff6e2831b58 <col:22> 'double (*)[my]':'double (*)[my]' <LValueToRValue>
        |   |       |   | `-DeclRefExpr 0x7ff6e2831b18 <col:22> 'double (*)[my]':'double (*)[my]' lvalue ParmVar 0x7ff6e282f670 'y' 'double (*)[my]':'double (*)[my]'
        |   |       |   `-ImplicitCastExpr 0x7ff6e2831b70 <col:24> 'int' <LValueToRValue>
        |   |       |     `-DeclRefExpr 0x7ff6e2831b38 <col:24> 'int' lvalue Var 0x7ff6e2831398 'iy' 'int'
        |   |       `-ImplicitCastExpr 0x7ff6e2831be0 <col:28> 'int' <LValueToRValue>
        |   |         `-DeclRefExpr 0x7ff6e2831ba8 <col:28> 'int' lvalue Var 0x7ff6e2831418 'jy' 'int'
        |   `-BinaryOperator 0x7ff6e2831d38 <line:17:6, col:16> 'int' '='
        |     |-DeclRefExpr 0x7ff6e2831c88 <col:6> 'int' lvalue Var 0x7ff6e2831518 'jz' 'int'
        |     `-BinaryOperator 0x7ff6e2831d18 <col:11, col:16> 'int' '+'
        |       |-ImplicitCastExpr 0x7ff6e2831ce8 <col:11> 'int' <LValueToRValue>
        |       | `-DeclRefExpr 0x7ff6e2831ca8 <col:11> 'int' lvalue Var 0x7ff6e2831518 'jz' 'int'
        |       `-ImplicitCastExpr 0x7ff6e2831d00 <col:16> 'int' <LValueToRValue>
        |         `-DeclRefExpr 0x7ff6e2831cc8 <col:16> 'int' lvalue ParmVar 0x7ff6e282fe70 'stepz2' 'int'
        `-BinaryOperator 0x7ff6e2831e60 <line:19:9, col:19> 'int' '='
          |-DeclRefExpr 0x7ff6e2831db0 <col:9> 'int' lvalue Var 0x7ff6e2831498 'iz' 'int'
          `-BinaryOperator 0x7ff6e2831e40 <col:14, col:19> 'int' '+'
            |-ImplicitCastExpr 0x7ff6e2831e10 <col:14> 'int' <LValueToRValue>
            | `-DeclRefExpr 0x7ff6e2831dd0 <col:14> 'int' lvalue Var 0x7ff6e2831498 'iz' 'int'
            `-ImplicitCastExpr 0x7ff6e2831e28 <col:19> 'int' <LValueToRValue>
              `-DeclRefExpr 0x7ff6e2831df0 <col:19> 'int' lvalue ParmVar 0x7ff6e282fcf0 'stepz1' 'int'
