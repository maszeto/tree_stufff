TranslationUnitDecl 0x7f877c038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f877c0394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f877c0391a0 '__int128'
|-TypedefDecl 0x7f877c039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f877c0391c0 'unsigned __int128'
|-TypedefDecl 0x7f877c0397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f877c0395f0 'struct __NSConstantString_tag'
|   `-Record 0x7f877c039568 '__NSConstantString_tag'
|-TypedefDecl 0x7f877c039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f877c039850 'char *'
|   `-BuiltinType 0x7f877c038ca0 'char'
|-TypedefDecl 0x7f877c039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f877c039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f877c039970 'struct __va_list_tag'
|     `-Record 0x7f877c0398e8 '__va_list_tag'
`-FunctionDecl 0x7f877c824538 <./tree_src/binaryWholeMatrix_DotAddOneMatColRow.c:4:1, line:13:1> line:4:6 DotAddOneMatColRow 'void (int, int, int, double (*)[m], double (*)[p], double *, int, int)'
  |-ParmVarDecl 0x7f877c823c00 <line:5:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7f877c823c80 <col:12, col:16> col:16 used m 'int'
  |-ParmVarDecl 0x7f877c823d00 <col:19, col:23> col:23 used p 'int'
  |-ParmVarDecl 0x7f877c823f00 <col:26, col:39> col:33 used x 'double (*)[m]':'double (*)[m]'
  |-ParmVarDecl 0x7f877c824100 <col:42, col:55> col:49 used y 'double (*)[p]':'double (*)[p]'
  |-ParmVarDecl 0x7f877c8241b0 <col:58, col:66> col:66 used z 'double *'
  |-ParmVarDecl 0x7f877c824230 <col:69, col:73> col:73 used k 'int'
  |-ParmVarDecl 0x7f877c8242b0 <col:76, col:80> col:80 used l 'int'
  `-CompoundStmt 0x7f877c8262a8 <line:6:2, line:13:1>
    |-DeclStmt 0x7f877c8246e0 <line:7:5, col:10>
    | `-VarDecl 0x7f877c824678 <col:5, col:9> col:9 used i 'int'
    |-DeclStmt 0x7f877c824778 <line:8:5, col:20>
    | `-VarDecl 0x7f877c824710 <col:5, col:12> col:12 used t 'double'
    |-ForStmt 0x7f877c824bb8 <line:9:5, line:11:5>
    | |-BinaryOperator 0x7f877c8247d0 <line:9:10, col:13> 'int' '='
    | | |-DeclRefExpr 0x7f877c824790 <col:10> 'int' lvalue Var 0x7f877c824678 'i' 'int'
    | | `-IntegerLiteral 0x7f877c8247b0 <col:13> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x7f877c824860 <col:16, col:18> 'int' '<'
    | | |-ImplicitCastExpr 0x7f877c824830 <col:16> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x7f877c8247f0 <col:16> 'int' lvalue Var 0x7f877c824678 'i' 'int'
    | | `-ImplicitCastExpr 0x7f877c824848 <col:18> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x7f877c824810 <col:18> 'int' lvalue ParmVar 0x7f877c823c00 'n' 'int'
    | |-UnaryOperator 0x7f877c8248a0 <col:21, col:22> 'int' postfix '++'
    | | `-DeclRefExpr 0x7f877c824880 <col:21> 'int' lvalue Var 0x7f877c824678 'i' 'int'
    | `-CompoundStmt 0x7f877c824ba0 <col:27, line:11:5>
    |   `-BinaryOperator 0x7f877c824b80 <line:10:9, col:33> 'double' '='
    |     |-DeclRefExpr 0x7f877c8248b8 <col:9> 'double' lvalue Var 0x7f877c824710 't' 'double'
    |     `-BinaryOperator 0x7f877c824b60 <col:13, col:33> 'double' '+'
    |       |-ImplicitCastExpr 0x7f877c824b48 <col:13> 'double' <LValueToRValue>
    |       | `-DeclRefExpr 0x7f877c8248d8 <col:13> 'double' lvalue Var 0x7f877c824710 't' 'double'
    |       `-BinaryOperator 0x7f877c824b28 <col:17, col:33> 'double' '*'
    |         |-ImplicitCastExpr 0x7f877c824af8 <col:17, col:23> 'double' <LValueToRValue>
    |         | `-ArraySubscriptExpr 0x7f877c8249d8 <col:17, col:23> 'double' lvalue
    |         |   |-ImplicitCastExpr 0x7f877c8249a8 <col:17, col:20> 'double *' <ArrayToPointerDecay>
    |         |   | `-ArraySubscriptExpr 0x7f877c824968 <col:17, col:20> 'double [m]' lvalue
    |         |   |   |-ImplicitCastExpr 0x7f877c824938 <col:17> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
    |         |   |   | `-DeclRefExpr 0x7f877c8248f8 <col:17> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f877c823f00 'x' 'double (*)[m]':'double (*)[m]'
    |         |   |   `-ImplicitCastExpr 0x7f877c824950 <col:19> 'int' <LValueToRValue>
    |         |   |     `-DeclRefExpr 0x7f877c824918 <col:19> 'int' lvalue Var 0x7f877c824678 'i' 'int'
    |         |   `-ImplicitCastExpr 0x7f877c8249c0 <col:22> 'int' <LValueToRValue>
    |         |     `-DeclRefExpr 0x7f877c824988 <col:22> 'int' lvalue ParmVar 0x7f877c824230 'k' 'int'
    |         `-ImplicitCastExpr 0x7f877c824b10 <col:27, col:33> 'double' <LValueToRValue>
    |           `-ArraySubscriptExpr 0x7f877c824ad8 <col:27, col:33> 'double' lvalue
    |             |-ImplicitCastExpr 0x7f877c824aa8 <col:27, col:30> 'double *' <ArrayToPointerDecay>
    |             | `-ArraySubscriptExpr 0x7f877c824a68 <col:27, col:30> 'double [p]' lvalue
    |             |   |-ImplicitCastExpr 0x7f877c824a38 <col:27> 'double (*)[p]':'double (*)[p]' <LValueToRValue>
    |             |   | `-DeclRefExpr 0x7f877c8249f8 <col:27> 'double (*)[p]':'double (*)[p]' lvalue ParmVar 0x7f877c824100 'y' 'double (*)[p]':'double (*)[p]'
    |             |   `-ImplicitCastExpr 0x7f877c824a50 <col:29> 'int' <LValueToRValue>
    |             |     `-DeclRefExpr 0x7f877c824a18 <col:29> 'int' lvalue ParmVar 0x7f877c8242b0 'l' 'int'
    |             `-ImplicitCastExpr 0x7f877c824ac0 <col:32> 'int' <LValueToRValue>
    |               `-DeclRefExpr 0x7f877c824a88 <col:32> 'int' lvalue Var 0x7f877c824678 'i' 'int'
    `-BinaryOperator 0x7f877c826288 <line:12:5, col:10> 'double' '='
      |-UnaryOperator 0x7f877c826238 <col:5, col:6> 'double' lvalue prefix '*' cannot overflow
      | `-ImplicitCastExpr 0x7f877c826220 <col:6> 'double *' <LValueToRValue>
      |   `-DeclRefExpr 0x7f877c826200 <col:6> 'double *' lvalue ParmVar 0x7f877c8241b0 'z' 'double *'
      `-ImplicitCastExpr 0x7f877c826270 <col:10> 'double' <LValueToRValue>
        `-DeclRefExpr 0x7f877c826250 <col:10> 'double' lvalue Var 0x7f877c824710 't' 'double'
