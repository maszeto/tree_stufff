TranslationUnitDecl 0x7f871302fe08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f87130306a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f87130303a0 '__int128'
|-TypedefDecl 0x7f8713030710 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f87130303c0 'unsigned __int128'
|-TypedefDecl 0x7f87130309f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f87130307f0 'struct __NSConstantString_tag'
|   `-Record 0x7f8713030768 '__NSConstantString_tag'
|-TypedefDecl 0x7f8713030a90 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f8713030a50 'char *'
|   `-BuiltinType 0x7f871302fea0 'char'
|-TypedefDecl 0x7f8713030d68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f8713030d10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f8713030b70 'struct __va_list_tag'
|     `-Record 0x7f8713030ae8 '__va_list_tag'
|-TypedefDecl 0x7f8713088800 <./tree_src/dyadicOneMatrix_AddOneScaMatRow.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7f871302ff60 'unsigned char'
`-FunctionDecl 0x7f8713089048 <line:5:1, line:12:1> line:5:6 AddOneScaMatRow 'void (int, int, int, double, double (*)[m], double (*)[m])'
  |-ParmVarDecl 0x7f8713088870 <line:6:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7f87130888f0 <col:12, col:16> col:16 used m 'int'
  |-ParmVarDecl 0x7f8713088970 <col:19, col:23> col:23 used p 'int'
  |-ParmVarDecl 0x7f87130889f0 <col:26, col:33> col:33 used x 'double'
  |-ParmVarDecl 0x7f8713088bf0 <col:36, col:49> col:43 used y 'double (*)[m]':'double (*)[m]'
  |-ParmVarDecl 0x7f8713088df0 <col:52, col:65> col:59 used z 'double (*)[m]':'double (*)[m]'
  `-CompoundStmt 0x7f87130896c8 <col:69, line:12:1>
    |-DeclStmt 0x7f8713089278 <line:8:5, col:13>
    | |-VarDecl 0x7f8713089178 <col:5, col:9> col:9 i 'int'
    | `-VarDecl 0x7f87130891f8 <col:5, col:12> col:12 used j 'int'
    `-ForStmt 0x7f8713089690 <line:9:5, line:11:5>
      |-BinaryOperator 0x7f87130892d0 <line:9:10, col:13> 'int' '='
      | |-DeclRefExpr 0x7f8713089290 <col:10> 'int' lvalue Var 0x7f87130891f8 'j' 'int'
      | `-IntegerLiteral 0x7f87130892b0 <col:13> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x7f8713089360 <col:16, col:18> 'int' '<'
      | |-ImplicitCastExpr 0x7f8713089330 <col:16> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7f87130892f0 <col:16> 'int' lvalue Var 0x7f87130891f8 'j' 'int'
      | `-ImplicitCastExpr 0x7f8713089348 <col:18> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f8713089310 <col:18> 'int' lvalue ParmVar 0x7f87130888f0 'm' 'int'
      |-UnaryOperator 0x7f87130893a0 <col:21, col:22> 'int' postfix '++'
      | `-DeclRefExpr 0x7f8713089380 <col:21> 'int' lvalue Var 0x7f87130891f8 'j' 'int'
      `-CompoundStmt 0x7f8713089678 <col:27, line:11:5>
        `-BinaryOperator 0x7f8713089658 <line:10:9, col:29> 'double' '='
          |-ArraySubscriptExpr 0x7f87130894c8 <col:9, col:15> 'double' lvalue
          | |-ImplicitCastExpr 0x7f8713089498 <col:9, col:12> 'double *' <ArrayToPointerDecay>
          | | `-ArraySubscriptExpr 0x7f8713089428 <col:9, col:12> 'double [m]' lvalue
          | |   |-ImplicitCastExpr 0x7f87130893f8 <col:9> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
          | |   | `-DeclRefExpr 0x7f87130893b8 <col:9> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f8713088df0 'z' 'double (*)[m]':'double (*)[m]'
          | |   `-ImplicitCastExpr 0x7f8713089410 <col:11> 'int' <LValueToRValue>
          | |     `-DeclRefExpr 0x7f87130893d8 <col:11> 'int' lvalue ParmVar 0x7f8713088970 'p' 'int'
          | `-ImplicitCastExpr 0x7f87130894b0 <col:14> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x7f8713089448 <col:14> 'int' lvalue Var 0x7f87130891f8 'j' 'int'
          `-BinaryOperator 0x7f8713089638 <col:19, col:29> 'double' '+'
            |-ImplicitCastExpr 0x7f8713089608 <col:19> 'double' <LValueToRValue>
            | `-DeclRefExpr 0x7f87130894e8 <col:19> 'double' lvalue ParmVar 0x7f87130889f0 'x' 'double'
            `-ImplicitCastExpr 0x7f8713089620 <col:23, col:29> 'double' <LValueToRValue>
              `-ArraySubscriptExpr 0x7f87130895e8 <col:23, col:29> 'double' lvalue
                |-ImplicitCastExpr 0x7f87130895b8 <col:23, col:26> 'double *' <ArrayToPointerDecay>
                | `-ArraySubscriptExpr 0x7f8713089578 <col:23, col:26> 'double [m]' lvalue
                |   |-ImplicitCastExpr 0x7f8713089548 <col:23> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
                |   | `-DeclRefExpr 0x7f8713089508 <col:23> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f8713088bf0 'y' 'double (*)[m]':'double (*)[m]'
                |   `-ImplicitCastExpr 0x7f8713089560 <col:25> 'int' <LValueToRValue>
                |     `-DeclRefExpr 0x7f8713089528 <col:25> 'int' lvalue ParmVar 0x7f8713088970 'p' 'int'
                `-ImplicitCastExpr 0x7f87130895d0 <col:28> 'int' <LValueToRValue>
                  `-DeclRefExpr 0x7f8713089598 <col:28> 'int' lvalue Var 0x7f87130891f8 'j' 'int'
