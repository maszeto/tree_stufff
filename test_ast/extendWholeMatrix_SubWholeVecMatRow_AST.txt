TranslationUnitDecl 0x7fb3cd038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fb3cd0394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fb3cd0391a0 '__int128'
|-TypedefDecl 0x7fb3cd039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fb3cd0391c0 'unsigned __int128'
|-TypedefDecl 0x7fb3cd0397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fb3cd0395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fb3cd039568 '__NSConstantString_tag'
|-TypedefDecl 0x7fb3cd039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fb3cd039850 'char *'
|   `-BuiltinType 0x7fb3cd038ca0 'char'
|-TypedefDecl 0x7fb3cd039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fb3cd039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fb3cd039970 'struct __va_list_tag'
|     `-Record 0x7fb3cd0398e8 '__va_list_tag'
|-TypedefDecl 0x7fb3cd091600 <./tree_src/extendWholeMatrix_SubWholeVecMatRow.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fb3cd038d60 'unsigned char'
`-FunctionDecl 0x7fb3cd091ea8 <line:6:1, line:15:1> line:6:6 SubWholeVecMatRow 'void (int, int, double *, double (*)[m], double (*)[m])'
  |-ParmVarDecl 0x7fb3cd091670 <line:7:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7fb3cd0916f0 <col:12, col:16> col:16 used m 'int'
  |-ParmVarDecl 0x7fb3cd091870 <col:19, col:29> col:26 used x 'double *':'double *'
  |-ParmVarDecl 0x7fb3cd091a70 <col:32, col:45> col:39 used y 'double (*)[m]':'double (*)[m]'
  |-ParmVarDecl 0x7fb3cd091c70 <col:48, col:61> col:55 used z 'double (*)[m]':'double (*)[m]'
  `-CompoundStmt 0x7fb3cd0936e0 <col:65, line:15:1>
    |-DeclStmt 0x7fb3cd0920d0 <line:9:5, col:13>
    | |-VarDecl 0x7fb3cd091fd0 <col:5, col:9> col:9 used i 'int'
    | `-VarDecl 0x7fb3cd092050 <col:5, col:12> col:12 used j 'int'
    `-ForStmt 0x7fb3cd0936a8 <line:10:5, line:14:5>
      |-BinaryOperator 0x7fb3cd092128 <line:10:10, col:13> 'int' '='
      | |-DeclRefExpr 0x7fb3cd0920e8 <col:10> 'int' lvalue Var 0x7fb3cd091fd0 'i' 'int'
      | `-IntegerLiteral 0x7fb3cd092108 <col:13> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x7fb3cd0921b8 <col:16, col:18> 'int' '<'
      | |-ImplicitCastExpr 0x7fb3cd092188 <col:16> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fb3cd092148 <col:16> 'int' lvalue Var 0x7fb3cd091fd0 'i' 'int'
      | `-ImplicitCastExpr 0x7fb3cd0921a0 <col:18> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fb3cd092168 <col:18> 'int' lvalue ParmVar 0x7fb3cd091670 'n' 'int'
      |-UnaryOperator 0x7fb3cd0921f8 <col:21, col:22> 'int' postfix '++'
      | `-DeclRefExpr 0x7fb3cd0921d8 <col:21> 'int' lvalue Var 0x7fb3cd091fd0 'i' 'int'
      `-CompoundStmt 0x7fb3cd093690 <col:27, line:14:5>
        `-ForStmt 0x7fb3cd093658 <line:11:9, line:13:9>
          |-BinaryOperator 0x7fb3cd092250 <line:11:14, col:17> 'int' '='
          | |-DeclRefExpr 0x7fb3cd092210 <col:14> 'int' lvalue Var 0x7fb3cd092050 'j' 'int'
          | `-IntegerLiteral 0x7fb3cd092230 <col:17> 'int' 0
          |-<<<NULL>>>
          |-BinaryOperator 0x7fb3cd0922e0 <col:20, col:22> 'int' '<'
          | |-ImplicitCastExpr 0x7fb3cd0922b0 <col:20> 'int' <LValueToRValue>
          | | `-DeclRefExpr 0x7fb3cd092270 <col:20> 'int' lvalue Var 0x7fb3cd092050 'j' 'int'
          | `-ImplicitCastExpr 0x7fb3cd0922c8 <col:22> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x7fb3cd092290 <col:22> 'int' lvalue ParmVar 0x7fb3cd0916f0 'm' 'int'
          |-UnaryOperator 0x7fb3cd092320 <col:25, col:26> 'int' postfix '++'
          | `-DeclRefExpr 0x7fb3cd092300 <col:25> 'int' lvalue Var 0x7fb3cd092050 'j' 'int'
          `-CompoundStmt 0x7fb3cd093640 <col:31, line:13:9>
            `-BinaryOperator 0x7fb3cd093620 <line:12:6, col:29> 'double' '='
              |-ArraySubscriptExpr 0x7fb3cd092418 <col:6, col:12> 'double' lvalue
              | |-ImplicitCastExpr 0x7fb3cd0923e8 <col:6, col:9> 'double *' <ArrayToPointerDecay>
              | | `-ArraySubscriptExpr 0x7fb3cd0923a8 <col:6, col:9> 'double [m]' lvalue
              | |   |-ImplicitCastExpr 0x7fb3cd092378 <col:6> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
              | |   | `-DeclRefExpr 0x7fb3cd092338 <col:6> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fb3cd091c70 'z' 'double (*)[m]':'double (*)[m]'
              | |   `-ImplicitCastExpr 0x7fb3cd092390 <col:8> 'int' <LValueToRValue>
              | |     `-DeclRefExpr 0x7fb3cd092358 <col:8> 'int' lvalue Var 0x7fb3cd091fd0 'i' 'int'
              | `-ImplicitCastExpr 0x7fb3cd092400 <col:11> 'int' <LValueToRValue>
              |   `-DeclRefExpr 0x7fb3cd0923c8 <col:11> 'int' lvalue Var 0x7fb3cd092050 'j' 'int'
              `-BinaryOperator 0x7fb3cd093600 <col:16, col:29> 'double' '-'
                |-ImplicitCastExpr 0x7fb3cd0925c8 <col:16, col:19> 'double' <LValueToRValue>
                | `-ArraySubscriptExpr 0x7fb3cd0924a8 <col:16, col:19> 'double' lvalue
                |   |-ImplicitCastExpr 0x7fb3cd092478 <col:16> 'double *':'double *' <LValueToRValue>
                |   | `-DeclRefExpr 0x7fb3cd092438 <col:16> 'double *':'double *' lvalue ParmVar 0x7fb3cd091870 'x' 'double *':'double *'
                |   `-ImplicitCastExpr 0x7fb3cd092490 <col:18> 'int' <LValueToRValue>
                |     `-DeclRefExpr 0x7fb3cd092458 <col:18> 'int' lvalue Var 0x7fb3cd092050 'j' 'int'
                `-ImplicitCastExpr 0x7fb3cd0925e0 <col:23, col:29> 'double' <LValueToRValue>
                  `-ArraySubscriptExpr 0x7fb3cd0925a8 <col:23, col:29> 'double' lvalue
                    |-ImplicitCastExpr 0x7fb3cd092578 <col:23, col:26> 'double *' <ArrayToPointerDecay>
                    | `-ArraySubscriptExpr 0x7fb3cd092538 <col:23, col:26> 'double [m]' lvalue
                    |   |-ImplicitCastExpr 0x7fb3cd092508 <col:23> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
                    |   | `-DeclRefExpr 0x7fb3cd0924c8 <col:23> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fb3cd091a70 'y' 'double (*)[m]':'double (*)[m]'
                    |   `-ImplicitCastExpr 0x7fb3cd092520 <col:25> 'int' <LValueToRValue>
                    |     `-DeclRefExpr 0x7fb3cd0924e8 <col:25> 'int' lvalue Var 0x7fb3cd091fd0 'i' 'int'
                    `-ImplicitCastExpr 0x7fb3cd092590 <col:28> 'int' <LValueToRValue>
                      `-DeclRefExpr 0x7fb3cd092558 <col:28> 'int' lvalue Var 0x7fb3cd092050 'j' 'int'
