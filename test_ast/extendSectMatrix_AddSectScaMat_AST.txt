TranslationUnitDecl 0x7fb232838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fb2328394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fb2328391a0 '__int128'
|-TypedefDecl 0x7fb232839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fb2328391c0 'unsigned __int128'
|-TypedefDecl 0x7fb2328397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fb2328395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fb232839568 '__NSConstantString_tag'
|-TypedefDecl 0x7fb232839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fb232839850 'char *'
|   `-BuiltinType 0x7fb232838ca0 'char'
|-TypedefDecl 0x7fb232839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fb232839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fb232839970 'struct __va_list_tag'
|     `-Record 0x7fb2328398e8 '__va_list_tag'
|-TypedefDecl 0x7fb23302f200 <./tree_src/extendSectMatrix_AddSectScaMat.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fb232838d60 'unsigned char'
`-FunctionDecl 0x7fb233031200 <line:5:1, line:21:1> line:5:6 AddSectScaMat 'void (int, int, int, int, double, double (*)[my], double (*)[mz], int, int, int, int, int, int, int, int, int, int, int, int)'
  |-ParmVarDecl 0x7fb23302f270 <line:6:5, col:9> col:9 used ny 'int'
  |-ParmVarDecl 0x7fb23302f2f0 <col:13, col:17> col:17 used my 'int'
  |-ParmVarDecl 0x7fb23302f370 <col:21, col:25> col:25 used nz 'int'
  |-ParmVarDecl 0x7fb23302f3f0 <col:29, col:33> col:33 used mz 'int'
  |-ParmVarDecl 0x7fb23302f470 <line:7:5, col:12> col:12 used x 'double'
  |-ParmVarDecl 0x7fb23302f670 <col:15, col:30> col:22 used y 'double (*)[my]':'double (*)[my]'
  |-ParmVarDecl 0x7fb23302f870 <col:33, col:48> col:40 used z 'double (*)[mz]':'double (*)[mz]'
  |-ParmVarDecl 0x7fb23302f8f0 <line:8:5, col:9> col:9 used starty1 'int'
  |-ParmVarDecl 0x7fb23302f970 <col:18, col:22> col:22 used stopy1 'int'
  |-ParmVarDecl 0x7fb23302f9f0 <col:30, col:34> col:34 used stepy1 'int'
  |-ParmVarDecl 0x7fb23302fa70 <col:42, col:46> col:46 used starty2 'int'
  |-ParmVarDecl 0x7fb23302faf0 <col:55, col:59> col:59 used stopy2 'int'
  |-ParmVarDecl 0x7fb23302fb70 <col:67, col:71> col:71 used stepy2 'int'
  |-ParmVarDecl 0x7fb23302fbf0 <line:9:5, col:9> col:9 used startz1 'int'
  |-ParmVarDecl 0x7fb23302fc70 <col:18, col:22> col:22 stopz1 'int'
  |-ParmVarDecl 0x7fb23302fcf0 <col:30, col:34> col:34 used stepz1 'int'
  |-ParmVarDecl 0x7fb23302fd70 <col:42, col:46> col:46 used startz2 'int'
  |-ParmVarDecl 0x7fb23302fdf0 <col:55, col:59> col:59 stopz2 'int'
  |-ParmVarDecl 0x7fb23302fe70 <col:67, col:71> col:71 used stepz2 'int'
  `-CompoundStmt 0x7fb233031ee0 <col:79, line:21:1>
    |-DeclStmt 0x7fb2330315a8 <line:11:5, col:23>
    | |-VarDecl 0x7fb233031398 <col:5, col:9> col:9 used iy 'int'
    | |-VarDecl 0x7fb233031418 <col:5, col:13> col:13 used jy 'int'
    | |-VarDecl 0x7fb233031498 <col:5, col:17> col:17 used iz 'int'
    | `-VarDecl 0x7fb233031518 <col:5, col:21> col:21 used jz 'int'
    |-BinaryOperator 0x7fb233031618 <line:12:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7fb2330315c0 <col:5> 'int' lvalue Var 0x7fb233031498 'iz' 'int'
    | `-ImplicitCastExpr 0x7fb233031600 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7fb2330315e0 <col:10> 'int' lvalue ParmVar 0x7fb23302fbf0 'startz1' 'int'
    `-ForStmt 0x7fb233031ea8 <line:13:5, line:20:5>
      |-BinaryOperator 0x7fb233031690 <line:13:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7fb233031638 <col:10> 'int' lvalue Var 0x7fb233031398 'iy' 'int'
      | `-ImplicitCastExpr 0x7fb233031678 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fb233031658 <col:14> 'int' lvalue ParmVar 0x7fb23302f8f0 'starty1' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7fb233031720 <col:23, col:26> 'int' '<'
      | |-ImplicitCastExpr 0x7fb2330316f0 <col:23> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fb2330316b0 <col:23> 'int' lvalue Var 0x7fb233031398 'iy' 'int'
      | `-ImplicitCastExpr 0x7fb233031708 <col:26> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fb2330316d0 <col:26> 'int' lvalue ParmVar 0x7fb23302f970 'stopy1' 'int'
      |-CompoundAssignOperator 0x7fb233031798 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7fb233031740 <col:34> 'int' lvalue Var 0x7fb233031398 'iy' 'int'
      | `-ImplicitCastExpr 0x7fb233031780 <col:39> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fb233031760 <col:39> 'int' lvalue ParmVar 0x7fb23302f9f0 'stepy1' 'int'
      `-CompoundStmt 0x7fb233031e80 <col:48, line:20:5>
        |-BinaryOperator 0x7fb233031820 <line:14:9, col:14> 'int' '='
        | |-DeclRefExpr 0x7fb2330317c8 <col:9> 'int' lvalue Var 0x7fb233031518 'jz' 'int'
        | `-ImplicitCastExpr 0x7fb233031808 <col:14> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x7fb2330317e8 <col:14> 'int' lvalue ParmVar 0x7fb23302fd70 'startz2' 'int'
        |-ForStmt 0x7fb233031d78 <line:15:9, line:18:9>
        | |-BinaryOperator 0x7fb233031898 <line:15:14, col:18> 'int' '='
        | | |-DeclRefExpr 0x7fb233031840 <col:14> 'int' lvalue Var 0x7fb233031418 'jy' 'int'
        | | `-ImplicitCastExpr 0x7fb233031880 <col:18> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fb233031860 <col:18> 'int' lvalue ParmVar 0x7fb23302fa70 'starty2' 'int'
        | |-<<<NULL>>>
        | |-BinaryOperator 0x7fb233031928 <col:27, col:30> 'int' '<'
        | | |-ImplicitCastExpr 0x7fb2330318f8 <col:27> 'int' <LValueToRValue>
        | | | `-DeclRefExpr 0x7fb2330318b8 <col:27> 'int' lvalue Var 0x7fb233031418 'jy' 'int'
        | | `-ImplicitCastExpr 0x7fb233031910 <col:30> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fb2330318d8 <col:30> 'int' lvalue ParmVar 0x7fb23302faf0 'stopy2' 'int'
        | |-CompoundAssignOperator 0x7fb2330319a0 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
        | | |-DeclRefExpr 0x7fb233031948 <col:38> 'int' lvalue Var 0x7fb233031418 'jy' 'int'
        | | `-ImplicitCastExpr 0x7fb233031988 <col:43> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fb233031968 <col:43> 'int' lvalue ParmVar 0x7fb23302fb70 'stepy2' 'int'
        | `-CompoundStmt 0x7fb233031d58 <col:52, line:18:9>
        |   |-BinaryOperator 0x7fb233031c68 <line:16:6, col:30> 'double' '='
        |   | |-ArraySubscriptExpr 0x7fb233031ad8 <col:6, col:14> 'double' lvalue
        |   | | |-ImplicitCastExpr 0x7fb233031aa8 <col:6, col:10> 'double *' <ArrayToPointerDecay>
        |   | | | `-ArraySubscriptExpr 0x7fb233031a40 <col:6, col:10> 'double [mz]' lvalue
        |   | | |   |-ImplicitCastExpr 0x7fb233031a10 <col:6> 'double (*)[mz]':'double (*)[mz]' <LValueToRValue>
        |   | | |   | `-DeclRefExpr 0x7fb2330319d0 <col:6> 'double (*)[mz]':'double (*)[mz]' lvalue ParmVar 0x7fb23302f870 'z' 'double (*)[mz]':'double (*)[mz]'
        |   | | |   `-ImplicitCastExpr 0x7fb233031a28 <col:8> 'int' <LValueToRValue>
        |   | | |     `-DeclRefExpr 0x7fb2330319f0 <col:8> 'int' lvalue Var 0x7fb233031498 'iz' 'int'
        |   | | `-ImplicitCastExpr 0x7fb233031ac0 <col:12> 'int' <LValueToRValue>
        |   | |   `-DeclRefExpr 0x7fb233031a60 <col:12> 'int' lvalue Var 0x7fb233031518 'jz' 'int'
        |   | `-BinaryOperator 0x7fb233031c48 <col:18, col:30> 'double' '+'
        |   |   |-ImplicitCastExpr 0x7fb233031c18 <col:18> 'double' <LValueToRValue>
        |   |   | `-DeclRefExpr 0x7fb233031af8 <col:18> 'double' lvalue ParmVar 0x7fb23302f470 'x' 'double'
        |   |   `-ImplicitCastExpr 0x7fb233031c30 <col:22, col:30> 'double' <LValueToRValue>
        |   |     `-ArraySubscriptExpr 0x7fb233031bf8 <col:22, col:30> 'double' lvalue
        |   |       |-ImplicitCastExpr 0x7fb233031bc8 <col:22, col:26> 'double *' <ArrayToPointerDecay>
        |   |       | `-ArraySubscriptExpr 0x7fb233031b88 <col:22, col:26> 'double [my]' lvalue
        |   |       |   |-ImplicitCastExpr 0x7fb233031b58 <col:22> 'double (*)[my]':'double (*)[my]' <LValueToRValue>
        |   |       |   | `-DeclRefExpr 0x7fb233031b18 <col:22> 'double (*)[my]':'double (*)[my]' lvalue ParmVar 0x7fb23302f670 'y' 'double (*)[my]':'double (*)[my]'
        |   |       |   `-ImplicitCastExpr 0x7fb233031b70 <col:24> 'int' <LValueToRValue>
        |   |       |     `-DeclRefExpr 0x7fb233031b38 <col:24> 'int' lvalue Var 0x7fb233031398 'iy' 'int'
        |   |       `-ImplicitCastExpr 0x7fb233031be0 <col:28> 'int' <LValueToRValue>
        |   |         `-DeclRefExpr 0x7fb233031ba8 <col:28> 'int' lvalue Var 0x7fb233031418 'jy' 'int'
        |   `-BinaryOperator 0x7fb233031d38 <line:17:6, col:16> 'int' '='
        |     |-DeclRefExpr 0x7fb233031c88 <col:6> 'int' lvalue Var 0x7fb233031518 'jz' 'int'
        |     `-BinaryOperator 0x7fb233031d18 <col:11, col:16> 'int' '+'
        |       |-ImplicitCastExpr 0x7fb233031ce8 <col:11> 'int' <LValueToRValue>
        |       | `-DeclRefExpr 0x7fb233031ca8 <col:11> 'int' lvalue Var 0x7fb233031518 'jz' 'int'
        |       `-ImplicitCastExpr 0x7fb233031d00 <col:16> 'int' <LValueToRValue>
        |         `-DeclRefExpr 0x7fb233031cc8 <col:16> 'int' lvalue ParmVar 0x7fb23302fe70 'stepz2' 'int'
        `-BinaryOperator 0x7fb233031e60 <line:19:9, col:19> 'int' '='
          |-DeclRefExpr 0x7fb233031db0 <col:9> 'int' lvalue Var 0x7fb233031498 'iz' 'int'
          `-BinaryOperator 0x7fb233031e40 <col:14, col:19> 'int' '+'
            |-ImplicitCastExpr 0x7fb233031e10 <col:14> 'int' <LValueToRValue>
            | `-DeclRefExpr 0x7fb233031dd0 <col:14> 'int' lvalue Var 0x7fb233031498 'iz' 'int'
            `-ImplicitCastExpr 0x7fb233031e28 <col:19> 'int' <LValueToRValue>
              `-DeclRefExpr 0x7fb233031df0 <col:19> 'int' lvalue ParmVar 0x7fb23302fcf0 'stepz1' 'int'
