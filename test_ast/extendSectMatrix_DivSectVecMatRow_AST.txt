TranslationUnitDecl 0x7fa157831608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fa157831ea0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fa157831ba0 '__int128'
|-TypedefDecl 0x7fa157831f10 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fa157831bc0 'unsigned __int128'
|-TypedefDecl 0x7fa1578321f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fa157831ff0 'struct __NSConstantString_tag'
|   `-Record 0x7fa157831f68 '__NSConstantString_tag'
|-TypedefDecl 0x7fa157832290 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fa157832250 'char *'
|   `-BuiltinType 0x7fa1578316a0 'char'
|-TypedefDecl 0x7fa157832568 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fa157832510 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fa157832370 'struct __va_list_tag'
|     `-Record 0x7fa1578322e8 '__va_list_tag'
|-TypedefDecl 0x7fa157036200 <./tree_src/extendSectMatrix_DivSectVecMatRow.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fa157831760 'unsigned char'
`-FunctionDecl 0x7fa157038978 <line:6:1, line:25:1> line:6:6 DivSectVecMatRow 'void (int, int, int, int, int, double *, double (*)[my], double (*)[mz], int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)'
  |-ParmVarDecl 0x7fa157036270 <line:7:5, col:9> col:9 used nx 'int'
  |-ParmVarDecl 0x7fa1570362f0 <col:13, col:17> col:17 used ny 'int'
  |-ParmVarDecl 0x7fa157036370 <col:21, col:25> col:25 used my 'int'
  |-ParmVarDecl 0x7fa1570363f0 <col:29, col:33> col:33 used nz 'int'
  |-ParmVarDecl 0x7fa157036470 <col:37, col:41> col:41 used mz 'int'
  |-ParmVarDecl 0x7fa1570365f0 <line:8:5, col:16> col:12 used x 'double *':'double *'
  |-ParmVarDecl 0x7fa1570367f0 <col:19, col:34> col:26 used y 'double (*)[my]':'double (*)[my]'
  |-ParmVarDecl 0x7fa1570369f0 <col:37, col:52> col:44 used z 'double (*)[mz]':'double (*)[mz]'
  |-ParmVarDecl 0x7fa157036a70 <line:9:5, col:9> col:9 used startx 'int'
  |-ParmVarDecl 0x7fa157036af0 <col:17, col:21> col:21 stopx 'int'
  |-ParmVarDecl 0x7fa157036b70 <col:28, col:32> col:32 used stepx 'int'
  |-ParmVarDecl 0x7fa157036bf0 <line:10:5, col:9> col:9 used starty1 'int'
  |-ParmVarDecl 0x7fa157036c70 <col:18, col:22> col:22 used stopy1 'int'
  |-ParmVarDecl 0x7fa157036cf0 <col:30, col:34> col:34 used stepy1 'int'
  |-ParmVarDecl 0x7fa157036d70 <col:42, col:46> col:46 used starty2 'int'
  |-ParmVarDecl 0x7fa157036df0 <col:55, col:59> col:59 used stopy2 'int'
  |-ParmVarDecl 0x7fa157036e70 <col:67, col:71> col:71 used stepy2 'int'
  |-ParmVarDecl 0x7fa157036ef0 <line:11:5, col:9> col:9 used startz1 'int'
  |-ParmVarDecl 0x7fa157036f70 <col:18, col:22> col:22 stopz1 'int'
  |-ParmVarDecl 0x7fa157036ff0 <col:30, col:34> col:34 used stepz1 'int'
  |-ParmVarDecl 0x7fa157037070 <col:42, col:46> col:46 used startz2 'int'
  |-ParmVarDecl 0x7fa1570370f0 <col:55, col:59> col:59 stopz2 'int'
  |-ParmVarDecl 0x7fa157037170 <col:67, col:71> col:71 used stepz2 'int'
  `-CompoundStmt 0x7fa157039938 <col:80, line:25:1>
    |-DeclStmt 0x7fa157038e50 <line:13:5, col:31>
    | |-VarDecl 0x7fa157038b30 <col:5, col:9> col:9 ix 'int'
    | |-VarDecl 0x7fa157038bb0 <col:5, col:13> col:13 used jx 'int'
    | |-VarDecl 0x7fa157038c30 <col:5, col:17> col:17 used iy 'int'
    | |-VarDecl 0x7fa157038cb0 <col:5, col:21> col:21 used jy 'int'
    | |-VarDecl 0x7fa157038d30 <col:5, col:25> col:25 used iz 'int'
    | `-VarDecl 0x7fa157038db0 <col:5, col:29> col:29 used jz 'int'
    |-BinaryOperator 0x7fa157038ec0 <line:14:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7fa157038e68 <col:5> 'int' lvalue Var 0x7fa157038d30 'iz' 'int'
    | `-ImplicitCastExpr 0x7fa157038ea8 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7fa157038e88 <col:10> 'int' lvalue ParmVar 0x7fa157036ef0 'startz1' 'int'
    `-ForStmt 0x7fa157039900 <line:15:5, line:24:5>
      |-BinaryOperator 0x7fa157038f38 <line:15:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7fa157038ee0 <col:10> 'int' lvalue Var 0x7fa157038c30 'iy' 'int'
      | `-ImplicitCastExpr 0x7fa157038f20 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fa157038f00 <col:14> 'int' lvalue ParmVar 0x7fa157036bf0 'starty1' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7fa157038fc8 <col:23, col:26> 'int' '<'
      | |-ImplicitCastExpr 0x7fa157038f98 <col:23> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fa157038f58 <col:23> 'int' lvalue Var 0x7fa157038c30 'iy' 'int'
      | `-ImplicitCastExpr 0x7fa157038fb0 <col:26> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fa157038f78 <col:26> 'int' lvalue ParmVar 0x7fa157036c70 'stopy1' 'int'
      |-CompoundAssignOperator 0x7fa157039040 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7fa157038fe8 <col:34> 'int' lvalue Var 0x7fa157038c30 'iy' 'int'
      | `-ImplicitCastExpr 0x7fa157039028 <col:39> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fa157039008 <col:39> 'int' lvalue ParmVar 0x7fa157036cf0 'stepy1' 'int'
      `-CompoundStmt 0x7fa1570398d0 <col:48, line:24:5>
        |-BinaryOperator 0x7fa1570390c8 <line:16:9, col:14> 'int' '='
        | |-DeclRefExpr 0x7fa157039070 <col:9> 'int' lvalue Var 0x7fa157038bb0 'jx' 'int'
        | `-ImplicitCastExpr 0x7fa1570390b0 <col:14> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x7fa157039090 <col:14> 'int' lvalue ParmVar 0x7fa157036a70 'startx' 'int'
        |-BinaryOperator 0x7fa157039140 <line:17:9, col:14> 'int' '='
        | |-DeclRefExpr 0x7fa1570390e8 <col:9> 'int' lvalue Var 0x7fa157038db0 'jz' 'int'
        | `-ImplicitCastExpr 0x7fa157039128 <col:14> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x7fa157039108 <col:14> 'int' lvalue ParmVar 0x7fa157037070 'startz2' 'int'
        |-ForStmt 0x7fa1570397c8 <line:18:9, line:22:9>
        | |-BinaryOperator 0x7fa1570391b8 <line:18:14, col:18> 'int' '='
        | | |-DeclRefExpr 0x7fa157039160 <col:14> 'int' lvalue Var 0x7fa157038cb0 'jy' 'int'
        | | `-ImplicitCastExpr 0x7fa1570391a0 <col:18> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fa157039180 <col:18> 'int' lvalue ParmVar 0x7fa157036d70 'starty2' 'int'
        | |-<<<NULL>>>
        | |-BinaryOperator 0x7fa157039248 <col:27, col:30> 'int' '<'
        | | |-ImplicitCastExpr 0x7fa157039218 <col:27> 'int' <LValueToRValue>
        | | | `-DeclRefExpr 0x7fa1570391d8 <col:27> 'int' lvalue Var 0x7fa157038cb0 'jy' 'int'
        | | `-ImplicitCastExpr 0x7fa157039230 <col:30> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fa1570391f8 <col:30> 'int' lvalue ParmVar 0x7fa157036df0 'stopy2' 'int'
        | |-CompoundAssignOperator 0x7fa1570392c0 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
        | | |-DeclRefExpr 0x7fa157039268 <col:38> 'int' lvalue Var 0x7fa157038cb0 'jy' 'int'
        | | `-ImplicitCastExpr 0x7fa1570392a8 <col:43> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fa157039288 <col:43> 'int' lvalue ParmVar 0x7fa157036e70 'stepy2' 'int'
        | `-CompoundStmt 0x7fa1570397a0 <col:52, line:22:9>
        |   |-BinaryOperator 0x7fa1570395d0 <line:19:6, col:34> 'double' '='
        |   | |-ArraySubscriptExpr 0x7fa1570393d0 <col:6, col:14> 'double' lvalue
        |   | | |-ImplicitCastExpr 0x7fa1570393a0 <col:6, col:10> 'double *' <ArrayToPointerDecay>
        |   | | | `-ArraySubscriptExpr 0x7fa157039360 <col:6, col:10> 'double [mz]' lvalue
        |   | | |   |-ImplicitCastExpr 0x7fa157039330 <col:6> 'double (*)[mz]':'double (*)[mz]' <LValueToRValue>
        |   | | |   | `-DeclRefExpr 0x7fa1570392f0 <col:6> 'double (*)[mz]':'double (*)[mz]' lvalue ParmVar 0x7fa1570369f0 'z' 'double (*)[mz]':'double (*)[mz]'
        |   | | |   `-ImplicitCastExpr 0x7fa157039348 <col:8> 'int' <LValueToRValue>
        |   | | |     `-DeclRefExpr 0x7fa157039310 <col:8> 'int' lvalue Var 0x7fa157038d30 'iz' 'int'
        |   | | `-ImplicitCastExpr 0x7fa1570393b8 <col:12> 'int' <LValueToRValue>
        |   | |   `-DeclRefExpr 0x7fa157039380 <col:12> 'int' lvalue Var 0x7fa157038db0 'jz' 'int'
        |   | `-BinaryOperator 0x7fa1570395b0 <col:18, col:34> 'double' '/'
        |   |   |-ImplicitCastExpr 0x7fa157039580 <col:18, col:22> 'double' <LValueToRValue>
        |   |   | `-ArraySubscriptExpr 0x7fa157039460 <col:18, col:22> 'double' lvalue
        |   |   |   |-ImplicitCastExpr 0x7fa157039430 <col:18> 'double *':'double *' <LValueToRValue>
        |   |   |   | `-DeclRefExpr 0x7fa1570393f0 <col:18> 'double *':'double *' lvalue ParmVar 0x7fa1570365f0 'x' 'double *':'double *'
        |   |   |   `-ImplicitCastExpr 0x7fa157039448 <col:20> 'int' <LValueToRValue>
        |   |   |     `-DeclRefExpr 0x7fa157039410 <col:20> 'int' lvalue Var 0x7fa157038bb0 'jx' 'int'
        |   |   `-ImplicitCastExpr 0x7fa157039598 <col:26, col:34> 'double' <LValueToRValue>
        |   |     `-ArraySubscriptExpr 0x7fa157039560 <col:26, col:34> 'double' lvalue
        |   |       |-ImplicitCastExpr 0x7fa157039530 <col:26, col:30> 'double *' <ArrayToPointerDecay>
        |   |       | `-ArraySubscriptExpr 0x7fa1570394f0 <col:26, col:30> 'double [my]' lvalue
        |   |       |   |-ImplicitCastExpr 0x7fa1570394c0 <col:26> 'double (*)[my]':'double (*)[my]' <LValueToRValue>
        |   |       |   | `-DeclRefExpr 0x7fa157039480 <col:26> 'double (*)[my]':'double (*)[my]' lvalue ParmVar 0x7fa1570367f0 'y' 'double (*)[my]':'double (*)[my]'
        |   |       |   `-ImplicitCastExpr 0x7fa1570394d8 <col:28> 'int' <LValueToRValue>
        |   |       |     `-DeclRefExpr 0x7fa1570394a0 <col:28> 'int' lvalue Var 0x7fa157038c30 'iy' 'int'
        |   |       `-ImplicitCastExpr 0x7fa157039548 <col:32> 'int' <LValueToRValue>
        |   |         `-DeclRefExpr 0x7fa157039510 <col:32> 'int' lvalue Var 0x7fa157038cb0 'jy' 'int'
        |   |-BinaryOperator 0x7fa1570396b0 <line:20:6, col:16> 'int' '='
        |   | |-DeclRefExpr 0x7fa157039600 <col:6> 'int' lvalue Var 0x7fa157038bb0 'jx' 'int'
        |   | `-BinaryOperator 0x7fa157039690 <col:11, col:16> 'int' '+'
        |   |   |-ImplicitCastExpr 0x7fa157039660 <col:11> 'int' <LValueToRValue>
        |   |   | `-DeclRefExpr 0x7fa157039620 <col:11> 'int' lvalue Var 0x7fa157038bb0 'jx' 'int'
        |   |   `-ImplicitCastExpr 0x7fa157039678 <col:16> 'int' <LValueToRValue>
        |   |     `-DeclRefExpr 0x7fa157039640 <col:16> 'int' lvalue ParmVar 0x7fa157036b70 'stepx' 'int'
        |   `-BinaryOperator 0x7fa157039780 <line:21:6, col:16> 'int' '='
        |     |-DeclRefExpr 0x7fa1570396d0 <col:6> 'int' lvalue Var 0x7fa157038db0 'jz' 'int'
        |     `-BinaryOperator 0x7fa157039760 <col:11, col:16> 'int' '+'
        |       |-ImplicitCastExpr 0x7fa157039730 <col:11> 'int' <LValueToRValue>
        |       | `-DeclRefExpr 0x7fa1570396f0 <col:11> 'int' lvalue Var 0x7fa157038db0 'jz' 'int'
        |       `-ImplicitCastExpr 0x7fa157039748 <col:16> 'int' <LValueToRValue>
        |         `-DeclRefExpr 0x7fa157039710 <col:16> 'int' lvalue ParmVar 0x7fa157037170 'stepz2' 'int'
        `-BinaryOperator 0x7fa1570398b0 <line:23:9, col:19> 'int' '='
          |-DeclRefExpr 0x7fa157039800 <col:9> 'int' lvalue Var 0x7fa157038d30 'iz' 'int'
          `-BinaryOperator 0x7fa157039890 <col:14, col:19> 'int' '+'
            |-ImplicitCastExpr 0x7fa157039860 <col:14> 'int' <LValueToRValue>
            | `-DeclRefExpr 0x7fa157039820 <col:14> 'int' lvalue Var 0x7fa157038d30 'iz' 'int'
            `-ImplicitCastExpr 0x7fa157039878 <col:19> 'int' <LValueToRValue>
              `-DeclRefExpr 0x7fa157039840 <col:19> 'int' lvalue ParmVar 0x7fa157036ff0 'stepz1' 'int'
