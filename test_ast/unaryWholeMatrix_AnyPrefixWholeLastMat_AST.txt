TranslationUnitDecl 0x7f9b0a024e08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f9b0a0256a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f9b0a0253a0 '__int128'
|-TypedefDecl 0x7f9b0a025710 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f9b0a0253c0 'unsigned __int128'
|-TypedefDecl 0x7f9b0a0259f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f9b0a0257f0 'struct __NSConstantString_tag'
|   `-Record 0x7f9b0a025768 '__NSConstantString_tag'
|-TypedefDecl 0x7f9b0a025a90 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f9b0a025a50 'char *'
|   `-BuiltinType 0x7f9b0a024ea0 'char'
|-TypedefDecl 0x7f9b0a025d68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f9b0a025d10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f9b0a025b70 'struct __va_list_tag'
|     `-Record 0x7f9b0a025ae8 '__va_list_tag'
|-TypedefDecl 0x7f9b09843200 <./tree_src/unaryWholeMatrix_AnyPrefixWholeLastMat.c:4:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x7f9b0a024f60 'unsigned char'
`-FunctionDecl 0x7f9b09843a98 <line:11:1, line:21:1> line:11:6 AnyPrefixWholeLastMat 'void (int, int, BOOL (*)[m], BOOL (*)[m])'
  |-ParmVarDecl 0x7f9b09843270 <line:12:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7f9b098432f0 <col:12, col:16> col:16 used m 'int'
  |-ParmVarDecl 0x7f9b098435c0 <col:19, col:30> col:24 used x 'BOOL (*)[m]':'BOOL (*)[m]'
  |-ParmVarDecl 0x7f9b09843870 <col:33, col:44> col:38 used y 'BOOL (*)[m]':'BOOL (*)[m]'
  `-CompoundStmt 0x7f9b09846630 <col:48, line:21:1>
    |-DeclStmt 0x7f9b09843cb8 <line:14:5, col:13>
    | |-VarDecl 0x7f9b09843bb8 <col:5, col:9> col:9 used i 'int'
    | `-VarDecl 0x7f9b09843c38 <col:5, col:12> col:12 used j 'int'
    `-ForStmt 0x7f9b098465f8 <line:15:5, line:20:5>
      |-BinaryOperator 0x7f9b09843d10 <line:15:10, col:13> 'int' '='
      | |-DeclRefExpr 0x7f9b09843cd0 <col:10> 'int' lvalue Var 0x7f9b09843bb8 'i' 'int'
      | `-IntegerLiteral 0x7f9b09843cf0 <col:13> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x7f9b09843da0 <col:16, col:18> 'int' '<'
      | |-ImplicitCastExpr 0x7f9b09843d70 <col:16> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7f9b09843d30 <col:16> 'int' lvalue Var 0x7f9b09843bb8 'i' 'int'
      | `-ImplicitCastExpr 0x7f9b09843d88 <col:18> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f9b09843d50 <col:18> 'int' lvalue ParmVar 0x7f9b09843270 'n' 'int'
      |-UnaryOperator 0x7f9b09843de0 <col:21, col:22> 'int' postfix '++'
      | `-DeclRefExpr 0x7f9b09843dc0 <col:21> 'int' lvalue Var 0x7f9b09843bb8 'i' 'int'
      `-CompoundStmt 0x7f9b098465d8 <col:27, line:20:5>
        |-BinaryOperator 0x7f9b09844040 <line:16:9, col:25> 'BOOL':'unsigned char' '='
        | |-ArraySubscriptExpr 0x7f9b09843f20 <col:9, col:15> 'BOOL':'unsigned char' lvalue
        | | |-ImplicitCastExpr 0x7f9b09843f08 <col:9, col:12> 'BOOL *' <ArrayToPointerDecay>
        | | | `-ArraySubscriptExpr 0x7f9b09843e68 <col:9, col:12> 'BOOL [m]' lvalue
        | | |   |-ImplicitCastExpr 0x7f9b09843e38 <col:9> 'BOOL (*)[m]':'BOOL (*)[m]' <LValueToRValue>
        | | |   | `-DeclRefExpr 0x7f9b09843df8 <col:9> 'BOOL (*)[m]':'BOOL (*)[m]' lvalue ParmVar 0x7f9b09843870 'y' 'BOOL (*)[m]':'BOOL (*)[m]'
        | | |   `-ImplicitCastExpr 0x7f9b09843e50 <col:11> 'int' <LValueToRValue>
        | | |     `-DeclRefExpr 0x7f9b09843e18 <col:11> 'int' lvalue Var 0x7f9b09843bb8 'i' 'int'
        | | `-IntegerLiteral 0x7f9b09843e88 <col:14> 'int' 0
        | `-ImplicitCastExpr 0x7f9b09844028 <col:19, col:25> 'BOOL':'unsigned char' <LValueToRValue>
        |   `-ArraySubscriptExpr 0x7f9b09844008 <col:19, col:25> 'BOOL':'unsigned char' lvalue
        |     |-ImplicitCastExpr 0x7f9b09843ff0 <col:19, col:22> 'BOOL *' <ArrayToPointerDecay>
        |     | `-ArraySubscriptExpr 0x7f9b09843fb0 <col:19, col:22> 'BOOL [m]' lvalue
        |     |   |-ImplicitCastExpr 0x7f9b09843f80 <col:19> 'BOOL (*)[m]':'BOOL (*)[m]' <LValueToRValue>
        |     |   | `-DeclRefExpr 0x7f9b09843f40 <col:19> 'BOOL (*)[m]':'BOOL (*)[m]' lvalue ParmVar 0x7f9b098435c0 'x' 'BOOL (*)[m]':'BOOL (*)[m]'
        |     |   `-ImplicitCastExpr 0x7f9b09843f98 <col:21> 'int' <LValueToRValue>
        |     |     `-DeclRefExpr 0x7f9b09843f60 <col:21> 'int' lvalue Var 0x7f9b09843bb8 'i' 'int'
        |     `-IntegerLiteral 0x7f9b09843fd0 <col:24> 'int' 0
        `-ForStmt 0x7f9b098465a0 <line:17:9, line:19:9>
          |-BinaryOperator 0x7f9b098440a0 <line:17:14, col:18> 'int' '='
          | |-DeclRefExpr 0x7f9b09844060 <col:14> 'int' lvalue Var 0x7f9b09843c38 'j' 'int'
          | `-IntegerLiteral 0x7f9b09844080 <col:18> 'int' 1
          |-<<<NULL>>>
          |-BinaryOperator 0x7f9b09844130 <col:21, col:23> 'int' '<'
          | |-ImplicitCastExpr 0x7f9b09844100 <col:21> 'int' <LValueToRValue>
          | | `-DeclRefExpr 0x7f9b098440c0 <col:21> 'int' lvalue Var 0x7f9b09843c38 'j' 'int'
          | `-ImplicitCastExpr 0x7f9b09844118 <col:23> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x7f9b098440e0 <col:23> 'int' lvalue ParmVar 0x7f9b098432f0 'm' 'int'
          |-UnaryOperator 0x7f9b09844170 <col:26, col:27> 'int' postfix '++'
          | `-DeclRefExpr 0x7f9b09844150 <col:26> 'int' lvalue Var 0x7f9b09843c38 'j' 'int'
          `-CompoundStmt 0x7f9b09846588 <col:32, line:19:9>
            `-BinaryOperator 0x7f9b09846568 <line:18:6, col:34> 'BOOL':'unsigned char' '='
              |-ArraySubscriptExpr 0x7f9b09846270 <col:6, col:12> 'BOOL':'unsigned char' lvalue
              | |-ImplicitCastExpr 0x7f9b09846240 <col:6, col:9> 'BOOL *' <ArrayToPointerDecay>
              | | `-ArraySubscriptExpr 0x7f9b09846200 <col:6, col:9> 'BOOL [m]' lvalue
              | |   |-ImplicitCastExpr 0x7f9b098441c8 <col:6> 'BOOL (*)[m]':'BOOL (*)[m]' <LValueToRValue>
              | |   | `-DeclRefExpr 0x7f9b09844188 <col:6> 'BOOL (*)[m]':'BOOL (*)[m]' lvalue ParmVar 0x7f9b09843870 'y' 'BOOL (*)[m]':'BOOL (*)[m]'
              | |   `-ImplicitCastExpr 0x7f9b098441e0 <col:8> 'int' <LValueToRValue>
              | |     `-DeclRefExpr 0x7f9b098441a8 <col:8> 'int' lvalue Var 0x7f9b09843bb8 'i' 'int'
              | `-ImplicitCastExpr 0x7f9b09846258 <col:11> 'int' <LValueToRValue>
              |   `-DeclRefExpr 0x7f9b09846220 <col:11> 'int' lvalue Var 0x7f9b09843c38 'j' 'int'
              `-ImplicitCastExpr 0x7f9b09846550 <col:16, col:34> 'BOOL':'unsigned char' <IntegralCast>
                `-BinaryOperator 0x7f9b09846530 <col:16, col:34> 'int' '|'
                  |-ImplicitCastExpr 0x7f9b098464e8 <col:16, col:24> 'int' <IntegralCast>
                  | `-ImplicitCastExpr 0x7f9b098464d0 <col:16, col:24> 'BOOL':'unsigned char' <LValueToRValue>
                  |   `-ArraySubscriptExpr 0x7f9b098463b0 <col:16, col:24> 'BOOL':'unsigned char' lvalue
                  |     |-ImplicitCastExpr 0x7f9b09846398 <col:16, col:19> 'BOOL *' <ArrayToPointerDecay>
                  |     | `-ArraySubscriptExpr 0x7f9b09846300 <col:16, col:19> 'BOOL [m]' lvalue
                  |     |   |-ImplicitCastExpr 0x7f9b098462d0 <col:16> 'BOOL (*)[m]':'BOOL (*)[m]' <LValueToRValue>
                  |     |   | `-DeclRefExpr 0x7f9b09846290 <col:16> 'BOOL (*)[m]':'BOOL (*)[m]' lvalue ParmVar 0x7f9b09843870 'y' 'BOOL (*)[m]':'BOOL (*)[m]'
                  |     |   `-ImplicitCastExpr 0x7f9b098462e8 <col:18> 'int' <LValueToRValue>
                  |     |     `-DeclRefExpr 0x7f9b098462b0 <col:18> 'int' lvalue Var 0x7f9b09843bb8 'i' 'int'
                  |     `-BinaryOperator 0x7f9b09846378 <col:21, col:23> 'int' '-'
                  |       |-ImplicitCastExpr 0x7f9b09846360 <col:21> 'int' <LValueToRValue>
                  |       | `-DeclRefExpr 0x7f9b09846320 <col:21> 'int' lvalue Var 0x7f9b09843c38 'j' 'int'
                  |       `-IntegerLiteral 0x7f9b09846340 <col:23> 'int' 1
                  `-ImplicitCastExpr 0x7f9b09846518 <col:28, col:34> 'int' <IntegralCast>
                    `-ImplicitCastExpr 0x7f9b09846500 <col:28, col:34> 'BOOL':'unsigned char' <LValueToRValue>
                      `-ArraySubscriptExpr 0x7f9b098464b0 <col:28, col:34> 'BOOL':'unsigned char' lvalue
                        |-ImplicitCastExpr 0x7f9b09846480 <col:28, col:31> 'BOOL *' <ArrayToPointerDecay>
                        | `-ArraySubscriptExpr 0x7f9b09846440 <col:28, col:31> 'BOOL [m]' lvalue
                        |   |-ImplicitCastExpr 0x7f9b09846410 <col:28> 'BOOL (*)[m]':'BOOL (*)[m]' <LValueToRValue>
                        |   | `-DeclRefExpr 0x7f9b098463d0 <col:28> 'BOOL (*)[m]':'BOOL (*)[m]' lvalue ParmVar 0x7f9b098435c0 'x' 'BOOL (*)[m]':'BOOL (*)[m]'
                        |   `-ImplicitCastExpr 0x7f9b09846428 <col:30> 'int' <LValueToRValue>
                        |     `-DeclRefExpr 0x7f9b098463f0 <col:30> 'int' lvalue Var 0x7f9b09843bb8 'i' 'int'
                        `-ImplicitCastExpr 0x7f9b09846498 <col:33> 'int' <LValueToRValue>
                          `-DeclRefExpr 0x7f9b09846460 <col:33> 'int' lvalue Var 0x7f9b09843c38 'j' 'int'
