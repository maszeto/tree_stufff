TranslationUnitDecl 0x7fafee838608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fafee838ea0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fafee838ba0 '__int128'
|-TypedefDecl 0x7fafee838f10 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fafee838bc0 'unsigned __int128'
|-TypedefDecl 0x7fafee8391f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fafee838ff0 'struct __NSConstantString_tag'
|   `-Record 0x7fafee838f68 '__NSConstantString_tag'
|-TypedefDecl 0x7fafee839290 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fafee839250 'char *'
|   `-BuiltinType 0x7fafee8386a0 'char'
|-TypedefDecl 0x7fafee839568 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fafee839510 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fafee839370 'struct __va_list_tag'
|     `-Record 0x7fafee8392e8 '__va_list_tag'
|-TypedefDecl 0x7fafee891000 <./tree_src/dyadicSectOneMatrix_OrSectOneScaMatRow.c:3:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x7fafee838760 'unsigned char'
`-FunctionDecl 0x7fafee891d58 <line:6:1, line:16:1> line:6:6 OrSectOneScaMatRow 'void (int, int, int, BOOL, BOOL (*)[m], BOOL (*)[m], int, int, int, int, int, int)'
  |-ParmVarDecl 0x7fafee891070 <line:7:5, col:9> col:9 used m 'int'
  |-ParmVarDecl 0x7fafee8910f0 <col:12, col:16> col:16 used n 'int'
  |-ParmVarDecl 0x7fafee891170 <col:19, col:23> col:23 used p 'int'
  |-ParmVarDecl 0x7fafee891210 <col:26, col:31> col:31 used x 'BOOL':'unsigned char'
  |-ParmVarDecl 0x7fafee8914c0 <col:34, col:45> col:39 used z 'BOOL (*)[m]':'BOOL (*)[m]'
  |-ParmVarDecl 0x7fafee891770 <col:48, col:59> col:53 used y 'BOOL (*)[m]':'BOOL (*)[m]'
  |-ParmVarDecl 0x7fafee8917f0 <line:8:5, col:9> col:9 used sz1 'int'
  |-ParmVarDecl 0x7fafee891870 <col:14, col:18> col:18 ez1 'int'
  |-ParmVarDecl 0x7fafee8918f0 <col:23, col:27> col:27 used bz1 'int'
  |-ParmVarDecl 0x7fafee891970 <col:32, col:36> col:36 used sy1 'int'
  |-ParmVarDecl 0x7fafee8919f0 <col:41, col:45> col:45 used ey1 'int'
  |-ParmVarDecl 0x7fafee891a70 <col:50, col:54> col:54 used by1 'int'
  `-CompoundStmt 0x7fafee893600 <col:60, line:16:1>
    |-DeclStmt 0x7fafee891fb8 <line:10:5, col:12>
    | |-VarDecl 0x7fafee891eb8 <col:5, col:9> col:9 used j 'int'
    | `-VarDecl 0x7fafee891f38 <col:5, col:11> col:11 used i 'int'
    |-BinaryOperator 0x7fafee893038 <line:11:5, col:8> 'int' '='
    | |-DeclRefExpr 0x7fafee891fd0 <col:5> 'int' lvalue Var 0x7fafee891eb8 'j' 'int'
    | `-ImplicitCastExpr 0x7fafee893020 <col:8> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7fafee893000 <col:8> 'int' lvalue ParmVar 0x7fafee8918f0 'bz1' 'int'
    `-ForStmt 0x7fafee8935c8 <line:12:5, line:15:5>
      |-BinaryOperator 0x7fafee8930b0 <line:12:10, col:13> 'int' '='
      | |-DeclRefExpr 0x7fafee893058 <col:10> 'int' lvalue Var 0x7fafee891f38 'i' 'int'
      | `-ImplicitCastExpr 0x7fafee893098 <col:13> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fafee893078 <col:13> 'int' lvalue ParmVar 0x7fafee891a70 'by1' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7fafee893140 <col:18, col:20> 'int' '<'
      | |-ImplicitCastExpr 0x7fafee893110 <col:18> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fafee8930d0 <col:18> 'int' lvalue Var 0x7fafee891f38 'i' 'int'
      | `-ImplicitCastExpr 0x7fafee893128 <col:20> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fafee8930f0 <col:20> 'int' lvalue ParmVar 0x7fafee8919f0 'ey1' 'int'
      |-CompoundAssignOperator 0x7fafee8931b8 <col:25, col:29> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7fafee893160 <col:25> 'int' lvalue Var 0x7fafee891f38 'i' 'int'
      | `-ImplicitCastExpr 0x7fafee8931a0 <col:29> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fafee893180 <col:29> 'int' lvalue ParmVar 0x7fafee891970 'sy1' 'int'
      `-CompoundStmt 0x7fafee8935a8 <col:35, line:15:5>
        |-BinaryOperator 0x7fafee893500 <line:13:2, col:21> 'BOOL':'unsigned char' '='
        | |-ArraySubscriptExpr 0x7fafee893328 <col:2, col:8> 'BOOL':'unsigned char' lvalue
        | | |-ImplicitCastExpr 0x7fafee8932f8 <col:2, col:5> 'BOOL *' <ArrayToPointerDecay>
        | | | `-ArraySubscriptExpr 0x7fafee893258 <col:2, col:5> 'BOOL [m]' lvalue
        | | |   |-ImplicitCastExpr 0x7fafee893228 <col:2> 'BOOL (*)[m]':'BOOL (*)[m]' <LValueToRValue>
        | | |   | `-DeclRefExpr 0x7fafee8931e8 <col:2> 'BOOL (*)[m]':'BOOL (*)[m]' lvalue ParmVar 0x7fafee8914c0 'z' 'BOOL (*)[m]':'BOOL (*)[m]'
        | | |   `-ImplicitCastExpr 0x7fafee893240 <col:4> 'int' <LValueToRValue>
        | | |     `-DeclRefExpr 0x7fafee893208 <col:4> 'int' lvalue ParmVar 0x7fafee891170 'p' 'int'
        | | `-ImplicitCastExpr 0x7fafee893310 <col:7> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fafee893278 <col:7> 'int' lvalue Var 0x7fafee891eb8 'j' 'int'
        | `-ImplicitCastExpr 0x7fafee8934e8 <col:11, col:21> 'BOOL':'unsigned char' <IntegralCast>
        |   `-BinaryOperator 0x7fafee8934c8 <col:11, col:21> 'int' '|'
        |     |-ImplicitCastExpr 0x7fafee893480 <col:11> 'int' <IntegralCast>
        |     | `-ImplicitCastExpr 0x7fafee893468 <col:11> 'BOOL':'unsigned char' <LValueToRValue>
        |     |   `-DeclRefExpr 0x7fafee893348 <col:11> 'BOOL':'unsigned char' lvalue ParmVar 0x7fafee891210 'x' 'BOOL':'unsigned char'
        |     `-ImplicitCastExpr 0x7fafee8934b0 <col:15, col:21> 'int' <IntegralCast>
        |       `-ImplicitCastExpr 0x7fafee893498 <col:15, col:21> 'BOOL':'unsigned char' <LValueToRValue>
        |         `-ArraySubscriptExpr 0x7fafee893448 <col:15, col:21> 'BOOL':'unsigned char' lvalue
        |           |-ImplicitCastExpr 0x7fafee893418 <col:15, col:18> 'BOOL *' <ArrayToPointerDecay>
        |           | `-ArraySubscriptExpr 0x7fafee8933d8 <col:15, col:18> 'BOOL [m]' lvalue
        |           |   |-ImplicitCastExpr 0x7fafee8933a8 <col:15> 'BOOL (*)[m]':'BOOL (*)[m]' <LValueToRValue>
        |           |   | `-DeclRefExpr 0x7fafee893368 <col:15> 'BOOL (*)[m]':'BOOL (*)[m]' lvalue ParmVar 0x7fafee891770 'y' 'BOOL (*)[m]':'BOOL (*)[m]'
        |           |   `-ImplicitCastExpr 0x7fafee8933c0 <col:17> 'int' <LValueToRValue>
        |           |     `-DeclRefExpr 0x7fafee893388 <col:17> 'int' lvalue ParmVar 0x7fafee891170 'p' 'int'
        |           `-ImplicitCastExpr 0x7fafee893430 <col:20> 'int' <LValueToRValue>
        |             `-DeclRefExpr 0x7fafee8933f8 <col:20> 'int' lvalue Var 0x7fafee891f38 'i' 'int'
        `-CompoundAssignOperator 0x7fafee893578 <line:14:9, col:13> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
          |-DeclRefExpr 0x7fafee893520 <col:9> 'int' lvalue Var 0x7fafee891eb8 'j' 'int'
          `-ImplicitCastExpr 0x7fafee893560 <col:13> 'int' <LValueToRValue>
            `-DeclRefExpr 0x7fafee893540 <col:13> 'int' lvalue ParmVar 0x7fafee8917f0 'sz1' 'int'
