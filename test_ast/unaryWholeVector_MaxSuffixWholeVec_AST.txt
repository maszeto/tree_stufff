TranslationUnitDecl 0x7f8236838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f82368394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f82368391a0 '__int128'
|-TypedefDecl 0x7f8236839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f82368391c0 'unsigned __int128'
|-TypedefDecl 0x7f82368397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f82368395f0 'struct __NSConstantString_tag'
|   `-Record 0x7f8236839568 '__NSConstantString_tag'
|-TypedefDecl 0x7f8236839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f8236839850 'char *'
|   `-BuiltinType 0x7f8236838ca0 'char'
|-TypedefDecl 0x7f8236839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f8236839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f8236839970 'struct __va_list_tag'
|     `-Record 0x7f82368398e8 '__va_list_tag'
|-TypedefDecl 0x7f823702f200 <./tree_src/unaryWholeVector_MaxSuffixWholeVec.c:4:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7f8236838d60 'unsigned char'
|-FunctionDecl 0x7f823702f668 <line:11:1, line:19:1> line:11:6 MaxSuffixWholeVec 'void (int, double *, double *)'
| |-ParmVarDecl 0x7f823702f270 <line:12:5, col:9> col:9 used n 'int'
| |-ParmVarDecl 0x7f823702f3f0 <col:12, col:22> col:19 used x 'double *':'double *'
| |-ParmVarDecl 0x7f823702f540 <col:25, col:35> col:32 used y 'double *':'double *'
| `-CompoundStmt 0x7f82370300c0 <col:39, line:19:1>
|   |-DeclStmt 0x7f823702f7e8 <line:14:5, col:10>
|   | `-VarDecl 0x7f823702f780 <col:5, col:9> col:9 used i 'int'
|   |-BinaryOperator 0x7f823702f9b8 <line:15:5, col:19> 'double' '='
|   | |-ArraySubscriptExpr 0x7f823702f8b0 <col:5, col:10> 'double' lvalue
|   | | |-ImplicitCastExpr 0x7f823702f898 <col:5> 'double *':'double *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7f823702f800 <col:5> 'double *':'double *' lvalue ParmVar 0x7f823702f540 'y' 'double *':'double *'
|   | | `-BinaryOperator 0x7f823702f878 <col:7, col:9> 'int' '-'
|   | |   |-ImplicitCastExpr 0x7f823702f860 <col:7> 'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x7f823702f820 <col:7> 'int' lvalue ParmVar 0x7f823702f270 'n' 'int'
|   | |   `-IntegerLiteral 0x7f823702f840 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x7f823702f9a0 <col:14, col:19> 'double' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x7f823702f980 <col:14, col:19> 'double' lvalue
|   |     |-ImplicitCastExpr 0x7f823702f968 <col:14> 'double *':'double *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7f823702f8d0 <col:14> 'double *':'double *' lvalue ParmVar 0x7f823702f3f0 'x' 'double *':'double *'
|   |     `-BinaryOperator 0x7f823702f948 <col:16, col:18> 'int' '-'
|   |       |-ImplicitCastExpr 0x7f823702f930 <col:16> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x7f823702f8f0 <col:16> 'int' lvalue ParmVar 0x7f823702f270 'n' 'int'
|   |       `-IntegerLiteral 0x7f823702f910 <col:18> 'int' 1
|   `-ForStmt 0x7f8237030088 <line:16:5, line:18:5>
|     |-BinaryOperator 0x7f823702fa70 <line:16:10, col:15> 'int' '='
|     | |-DeclRefExpr 0x7f823702f9d8 <col:10> 'int' lvalue Var 0x7f823702f780 'i' 'int'
|     | `-BinaryOperator 0x7f823702fa50 <col:13, col:15> 'int' '-'
|     |   |-ImplicitCastExpr 0x7f823702fa38 <col:13> 'int' <LValueToRValue>
|     |   | `-DeclRefExpr 0x7f823702f9f8 <col:13> 'int' lvalue ParmVar 0x7f823702f270 'n' 'int'
|     |   `-IntegerLiteral 0x7f823702fa18 <col:15> 'int' 2
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7f823702fae8 <col:18, col:20> 'int' '>'
|     | |-ImplicitCastExpr 0x7f823702fad0 <col:18> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7f823702fa90 <col:18> 'int' lvalue Var 0x7f823702f780 'i' 'int'
|     | `-IntegerLiteral 0x7f823702fab0 <col:20> 'int' 1
|     |-CompoundAssignOperator 0x7f823702fb60 <col:23, col:28> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     | |-DeclRefExpr 0x7f823702fb08 <col:23> 'int' lvalue Var 0x7f823702f780 'i' 'int'
|     | `-UnaryOperator 0x7f823702fb48 <col:27, col:28> 'int' prefix '-'
|     |   `-IntegerLiteral 0x7f823702fb28 <col:28> 'int' 1
|     `-CompoundStmt 0x7f8237030070 <col:32, line:18:5>
|       `-BinaryOperator 0x7f8237030050 <line:17:9, col:34> 'double' '='
|         |-ArraySubscriptExpr 0x7f823702fc00 <col:9, col:12> 'double' lvalue
|         | |-ImplicitCastExpr 0x7f823702fbd0 <col:9> 'double *':'double *' <LValueToRValue>
|         | | `-DeclRefExpr 0x7f823702fb90 <col:9> 'double *':'double *' lvalue ParmVar 0x7f823702f540 'y' 'double *':'double *'
|         | `-ImplicitCastExpr 0x7f823702fbe8 <col:11> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x7f823702fbb0 <col:11> 'int' lvalue Var 0x7f823702f780 'i' 'int'
|         `-CallExpr 0x7f823702fff0 <col:16, col:34> 'double'
|           |-ImplicitCastExpr 0x7f823702ffd8 <col:16> 'double (*)(double, double)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x7f823702fe28 <col:16> 'double (double, double)' Function 0x7f823702fc58 'fmax' 'double (double, double)'
|           |-ImplicitCastExpr 0x7f8237030020 <col:22, col:27> 'double' <LValueToRValue>
|           | `-ArraySubscriptExpr 0x7f823702fef8 <col:22, col:27> 'double' lvalue
|           |   |-ImplicitCastExpr 0x7f823702fee0 <col:22> 'double *':'double *' <LValueToRValue>
|           |   | `-DeclRefExpr 0x7f823702fe48 <col:22> 'double *':'double *' lvalue ParmVar 0x7f823702f540 'y' 'double *':'double *'
|           |   `-BinaryOperator 0x7f823702fec0 <col:24, col:26> 'int' '+'
|           |     |-ImplicitCastExpr 0x7f823702fea8 <col:24> 'int' <LValueToRValue>
|           |     | `-DeclRefExpr 0x7f823702fe68 <col:24> 'int' lvalue Var 0x7f823702f780 'i' 'int'
|           |     `-IntegerLiteral 0x7f823702fe88 <col:26> 'int' 1
|           `-ImplicitCastExpr 0x7f8237030038 <col:30, col:33> 'double' <LValueToRValue>
|             `-ArraySubscriptExpr 0x7f823702ff88 <col:30, col:33> 'double' lvalue
|               |-ImplicitCastExpr 0x7f823702ff58 <col:30> 'double *':'double *' <LValueToRValue>
|               | `-DeclRefExpr 0x7f823702ff18 <col:30> 'double *':'double *' lvalue ParmVar 0x7f823702f3f0 'x' 'double *':'double *'
|               `-ImplicitCastExpr 0x7f823702ff70 <col:32> 'int' <LValueToRValue>
|                 `-DeclRefExpr 0x7f823702ff38 <col:32> 'int' lvalue Var 0x7f823702f780 'i' 'int'
`-FunctionDecl 0x7f823702fc58 <col:16> col:16 implicit used fmax 'double (double, double)' extern
  |-ParmVarDecl 0x7f823702fcf8 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x7f823702fd60 <<invalid sloc>> <invalid sloc> 'double'
  |-NoThrowAttr 0x7f823702fdd8 <col:16> Implicit
  `-ConstAttr 0x7f823702fe18 <col:16> Implicit
