TranslationUnitDecl 0x7fd275038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fd2750394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fd2750391a0 '__int128'
|-TypedefDecl 0x7fd275039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fd2750391c0 'unsigned __int128'
|-TypedefDecl 0x7fd2750397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fd2750395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fd275039568 '__NSConstantString_tag'
|-TypedefDecl 0x7fd275039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fd275039850 'char *'
|   `-BuiltinType 0x7fd275038ca0 'char'
|-TypedefDecl 0x7fd275039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fd275039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fd275039970 'struct __va_list_tag'
|     `-Record 0x7fd2750398e8 '__va_list_tag'
|-TypedefDecl 0x7fd27582f200 <./tree_src/unarySectVector_SumSectVec.c:4:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fd275038d60 'unsigned char'
`-FunctionDecl 0x7fd27582f768 <line:12:1, line:22:1> line:12:6 SumSectVec 'void (int, double *, double *, int, int, int)'
  |-ParmVarDecl 0x7fd27582f270 <line:13:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7fd27582f3f0 <col:12, col:22> col:19 used x 'double *':'double *'
  |-ParmVarDecl 0x7fd27582f470 <col:25, col:33> col:33 used z 'double *'
  |-ParmVarDecl 0x7fd27582f4f0 <line:14:5, col:9> col:9 used startx 'int'
  |-ParmVarDecl 0x7fd27582f570 <col:17, col:21> col:21 used stopx 'int'
  |-ParmVarDecl 0x7fd27582f5f0 <col:28, col:32> col:32 used stepx 'int'
  `-CompoundStmt 0x7fd27582fd78 <col:40, line:22:1>
    |-DeclStmt 0x7fd27582f900 <line:16:5, col:10>
    | `-VarDecl 0x7fd27582f898 <col:5, col:9> col:9 used i 'int'
    |-DeclStmt 0x7fd27582f998 <line:17:5, col:19>
    | `-VarDecl 0x7fd27582f930 <col:5, col:12> col:12 used t 'double'
    |-ForStmt 0x7fd27582fc98 <line:18:5, line:20:5>
    | |-BinaryOperator 0x7fd27582fa08 <line:18:10, col:13> 'int' '='
    | | |-DeclRefExpr 0x7fd27582f9b0 <col:10> 'int' lvalue Var 0x7fd27582f898 'i' 'int'
    | | `-ImplicitCastExpr 0x7fd27582f9f0 <col:13> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x7fd27582f9d0 <col:13> 'int' lvalue ParmVar 0x7fd27582f4f0 'startx' 'int'
    | |-<<<NULL>>>
    | |-BinaryOperator 0x7fd27582fa98 <col:21, col:23> 'int' '<'
    | | |-ImplicitCastExpr 0x7fd27582fa68 <col:21> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x7fd27582fa28 <col:21> 'int' lvalue Var 0x7fd27582f898 'i' 'int'
    | | `-ImplicitCastExpr 0x7fd27582fa80 <col:23> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x7fd27582fa48 <col:23> 'int' lvalue ParmVar 0x7fd27582f570 'stopx' 'int'
    | |-CompoundAssignOperator 0x7fd27582fb10 <col:30, col:34> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
    | | |-DeclRefExpr 0x7fd27582fab8 <col:30> 'int' lvalue Var 0x7fd27582f898 'i' 'int'
    | | `-ImplicitCastExpr 0x7fd27582faf8 <col:34> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x7fd27582fad8 <col:34> 'int' lvalue ParmVar 0x7fd27582f5f0 'stepx' 'int'
    | `-CompoundStmt 0x7fd27582fc80 <col:42, line:20:5>
    |   `-BinaryOperator 0x7fd27582fc60 <line:19:9, col:20> 'double' '='
    |     |-DeclRefExpr 0x7fd27582fb40 <col:9> 'double' lvalue Var 0x7fd27582f930 't' 'double'
    |     `-BinaryOperator 0x7fd27582fc40 <col:13, col:20> 'double' '+'
    |       |-ImplicitCastExpr 0x7fd27582fc10 <col:13> 'double' <LValueToRValue>
    |       | `-DeclRefExpr 0x7fd27582fb60 <col:13> 'double' lvalue Var 0x7fd27582f930 't' 'double'
    |       `-ImplicitCastExpr 0x7fd27582fc28 <col:17, col:20> 'double' <LValueToRValue>
    |         `-ArraySubscriptExpr 0x7fd27582fbf0 <col:17, col:20> 'double' lvalue
    |           |-ImplicitCastExpr 0x7fd27582fbc0 <col:17> 'double *':'double *' <LValueToRValue>
    |           | `-DeclRefExpr 0x7fd27582fb80 <col:17> 'double *':'double *' lvalue ParmVar 0x7fd27582f3f0 'x' 'double *':'double *'
    |           `-ImplicitCastExpr 0x7fd27582fbd8 <col:19> 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x7fd27582fba0 <col:19> 'int' lvalue Var 0x7fd27582f898 'i' 'int'
    `-BinaryOperator 0x7fd27582fd58 <line:21:5, col:10> 'double' '='
      |-UnaryOperator 0x7fd27582fd08 <col:5, col:6> 'double' lvalue prefix '*' cannot overflow
      | `-ImplicitCastExpr 0x7fd27582fcf0 <col:6> 'double *' <LValueToRValue>
      |   `-DeclRefExpr 0x7fd27582fcd0 <col:6> 'double *' lvalue ParmVar 0x7fd27582f470 'z' 'double *'
      `-ImplicitCastExpr 0x7fd27582fd40 <col:10> 'double' <LValueToRValue>
        `-DeclRefExpr 0x7fd27582fd20 <col:10> 'double' lvalue Var 0x7fd27582f930 't' 'double'
