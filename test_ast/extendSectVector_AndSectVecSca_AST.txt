TranslationUnitDecl 0x7ff54a038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7ff54a0394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7ff54a0391a0 '__int128'
|-TypedefDecl 0x7ff54a039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7ff54a0391c0 'unsigned __int128'
|-TypedefDecl 0x7ff54a0397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7ff54a0395f0 'struct __NSConstantString_tag'
|   `-Record 0x7ff54a039568 '__NSConstantString_tag'
|-TypedefDecl 0x7ff54a039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7ff54a039850 'char *'
|   `-BuiltinType 0x7ff54a038ca0 'char'
|-TypedefDecl 0x7ff54a039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7ff54a039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7ff54a039970 'struct __va_list_tag'
|     `-Record 0x7ff54a0398e8 '__va_list_tag'
|-TypedefDecl 0x7ff54b008200 <./tree_src/extendSectVector_AndSectVecSca.c:3:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x7ff54a038d60 'unsigned char'
`-FunctionDecl 0x7ff54b008be8 <line:5:1, line:16:1> line:5:6 AndSectVecSca 'void (int, int, BOOL *, BOOL, BOOL *, int, int, int, int, int, int)'
  |-ParmVarDecl 0x7ff54b008270 <line:6:5, col:9> col:9 used nx 'int'
  |-ParmVarDecl 0x7ff54b0082f0 <col:13, col:17> col:17 used nz 'int'
  |-ParmVarDecl 0x7ff54b008500 <line:7:5, col:14> col:10 used x 'BOOL *':'BOOL *'
  |-ParmVarDecl 0x7ff54b008578 <col:17, col:22> col:22 used y 'BOOL':'unsigned char'
  |-ParmVarDecl 0x7ff54b008700 <col:25, col:34> col:30 used z 'BOOL *':'BOOL *'
  |-ParmVarDecl 0x7ff54b008780 <line:8:5, col:9> col:9 used startx 'int'
  |-ParmVarDecl 0x7ff54b008800 <col:17, col:21> col:21 used stopx 'int'
  |-ParmVarDecl 0x7ff54b008880 <col:28, col:32> col:32 used stepx 'int'
  |-ParmVarDecl 0x7ff54b008900 <col:39, col:43> col:43 used startz 'int'
  |-ParmVarDecl 0x7ff54b008980 <col:51, col:55> col:55 stopz 'int'
  |-ParmVarDecl 0x7ff54b008a00 <col:62, col:66> col:66 used stepz 'int'
  `-CompoundStmt 0x7ff54b00a938 <col:74, line:16:1>
    |-DeclStmt 0x7ff54b008e40 <line:10:5, col:15>
    | |-VarDecl 0x7ff54b008d40 <col:5, col:9> col:9 used ix 'int'
    | `-VarDecl 0x7ff54b008dc0 <col:5, col:13> col:13 used iz 'int'
    |-BinaryOperator 0x7ff54b008eb0 <line:11:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7ff54b008e58 <col:5> 'int' lvalue Var 0x7ff54b008dc0 'iz' 'int'
    | `-ImplicitCastExpr 0x7ff54b008e98 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7ff54b008e78 <col:10> 'int' lvalue ParmVar 0x7ff54b008900 'startz' 'int'
    `-ForStmt 0x7ff54b00a900 <line:12:5, line:15:5>
      |-BinaryOperator 0x7ff54b008f28 <line:12:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7ff54b008ed0 <col:10> 'int' lvalue Var 0x7ff54b008d40 'ix' 'int'
      | `-ImplicitCastExpr 0x7ff54b008f10 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7ff54b008ef0 <col:14> 'int' lvalue ParmVar 0x7ff54b008780 'startx' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7ff54b008fb8 <col:22, col:25> 'int' '<'
      | |-ImplicitCastExpr 0x7ff54b008f88 <col:22> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7ff54b008f48 <col:22> 'int' lvalue Var 0x7ff54b008d40 'ix' 'int'
      | `-ImplicitCastExpr 0x7ff54b008fa0 <col:25> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7ff54b008f68 <col:25> 'int' lvalue ParmVar 0x7ff54b008800 'stopx' 'int'
      |-CompoundAssignOperator 0x7ff54b009030 <col:32, col:37> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7ff54b008fd8 <col:32> 'int' lvalue Var 0x7ff54b008d40 'ix' 'int'
      | `-ImplicitCastExpr 0x7ff54b009018 <col:37> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7ff54b008ff8 <col:37> 'int' lvalue ParmVar 0x7ff54b008880 'stepx' 'int'
      `-CompoundStmt 0x7ff54b00a8e0 <col:45, line:15:5>
        |-BinaryOperator 0x7ff54b00a838 <line:13:4, col:20> 'BOOL':'unsigned char' '='
        | |-ArraySubscriptExpr 0x7ff54b0090d0 <col:4, col:8> 'BOOL':'unsigned char' lvalue
        | | |-ImplicitCastExpr 0x7ff54b0090a0 <col:4> 'BOOL *':'BOOL *' <LValueToRValue>
        | | | `-DeclRefExpr 0x7ff54b009060 <col:4> 'BOOL *':'BOOL *' lvalue ParmVar 0x7ff54b008700 'z' 'BOOL *':'BOOL *'
        | | `-ImplicitCastExpr 0x7ff54b0090b8 <col:6> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7ff54b009080 <col:6> 'int' lvalue Var 0x7ff54b008dc0 'iz' 'int'
        | `-ImplicitCastExpr 0x7ff54b00a820 <col:12, col:20> 'BOOL':'unsigned char' <IntegralCast>
        |   `-BinaryOperator 0x7ff54b00a800 <col:12, col:20> 'int' '&'
        |     |-ImplicitCastExpr 0x7ff54b0091b8 <col:12, col:16> 'int' <IntegralCast>
        |     | `-ImplicitCastExpr 0x7ff54b0091a0 <col:12, col:16> 'BOOL':'unsigned char' <LValueToRValue>
        |     |   `-ArraySubscriptExpr 0x7ff54b009160 <col:12, col:16> 'BOOL':'unsigned char' lvalue
        |     |     |-ImplicitCastExpr 0x7ff54b009130 <col:12> 'BOOL *':'BOOL *' <LValueToRValue>
        |     |     | `-DeclRefExpr 0x7ff54b0090f0 <col:12> 'BOOL *':'BOOL *' lvalue ParmVar 0x7ff54b008500 'x' 'BOOL *':'BOOL *'
        |     |     `-ImplicitCastExpr 0x7ff54b009148 <col:14> 'int' <LValueToRValue>
        |     |       `-DeclRefExpr 0x7ff54b009110 <col:14> 'int' lvalue Var 0x7ff54b008d40 'ix' 'int'
        |     `-ImplicitCastExpr 0x7ff54b0091e8 <col:20> 'int' <IntegralCast>
        |       `-ImplicitCastExpr 0x7ff54b0091d0 <col:20> 'BOOL':'unsigned char' <LValueToRValue>
        |         `-DeclRefExpr 0x7ff54b009180 <col:20> 'BOOL':'unsigned char' lvalue ParmVar 0x7ff54b008578 'y' 'BOOL':'unsigned char'
        `-CompoundAssignOperator 0x7ff54b00a8b0 <line:14:4, col:10> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
          |-DeclRefExpr 0x7ff54b00a858 <col:4> 'int' lvalue Var 0x7ff54b008dc0 'iz' 'int'
          `-ImplicitCastExpr 0x7ff54b00a898 <col:10> 'int' <LValueToRValue>
            `-DeclRefExpr 0x7ff54b00a878 <col:10> 'int' lvalue ParmVar 0x7ff54b008a00 'stepz' 'int'
