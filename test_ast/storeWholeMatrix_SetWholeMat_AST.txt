TranslationUnitDecl 0x7fe20f838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fe20f8394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fe20f8391a0 '__int128'
|-TypedefDecl 0x7fe20f839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fe20f8391c0 'unsigned __int128'
|-TypedefDecl 0x7fe20f8397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fe20f8395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fe20f839568 '__NSConstantString_tag'
|-TypedefDecl 0x7fe20f839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fe20f839850 'char *'
|   `-BuiltinType 0x7fe20f838ca0 'char'
|-TypedefDecl 0x7fe20f839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fe20f839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fe20f839970 'struct __va_list_tag'
|     `-Record 0x7fe20f8398e8 '__va_list_tag'
`-FunctionDecl 0x7fe20f890ca8 <./tree_src/storeWholeMatrix_SetWholeMat.c:1:1, line:10:1> line:1:6 SetWholeMat 'void (int, int, double (*)[m], double (*)[m])'
  |-ParmVarDecl 0x7fe20f890600 <line:2:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7fe20f890680 <col:12, col:16> col:16 used m 'int'
  |-ParmVarDecl 0x7fe20f890880 <col:19, col:32> col:26 used x 'double (*)[m]':'double (*)[m]'
  |-ParmVarDecl 0x7fe20f890a80 <col:35, col:48> col:42 used z 'double (*)[m]':'double (*)[m]'
  `-CompoundStmt 0x7fe20f891448 <col:52, line:10:1>
    |-DeclStmt 0x7fe20f890ec8 <line:4:5, col:13>
    | |-VarDecl 0x7fe20f890dc8 <col:5, col:9> col:9 used i 'int'
    | `-VarDecl 0x7fe20f890e48 <col:5, col:12> col:12 used j 'int'
    `-ForStmt 0x7fe20f891410 <line:5:5, line:9:5>
      |-BinaryOperator 0x7fe20f890f20 <line:5:10, col:13> 'int' '='
      | |-DeclRefExpr 0x7fe20f890ee0 <col:10> 'int' lvalue Var 0x7fe20f890dc8 'i' 'int'
      | `-IntegerLiteral 0x7fe20f890f00 <col:13> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x7fe20f890fb0 <col:16, col:18> 'int' '<'
      | |-ImplicitCastExpr 0x7fe20f890f80 <col:16> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fe20f890f40 <col:16> 'int' lvalue Var 0x7fe20f890dc8 'i' 'int'
      | `-ImplicitCastExpr 0x7fe20f890f98 <col:18> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fe20f890f60 <col:18> 'int' lvalue ParmVar 0x7fe20f890600 'n' 'int'
      |-UnaryOperator 0x7fe20f890ff0 <col:21, col:22> 'int' postfix '++'
      | `-DeclRefExpr 0x7fe20f890fd0 <col:21> 'int' lvalue Var 0x7fe20f890dc8 'i' 'int'
      `-CompoundStmt 0x7fe20f8913f0 <col:26, line:9:5>
        |-NullStmt 0x7fe20f891008 <line:5:27>
        `-ForStmt 0x7fe20f8913b8 <line:6:9, line:8:9>
          |-BinaryOperator 0x7fe20f891050 <line:6:14, col:17> 'int' '='
          | |-DeclRefExpr 0x7fe20f891010 <col:14> 'int' lvalue Var 0x7fe20f890e48 'j' 'int'
          | `-IntegerLiteral 0x7fe20f891030 <col:17> 'int' 0
          |-<<<NULL>>>
          |-BinaryOperator 0x7fe20f8910e0 <col:20, col:22> 'int' '<'
          | |-ImplicitCastExpr 0x7fe20f8910b0 <col:20> 'int' <LValueToRValue>
          | | `-DeclRefExpr 0x7fe20f891070 <col:20> 'int' lvalue Var 0x7fe20f890e48 'j' 'int'
          | `-ImplicitCastExpr 0x7fe20f8910c8 <col:22> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x7fe20f891090 <col:22> 'int' lvalue ParmVar 0x7fe20f890680 'm' 'int'
          |-UnaryOperator 0x7fe20f891120 <col:25, col:26> 'int' postfix '++'
          | `-DeclRefExpr 0x7fe20f891100 <col:25> 'int' lvalue Var 0x7fe20f890e48 'j' 'int'
          `-CompoundStmt 0x7fe20f8913a0 <col:31, line:8:9>
            `-BinaryOperator 0x7fe20f891380 <line:7:13, col:29> 'double' '='
              |-ArraySubscriptExpr 0x7fe20f891248 <col:13, col:19> 'double' lvalue
              | |-ImplicitCastExpr 0x7fe20f891218 <col:13, col:16> 'double *' <ArrayToPointerDecay>
              | | `-ArraySubscriptExpr 0x7fe20f8911a8 <col:13, col:16> 'double [m]' lvalue
              | |   |-ImplicitCastExpr 0x7fe20f891178 <col:13> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
              | |   | `-DeclRefExpr 0x7fe20f891138 <col:13> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fe20f890a80 'z' 'double (*)[m]':'double (*)[m]'
              | |   `-ImplicitCastExpr 0x7fe20f891190 <col:15> 'int' <LValueToRValue>
              | |     `-DeclRefExpr 0x7fe20f891158 <col:15> 'int' lvalue Var 0x7fe20f890dc8 'i' 'int'
              | `-ImplicitCastExpr 0x7fe20f891230 <col:18> 'int' <LValueToRValue>
              |   `-DeclRefExpr 0x7fe20f8911c8 <col:18> 'int' lvalue Var 0x7fe20f890e48 'j' 'int'
              `-ImplicitCastExpr 0x7fe20f891368 <col:23, col:29> 'double' <LValueToRValue>
                `-ArraySubscriptExpr 0x7fe20f891348 <col:23, col:29> 'double' lvalue
                  |-ImplicitCastExpr 0x7fe20f891318 <col:23, col:26> 'double *' <ArrayToPointerDecay>
                  | `-ArraySubscriptExpr 0x7fe20f8912d8 <col:23, col:26> 'double [m]' lvalue
                  |   |-ImplicitCastExpr 0x7fe20f8912a8 <col:23> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
                  |   | `-DeclRefExpr 0x7fe20f891268 <col:23> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fe20f890880 'x' 'double (*)[m]':'double (*)[m]'
                  |   `-ImplicitCastExpr 0x7fe20f8912c0 <col:25> 'int' <LValueToRValue>
                  |     `-DeclRefExpr 0x7fe20f891288 <col:25> 'int' lvalue Var 0x7fe20f890dc8 'i' 'int'
                  `-ImplicitCastExpr 0x7fe20f891330 <col:28> 'int' <LValueToRValue>
                    `-DeclRefExpr 0x7fe20f8912f8 <col:28> 'int' lvalue Var 0x7fe20f890e48 'j' 'int'
