TranslationUnitDecl 0x7fcabc838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fcabc8394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fcabc8391a0 '__int128'
|-TypedefDecl 0x7fcabc839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fcabc8391c0 'unsigned __int128'
|-TypedefDecl 0x7fcabc8397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fcabc8395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fcabc839568 '__NSConstantString_tag'
|-TypedefDecl 0x7fcabc839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fcabc839850 'char *'
|   `-BuiltinType 0x7fcabc838ca0 'char'
|-TypedefDecl 0x7fcabc839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fcabc839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fcabc839970 'struct __va_list_tag'
|     `-Record 0x7fcabc8398e8 '__va_list_tag'
|-TypedefDecl 0x7fcabc891600 <./tree_src/unarySectMatrix_IdxMinSectFirstMat.c:4:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fcabc838d60 'unsigned char'
`-FunctionDecl 0x7fcabc892218 <line:12:1, line:32:1> line:12:6 IdxMinSectFirstMat 'void (int, int, int, double (*)[mx], int *, int, int, int, int, int, int, int, int, int)'
  |-ParmVarDecl 0x7fcabc891670 <line:13:5, col:9> col:9 used nx 'int'
  |-ParmVarDecl 0x7fcabc8916f0 <col:13, col:17> col:17 used mx 'int'
  |-ParmVarDecl 0x7fcabc891770 <col:21, col:25> col:25 used nz 'int'
  |-ParmVarDecl 0x7fcabc891970 <col:29, col:44> col:36 used x 'double (*)[mx]':'double (*)[mx]'
  |-ParmVarDecl 0x7fcabc891af0 <col:47, col:55> col:51 used z 'int *':'int *'
  |-ParmVarDecl 0x7fcabc891b70 <line:14:5, col:9> col:9 used startx1 'int'
  |-ParmVarDecl 0x7fcabc891bf0 <col:18, col:22> col:22 used stopx1 'int'
  |-ParmVarDecl 0x7fcabc891c70 <col:30, col:34> col:34 used stepx1 'int'
  |-ParmVarDecl 0x7fcabc891cf0 <col:42, col:46> col:46 used startx2 'int'
  |-ParmVarDecl 0x7fcabc891d70 <col:55, col:59> col:59 used stopx2 'int'
  |-ParmVarDecl 0x7fcabc891df0 <col:67, col:71> col:71 used stepx2 'int'
  |-ParmVarDecl 0x7fcabc891e70 <line:15:5, col:9> col:9 used startz 'int'
  |-ParmVarDecl 0x7fcabc891ef0 <col:17, col:21> col:21 stopz 'int'
  |-ParmVarDecl 0x7fcabc891f70 <col:28, col:32> col:32 used stepz 'int'
  `-CompoundStmt 0x7fcabc895238 <col:40, line:32:1>
    |-DeclStmt 0x7fcabc8923f0 <line:17:5, col:15>
    | `-VarDecl 0x7fcabc892388 <col:5, col:12> col:12 used val 'double'
    |-DeclStmt 0x7fcabc894690 <line:18:5, col:24>
    | |-VarDecl 0x7fcabc892420 <col:5, col:9> col:9 used ix 'int'
    | |-VarDecl 0x7fcabc8924a0 <col:5, col:13> col:13 used jx 'int'
    | |-VarDecl 0x7fcabc892520 <col:5, col:17> col:17 used iz 'int'
    | `-VarDecl 0x7fcabc894600 <col:5, col:21> col:21 used loc 'int'
    |-BinaryOperator 0x7fcabc894700 <line:19:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7fcabc8946a8 <col:5> 'int' lvalue Var 0x7fcabc892520 'iz' 'int'
    | `-ImplicitCastExpr 0x7fcabc8946e8 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7fcabc8946c8 <col:10> 'int' lvalue ParmVar 0x7fcabc891e70 'startz' 'int'
    `-ForStmt 0x7fcabc895200 <line:20:5, line:31:5>
      |-BinaryOperator 0x7fcabc894778 <line:20:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7fcabc894720 <col:10> 'int' lvalue Var 0x7fcabc892420 'ix' 'int'
      | `-ImplicitCastExpr 0x7fcabc894760 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fcabc894740 <col:14> 'int' lvalue ParmVar 0x7fcabc891b70 'startx1' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7fcabc894808 <col:23, col:26> 'int' '<'
      | |-ImplicitCastExpr 0x7fcabc8947d8 <col:23> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fcabc894798 <col:23> 'int' lvalue Var 0x7fcabc892420 'ix' 'int'
      | `-ImplicitCastExpr 0x7fcabc8947f0 <col:26> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fcabc8947b8 <col:26> 'int' lvalue ParmVar 0x7fcabc891bf0 'stopx1' 'int'
      |-CompoundAssignOperator 0x7fcabc894880 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7fcabc894828 <col:34> 'int' lvalue Var 0x7fcabc892420 'ix' 'int'
      | `-ImplicitCastExpr 0x7fcabc894868 <col:39> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fcabc894848 <col:39> 'int' lvalue ParmVar 0x7fcabc891c70 'stepx1' 'int'
      `-CompoundStmt 0x7fcabc8951c8 <col:48, line:31:5>
        |-BinaryOperator 0x7fcabc894908 <line:21:9, col:15> 'int' '='
        | |-DeclRefExpr 0x7fcabc8948b0 <col:9> 'int' lvalue Var 0x7fcabc894600 'loc' 'int'
        | `-ImplicitCastExpr 0x7fcabc8948f0 <col:15> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x7fcabc8948d0 <col:15> 'int' lvalue ParmVar 0x7fcabc891cf0 'startx2' 'int'
        |-BinaryOperator 0x7fcabc894a90 <line:22:9, col:29> 'double' '='
        | |-DeclRefExpr 0x7fcabc894928 <col:9> 'double' lvalue Var 0x7fcabc892388 'val' 'double'
        | `-ImplicitCastExpr 0x7fcabc894a78 <col:16, col:29> 'double' <LValueToRValue>
        |   `-ArraySubscriptExpr 0x7fcabc894a58 <col:16, col:29> 'double' lvalue
        |     |-ImplicitCastExpr 0x7fcabc894a28 <col:16, col:25> 'double *' <ArrayToPointerDecay>
        |     | `-ArraySubscriptExpr 0x7fcabc8949b8 <col:16, col:25> 'double [mx]' lvalue
        |     |   |-ImplicitCastExpr 0x7fcabc894988 <col:16> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
        |     |   | `-DeclRefExpr 0x7fcabc894948 <col:16> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7fcabc891970 'x' 'double (*)[mx]':'double (*)[mx]'
        |     |   `-ImplicitCastExpr 0x7fcabc8949a0 <col:18> 'int' <LValueToRValue>
        |     |     `-DeclRefExpr 0x7fcabc894968 <col:18> 'int' lvalue ParmVar 0x7fcabc891cf0 'startx2' 'int'
        |     `-ImplicitCastExpr 0x7fcabc894a40 <col:27> 'int' <LValueToRValue>
        |       `-DeclRefExpr 0x7fcabc8949d8 <col:27> 'int' lvalue Var 0x7fcabc892420 'ix' 'int'
        |-ForStmt 0x7fcabc895020 <line:23:9, line:28:9>
        | |-BinaryOperator 0x7fcabc894b48 <line:23:14, col:26> 'int' '='
        | | |-DeclRefExpr 0x7fcabc894ab0 <col:14> 'int' lvalue Var 0x7fcabc8924a0 'jx' 'int'
        | | `-BinaryOperator 0x7fcabc894b28 <col:18, col:26> 'int' '+'
        | |   |-ImplicitCastExpr 0x7fcabc894b10 <col:18> 'int' <LValueToRValue>
        | |   | `-DeclRefExpr 0x7fcabc894ad0 <col:18> 'int' lvalue ParmVar 0x7fcabc891cf0 'startx2' 'int'
        | |   `-IntegerLiteral 0x7fcabc894af0 <col:26> 'int' 1
        | |-<<<NULL>>>
        | |-BinaryOperator 0x7fcabc894bd8 <col:29, col:32> 'int' '<'
        | | |-ImplicitCastExpr 0x7fcabc894ba8 <col:29> 'int' <LValueToRValue>
        | | | `-DeclRefExpr 0x7fcabc894b68 <col:29> 'int' lvalue Var 0x7fcabc8924a0 'jx' 'int'
        | | `-ImplicitCastExpr 0x7fcabc894bc0 <col:32> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fcabc894b88 <col:32> 'int' lvalue ParmVar 0x7fcabc891d70 'stopx2' 'int'
        | |-CompoundAssignOperator 0x7fcabc894c50 <col:40, col:45> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
        | | |-DeclRefExpr 0x7fcabc894bf8 <col:40> 'int' lvalue Var 0x7fcabc8924a0 'jx' 'int'
        | | `-ImplicitCastExpr 0x7fcabc894c38 <col:45> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fcabc894c18 <col:45> 'int' lvalue ParmVar 0x7fcabc891df0 'stepx2' 'int'
        | `-CompoundStmt 0x7fcabc895000 <col:54, line:28:9>
        |   |-IfStmt 0x7fcabc894fe0 <line:24:13, line:27:13>
        |   | |-BinaryOperator 0x7fcabc894dd0 <line:24:17, col:29> 'int' '<'
        |   | | |-ImplicitCastExpr 0x7fcabc894da0 <col:17, col:25> 'double' <LValueToRValue>
        |   | | | `-ArraySubscriptExpr 0x7fcabc894d60 <col:17, col:25> 'double' lvalue
        |   | | |   |-ImplicitCastExpr 0x7fcabc894d30 <col:17, col:21> 'double *' <ArrayToPointerDecay>
        |   | | |   | `-ArraySubscriptExpr 0x7fcabc894cf0 <col:17, col:21> 'double [mx]' lvalue
        |   | | |   |   |-ImplicitCastExpr 0x7fcabc894cc0 <col:17> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
        |   | | |   |   | `-DeclRefExpr 0x7fcabc894c80 <col:17> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7fcabc891970 'x' 'double (*)[mx]':'double (*)[mx]'
        |   | | |   |   `-ImplicitCastExpr 0x7fcabc894cd8 <col:19> 'int' <LValueToRValue>
        |   | | |   |     `-DeclRefExpr 0x7fcabc894ca0 <col:19> 'int' lvalue Var 0x7fcabc8924a0 'jx' 'int'
        |   | | |   `-ImplicitCastExpr 0x7fcabc894d48 <col:23> 'int' <LValueToRValue>
        |   | | |     `-DeclRefExpr 0x7fcabc894d10 <col:23> 'int' lvalue Var 0x7fcabc892420 'ix' 'int'
        |   | | `-ImplicitCastExpr 0x7fcabc894db8 <col:29> 'double' <LValueToRValue>
        |   | |   `-DeclRefExpr 0x7fcabc894d80 <col:29> 'double' lvalue Var 0x7fcabc892388 'val' 'double'
        |   | `-CompoundStmt 0x7fcabc894fc0 <col:35, line:27:13>
        |   |   |-BinaryOperator 0x7fcabc894e48 <line:25:14, col:20> 'int' '='
        |   |   | |-DeclRefExpr 0x7fcabc894df0 <col:14> 'int' lvalue Var 0x7fcabc894600 'loc' 'int'
        |   |   | `-ImplicitCastExpr 0x7fcabc894e30 <col:20> 'int' <LValueToRValue>
        |   |   |   `-DeclRefExpr 0x7fcabc894e10 <col:20> 'int' lvalue Var 0x7fcabc8924a0 'jx' 'int'
        |   |   `-BinaryOperator 0x7fcabc894fa0 <line:26:14, col:29> 'double' '='
        |   |     |-DeclRefExpr 0x7fcabc894e68 <col:14> 'double' lvalue Var 0x7fcabc892388 'val' 'double'
        |   |     `-ImplicitCastExpr 0x7fcabc894f88 <col:21, col:29> 'double' <LValueToRValue>
        |   |       `-ArraySubscriptExpr 0x7fcabc894f68 <col:21, col:29> 'double' lvalue
        |   |         |-ImplicitCastExpr 0x7fcabc894f38 <col:21, col:25> 'double *' <ArrayToPointerDecay>
        |   |         | `-ArraySubscriptExpr 0x7fcabc894ef8 <col:21, col:25> 'double [mx]' lvalue
        |   |         |   |-ImplicitCastExpr 0x7fcabc894ec8 <col:21> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
        |   |         |   | `-DeclRefExpr 0x7fcabc894e88 <col:21> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7fcabc891970 'x' 'double (*)[mx]':'double (*)[mx]'
        |   |         |   `-ImplicitCastExpr 0x7fcabc894ee0 <col:23> 'int' <LValueToRValue>
        |   |         |     `-DeclRefExpr 0x7fcabc894ea8 <col:23> 'int' lvalue Var 0x7fcabc8924a0 'jx' 'int'
        |   |         `-ImplicitCastExpr 0x7fcabc894f50 <col:27> 'int' <LValueToRValue>
        |   |           `-DeclRefExpr 0x7fcabc894f18 <col:27> 'int' lvalue Var 0x7fcabc892420 'ix' 'int'
        |   `-NullStmt 0x7fcabc894ff8 <line:27:14>
        |-BinaryOperator 0x7fcabc895120 <line:29:9, col:17> 'int' '='
        | |-ArraySubscriptExpr 0x7fcabc8950c8 <col:9, col:13> 'int' lvalue
        | | |-ImplicitCastExpr 0x7fcabc895098 <col:9> 'int *':'int *' <LValueToRValue>
        | | | `-DeclRefExpr 0x7fcabc895058 <col:9> 'int *':'int *' lvalue ParmVar 0x7fcabc891af0 'z' 'int *':'int *'
        | | `-ImplicitCastExpr 0x7fcabc8950b0 <col:11> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fcabc895078 <col:11> 'int' lvalue Var 0x7fcabc892520 'iz' 'int'
        | `-ImplicitCastExpr 0x7fcabc895108 <col:17> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x7fcabc8950e8 <col:17> 'int' lvalue Var 0x7fcabc894600 'loc' 'int'
        `-CompoundAssignOperator 0x7fcabc895198 <line:30:9, col:15> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
          |-DeclRefExpr 0x7fcabc895140 <col:9> 'int' lvalue Var 0x7fcabc892520 'iz' 'int'
          `-ImplicitCastExpr 0x7fcabc895180 <col:15> 'int' <LValueToRValue>
            `-DeclRefExpr 0x7fcabc895160 <col:15> 'int' lvalue ParmVar 0x7fcabc891f70 'stepz' 'int'
