TranslationUnitDecl 0x7fd63c838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fd63c8394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fd63c8391a0 '__int128'
|-TypedefDecl 0x7fd63c839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fd63c8391c0 'unsigned __int128'
|-TypedefDecl 0x7fd63c8397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fd63c8395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fd63c839568 '__NSConstantString_tag'
|-TypedefDecl 0x7fd63c839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fd63c839850 'char *'
|   `-BuiltinType 0x7fd63c838ca0 'char'
|-TypedefDecl 0x7fd63c839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fd63c839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fd63c839970 'struct __va_list_tag'
|     `-Record 0x7fd63c8398e8 '__va_list_tag'
|-TypedefDecl 0x7fd63c891600 <./tree_src/extendWholeMatrix_ModWholeVecMatRow.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fd63c838d60 'unsigned char'
|-FunctionDecl 0x7fd63c891ea8 <line:6:1, line:15:1> line:6:6 ModWholeVecMatRow 'void (int, int, double *, double (*)[m], double (*)[m])'
| |-ParmVarDecl 0x7fd63c891670 <line:7:5, col:9> col:9 used n 'int'
| |-ParmVarDecl 0x7fd63c8916f0 <col:12, col:16> col:16 used m 'int'
| |-ParmVarDecl 0x7fd63c891870 <col:19, col:29> col:26 used x 'double *':'double *'
| |-ParmVarDecl 0x7fd63c891a70 <col:32, col:45> col:39 used y 'double (*)[m]':'double (*)[m]'
| |-ParmVarDecl 0x7fd63c891c70 <col:48, col:61> col:55 used z 'double (*)[m]':'double (*)[m]'
| `-CompoundStmt 0x7fd63c893960 <col:65, line:15:1>
|   |-DeclStmt 0x7fd63c8920d0 <line:9:5, col:13>
|   | |-VarDecl 0x7fd63c891fd0 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x7fd63c892050 <col:5, col:12> col:12 used j 'int'
|   `-ForStmt 0x7fd63c893928 <line:10:5, line:14:5>
|     |-BinaryOperator 0x7fd63c892128 <line:10:10, col:13> 'int' '='
|     | |-DeclRefExpr 0x7fd63c8920e8 <col:10> 'int' lvalue Var 0x7fd63c891fd0 'i' 'int'
|     | `-IntegerLiteral 0x7fd63c892108 <col:13> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fd63c8921b8 <col:16, col:18> 'int' '<'
|     | |-ImplicitCastExpr 0x7fd63c892188 <col:16> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fd63c892148 <col:16> 'int' lvalue Var 0x7fd63c891fd0 'i' 'int'
|     | `-ImplicitCastExpr 0x7fd63c8921a0 <col:18> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fd63c892168 <col:18> 'int' lvalue ParmVar 0x7fd63c891670 'n' 'int'
|     |-UnaryOperator 0x7fd63c8921f8 <col:21, col:22> 'int' postfix '++'
|     | `-DeclRefExpr 0x7fd63c8921d8 <col:21> 'int' lvalue Var 0x7fd63c891fd0 'i' 'int'
|     `-CompoundStmt 0x7fd63c893910 <col:27, line:14:5>
|       `-ForStmt 0x7fd63c8938d8 <line:11:9, line:13:9>
|         |-BinaryOperator 0x7fd63c892250 <line:11:14, col:17> 'int' '='
|         | |-DeclRefExpr 0x7fd63c892210 <col:14> 'int' lvalue Var 0x7fd63c892050 'j' 'int'
|         | `-IntegerLiteral 0x7fd63c892230 <col:17> 'int' 0
|         |-<<<NULL>>>
|         |-BinaryOperator 0x7fd63c8922e0 <col:20, col:22> 'int' '<'
|         | |-ImplicitCastExpr 0x7fd63c8922b0 <col:20> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x7fd63c892270 <col:20> 'int' lvalue Var 0x7fd63c892050 'j' 'int'
|         | `-ImplicitCastExpr 0x7fd63c8922c8 <col:22> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x7fd63c892290 <col:22> 'int' lvalue ParmVar 0x7fd63c8916f0 'm' 'int'
|         |-UnaryOperator 0x7fd63c892320 <col:25, col:26> 'int' postfix '++'
|         | `-DeclRefExpr 0x7fd63c892300 <col:25> 'int' lvalue Var 0x7fd63c892050 'j' 'int'
|         `-CompoundStmt 0x7fd63c8938c0 <col:31, line:13:9>
|           `-BinaryOperator 0x7fd63c8938a0 <line:12:6, col:33> 'double' '='
|             |-ArraySubscriptExpr 0x7fd63c892418 <col:6, col:12> 'double' lvalue
|             | |-ImplicitCastExpr 0x7fd63c8923e8 <col:6, col:9> 'double *' <ArrayToPointerDecay>
|             | | `-ArraySubscriptExpr 0x7fd63c8923a8 <col:6, col:9> 'double [m]' lvalue
|             | |   |-ImplicitCastExpr 0x7fd63c892378 <col:6> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
|             | |   | `-DeclRefExpr 0x7fd63c892338 <col:6> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fd63c891c70 'z' 'double (*)[m]':'double (*)[m]'
|             | |   `-ImplicitCastExpr 0x7fd63c892390 <col:8> 'int' <LValueToRValue>
|             | |     `-DeclRefExpr 0x7fd63c892358 <col:8> 'int' lvalue Var 0x7fd63c891fd0 'i' 'int'
|             | `-ImplicitCastExpr 0x7fd63c892400 <col:11> 'int' <LValueToRValue>
|             |   `-DeclRefExpr 0x7fd63c8923c8 <col:11> 'int' lvalue Var 0x7fd63c892050 'j' 'int'
|             `-CallExpr 0x7fd63c893840 <col:16, col:33> 'double'
|               |-ImplicitCastExpr 0x7fd63c893828 <col:16> 'double (*)(double, double)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x7fd63c893650 <col:16> 'double (double, double)' Function 0x7fd63c892478 'fmod' 'double (double, double)'
|               |-ImplicitCastExpr 0x7fd63c893870 <col:21, col:24> 'double' <LValueToRValue>
|               | `-ArraySubscriptExpr 0x7fd63c8936e0 <col:21, col:24> 'double' lvalue
|               |   |-ImplicitCastExpr 0x7fd63c8936b0 <col:21> 'double *':'double *' <LValueToRValue>
|               |   | `-DeclRefExpr 0x7fd63c893670 <col:21> 'double *':'double *' lvalue ParmVar 0x7fd63c891870 'x' 'double *':'double *'
|               |   `-ImplicitCastExpr 0x7fd63c8936c8 <col:23> 'int' <LValueToRValue>
|               |     `-DeclRefExpr 0x7fd63c893690 <col:23> 'int' lvalue Var 0x7fd63c892050 'j' 'int'
|               `-ImplicitCastExpr 0x7fd63c893888 <col:26, col:32> 'double' <LValueToRValue>
|                 `-ArraySubscriptExpr 0x7fd63c8937e0 <col:26, col:32> 'double' lvalue
|                   |-ImplicitCastExpr 0x7fd63c8937b0 <col:26, col:29> 'double *' <ArrayToPointerDecay>
|                   | `-ArraySubscriptExpr 0x7fd63c893770 <col:26, col:29> 'double [m]' lvalue
|                   |   |-ImplicitCastExpr 0x7fd63c893740 <col:26> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
|                   |   | `-DeclRefExpr 0x7fd63c893700 <col:26> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fd63c891a70 'y' 'double (*)[m]':'double (*)[m]'
|                   |   `-ImplicitCastExpr 0x7fd63c893758 <col:28> 'int' <LValueToRValue>
|                   |     `-DeclRefExpr 0x7fd63c893720 <col:28> 'int' lvalue Var 0x7fd63c891fd0 'i' 'int'
|                   `-ImplicitCastExpr 0x7fd63c8937c8 <col:31> 'int' <LValueToRValue>
|                     `-DeclRefExpr 0x7fd63c893790 <col:31> 'int' lvalue Var 0x7fd63c892050 'j' 'int'
`-FunctionDecl 0x7fd63c892478 <col:16> col:16 implicit used fmod 'double (double, double)' extern
  |-ParmVarDecl 0x7fd63c892518 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x7fd63c892580 <<invalid sloc>> <invalid sloc> 'double'
  |-ConstAttr 0x7fd63c893600 <col:16> Implicit
  `-NoThrowAttr 0x7fd63c893640 <col:16> Implicit
