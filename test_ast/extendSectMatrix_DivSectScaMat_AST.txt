TranslationUnitDecl 0x7f99e6838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f99e68394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f99e68391a0 '__int128'
|-TypedefDecl 0x7f99e6839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f99e68391c0 'unsigned __int128'
|-TypedefDecl 0x7f99e68397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f99e68395f0 'struct __NSConstantString_tag'
|   `-Record 0x7f99e6839568 '__NSConstantString_tag'
|-TypedefDecl 0x7f99e6839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f99e6839850 'char *'
|   `-BuiltinType 0x7f99e6838ca0 'char'
|-TypedefDecl 0x7f99e6839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f99e6839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f99e6839970 'struct __va_list_tag'
|     `-Record 0x7f99e68398e8 '__va_list_tag'
|-TypedefDecl 0x7f99e7015c00 <./tree_src/extendSectMatrix_DivSectScaMat.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7f99e6838d60 'unsigned char'
`-FunctionDecl 0x7f99e7018000 <line:6:1, line:22:1> line:6:6 DivSectScaMat 'void (int, int, int, int, double, double (*)[my], double (*)[mz], int, int, int, int, int, int, int, int, int, int, int, int)'
  |-ParmVarDecl 0x7f99e7015c70 <line:7:5, col:9> col:9 used ny 'int'
  |-ParmVarDecl 0x7f99e7015cf0 <col:13, col:17> col:17 used my 'int'
  |-ParmVarDecl 0x7f99e7015d70 <col:21, col:25> col:25 used nz 'int'
  |-ParmVarDecl 0x7f99e7015df0 <col:29, col:33> col:33 used mz 'int'
  |-ParmVarDecl 0x7f99e7015e70 <line:8:5, col:12> col:12 used x 'double'
  |-ParmVarDecl 0x7f99e7016070 <col:15, col:30> col:22 used y 'double (*)[my]':'double (*)[my]'
  |-ParmVarDecl 0x7f99e7016270 <col:33, col:48> col:40 used z 'double (*)[mz]':'double (*)[mz]'
  |-ParmVarDecl 0x7f99e70162f0 <line:9:5, col:9> col:9 used starty1 'int'
  |-ParmVarDecl 0x7f99e7016370 <col:18, col:22> col:22 used stopy1 'int'
  |-ParmVarDecl 0x7f99e70163f0 <col:30, col:34> col:34 used stepy1 'int'
  |-ParmVarDecl 0x7f99e7016470 <col:42, col:46> col:46 used starty2 'int'
  |-ParmVarDecl 0x7f99e70164f0 <col:55, col:59> col:59 used stopy2 'int'
  |-ParmVarDecl 0x7f99e7016570 <col:67, col:71> col:71 used stepy2 'int'
  |-ParmVarDecl 0x7f99e70165f0 <line:10:5, col:9> col:9 used startz1 'int'
  |-ParmVarDecl 0x7f99e7016670 <col:18, col:22> col:22 stopz1 'int'
  |-ParmVarDecl 0x7f99e70166f0 <col:30, col:34> col:34 used stepz1 'int'
  |-ParmVarDecl 0x7f99e7016770 <col:42, col:46> col:46 used startz2 'int'
  |-ParmVarDecl 0x7f99e70167f0 <col:55, col:59> col:59 stopz2 'int'
  |-ParmVarDecl 0x7f99e7016870 <col:67, col:71> col:71 used stepz2 'int'
  `-CompoundStmt 0x7f99e7018ce0 <col:80, line:22:1>
    |-DeclStmt 0x7f99e70183a8 <line:12:5, col:23>
    | |-VarDecl 0x7f99e7018198 <col:5, col:9> col:9 used iy 'int'
    | |-VarDecl 0x7f99e7018218 <col:5, col:13> col:13 used jy 'int'
    | |-VarDecl 0x7f99e7018298 <col:5, col:17> col:17 used iz 'int'
    | `-VarDecl 0x7f99e7018318 <col:5, col:21> col:21 used jz 'int'
    |-BinaryOperator 0x7f99e7018418 <line:13:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7f99e70183c0 <col:5> 'int' lvalue Var 0x7f99e7018298 'iz' 'int'
    | `-ImplicitCastExpr 0x7f99e7018400 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7f99e70183e0 <col:10> 'int' lvalue ParmVar 0x7f99e70165f0 'startz1' 'int'
    `-ForStmt 0x7f99e7018ca8 <line:14:5, line:21:5>
      |-BinaryOperator 0x7f99e7018490 <line:14:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7f99e7018438 <col:10> 'int' lvalue Var 0x7f99e7018198 'iy' 'int'
      | `-ImplicitCastExpr 0x7f99e7018478 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f99e7018458 <col:14> 'int' lvalue ParmVar 0x7f99e70162f0 'starty1' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7f99e7018520 <col:23, col:26> 'int' '<'
      | |-ImplicitCastExpr 0x7f99e70184f0 <col:23> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7f99e70184b0 <col:23> 'int' lvalue Var 0x7f99e7018198 'iy' 'int'
      | `-ImplicitCastExpr 0x7f99e7018508 <col:26> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f99e70184d0 <col:26> 'int' lvalue ParmVar 0x7f99e7016370 'stopy1' 'int'
      |-CompoundAssignOperator 0x7f99e7018598 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7f99e7018540 <col:34> 'int' lvalue Var 0x7f99e7018198 'iy' 'int'
      | `-ImplicitCastExpr 0x7f99e7018580 <col:39> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f99e7018560 <col:39> 'int' lvalue ParmVar 0x7f99e70163f0 'stepy1' 'int'
      `-CompoundStmt 0x7f99e7018c80 <col:48, line:21:5>
        |-BinaryOperator 0x7f99e7018620 <line:15:9, col:14> 'int' '='
        | |-DeclRefExpr 0x7f99e70185c8 <col:9> 'int' lvalue Var 0x7f99e7018318 'jz' 'int'
        | `-ImplicitCastExpr 0x7f99e7018608 <col:14> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x7f99e70185e8 <col:14> 'int' lvalue ParmVar 0x7f99e7016770 'startz2' 'int'
        |-ForStmt 0x7f99e7018b78 <line:16:9, line:19:9>
        | |-BinaryOperator 0x7f99e7018698 <line:16:14, col:18> 'int' '='
        | | |-DeclRefExpr 0x7f99e7018640 <col:14> 'int' lvalue Var 0x7f99e7018218 'jy' 'int'
        | | `-ImplicitCastExpr 0x7f99e7018680 <col:18> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7f99e7018660 <col:18> 'int' lvalue ParmVar 0x7f99e7016470 'starty2' 'int'
        | |-<<<NULL>>>
        | |-BinaryOperator 0x7f99e7018728 <col:27, col:30> 'int' '<'
        | | |-ImplicitCastExpr 0x7f99e70186f8 <col:27> 'int' <LValueToRValue>
        | | | `-DeclRefExpr 0x7f99e70186b8 <col:27> 'int' lvalue Var 0x7f99e7018218 'jy' 'int'
        | | `-ImplicitCastExpr 0x7f99e7018710 <col:30> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7f99e70186d8 <col:30> 'int' lvalue ParmVar 0x7f99e70164f0 'stopy2' 'int'
        | |-CompoundAssignOperator 0x7f99e70187a0 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
        | | |-DeclRefExpr 0x7f99e7018748 <col:38> 'int' lvalue Var 0x7f99e7018218 'jy' 'int'
        | | `-ImplicitCastExpr 0x7f99e7018788 <col:43> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7f99e7018768 <col:43> 'int' lvalue ParmVar 0x7f99e7016570 'stepy2' 'int'
        | `-CompoundStmt 0x7f99e7018b58 <col:52, line:19:9>
        |   |-BinaryOperator 0x7f99e7018a68 <line:17:6, col:30> 'double' '='
        |   | |-ArraySubscriptExpr 0x7f99e70188d8 <col:6, col:14> 'double' lvalue
        |   | | |-ImplicitCastExpr 0x7f99e70188a8 <col:6, col:10> 'double *' <ArrayToPointerDecay>
        |   | | | `-ArraySubscriptExpr 0x7f99e7018840 <col:6, col:10> 'double [mz]' lvalue
        |   | | |   |-ImplicitCastExpr 0x7f99e7018810 <col:6> 'double (*)[mz]':'double (*)[mz]' <LValueToRValue>
        |   | | |   | `-DeclRefExpr 0x7f99e70187d0 <col:6> 'double (*)[mz]':'double (*)[mz]' lvalue ParmVar 0x7f99e7016270 'z' 'double (*)[mz]':'double (*)[mz]'
        |   | | |   `-ImplicitCastExpr 0x7f99e7018828 <col:8> 'int' <LValueToRValue>
        |   | | |     `-DeclRefExpr 0x7f99e70187f0 <col:8> 'int' lvalue Var 0x7f99e7018298 'iz' 'int'
        |   | | `-ImplicitCastExpr 0x7f99e70188c0 <col:12> 'int' <LValueToRValue>
        |   | |   `-DeclRefExpr 0x7f99e7018860 <col:12> 'int' lvalue Var 0x7f99e7018318 'jz' 'int'
        |   | `-BinaryOperator 0x7f99e7018a48 <col:18, col:30> 'double' '/'
        |   |   |-ImplicitCastExpr 0x7f99e7018a18 <col:18> 'double' <LValueToRValue>
        |   |   | `-DeclRefExpr 0x7f99e70188f8 <col:18> 'double' lvalue ParmVar 0x7f99e7015e70 'x' 'double'
        |   |   `-ImplicitCastExpr 0x7f99e7018a30 <col:22, col:30> 'double' <LValueToRValue>
        |   |     `-ArraySubscriptExpr 0x7f99e70189f8 <col:22, col:30> 'double' lvalue
        |   |       |-ImplicitCastExpr 0x7f99e70189c8 <col:22, col:26> 'double *' <ArrayToPointerDecay>
        |   |       | `-ArraySubscriptExpr 0x7f99e7018988 <col:22, col:26> 'double [my]' lvalue
        |   |       |   |-ImplicitCastExpr 0x7f99e7018958 <col:22> 'double (*)[my]':'double (*)[my]' <LValueToRValue>
        |   |       |   | `-DeclRefExpr 0x7f99e7018918 <col:22> 'double (*)[my]':'double (*)[my]' lvalue ParmVar 0x7f99e7016070 'y' 'double (*)[my]':'double (*)[my]'
        |   |       |   `-ImplicitCastExpr 0x7f99e7018970 <col:24> 'int' <LValueToRValue>
        |   |       |     `-DeclRefExpr 0x7f99e7018938 <col:24> 'int' lvalue Var 0x7f99e7018198 'iy' 'int'
        |   |       `-ImplicitCastExpr 0x7f99e70189e0 <col:28> 'int' <LValueToRValue>
        |   |         `-DeclRefExpr 0x7f99e70189a8 <col:28> 'int' lvalue Var 0x7f99e7018218 'jy' 'int'
        |   `-BinaryOperator 0x7f99e7018b38 <line:18:6, col:16> 'int' '='
        |     |-DeclRefExpr 0x7f99e7018a88 <col:6> 'int' lvalue Var 0x7f99e7018318 'jz' 'int'
        |     `-BinaryOperator 0x7f99e7018b18 <col:11, col:16> 'int' '+'
        |       |-ImplicitCastExpr 0x7f99e7018ae8 <col:11> 'int' <LValueToRValue>
        |       | `-DeclRefExpr 0x7f99e7018aa8 <col:11> 'int' lvalue Var 0x7f99e7018318 'jz' 'int'
        |       `-ImplicitCastExpr 0x7f99e7018b00 <col:16> 'int' <LValueToRValue>
        |         `-DeclRefExpr 0x7f99e7018ac8 <col:16> 'int' lvalue ParmVar 0x7f99e7016870 'stepz2' 'int'
        `-BinaryOperator 0x7f99e7018c60 <line:20:9, col:19> 'int' '='
          |-DeclRefExpr 0x7f99e7018bb0 <col:9> 'int' lvalue Var 0x7f99e7018298 'iz' 'int'
          `-BinaryOperator 0x7f99e7018c40 <col:14, col:19> 'int' '+'
            |-ImplicitCastExpr 0x7f99e7018c10 <col:14> 'int' <LValueToRValue>
            | `-DeclRefExpr 0x7f99e7018bd0 <col:14> 'int' lvalue Var 0x7f99e7018298 'iz' 'int'
            `-ImplicitCastExpr 0x7f99e7018c28 <col:19> 'int' <LValueToRValue>
              `-DeclRefExpr 0x7f99e7018bf0 <col:19> 'int' lvalue ParmVar 0x7f99e70166f0 'stepz1' 'int'
