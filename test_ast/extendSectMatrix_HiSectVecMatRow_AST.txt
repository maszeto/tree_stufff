TranslationUnitDecl 0x7f9bfd032208 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f9bfd032aa0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f9bfd0327a0 '__int128'
|-TypedefDecl 0x7f9bfd032b10 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f9bfd0327c0 'unsigned __int128'
|-TypedefDecl 0x7f9bfd032df8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f9bfd032bf0 'struct __NSConstantString_tag'
|   `-Record 0x7f9bfd032b68 '__NSConstantString_tag'
|-TypedefDecl 0x7f9bfd032e90 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f9bfd032e50 'char *'
|   `-BuiltinType 0x7f9bfd0322a0 'char'
|-TypedefDecl 0x7f9bfd033168 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f9bfd033110 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f9bfd032f70 'struct __va_list_tag'
|     `-Record 0x7f9bfd032ee8 '__va_list_tag'
|-TypedefDecl 0x7f9bfd08ac00 <./tree_src/extendSectMatrix_HiSectVecMatRow.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7f9bfd032360 'unsigned char'
|-FunctionDecl 0x7f9bfd08cf78 <line:6:1, line:25:1> line:6:6 HiSectVecMatRow 'void (int, int, int, int, int, double *, double (*)[my], double (*)[mz], int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)'
| |-ParmVarDecl 0x7f9bfd08ac70 <line:7:5, col:9> col:9 used nx 'int'
| |-ParmVarDecl 0x7f9bfd08acf0 <col:13, col:17> col:17 used ny 'int'
| |-ParmVarDecl 0x7f9bfd08ad70 <col:21, col:25> col:25 used my 'int'
| |-ParmVarDecl 0x7f9bfd08adf0 <col:29, col:33> col:33 used nz 'int'
| |-ParmVarDecl 0x7f9bfd08ae70 <col:37, col:41> col:41 used mz 'int'
| |-ParmVarDecl 0x7f9bfd08aff0 <line:8:5, col:16> col:12 used x 'double *':'double *'
| |-ParmVarDecl 0x7f9bfd08b1f0 <col:19, col:34> col:26 used y 'double (*)[my]':'double (*)[my]'
| |-ParmVarDecl 0x7f9bfd08b3f0 <col:37, col:52> col:44 used z 'double (*)[mz]':'double (*)[mz]'
| |-ParmVarDecl 0x7f9bfd08b470 <line:9:5, col:9> col:9 used startx 'int'
| |-ParmVarDecl 0x7f9bfd08b4f0 <col:17, col:21> col:21 stopx 'int'
| |-ParmVarDecl 0x7f9bfd08b570 <col:28, col:32> col:32 used stepx 'int'
| |-ParmVarDecl 0x7f9bfd08b5f0 <line:10:5, col:9> col:9 used starty1 'int'
| |-ParmVarDecl 0x7f9bfd08b670 <col:18, col:22> col:22 used stopy1 'int'
| |-ParmVarDecl 0x7f9bfd08b6f0 <col:30, col:34> col:34 used stepy1 'int'
| |-ParmVarDecl 0x7f9bfd08b770 <col:42, col:46> col:46 used starty2 'int'
| |-ParmVarDecl 0x7f9bfd08b7f0 <col:55, col:59> col:59 used stopy2 'int'
| |-ParmVarDecl 0x7f9bfd08b870 <col:67, col:71> col:71 used stepy2 'int'
| |-ParmVarDecl 0x7f9bfd08b8f0 <line:11:5, col:9> col:9 used startz1 'int'
| |-ParmVarDecl 0x7f9bfd08b970 <col:18, col:22> col:22 stopz1 'int'
| |-ParmVarDecl 0x7f9bfd08b9f0 <col:30, col:34> col:34 used stepz1 'int'
| |-ParmVarDecl 0x7f9bfd08ba70 <col:42, col:46> col:46 used startz2 'int'
| |-ParmVarDecl 0x7f9bfd08baf0 <col:55, col:59> col:59 stopz2 'int'
| |-ParmVarDecl 0x7f9bfd08bb70 <col:67, col:71> col:71 used stepz2 'int'
| `-CompoundStmt 0x7f9bfd08e1a8 <col:80, line:25:1>
|   |-DeclStmt 0x7f9bfd08d450 <line:13:5, col:31>
|   | |-VarDecl 0x7f9bfd08d130 <col:5, col:9> col:9 ix 'int'
|   | |-VarDecl 0x7f9bfd08d1b0 <col:5, col:13> col:13 used jx 'int'
|   | |-VarDecl 0x7f9bfd08d230 <col:5, col:17> col:17 used iy 'int'
|   | |-VarDecl 0x7f9bfd08d2b0 <col:5, col:21> col:21 used jy 'int'
|   | |-VarDecl 0x7f9bfd08d330 <col:5, col:25> col:25 used iz 'int'
|   | `-VarDecl 0x7f9bfd08d3b0 <col:5, col:29> col:29 used jz 'int'
|   |-BinaryOperator 0x7f9bfd08d4c0 <line:14:5, col:10> 'int' '='
|   | |-DeclRefExpr 0x7f9bfd08d468 <col:5> 'int' lvalue Var 0x7f9bfd08d330 'iz' 'int'
|   | `-ImplicitCastExpr 0x7f9bfd08d4a8 <col:10> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7f9bfd08d488 <col:10> 'int' lvalue ParmVar 0x7f9bfd08b8f0 'startz1' 'int'
|   `-ForStmt 0x7f9bfd08e170 <line:15:5, line:24:5>
|     |-BinaryOperator 0x7f9bfd08d538 <line:15:10, col:14> 'int' '='
|     | |-DeclRefExpr 0x7f9bfd08d4e0 <col:10> 'int' lvalue Var 0x7f9bfd08d230 'iy' 'int'
|     | `-ImplicitCastExpr 0x7f9bfd08d520 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7f9bfd08d500 <col:14> 'int' lvalue ParmVar 0x7f9bfd08b5f0 'starty1' 'int'
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7f9bfd08d5c8 <col:23, col:26> 'int' '<'
|     | |-ImplicitCastExpr 0x7f9bfd08d598 <col:23> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7f9bfd08d558 <col:23> 'int' lvalue Var 0x7f9bfd08d230 'iy' 'int'
|     | `-ImplicitCastExpr 0x7f9bfd08d5b0 <col:26> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7f9bfd08d578 <col:26> 'int' lvalue ParmVar 0x7f9bfd08b670 'stopy1' 'int'
|     |-CompoundAssignOperator 0x7f9bfd08d640 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     | |-DeclRefExpr 0x7f9bfd08d5e8 <col:34> 'int' lvalue Var 0x7f9bfd08d230 'iy' 'int'
|     | `-ImplicitCastExpr 0x7f9bfd08d628 <col:39> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7f9bfd08d608 <col:39> 'int' lvalue ParmVar 0x7f9bfd08b6f0 'stepy1' 'int'
|     `-CompoundStmt 0x7f9bfd08e140 <col:48, line:24:5>
|       |-BinaryOperator 0x7f9bfd08d6c8 <line:16:9, col:14> 'int' '='
|       | |-DeclRefExpr 0x7f9bfd08d670 <col:9> 'int' lvalue Var 0x7f9bfd08d1b0 'jx' 'int'
|       | `-ImplicitCastExpr 0x7f9bfd08d6b0 <col:14> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x7f9bfd08d690 <col:14> 'int' lvalue ParmVar 0x7f9bfd08b470 'startx' 'int'
|       |-BinaryOperator 0x7f9bfd08d740 <line:17:2, col:7> 'int' '='
|       | |-DeclRefExpr 0x7f9bfd08d6e8 <col:2> 'int' lvalue Var 0x7f9bfd08d3b0 'jz' 'int'
|       | `-ImplicitCastExpr 0x7f9bfd08d728 <col:7> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x7f9bfd08d708 <col:7> 'int' lvalue ParmVar 0x7f9bfd08ba70 'startz2' 'int'
|       |-ForStmt 0x7f9bfd08e038 <line:18:9, line:22:9>
|       | |-BinaryOperator 0x7f9bfd08d7b8 <line:18:14, col:18> 'int' '='
|       | | |-DeclRefExpr 0x7f9bfd08d760 <col:14> 'int' lvalue Var 0x7f9bfd08d2b0 'jy' 'int'
|       | | `-ImplicitCastExpr 0x7f9bfd08d7a0 <col:18> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7f9bfd08d780 <col:18> 'int' lvalue ParmVar 0x7f9bfd08b770 'starty2' 'int'
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x7f9bfd08d848 <col:27, col:30> 'int' '<'
|       | | |-ImplicitCastExpr 0x7f9bfd08d818 <col:27> 'int' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7f9bfd08d7d8 <col:27> 'int' lvalue Var 0x7f9bfd08d2b0 'jy' 'int'
|       | | `-ImplicitCastExpr 0x7f9bfd08d830 <col:30> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7f9bfd08d7f8 <col:30> 'int' lvalue ParmVar 0x7f9bfd08b7f0 'stopy2' 'int'
|       | |-CompoundAssignOperator 0x7f9bfd08d8c0 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|       | | |-DeclRefExpr 0x7f9bfd08d868 <col:38> 'int' lvalue Var 0x7f9bfd08d2b0 'jy' 'int'
|       | | `-ImplicitCastExpr 0x7f9bfd08d8a8 <col:43> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7f9bfd08d888 <col:43> 'int' lvalue ParmVar 0x7f9bfd08b870 'stepy2' 'int'
|       | `-CompoundStmt 0x7f9bfd08e010 <col:52, line:22:9>
|       |   |-BinaryOperator 0x7f9bfd08de50 <line:19:6, col:38> 'double' '='
|       |   | |-ArraySubscriptExpr 0x7f9bfd08d9d0 <col:6, col:14> 'double' lvalue
|       |   | | |-ImplicitCastExpr 0x7f9bfd08d9a0 <col:6, col:10> 'double *' <ArrayToPointerDecay>
|       |   | | | `-ArraySubscriptExpr 0x7f9bfd08d960 <col:6, col:10> 'double [mz]' lvalue
|       |   | | |   |-ImplicitCastExpr 0x7f9bfd08d930 <col:6> 'double (*)[mz]':'double (*)[mz]' <LValueToRValue>
|       |   | | |   | `-DeclRefExpr 0x7f9bfd08d8f0 <col:6> 'double (*)[mz]':'double (*)[mz]' lvalue ParmVar 0x7f9bfd08b3f0 'z' 'double (*)[mz]':'double (*)[mz]'
|       |   | | |   `-ImplicitCastExpr 0x7f9bfd08d948 <col:8> 'int' <LValueToRValue>
|       |   | | |     `-DeclRefExpr 0x7f9bfd08d910 <col:8> 'int' lvalue Var 0x7f9bfd08d330 'iz' 'int'
|       |   | | `-ImplicitCastExpr 0x7f9bfd08d9b8 <col:12> 'int' <LValueToRValue>
|       |   | |   `-DeclRefExpr 0x7f9bfd08d980 <col:12> 'int' lvalue Var 0x7f9bfd08d3b0 'jz' 'int'
|       |   | `-CallExpr 0x7f9bfd08ddf0 <col:18, col:38> 'double'
|       |   |   |-ImplicitCastExpr 0x7f9bfd08ddd8 <col:18> 'double (*)(double, double)' <FunctionToPointerDecay>
|       |   |   | `-DeclRefExpr 0x7f9bfd08dc00 <col:18> 'double (double, double)' Function 0x7f9bfd08da28 'fmax' 'double (double, double)'
|       |   |   |-ImplicitCastExpr 0x7f9bfd08de20 <col:23, col:27> 'double' <LValueToRValue>
|       |   |   | `-ArraySubscriptExpr 0x7f9bfd08dc90 <col:23, col:27> 'double' lvalue
|       |   |   |   |-ImplicitCastExpr 0x7f9bfd08dc60 <col:23> 'double *':'double *' <LValueToRValue>
|       |   |   |   | `-DeclRefExpr 0x7f9bfd08dc20 <col:23> 'double *':'double *' lvalue ParmVar 0x7f9bfd08aff0 'x' 'double *':'double *'
|       |   |   |   `-ImplicitCastExpr 0x7f9bfd08dc78 <col:25> 'int' <LValueToRValue>
|       |   |   |     `-DeclRefExpr 0x7f9bfd08dc40 <col:25> 'int' lvalue Var 0x7f9bfd08d1b0 'jx' 'int'
|       |   |   `-ImplicitCastExpr 0x7f9bfd08de38 <col:29, col:37> 'double' <LValueToRValue>
|       |   |     `-ArraySubscriptExpr 0x7f9bfd08dd90 <col:29, col:37> 'double' lvalue
|       |   |       |-ImplicitCastExpr 0x7f9bfd08dd60 <col:29, col:33> 'double *' <ArrayToPointerDecay>
|       |   |       | `-ArraySubscriptExpr 0x7f9bfd08dd20 <col:29, col:33> 'double [my]' lvalue
|       |   |       |   |-ImplicitCastExpr 0x7f9bfd08dcf0 <col:29> 'double (*)[my]':'double (*)[my]' <LValueToRValue>
|       |   |       |   | `-DeclRefExpr 0x7f9bfd08dcb0 <col:29> 'double (*)[my]':'double (*)[my]' lvalue ParmVar 0x7f9bfd08b1f0 'y' 'double (*)[my]':'double (*)[my]'
|       |   |       |   `-ImplicitCastExpr 0x7f9bfd08dd08 <col:31> 'int' <LValueToRValue>
|       |   |       |     `-DeclRefExpr 0x7f9bfd08dcd0 <col:31> 'int' lvalue Var 0x7f9bfd08d230 'iy' 'int'
|       |   |       `-ImplicitCastExpr 0x7f9bfd08dd78 <col:35> 'int' <LValueToRValue>
|       |   |         `-DeclRefExpr 0x7f9bfd08dd40 <col:35> 'int' lvalue Var 0x7f9bfd08d2b0 'jy' 'int'
|       |   |-BinaryOperator 0x7f9bfd08df20 <line:20:6, col:16> 'int' '='
|       |   | |-DeclRefExpr 0x7f9bfd08de70 <col:6> 'int' lvalue Var 0x7f9bfd08d1b0 'jx' 'int'
|       |   | `-BinaryOperator 0x7f9bfd08df00 <col:11, col:16> 'int' '+'
|       |   |   |-ImplicitCastExpr 0x7f9bfd08ded0 <col:11> 'int' <LValueToRValue>
|       |   |   | `-DeclRefExpr 0x7f9bfd08de90 <col:11> 'int' lvalue Var 0x7f9bfd08d1b0 'jx' 'int'
|       |   |   `-ImplicitCastExpr 0x7f9bfd08dee8 <col:16> 'int' <LValueToRValue>
|       |   |     `-DeclRefExpr 0x7f9bfd08deb0 <col:16> 'int' lvalue ParmVar 0x7f9bfd08b570 'stepx' 'int'
|       |   `-BinaryOperator 0x7f9bfd08dff0 <line:21:6, col:16> 'int' '='
|       |     |-DeclRefExpr 0x7f9bfd08df40 <col:6> 'int' lvalue Var 0x7f9bfd08d3b0 'jz' 'int'
|       |     `-BinaryOperator 0x7f9bfd08dfd0 <col:11, col:16> 'int' '+'
|       |       |-ImplicitCastExpr 0x7f9bfd08dfa0 <col:11> 'int' <LValueToRValue>
|       |       | `-DeclRefExpr 0x7f9bfd08df60 <col:11> 'int' lvalue Var 0x7f9bfd08d3b0 'jz' 'int'
|       |       `-ImplicitCastExpr 0x7f9bfd08dfb8 <col:16> 'int' <LValueToRValue>
|       |         `-DeclRefExpr 0x7f9bfd08df80 <col:16> 'int' lvalue ParmVar 0x7f9bfd08bb70 'stepz2' 'int'
|       `-BinaryOperator 0x7f9bfd08e120 <line:23:2, col:12> 'int' '='
|         |-DeclRefExpr 0x7f9bfd08e070 <col:2> 'int' lvalue Var 0x7f9bfd08d330 'iz' 'int'
|         `-BinaryOperator 0x7f9bfd08e100 <col:7, col:12> 'int' '+'
|           |-ImplicitCastExpr 0x7f9bfd08e0d0 <col:7> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x7f9bfd08e090 <col:7> 'int' lvalue Var 0x7f9bfd08d330 'iz' 'int'
|           `-ImplicitCastExpr 0x7f9bfd08e0e8 <col:12> 'int' <LValueToRValue>
|             `-DeclRefExpr 0x7f9bfd08e0b0 <col:12> 'int' lvalue ParmVar 0x7f9bfd08b9f0 'stepz1' 'int'
`-FunctionDecl 0x7f9bfd08da28 <line:19:18> col:18 implicit used fmax 'double (double, double)' extern
  |-ParmVarDecl 0x7f9bfd08dac8 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x7f9bfd08db30 <<invalid sloc>> <invalid sloc> 'double'
  |-NoThrowAttr 0x7f9bfd08dba8 <col:18> Implicit
  `-ConstAttr 0x7f9bfd08dbe8 <col:18> Implicit
