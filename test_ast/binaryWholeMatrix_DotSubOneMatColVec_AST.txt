TranslationUnitDecl 0x7fd011838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fd0118394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fd0118391a0 '__int128'
|-TypedefDecl 0x7fd011839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fd0118391c0 'unsigned __int128'
|-TypedefDecl 0x7fd0118397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fd0118395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fd011839568 '__NSConstantString_tag'
|-TypedefDecl 0x7fd011839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fd011839850 'char *'
|   `-BuiltinType 0x7fd011838ca0 'char'
|-TypedefDecl 0x7fd011839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fd011839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fd011839970 'struct __va_list_tag'
|     `-Record 0x7fd0118398e8 '__va_list_tag'
`-FunctionDecl 0x7fd01188aee8 <./tree_src/binaryWholeMatrix_DotSubOneMatColVec.c:4:1, line:13:1> line:4:6 DotSubOneMatColVec 'void (int, int, double (*)[m], double *, double *, int)'
  |-ParmVarDecl 0x7fd01188a800 <line:5:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7fd01188a880 <col:12, col:16> col:16 used m 'int'
  |-ParmVarDecl 0x7fd01188aa80 <col:19, col:32> col:26 used x 'double (*)[m]':'double (*)[m]'
  |-ParmVarDecl 0x7fd01188ac00 <col:35, col:45> col:42 used y 'double *':'double *'
  |-ParmVarDecl 0x7fd01188ac80 <col:48, col:56> col:56 used z 'double *'
  |-ParmVarDecl 0x7fd01188ad00 <col:59, col:63> col:63 used k 'int'
  `-CompoundStmt 0x7fd01188b5c8 <col:67, line:13:1>
    |-DeclStmt 0x7fd01188b080 <line:7:5, col:10>
    | `-VarDecl 0x7fd01188b018 <col:5, col:9> col:9 used i 'int'
    |-DeclStmt 0x7fd01188b118 <line:8:5, col:20>
    | `-VarDecl 0x7fd01188b0b0 <col:5, col:12> col:12 used t 'double'
    |-ForStmt 0x7fd01188b4e8 <line:9:5, line:11:5>
    | |-BinaryOperator 0x7fd01188b170 <line:9:10, col:13> 'int' '='
    | | |-DeclRefExpr 0x7fd01188b130 <col:10> 'int' lvalue Var 0x7fd01188b018 'i' 'int'
    | | `-IntegerLiteral 0x7fd01188b150 <col:13> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x7fd01188b200 <col:16, col:18> 'int' '<'
    | | |-ImplicitCastExpr 0x7fd01188b1d0 <col:16> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x7fd01188b190 <col:16> 'int' lvalue Var 0x7fd01188b018 'i' 'int'
    | | `-ImplicitCastExpr 0x7fd01188b1e8 <col:18> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x7fd01188b1b0 <col:18> 'int' lvalue ParmVar 0x7fd01188a800 'n' 'int'
    | |-UnaryOperator 0x7fd01188b240 <col:21, col:22> 'int' postfix '++'
    | | `-DeclRefExpr 0x7fd01188b220 <col:21> 'int' lvalue Var 0x7fd01188b018 'i' 'int'
    | `-CompoundStmt 0x7fd01188b4d0 <col:27, line:11:5>
    |   `-BinaryOperator 0x7fd01188b4b0 <line:10:9, col:30> 'double' '='
    |     |-DeclRefExpr 0x7fd01188b258 <col:9> 'double' lvalue Var 0x7fd01188b0b0 't' 'double'
    |     `-BinaryOperator 0x7fd01188b490 <col:13, col:30> 'double' '-'
    |       |-ImplicitCastExpr 0x7fd01188b478 <col:13> 'double' <LValueToRValue>
    |       | `-DeclRefExpr 0x7fd01188b278 <col:13> 'double' lvalue Var 0x7fd01188b0b0 't' 'double'
    |       `-BinaryOperator 0x7fd01188b458 <col:17, col:30> 'double' '*'
    |         |-ImplicitCastExpr 0x7fd01188b428 <col:17, col:23> 'double' <LValueToRValue>
    |         | `-ArraySubscriptExpr 0x7fd01188b378 <col:17, col:23> 'double' lvalue
    |         |   |-ImplicitCastExpr 0x7fd01188b348 <col:17, col:20> 'double *' <ArrayToPointerDecay>
    |         |   | `-ArraySubscriptExpr 0x7fd01188b308 <col:17, col:20> 'double [m]' lvalue
    |         |   |   |-ImplicitCastExpr 0x7fd01188b2d8 <col:17> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
    |         |   |   | `-DeclRefExpr 0x7fd01188b298 <col:17> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fd01188aa80 'x' 'double (*)[m]':'double (*)[m]'
    |         |   |   `-ImplicitCastExpr 0x7fd01188b2f0 <col:19> 'int' <LValueToRValue>
    |         |   |     `-DeclRefExpr 0x7fd01188b2b8 <col:19> 'int' lvalue Var 0x7fd01188b018 'i' 'int'
    |         |   `-ImplicitCastExpr 0x7fd01188b360 <col:22> 'int' <LValueToRValue>
    |         |     `-DeclRefExpr 0x7fd01188b328 <col:22> 'int' lvalue ParmVar 0x7fd01188ad00 'k' 'int'
    |         `-ImplicitCastExpr 0x7fd01188b440 <col:27, col:30> 'double' <LValueToRValue>
    |           `-ArraySubscriptExpr 0x7fd01188b408 <col:27, col:30> 'double' lvalue
    |             |-ImplicitCastExpr 0x7fd01188b3d8 <col:27> 'double *':'double *' <LValueToRValue>
    |             | `-DeclRefExpr 0x7fd01188b398 <col:27> 'double *':'double *' lvalue ParmVar 0x7fd01188ac00 'y' 'double *':'double *'
    |             `-ImplicitCastExpr 0x7fd01188b3f0 <col:29> 'int' <LValueToRValue>
    |               `-DeclRefExpr 0x7fd01188b3b8 <col:29> 'int' lvalue Var 0x7fd01188b018 'i' 'int'
    `-BinaryOperator 0x7fd01188b5a8 <line:12:5, col:10> 'double' '='
      |-UnaryOperator 0x7fd01188b558 <col:5, col:6> 'double' lvalue prefix '*' cannot overflow
      | `-ImplicitCastExpr 0x7fd01188b540 <col:6> 'double *' <LValueToRValue>
      |   `-DeclRefExpr 0x7fd01188b520 <col:6> 'double *' lvalue ParmVar 0x7fd01188ac80 'z' 'double *'
      `-ImplicitCastExpr 0x7fd01188b590 <col:10> 'double' <LValueToRValue>
        `-DeclRefExpr 0x7fd01188b570 <col:10> 'double' lvalue Var 0x7fd01188b0b0 't' 'double'
