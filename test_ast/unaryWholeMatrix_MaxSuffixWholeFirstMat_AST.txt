TranslationUnitDecl 0x7f9776038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f97760394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f97760391a0 '__int128'
|-TypedefDecl 0x7f9776039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f97760391c0 'unsigned __int128'
|-TypedefDecl 0x7f97760397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f97760395f0 'struct __NSConstantString_tag'
|   `-Record 0x7f9776039568 '__NSConstantString_tag'
|-TypedefDecl 0x7f9776039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f9776039850 'char *'
|   `-BuiltinType 0x7f9776038ca0 'char'
|-TypedefDecl 0x7f9776039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f9776039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f9776039970 'struct __va_list_tag'
|     `-Record 0x7f97760398e8 '__va_list_tag'
|-TypedefDecl 0x7f977702f200 <./tree_src/unaryWholeMatrix_MaxSuffixWholeFirstMat.c:4:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7f9776038d60 'unsigned char'
|-FunctionDecl 0x7f977702f918 <line:11:1, line:21:1> line:11:6 MaxSuffixWholeFirstMat 'void (int, int, double (*)[m], double (*)[m])'
| |-ParmVarDecl 0x7f977702f270 <line:12:5, col:9> col:9 used n 'int'
| |-ParmVarDecl 0x7f977702f2f0 <col:12, col:16> col:16 used m 'int'
| |-ParmVarDecl 0x7f977702f4f0 <col:19, col:32> col:26 used x 'double (*)[m]':'double (*)[m]'
| |-ParmVarDecl 0x7f977702f6f0 <col:35, col:48> col:42 used y 'double (*)[m]':'double (*)[m]'
| `-CompoundStmt 0x7f9777032798 <col:52, line:21:1>
|   |-DeclStmt 0x7f977702fb38 <line:14:5, col:13>
|   | |-VarDecl 0x7f977702fa38 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x7f977702fab8 <col:5, col:12> col:12 used j 'int'
|   `-ForStmt 0x7f9777032760 <line:15:5, line:20:5>
|     |-BinaryOperator 0x7f977702fb90 <line:15:10, col:12> 'int' '='
|     | |-DeclRefExpr 0x7f977702fb50 <col:10> 'int' lvalue Var 0x7f977702fa38 'i' 'int'
|     | `-IntegerLiteral 0x7f977702fb70 <col:12> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7f977702fc20 <col:15, col:17> 'int' '<'
|     | |-ImplicitCastExpr 0x7f977702fbf0 <col:15> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7f977702fbb0 <col:15> 'int' lvalue Var 0x7f977702fa38 'i' 'int'
|     | `-ImplicitCastExpr 0x7f977702fc08 <col:17> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7f977702fbd0 <col:17> 'int' lvalue ParmVar 0x7f977702f270 'n' 'int'
|     |-UnaryOperator 0x7f977702fc60 <col:20, col:21> 'int' postfix '++'
|     | `-DeclRefExpr 0x7f977702fc40 <col:20> 'int' lvalue Var 0x7f977702fa38 'i' 'int'
|     `-CompoundStmt 0x7f9777032740 <col:26, line:20:5>
|       |-BinaryOperator 0x7f977702fec0 <line:16:9, col:25> 'double' '='
|       | |-ArraySubscriptExpr 0x7f977702fd88 <col:9, col:15> 'double' lvalue
|       | | |-ImplicitCastExpr 0x7f977702fd58 <col:9, col:12> 'double *' <ArrayToPointerDecay>
|       | | | `-ArraySubscriptExpr 0x7f977702fce8 <col:9, col:12> 'double [m]' lvalue
|       | | |   |-ImplicitCastExpr 0x7f977702fcb8 <col:9> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
|       | | |   | `-DeclRefExpr 0x7f977702fc78 <col:9> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f977702f6f0 'y' 'double (*)[m]':'double (*)[m]'
|       | | |   `-ImplicitCastExpr 0x7f977702fcd0 <col:11> 'int' <LValueToRValue>
|       | | |     `-DeclRefExpr 0x7f977702fc98 <col:11> 'int' lvalue ParmVar 0x7f977702f2f0 'm' 'int'
|       | | `-ImplicitCastExpr 0x7f977702fd70 <col:14> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7f977702fd08 <col:14> 'int' lvalue Var 0x7f977702fa38 'i' 'int'
|       | `-ImplicitCastExpr 0x7f977702fea8 <col:19, col:25> 'double' <LValueToRValue>
|       |   `-ArraySubscriptExpr 0x7f977702fe88 <col:19, col:25> 'double' lvalue
|       |     |-ImplicitCastExpr 0x7f977702fe58 <col:19, col:22> 'double *' <ArrayToPointerDecay>
|       |     | `-ArraySubscriptExpr 0x7f977702fe18 <col:19, col:22> 'double [m]' lvalue
|       |     |   |-ImplicitCastExpr 0x7f977702fde8 <col:19> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
|       |     |   | `-DeclRefExpr 0x7f977702fda8 <col:19> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f977702f4f0 'x' 'double (*)[m]':'double (*)[m]'
|       |     |   `-ImplicitCastExpr 0x7f977702fe00 <col:21> 'int' <LValueToRValue>
|       |     |     `-DeclRefExpr 0x7f977702fdc8 <col:21> 'int' lvalue ParmVar 0x7f977702f2f0 'm' 'int'
|       |     `-ImplicitCastExpr 0x7f977702fe70 <col:24> 'int' <LValueToRValue>
|       |       `-DeclRefExpr 0x7f977702fe38 <col:24> 'int' lvalue Var 0x7f977702fa38 'i' 'int'
|       `-ForStmt 0x7f9777032708 <line:17:9, line:19:9>
|         |-BinaryOperator 0x7f977702ff78 <line:17:14, col:19> 'int' '='
|         | |-DeclRefExpr 0x7f977702fee0 <col:14> 'int' lvalue Var 0x7f977702fab8 'j' 'int'
|         | `-BinaryOperator 0x7f977702ff58 <col:17, col:19> 'int' '-'
|         |   |-ImplicitCastExpr 0x7f977702ff40 <col:17> 'int' <LValueToRValue>
|         |   | `-DeclRefExpr 0x7f977702ff00 <col:17> 'int' lvalue ParmVar 0x7f977702f2f0 'm' 'int'
|         |   `-IntegerLiteral 0x7f977702ff20 <col:19> 'int' 1
|         |-<<<NULL>>>
|         |-BinaryOperator 0x7f977702fff0 <col:22, col:24> 'int' '>'
|         | |-ImplicitCastExpr 0x7f977702ffd8 <col:22> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x7f977702ff98 <col:22> 'int' lvalue Var 0x7f977702fab8 'j' 'int'
|         | `-IntegerLiteral 0x7f977702ffb8 <col:24> 'int' 1
|         |-CompoundAssignOperator 0x7f9777030068 <col:27, col:32> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|         | |-DeclRefExpr 0x7f9777030010 <col:27> 'int' lvalue Var 0x7f977702fab8 'j' 'int'
|         | `-UnaryOperator 0x7f9777030050 <col:31, col:32> 'int' prefix '-'
|         |   `-IntegerLiteral 0x7f9777030030 <col:32> 'int' 1
|         `-CompoundStmt 0x7f97770326f0 <col:36, line:19:9>
|           `-BinaryOperator 0x7f97770326d0 <line:18:6, col:40> 'double' '='
|             |-ArraySubscriptExpr 0x7f9777030178 <col:6, col:12> 'double' lvalue
|             | |-ImplicitCastExpr 0x7f9777030148 <col:6, col:9> 'double *' <ArrayToPointerDecay>
|             | | `-ArraySubscriptExpr 0x7f9777030108 <col:6, col:9> 'double [m]' lvalue
|             | |   |-ImplicitCastExpr 0x7f97770300d8 <col:6> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
|             | |   | `-DeclRefExpr 0x7f9777030098 <col:6> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f977702f6f0 'y' 'double (*)[m]':'double (*)[m]'
|             | |   `-ImplicitCastExpr 0x7f97770300f0 <col:8> 'int' <LValueToRValue>
|             | |     `-DeclRefExpr 0x7f97770300b8 <col:8> 'int' lvalue Var 0x7f977702fab8 'j' 'int'
|             | `-ImplicitCastExpr 0x7f9777030160 <col:11> 'int' <LValueToRValue>
|             |   `-DeclRefExpr 0x7f9777030128 <col:11> 'int' lvalue Var 0x7f977702fa38 'i' 'int'
|             `-CallExpr 0x7f9777032670 <col:16, col:40> 'double'
|               |-ImplicitCastExpr 0x7f9777032658 <col:16> 'double (*)(double, double)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x7f97770323d0 <col:16> 'double (double, double)' Function 0x7f9777032200 'fmax' 'double (double, double)'
|               |-ImplicitCastExpr 0x7f97770326a0 <col:22, col:30> 'double' <LValueToRValue>
|               | `-ArraySubscriptExpr 0x7f9777032510 <col:22, col:30> 'double' lvalue
|               |   |-ImplicitCastExpr 0x7f97770324e0 <col:22, col:27> 'double *' <ArrayToPointerDecay>
|               |   | `-ArraySubscriptExpr 0x7f97770324a0 <col:22, col:27> 'double [m]' lvalue
|               |   |   |-ImplicitCastExpr 0x7f9777032488 <col:22> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
|               |   |   | `-DeclRefExpr 0x7f97770323f0 <col:22> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f977702f6f0 'y' 'double (*)[m]':'double (*)[m]'
|               |   |   `-BinaryOperator 0x7f9777032468 <col:24, col:26> 'int' '+'
|               |   |     |-ImplicitCastExpr 0x7f9777032450 <col:24> 'int' <LValueToRValue>
|               |   |     | `-DeclRefExpr 0x7f9777032410 <col:24> 'int' lvalue Var 0x7f977702fab8 'j' 'int'
|               |   |     `-IntegerLiteral 0x7f9777032430 <col:26> 'int' 1
|               |   `-ImplicitCastExpr 0x7f97770324f8 <col:29> 'int' <LValueToRValue>
|               |     `-DeclRefExpr 0x7f97770324c0 <col:29> 'int' lvalue Var 0x7f977702fa38 'i' 'int'
|               `-ImplicitCastExpr 0x7f97770326b8 <col:33, col:39> 'double' <LValueToRValue>
|                 `-ArraySubscriptExpr 0x7f9777032610 <col:33, col:39> 'double' lvalue
|                   |-ImplicitCastExpr 0x7f97770325e0 <col:33, col:36> 'double *' <ArrayToPointerDecay>
|                   | `-ArraySubscriptExpr 0x7f97770325a0 <col:33, col:36> 'double [m]' lvalue
|                   |   |-ImplicitCastExpr 0x7f9777032570 <col:33> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
|                   |   | `-DeclRefExpr 0x7f9777032530 <col:33> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f977702f4f0 'x' 'double (*)[m]':'double (*)[m]'
|                   |   `-ImplicitCastExpr 0x7f9777032588 <col:35> 'int' <LValueToRValue>
|                   |     `-DeclRefExpr 0x7f9777032550 <col:35> 'int' lvalue Var 0x7f977702fab8 'j' 'int'
|                   `-ImplicitCastExpr 0x7f97770325f8 <col:38> 'int' <LValueToRValue>
|                     `-DeclRefExpr 0x7f97770325c0 <col:38> 'int' lvalue Var 0x7f977702fa38 'i' 'int'
`-FunctionDecl 0x7f9777032200 <col:16> col:16 implicit used fmax 'double (double, double)' extern
  |-ParmVarDecl 0x7f97770322a0 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x7f9777032308 <<invalid sloc>> <invalid sloc> 'double'
  |-NoThrowAttr 0x7f9777032380 <col:16> Implicit
  `-ConstAttr 0x7f97770323c0 <col:16> Implicit
