TranslationUnitDecl 0x7fc076024e08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fc0760256a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fc0760253a0 '__int128'
|-TypedefDecl 0x7fc076025710 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fc0760253c0 'unsigned __int128'
|-TypedefDecl 0x7fc0760259f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fc0760257f0 'struct __NSConstantString_tag'
|   `-Record 0x7fc076025768 '__NSConstantString_tag'
|-TypedefDecl 0x7fc076025a90 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fc076025a50 'char *'
|   `-BuiltinType 0x7fc076024ea0 'char'
|-TypedefDecl 0x7fc076025d68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fc076025d10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fc076025b70 'struct __va_list_tag'
|     `-Record 0x7fc076025ae8 '__va_list_tag'
|-TypedefDecl 0x7fc07502f800 <./tree_src/dyadicOneMatrix_ModOneMatColSca.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fc076024f60 'unsigned char'
|-FunctionDecl 0x7fc075030048 <line:5:1, line:12:1> line:5:6 ModOneMatColSca 'void (int, int, int, double (*)[m], double, double (*)[m])'
| |-ParmVarDecl 0x7fc07502f870 <line:6:5, col:9> col:9 used n 'int'
| |-ParmVarDecl 0x7fc07502f8f0 <col:12, col:16> col:16 used m 'int'
| |-ParmVarDecl 0x7fc07502f970 <col:19, col:23> col:23 used p 'int'
| |-ParmVarDecl 0x7fc07502fb70 <col:26, col:39> col:33 used x 'double (*)[m]':'double (*)[m]'
| |-ParmVarDecl 0x7fc07502fbf0 <col:42, col:49> col:49 used y 'double'
| |-ParmVarDecl 0x7fc07502fdf0 <col:52, col:65> col:59 used z 'double (*)[m]':'double (*)[m]'
| `-CompoundStmt 0x7fc075031950 <col:69, line:12:1>
|   |-DeclStmt 0x7fc075030278 <line:8:5, col:13>
|   | |-VarDecl 0x7fc075030178 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x7fc0750301f8 <col:5, col:12> col:12 j 'int'
|   `-ForStmt 0x7fc075031918 <line:9:5, line:11:5>
|     |-BinaryOperator 0x7fc0750302d0 <line:9:10, col:13> 'int' '='
|     | |-DeclRefExpr 0x7fc075030290 <col:10> 'int' lvalue Var 0x7fc075030178 'i' 'int'
|     | `-IntegerLiteral 0x7fc0750302b0 <col:13> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fc075030360 <col:16, col:18> 'int' '<'
|     | |-ImplicitCastExpr 0x7fc075030330 <col:16> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fc0750302f0 <col:16> 'int' lvalue Var 0x7fc075030178 'i' 'int'
|     | `-ImplicitCastExpr 0x7fc075030348 <col:18> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fc075030310 <col:18> 'int' lvalue ParmVar 0x7fc07502f870 'n' 'int'
|     |-UnaryOperator 0x7fc0750303a0 <col:21, col:22> 'int' postfix '++'
|     | `-DeclRefExpr 0x7fc075030380 <col:21> 'int' lvalue Var 0x7fc075030178 'i' 'int'
|     `-CompoundStmt 0x7fc075031900 <col:27, line:11:5>
|       `-BinaryOperator 0x7fc0750318e0 <line:10:9, col:33> 'double' '='
|         |-ArraySubscriptExpr 0x7fc0750304c8 <col:9, col:15> 'double' lvalue
|         | |-ImplicitCastExpr 0x7fc075030498 <col:9, col:12> 'double *' <ArrayToPointerDecay>
|         | | `-ArraySubscriptExpr 0x7fc075030428 <col:9, col:12> 'double [m]' lvalue
|         | |   |-ImplicitCastExpr 0x7fc0750303f8 <col:9> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
|         | |   | `-DeclRefExpr 0x7fc0750303b8 <col:9> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fc07502fdf0 'z' 'double (*)[m]':'double (*)[m]'
|         | |   `-ImplicitCastExpr 0x7fc075030410 <col:11> 'int' <LValueToRValue>
|         | |     `-DeclRefExpr 0x7fc0750303d8 <col:11> 'int' lvalue Var 0x7fc075030178 'i' 'int'
|         | `-ImplicitCastExpr 0x7fc0750304b0 <col:14> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x7fc075030448 <col:14> 'int' lvalue ParmVar 0x7fc07502f970 'p' 'int'
|         `-CallExpr 0x7fc075031880 <col:19, col:33> 'double'
|           |-ImplicitCastExpr 0x7fc075031868 <col:19> 'double (*)(double, double)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x7fc0750306f8 <col:19> 'double (double, double)' Function 0x7fc075030528 'fmod' 'double (double, double)'
|           |-ImplicitCastExpr 0x7fc0750318b0 <col:24, col:30> 'double' <LValueToRValue>
|           | `-ArraySubscriptExpr 0x7fc075031800 <col:24, col:30> 'double' lvalue
|           |   |-ImplicitCastExpr 0x7fc0750307c8 <col:24, col:27> 'double *' <ArrayToPointerDecay>
|           |   | `-ArraySubscriptExpr 0x7fc075030788 <col:24, col:27> 'double [m]' lvalue
|           |   |   |-ImplicitCastExpr 0x7fc075030758 <col:24> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
|           |   |   | `-DeclRefExpr 0x7fc075030718 <col:24> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fc07502fb70 'x' 'double (*)[m]':'double (*)[m]'
|           |   |   `-ImplicitCastExpr 0x7fc075030770 <col:26> 'int' <LValueToRValue>
|           |   |     `-DeclRefExpr 0x7fc075030738 <col:26> 'int' lvalue Var 0x7fc075030178 'i' 'int'
|           |   `-ImplicitCastExpr 0x7fc0750307e0 <col:29> 'int' <LValueToRValue>
|           |     `-DeclRefExpr 0x7fc0750307a8 <col:29> 'int' lvalue ParmVar 0x7fc07502f970 'p' 'int'
|           `-ImplicitCastExpr 0x7fc0750318c8 <col:32> 'double' <LValueToRValue>
|             `-DeclRefExpr 0x7fc075031820 <col:32> 'double' lvalue ParmVar 0x7fc07502fbf0 'y' 'double'
`-FunctionDecl 0x7fc075030528 <col:19> col:19 implicit used fmod 'double (double, double)' extern
  |-ParmVarDecl 0x7fc0750305c8 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x7fc075030630 <<invalid sloc>> <invalid sloc> 'double'
  |-ConstAttr 0x7fc0750306a8 <col:19> Implicit
  `-NoThrowAttr 0x7fc0750306e8 <col:19> Implicit
