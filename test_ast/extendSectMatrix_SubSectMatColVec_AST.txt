TranslationUnitDecl 0x7fd82d038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fd82d0394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fd82d0391a0 '__int128'
|-TypedefDecl 0x7fd82d039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fd82d0391c0 'unsigned __int128'
|-TypedefDecl 0x7fd82d0397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fd82d0395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fd82d039568 '__NSConstantString_tag'
|-TypedefDecl 0x7fd82d039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fd82d039850 'char *'
|   `-BuiltinType 0x7fd82d038ca0 'char'
|-TypedefDecl 0x7fd82d039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fd82d039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fd82d039970 'struct __va_list_tag'
|     `-Record 0x7fd82d0398e8 '__va_list_tag'
|-TypedefDecl 0x7fd82d81cc00 <./tree_src/extendSectMatrix_SubSectMatColVec.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fd82d038d60 'unsigned char'
`-FunctionDecl 0x7fd82d81f378 <line:5:1, line:24:1> line:5:6 SubSectMatColVec 'void (int, int, int, int, int, double (*)[mx], double *, double (*)[mz], int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)'
  |-ParmVarDecl 0x7fd82d81cc70 <line:6:5, col:9> col:9 used nx 'int'
  |-ParmVarDecl 0x7fd82d81ccf0 <col:13, col:17> col:17 used mx 'int'
  |-ParmVarDecl 0x7fd82d81cd70 <col:21, col:25> col:25 used my 'int'
  |-ParmVarDecl 0x7fd82d81cdf0 <col:29, col:33> col:33 used nz 'int'
  |-ParmVarDecl 0x7fd82d81ce70 <col:37, col:41> col:41 used mz 'int'
  |-ParmVarDecl 0x7fd82d81d070 <line:7:5, col:20> col:12 used x 'double (*)[mx]':'double (*)[mx]'
  |-ParmVarDecl 0x7fd82d81d1f0 <col:23, col:34> col:30 used y 'double *':'double *'
  |-ParmVarDecl 0x7fd82d81d3f0 <col:37, col:52> col:44 used z 'double (*)[mz]':'double (*)[mz]'
  |-ParmVarDecl 0x7fd82d81d470 <line:8:5, col:9> col:9 used startx1 'int'
  |-ParmVarDecl 0x7fd82d81d4f0 <col:18, col:22> col:22 used stopx1 'int'
  |-ParmVarDecl 0x7fd82d81d570 <col:30, col:34> col:34 used stepx1 'int'
  |-ParmVarDecl 0x7fd82d81d5f0 <col:42, col:46> col:46 used startx2 'int'
  |-ParmVarDecl 0x7fd82d81d670 <col:55, col:59> col:59 used stopx2 'int'
  |-ParmVarDecl 0x7fd82d81d6f0 <col:67, col:71> col:71 used stepx2 'int'
  |-ParmVarDecl 0x7fd82d81d770 <line:9:5, col:9> col:9 used starty 'int'
  |-ParmVarDecl 0x7fd82d81d7f0 <col:17, col:21> col:21 stopy 'int'
  |-ParmVarDecl 0x7fd82d81d870 <col:28, col:32> col:32 used stepy 'int'
  |-ParmVarDecl 0x7fd82d81d8f0 <line:10:5, col:9> col:9 used startz1 'int'
  |-ParmVarDecl 0x7fd82d81d970 <col:18, col:22> col:22 stopz1 'int'
  |-ParmVarDecl 0x7fd82d81d9f0 <col:30, col:34> col:34 used stepz1 'int'
  |-ParmVarDecl 0x7fd82d81da70 <col:42, col:46> col:46 used startz2 'int'
  |-ParmVarDecl 0x7fd82d81daf0 <col:55, col:59> col:59 stopz2 'int'
  |-ParmVarDecl 0x7fd82d81db70 <col:67, col:71> col:71 used stepz2 'int'
  `-CompoundStmt 0x7fd82d820338 <col:80, line:24:1>
    |-DeclStmt 0x7fd82d81f850 <line:12:5, col:31>
    | |-VarDecl 0x7fd82d81f530 <col:5, col:9> col:9 used ix 'int'
    | |-VarDecl 0x7fd82d81f5b0 <col:5, col:13> col:13 used jx 'int'
    | |-VarDecl 0x7fd82d81f630 <col:5, col:17> col:17 iy 'int'
    | |-VarDecl 0x7fd82d81f6b0 <col:5, col:21> col:21 used jy 'int'
    | |-VarDecl 0x7fd82d81f730 <col:5, col:25> col:25 used iz 'int'
    | `-VarDecl 0x7fd82d81f7b0 <col:5, col:29> col:29 used jz 'int'
    |-BinaryOperator 0x7fd82d81f8c0 <line:13:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7fd82d81f868 <col:5> 'int' lvalue Var 0x7fd82d81f730 'iz' 'int'
    | `-ImplicitCastExpr 0x7fd82d81f8a8 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7fd82d81f888 <col:10> 'int' lvalue ParmVar 0x7fd82d81d8f0 'startz1' 'int'
    `-ForStmt 0x7fd82d820300 <line:14:5, line:23:5>
      |-BinaryOperator 0x7fd82d81f938 <line:14:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7fd82d81f8e0 <col:10> 'int' lvalue Var 0x7fd82d81f530 'ix' 'int'
      | `-ImplicitCastExpr 0x7fd82d81f920 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fd82d81f900 <col:14> 'int' lvalue ParmVar 0x7fd82d81d470 'startx1' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7fd82d81f9c8 <col:23, col:26> 'int' '<'
      | |-ImplicitCastExpr 0x7fd82d81f998 <col:23> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fd82d81f958 <col:23> 'int' lvalue Var 0x7fd82d81f530 'ix' 'int'
      | `-ImplicitCastExpr 0x7fd82d81f9b0 <col:26> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fd82d81f978 <col:26> 'int' lvalue ParmVar 0x7fd82d81d4f0 'stopx1' 'int'
      |-CompoundAssignOperator 0x7fd82d81fa40 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7fd82d81f9e8 <col:34> 'int' lvalue Var 0x7fd82d81f530 'ix' 'int'
      | `-ImplicitCastExpr 0x7fd82d81fa28 <col:39> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fd82d81fa08 <col:39> 'int' lvalue ParmVar 0x7fd82d81d570 'stepx1' 'int'
      `-CompoundStmt 0x7fd82d8202d0 <col:48, line:23:5>
        |-BinaryOperator 0x7fd82d81fac8 <line:15:9, col:14> 'int' '='
        | |-DeclRefExpr 0x7fd82d81fa70 <col:9> 'int' lvalue Var 0x7fd82d81f6b0 'jy' 'int'
        | `-ImplicitCastExpr 0x7fd82d81fab0 <col:14> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x7fd82d81fa90 <col:14> 'int' lvalue ParmVar 0x7fd82d81d770 'starty' 'int'
        |-BinaryOperator 0x7fd82d81fb40 <line:16:9, col:14> 'int' '='
        | |-DeclRefExpr 0x7fd82d81fae8 <col:9> 'int' lvalue Var 0x7fd82d81f7b0 'jz' 'int'
        | `-ImplicitCastExpr 0x7fd82d81fb28 <col:14> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x7fd82d81fb08 <col:14> 'int' lvalue ParmVar 0x7fd82d81da70 'startz2' 'int'
        |-ForStmt 0x7fd82d8201c8 <line:17:9, line:21:9>
        | |-BinaryOperator 0x7fd82d81fbb8 <line:17:14, col:18> 'int' '='
        | | |-DeclRefExpr 0x7fd82d81fb60 <col:14> 'int' lvalue Var 0x7fd82d81f5b0 'jx' 'int'
        | | `-ImplicitCastExpr 0x7fd82d81fba0 <col:18> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fd82d81fb80 <col:18> 'int' lvalue ParmVar 0x7fd82d81d5f0 'startx2' 'int'
        | |-<<<NULL>>>
        | |-BinaryOperator 0x7fd82d81fc48 <col:27, col:30> 'int' '<'
        | | |-ImplicitCastExpr 0x7fd82d81fc18 <col:27> 'int' <LValueToRValue>
        | | | `-DeclRefExpr 0x7fd82d81fbd8 <col:27> 'int' lvalue Var 0x7fd82d81f5b0 'jx' 'int'
        | | `-ImplicitCastExpr 0x7fd82d81fc30 <col:30> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fd82d81fbf8 <col:30> 'int' lvalue ParmVar 0x7fd82d81d670 'stopx2' 'int'
        | |-CompoundAssignOperator 0x7fd82d81fcc0 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
        | | |-DeclRefExpr 0x7fd82d81fc68 <col:38> 'int' lvalue Var 0x7fd82d81f5b0 'jx' 'int'
        | | `-ImplicitCastExpr 0x7fd82d81fca8 <col:43> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fd82d81fc88 <col:43> 'int' lvalue ParmVar 0x7fd82d81d6f0 'stepx2' 'int'
        | `-CompoundStmt 0x7fd82d8201a0 <col:52, line:21:9>
        |   |-BinaryOperator 0x7fd82d81ffd0 <line:18:6, col:34> 'double' '='
        |   | |-ArraySubscriptExpr 0x7fd82d81fdd0 <col:6, col:14> 'double' lvalue
        |   | | |-ImplicitCastExpr 0x7fd82d81fda0 <col:6, col:10> 'double *' <ArrayToPointerDecay>
        |   | | | `-ArraySubscriptExpr 0x7fd82d81fd60 <col:6, col:10> 'double [mz]' lvalue
        |   | | |   |-ImplicitCastExpr 0x7fd82d81fd30 <col:6> 'double (*)[mz]':'double (*)[mz]' <LValueToRValue>
        |   | | |   | `-DeclRefExpr 0x7fd82d81fcf0 <col:6> 'double (*)[mz]':'double (*)[mz]' lvalue ParmVar 0x7fd82d81d3f0 'z' 'double (*)[mz]':'double (*)[mz]'
        |   | | |   `-ImplicitCastExpr 0x7fd82d81fd48 <col:8> 'int' <LValueToRValue>
        |   | | |     `-DeclRefExpr 0x7fd82d81fd10 <col:8> 'int' lvalue Var 0x7fd82d81f7b0 'jz' 'int'
        |   | | `-ImplicitCastExpr 0x7fd82d81fdb8 <col:12> 'int' <LValueToRValue>
        |   | |   `-DeclRefExpr 0x7fd82d81fd80 <col:12> 'int' lvalue Var 0x7fd82d81f730 'iz' 'int'
        |   | `-BinaryOperator 0x7fd82d81ffb0 <col:18, col:34> 'double' '-'
        |   |   |-ImplicitCastExpr 0x7fd82d81ff80 <col:18, col:26> 'double' <LValueToRValue>
        |   |   | `-ArraySubscriptExpr 0x7fd82d81fed0 <col:18, col:26> 'double' lvalue
        |   |   |   |-ImplicitCastExpr 0x7fd82d81fea0 <col:18, col:22> 'double *' <ArrayToPointerDecay>
        |   |   |   | `-ArraySubscriptExpr 0x7fd82d81fe60 <col:18, col:22> 'double [mx]' lvalue
        |   |   |   |   |-ImplicitCastExpr 0x7fd82d81fe30 <col:18> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
        |   |   |   |   | `-DeclRefExpr 0x7fd82d81fdf0 <col:18> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7fd82d81d070 'x' 'double (*)[mx]':'double (*)[mx]'
        |   |   |   |   `-ImplicitCastExpr 0x7fd82d81fe48 <col:20> 'int' <LValueToRValue>
        |   |   |   |     `-DeclRefExpr 0x7fd82d81fe10 <col:20> 'int' lvalue Var 0x7fd82d81f5b0 'jx' 'int'
        |   |   |   `-ImplicitCastExpr 0x7fd82d81feb8 <col:24> 'int' <LValueToRValue>
        |   |   |     `-DeclRefExpr 0x7fd82d81fe80 <col:24> 'int' lvalue Var 0x7fd82d81f530 'ix' 'int'
        |   |   `-ImplicitCastExpr 0x7fd82d81ff98 <col:30, col:34> 'double' <LValueToRValue>
        |   |     `-ArraySubscriptExpr 0x7fd82d81ff60 <col:30, col:34> 'double' lvalue
        |   |       |-ImplicitCastExpr 0x7fd82d81ff30 <col:30> 'double *':'double *' <LValueToRValue>
        |   |       | `-DeclRefExpr 0x7fd82d81fef0 <col:30> 'double *':'double *' lvalue ParmVar 0x7fd82d81d1f0 'y' 'double *':'double *'
        |   |       `-ImplicitCastExpr 0x7fd82d81ff48 <col:32> 'int' <LValueToRValue>
        |   |         `-DeclRefExpr 0x7fd82d81ff10 <col:32> 'int' lvalue Var 0x7fd82d81f6b0 'jy' 'int'
        |   |-BinaryOperator 0x7fd82d8200b0 <line:19:6, col:16> 'int' '='
        |   | |-DeclRefExpr 0x7fd82d820000 <col:6> 'int' lvalue Var 0x7fd82d81f6b0 'jy' 'int'
        |   | `-BinaryOperator 0x7fd82d820090 <col:11, col:16> 'int' '+'
        |   |   |-ImplicitCastExpr 0x7fd82d820060 <col:11> 'int' <LValueToRValue>
        |   |   | `-DeclRefExpr 0x7fd82d820020 <col:11> 'int' lvalue Var 0x7fd82d81f6b0 'jy' 'int'
        |   |   `-ImplicitCastExpr 0x7fd82d820078 <col:16> 'int' <LValueToRValue>
        |   |     `-DeclRefExpr 0x7fd82d820040 <col:16> 'int' lvalue ParmVar 0x7fd82d81d870 'stepy' 'int'
        |   `-BinaryOperator 0x7fd82d820180 <line:20:6, col:16> 'int' '='
        |     |-DeclRefExpr 0x7fd82d8200d0 <col:6> 'int' lvalue Var 0x7fd82d81f7b0 'jz' 'int'
        |     `-BinaryOperator 0x7fd82d820160 <col:11, col:16> 'int' '+'
        |       |-ImplicitCastExpr 0x7fd82d820130 <col:11> 'int' <LValueToRValue>
        |       | `-DeclRefExpr 0x7fd82d8200f0 <col:11> 'int' lvalue Var 0x7fd82d81f7b0 'jz' 'int'
        |       `-ImplicitCastExpr 0x7fd82d820148 <col:16> 'int' <LValueToRValue>
        |         `-DeclRefExpr 0x7fd82d820110 <col:16> 'int' lvalue ParmVar 0x7fd82d81db70 'stepz2' 'int'
        `-BinaryOperator 0x7fd82d8202b0 <line:22:9, col:19> 'int' '='
          |-DeclRefExpr 0x7fd82d820200 <col:9> 'int' lvalue Var 0x7fd82d81f730 'iz' 'int'
          `-BinaryOperator 0x7fd82d820290 <col:14, col:19> 'int' '+'
            |-ImplicitCastExpr 0x7fd82d820260 <col:14> 'int' <LValueToRValue>
            | `-DeclRefExpr 0x7fd82d820220 <col:14> 'int' lvalue Var 0x7fd82d81f730 'iz' 'int'
            `-ImplicitCastExpr 0x7fd82d820278 <col:19> 'int' <LValueToRValue>
              `-DeclRefExpr 0x7fd82d820240 <col:19> 'int' lvalue ParmVar 0x7fd82d81d9f0 'stepz1' 'int'
