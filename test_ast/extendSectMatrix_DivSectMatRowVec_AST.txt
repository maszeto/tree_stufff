TranslationUnitDecl 0x7f9f6681f808 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f9f668200a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f9f6681fda0 '__int128'
|-TypedefDecl 0x7f9f66820110 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f9f6681fdc0 'unsigned __int128'
|-TypedefDecl 0x7f9f668203f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f9f668201f0 'struct __NSConstantString_tag'
|   `-Record 0x7f9f66820168 '__NSConstantString_tag'
|-TypedefDecl 0x7f9f66820490 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f9f66820450 'char *'
|   `-BuiltinType 0x7f9f6681f8a0 'char'
|-TypedefDecl 0x7f9f66820768 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f9f66820710 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f9f66820570 'struct __va_list_tag'
|     `-Record 0x7f9f668204e8 '__va_list_tag'
|-TypedefDecl 0x7f9f66878200 <./tree_src/extendSectMatrix_DivSectMatRowVec.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7f9f6681f960 'unsigned char'
`-FunctionDecl 0x7f9f6687a578 <line:6:1, line:25:1> line:6:6 DivSectMatRowVec 'void (int, int, int, int, int, double (*)[mx], double *, double (*)[mz], int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)'
  |-ParmVarDecl 0x7f9f66878270 <line:7:5, col:9> col:9 used nx 'int'
  |-ParmVarDecl 0x7f9f668782f0 <col:13, col:17> col:17 used mx 'int'
  |-ParmVarDecl 0x7f9f66878370 <col:21, col:25> col:25 used ny 'int'
  |-ParmVarDecl 0x7f9f668783f0 <col:29, col:33> col:33 used nz 'int'
  |-ParmVarDecl 0x7f9f66878470 <col:37, col:41> col:41 used mz 'int'
  |-ParmVarDecl 0x7f9f66878670 <line:8:5, col:20> col:12 used x 'double (*)[mx]':'double (*)[mx]'
  |-ParmVarDecl 0x7f9f668787f0 <col:23, col:34> col:30 used y 'double *':'double *'
  |-ParmVarDecl 0x7f9f668789f0 <col:37, col:52> col:44 used z 'double (*)[mz]':'double (*)[mz]'
  |-ParmVarDecl 0x7f9f66878a70 <line:9:5, col:9> col:9 used startx1 'int'
  |-ParmVarDecl 0x7f9f66878af0 <col:18, col:22> col:22 used stopx1 'int'
  |-ParmVarDecl 0x7f9f66878b70 <col:30, col:34> col:34 used stepx1 'int'
  |-ParmVarDecl 0x7f9f66878bf0 <col:42, col:46> col:46 used startx2 'int'
  |-ParmVarDecl 0x7f9f66878c70 <col:55, col:59> col:59 used stopx2 'int'
  |-ParmVarDecl 0x7f9f66878cf0 <col:67, col:71> col:71 used stepx2 'int'
  |-ParmVarDecl 0x7f9f66878d70 <line:10:5, col:9> col:9 used starty 'int'
  |-ParmVarDecl 0x7f9f66878df0 <col:17, col:21> col:21 stopy 'int'
  |-ParmVarDecl 0x7f9f66878e70 <col:28, col:32> col:32 used stepy 'int'
  |-ParmVarDecl 0x7f9f66878ef0 <line:11:5, col:9> col:9 used startz1 'int'
  |-ParmVarDecl 0x7f9f66878f70 <col:18, col:22> col:22 stopz1 'int'
  |-ParmVarDecl 0x7f9f66878ff0 <col:30, col:34> col:34 used stepz1 'int'
  |-ParmVarDecl 0x7f9f66879070 <col:42, col:46> col:46 used startz2 'int'
  |-ParmVarDecl 0x7f9f668790f0 <col:55, col:59> col:59 stopz2 'int'
  |-ParmVarDecl 0x7f9f66879170 <col:67, col:71> col:71 used stepz2 'int'
  `-CompoundStmt 0x7f9f6687b538 <col:80, line:25:1>
    |-DeclStmt 0x7f9f6687aa50 <line:13:5, col:31>
    | |-VarDecl 0x7f9f6687a730 <col:5, col:9> col:9 used ix 'int'
    | |-VarDecl 0x7f9f6687a7b0 <col:5, col:13> col:13 used jx 'int'
    | |-VarDecl 0x7f9f6687a830 <col:5, col:17> col:17 iy 'int'
    | |-VarDecl 0x7f9f6687a8b0 <col:5, col:21> col:21 used jy 'int'
    | |-VarDecl 0x7f9f6687a930 <col:5, col:25> col:25 used iz 'int'
    | `-VarDecl 0x7f9f6687a9b0 <col:5, col:29> col:29 used jz 'int'
    |-BinaryOperator 0x7f9f6687aac0 <line:14:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7f9f6687aa68 <col:5> 'int' lvalue Var 0x7f9f6687a930 'iz' 'int'
    | `-ImplicitCastExpr 0x7f9f6687aaa8 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7f9f6687aa88 <col:10> 'int' lvalue ParmVar 0x7f9f66878ef0 'startz1' 'int'
    `-ForStmt 0x7f9f6687b500 <line:15:5, line:24:5>
      |-BinaryOperator 0x7f9f6687ab38 <line:15:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7f9f6687aae0 <col:10> 'int' lvalue Var 0x7f9f6687a730 'ix' 'int'
      | `-ImplicitCastExpr 0x7f9f6687ab20 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f9f6687ab00 <col:14> 'int' lvalue ParmVar 0x7f9f66878a70 'startx1' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7f9f6687abc8 <col:23, col:26> 'int' '<'
      | |-ImplicitCastExpr 0x7f9f6687ab98 <col:23> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7f9f6687ab58 <col:23> 'int' lvalue Var 0x7f9f6687a730 'ix' 'int'
      | `-ImplicitCastExpr 0x7f9f6687abb0 <col:26> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f9f6687ab78 <col:26> 'int' lvalue ParmVar 0x7f9f66878af0 'stopx1' 'int'
      |-CompoundAssignOperator 0x7f9f6687ac40 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7f9f6687abe8 <col:34> 'int' lvalue Var 0x7f9f6687a730 'ix' 'int'
      | `-ImplicitCastExpr 0x7f9f6687ac28 <col:39> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f9f6687ac08 <col:39> 'int' lvalue ParmVar 0x7f9f66878b70 'stepx1' 'int'
      `-CompoundStmt 0x7f9f6687b4d0 <col:48, line:24:5>
        |-BinaryOperator 0x7f9f6687acc8 <line:16:9, col:14> 'int' '='
        | |-DeclRefExpr 0x7f9f6687ac70 <col:9> 'int' lvalue Var 0x7f9f6687a8b0 'jy' 'int'
        | `-ImplicitCastExpr 0x7f9f6687acb0 <col:14> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x7f9f6687ac90 <col:14> 'int' lvalue ParmVar 0x7f9f66878d70 'starty' 'int'
        |-BinaryOperator 0x7f9f6687ad40 <line:17:9, col:14> 'int' '='
        | |-DeclRefExpr 0x7f9f6687ace8 <col:9> 'int' lvalue Var 0x7f9f6687a9b0 'jz' 'int'
        | `-ImplicitCastExpr 0x7f9f6687ad28 <col:14> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x7f9f6687ad08 <col:14> 'int' lvalue ParmVar 0x7f9f66879070 'startz2' 'int'
        |-ForStmt 0x7f9f6687b3c8 <line:18:9, line:22:9>
        | |-BinaryOperator 0x7f9f6687adb8 <line:18:14, col:18> 'int' '='
        | | |-DeclRefExpr 0x7f9f6687ad60 <col:14> 'int' lvalue Var 0x7f9f6687a7b0 'jx' 'int'
        | | `-ImplicitCastExpr 0x7f9f6687ada0 <col:18> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7f9f6687ad80 <col:18> 'int' lvalue ParmVar 0x7f9f66878bf0 'startx2' 'int'
        | |-<<<NULL>>>
        | |-BinaryOperator 0x7f9f6687ae48 <col:27, col:30> 'int' '<'
        | | |-ImplicitCastExpr 0x7f9f6687ae18 <col:27> 'int' <LValueToRValue>
        | | | `-DeclRefExpr 0x7f9f6687add8 <col:27> 'int' lvalue Var 0x7f9f6687a7b0 'jx' 'int'
        | | `-ImplicitCastExpr 0x7f9f6687ae30 <col:30> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7f9f6687adf8 <col:30> 'int' lvalue ParmVar 0x7f9f66878c70 'stopx2' 'int'
        | |-CompoundAssignOperator 0x7f9f6687aec0 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
        | | |-DeclRefExpr 0x7f9f6687ae68 <col:38> 'int' lvalue Var 0x7f9f6687a7b0 'jx' 'int'
        | | `-ImplicitCastExpr 0x7f9f6687aea8 <col:43> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7f9f6687ae88 <col:43> 'int' lvalue ParmVar 0x7f9f66878cf0 'stepx2' 'int'
        | `-CompoundStmt 0x7f9f6687b3a0 <col:52, line:22:9>
        |   |-BinaryOperator 0x7f9f6687b1d0 <line:19:6, col:34> 'double' '='
        |   | |-ArraySubscriptExpr 0x7f9f6687afd0 <col:6, col:14> 'double' lvalue
        |   | | |-ImplicitCastExpr 0x7f9f6687afa0 <col:6, col:10> 'double *' <ArrayToPointerDecay>
        |   | | | `-ArraySubscriptExpr 0x7f9f6687af60 <col:6, col:10> 'double [mz]' lvalue
        |   | | |   |-ImplicitCastExpr 0x7f9f6687af30 <col:6> 'double (*)[mz]':'double (*)[mz]' <LValueToRValue>
        |   | | |   | `-DeclRefExpr 0x7f9f6687aef0 <col:6> 'double (*)[mz]':'double (*)[mz]' lvalue ParmVar 0x7f9f668789f0 'z' 'double (*)[mz]':'double (*)[mz]'
        |   | | |   `-ImplicitCastExpr 0x7f9f6687af48 <col:8> 'int' <LValueToRValue>
        |   | | |     `-DeclRefExpr 0x7f9f6687af10 <col:8> 'int' lvalue Var 0x7f9f6687a930 'iz' 'int'
        |   | | `-ImplicitCastExpr 0x7f9f6687afb8 <col:12> 'int' <LValueToRValue>
        |   | |   `-DeclRefExpr 0x7f9f6687af80 <col:12> 'int' lvalue Var 0x7f9f6687a9b0 'jz' 'int'
        |   | `-BinaryOperator 0x7f9f6687b1b0 <col:18, col:34> 'double' '/'
        |   |   |-ImplicitCastExpr 0x7f9f6687b180 <col:18, col:26> 'double' <LValueToRValue>
        |   |   | `-ArraySubscriptExpr 0x7f9f6687b0d0 <col:18, col:26> 'double' lvalue
        |   |   |   |-ImplicitCastExpr 0x7f9f6687b0a0 <col:18, col:22> 'double *' <ArrayToPointerDecay>
        |   |   |   | `-ArraySubscriptExpr 0x7f9f6687b060 <col:18, col:22> 'double [mx]' lvalue
        |   |   |   |   |-ImplicitCastExpr 0x7f9f6687b030 <col:18> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
        |   |   |   |   | `-DeclRefExpr 0x7f9f6687aff0 <col:18> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7f9f66878670 'x' 'double (*)[mx]':'double (*)[mx]'
        |   |   |   |   `-ImplicitCastExpr 0x7f9f6687b048 <col:20> 'int' <LValueToRValue>
        |   |   |   |     `-DeclRefExpr 0x7f9f6687b010 <col:20> 'int' lvalue Var 0x7f9f6687a730 'ix' 'int'
        |   |   |   `-ImplicitCastExpr 0x7f9f6687b0b8 <col:24> 'int' <LValueToRValue>
        |   |   |     `-DeclRefExpr 0x7f9f6687b080 <col:24> 'int' lvalue Var 0x7f9f6687a7b0 'jx' 'int'
        |   |   `-ImplicitCastExpr 0x7f9f6687b198 <col:30, col:34> 'double' <LValueToRValue>
        |   |     `-ArraySubscriptExpr 0x7f9f6687b160 <col:30, col:34> 'double' lvalue
        |   |       |-ImplicitCastExpr 0x7f9f6687b130 <col:30> 'double *':'double *' <LValueToRValue>
        |   |       | `-DeclRefExpr 0x7f9f6687b0f0 <col:30> 'double *':'double *' lvalue ParmVar 0x7f9f668787f0 'y' 'double *':'double *'
        |   |       `-ImplicitCastExpr 0x7f9f6687b148 <col:32> 'int' <LValueToRValue>
        |   |         `-DeclRefExpr 0x7f9f6687b110 <col:32> 'int' lvalue Var 0x7f9f6687a8b0 'jy' 'int'
        |   |-BinaryOperator 0x7f9f6687b2b0 <line:20:6, col:16> 'int' '='
        |   | |-DeclRefExpr 0x7f9f6687b200 <col:6> 'int' lvalue Var 0x7f9f6687a8b0 'jy' 'int'
        |   | `-BinaryOperator 0x7f9f6687b290 <col:11, col:16> 'int' '+'
        |   |   |-ImplicitCastExpr 0x7f9f6687b260 <col:11> 'int' <LValueToRValue>
        |   |   | `-DeclRefExpr 0x7f9f6687b220 <col:11> 'int' lvalue Var 0x7f9f6687a8b0 'jy' 'int'
        |   |   `-ImplicitCastExpr 0x7f9f6687b278 <col:16> 'int' <LValueToRValue>
        |   |     `-DeclRefExpr 0x7f9f6687b240 <col:16> 'int' lvalue ParmVar 0x7f9f66878e70 'stepy' 'int'
        |   `-BinaryOperator 0x7f9f6687b380 <line:21:6, col:16> 'int' '='
        |     |-DeclRefExpr 0x7f9f6687b2d0 <col:6> 'int' lvalue Var 0x7f9f6687a9b0 'jz' 'int'
        |     `-BinaryOperator 0x7f9f6687b360 <col:11, col:16> 'int' '+'
        |       |-ImplicitCastExpr 0x7f9f6687b330 <col:11> 'int' <LValueToRValue>
        |       | `-DeclRefExpr 0x7f9f6687b2f0 <col:11> 'int' lvalue Var 0x7f9f6687a9b0 'jz' 'int'
        |       `-ImplicitCastExpr 0x7f9f6687b348 <col:16> 'int' <LValueToRValue>
        |         `-DeclRefExpr 0x7f9f6687b310 <col:16> 'int' lvalue ParmVar 0x7f9f66879170 'stepz2' 'int'
        `-BinaryOperator 0x7f9f6687b4b0 <line:23:9, col:19> 'int' '='
          |-DeclRefExpr 0x7f9f6687b400 <col:9> 'int' lvalue Var 0x7f9f6687a930 'iz' 'int'
          `-BinaryOperator 0x7f9f6687b490 <col:14, col:19> 'int' '+'
            |-ImplicitCastExpr 0x7f9f6687b460 <col:14> 'int' <LValueToRValue>
            | `-DeclRefExpr 0x7f9f6687b420 <col:14> 'int' lvalue Var 0x7f9f6687a930 'iz' 'int'
            `-ImplicitCastExpr 0x7f9f6687b478 <col:19> 'int' <LValueToRValue>
              `-DeclRefExpr 0x7f9f6687b440 <col:19> 'int' lvalue ParmVar 0x7f9f66878ff0 'stepz1' 'int'
