TranslationUnitDecl 0x7f87d3038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f87d30394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f87d30391a0 '__int128'
|-TypedefDecl 0x7f87d3039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f87d30391c0 'unsigned __int128'
|-TypedefDecl 0x7f87d30397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f87d30395f0 'struct __NSConstantString_tag'
|   `-Record 0x7f87d3039568 '__NSConstantString_tag'
|-TypedefDecl 0x7f87d3039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f87d3039850 'char *'
|   `-BuiltinType 0x7f87d3038ca0 'char'
|-TypedefDecl 0x7f87d3039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f87d3039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f87d3039970 'struct __va_list_tag'
|     `-Record 0x7f87d30398e8 '__va_list_tag'
|-TypedefDecl 0x7f87d382f200 <./tree_src/extendSectMatrix_AndSectMatSca.c:3:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x7f87d3038d60 'unsigned char'
`-FunctionDecl 0x7f87d3831378 <line:6:1, line:22:1> line:6:6 AndSectMatSca 'void (int, int, int, int, BOOL (*)[mx], BOOL, BOOL (*)[mz], int, int, int, int, int, int, int, int, int, int, int, int)'
  |-ParmVarDecl 0x7f87d382f270 <line:7:5, col:9> col:9 used nx 'int'
  |-ParmVarDecl 0x7f87d382f2f0 <col:13, col:17> col:17 used mx 'int'
  |-ParmVarDecl 0x7f87d382f370 <col:21, col:25> col:25 used nz 'int'
  |-ParmVarDecl 0x7f87d382f3f0 <col:29, col:33> col:33 used mz 'int'
  |-ParmVarDecl 0x7f87d382f6c0 <line:8:5, col:18> col:10 used x 'BOOL (*)[mx]':'BOOL (*)[mx]'
  |-ParmVarDecl 0x7f87d382f738 <col:21, col:26> col:26 used y 'BOOL':'unsigned char'
  |-ParmVarDecl 0x7f87d382f9e0 <col:29, col:42> col:34 used z 'BOOL (*)[mz]':'BOOL (*)[mz]'
  |-ParmVarDecl 0x7f87d382fa60 <line:9:5, col:9> col:9 used startx1 'int'
  |-ParmVarDecl 0x7f87d382fae0 <col:18, col:22> col:22 used stopx1 'int'
  |-ParmVarDecl 0x7f87d382fb60 <col:30, col:34> col:34 used stepx1 'int'
  |-ParmVarDecl 0x7f87d382fbe0 <col:42, col:46> col:46 used startx2 'int'
  |-ParmVarDecl 0x7f87d382fc60 <col:55, col:59> col:59 used stopx2 'int'
  |-ParmVarDecl 0x7f87d382fce0 <col:67, col:71> col:71 used stepx2 'int'
  |-ParmVarDecl 0x7f87d382fd60 <line:10:5, col:9> col:9 used startz1 'int'
  |-ParmVarDecl 0x7f87d382fde0 <col:18, col:22> col:22 stopz1 'int'
  |-ParmVarDecl 0x7f87d382fe60 <col:30, col:34> col:34 used stepz1 'int'
  |-ParmVarDecl 0x7f87d382fee0 <col:42, col:46> col:46 used startz2 'int'
  |-ParmVarDecl 0x7f87d382ff60 <col:55, col:59> col:59 stopz2 'int'
  |-ParmVarDecl 0x7f87d382ffe0 <col:67, col:71> col:71 used stepz2 'int'
  `-CompoundStmt 0x7f87d38320d8 <col:80, line:22:1>
    |-DeclStmt 0x7f87d3831720 <line:12:5, col:23>
    | |-VarDecl 0x7f87d3831510 <col:5, col:9> col:9 used ix 'int'
    | |-VarDecl 0x7f87d3831590 <col:5, col:13> col:13 used jx 'int'
    | |-VarDecl 0x7f87d3831610 <col:5, col:17> col:17 used iz 'int'
    | `-VarDecl 0x7f87d3831690 <col:5, col:21> col:21 used jz 'int'
    |-BinaryOperator 0x7f87d3831790 <line:13:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7f87d3831738 <col:5> 'int' lvalue Var 0x7f87d3831610 'iz' 'int'
    | `-ImplicitCastExpr 0x7f87d3831778 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7f87d3831758 <col:10> 'int' lvalue ParmVar 0x7f87d382fd60 'startz1' 'int'
    `-ForStmt 0x7f87d38320a0 <line:14:5, line:21:5>
      |-BinaryOperator 0x7f87d3831808 <line:14:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7f87d38317b0 <col:10> 'int' lvalue Var 0x7f87d3831510 'ix' 'int'
      | `-ImplicitCastExpr 0x7f87d38317f0 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f87d38317d0 <col:14> 'int' lvalue ParmVar 0x7f87d382fa60 'startx1' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7f87d3831898 <col:23, col:26> 'int' '<'
      | |-ImplicitCastExpr 0x7f87d3831868 <col:23> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7f87d3831828 <col:23> 'int' lvalue Var 0x7f87d3831510 'ix' 'int'
      | `-ImplicitCastExpr 0x7f87d3831880 <col:26> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f87d3831848 <col:26> 'int' lvalue ParmVar 0x7f87d382fae0 'stopx1' 'int'
      |-CompoundAssignOperator 0x7f87d3831910 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7f87d38318b8 <col:34> 'int' lvalue Var 0x7f87d3831510 'ix' 'int'
      | `-ImplicitCastExpr 0x7f87d38318f8 <col:39> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f87d38318d8 <col:39> 'int' lvalue ParmVar 0x7f87d382fb60 'stepx1' 'int'
      `-CompoundStmt 0x7f87d3832078 <col:48, line:21:5>
        |-BinaryOperator 0x7f87d3831998 <line:15:9, col:14> 'int' '='
        | |-DeclRefExpr 0x7f87d3831940 <col:9> 'int' lvalue Var 0x7f87d3831690 'jz' 'int'
        | `-ImplicitCastExpr 0x7f87d3831980 <col:14> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x7f87d3831960 <col:14> 'int' lvalue ParmVar 0x7f87d382fee0 'startz2' 'int'
        |-ForStmt 0x7f87d3831f70 <line:16:9, line:19:9>
        | |-BinaryOperator 0x7f87d3831a10 <line:16:14, col:18> 'int' '='
        | | |-DeclRefExpr 0x7f87d38319b8 <col:14> 'int' lvalue Var 0x7f87d3831590 'jx' 'int'
        | | `-ImplicitCastExpr 0x7f87d38319f8 <col:18> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7f87d38319d8 <col:18> 'int' lvalue ParmVar 0x7f87d382fbe0 'startx2' 'int'
        | |-<<<NULL>>>
        | |-BinaryOperator 0x7f87d3831aa0 <col:27, col:30> 'int' '<'
        | | |-ImplicitCastExpr 0x7f87d3831a70 <col:27> 'int' <LValueToRValue>
        | | | `-DeclRefExpr 0x7f87d3831a30 <col:27> 'int' lvalue Var 0x7f87d3831590 'jx' 'int'
        | | `-ImplicitCastExpr 0x7f87d3831a88 <col:30> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7f87d3831a50 <col:30> 'int' lvalue ParmVar 0x7f87d382fc60 'stopx2' 'int'
        | |-CompoundAssignOperator 0x7f87d3831b18 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
        | | |-DeclRefExpr 0x7f87d3831ac0 <col:38> 'int' lvalue Var 0x7f87d3831590 'jx' 'int'
        | | `-ImplicitCastExpr 0x7f87d3831b00 <col:43> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7f87d3831ae0 <col:43> 'int' lvalue ParmVar 0x7f87d382fce0 'stepx2' 'int'
        | `-CompoundStmt 0x7f87d3831f50 <col:52, line:19:9>
        |   |-BinaryOperator 0x7f87d3831e60 <line:17:6, col:30> 'BOOL':'unsigned char' '='
        |   | |-ArraySubscriptExpr 0x7f87d3831c88 <col:6, col:14> 'BOOL':'unsigned char' lvalue
        |   | | |-ImplicitCastExpr 0x7f87d3831c58 <col:6, col:10> 'BOOL *' <ArrayToPointerDecay>
        |   | | | `-ArraySubscriptExpr 0x7f87d3831bb8 <col:6, col:10> 'BOOL [mz]' lvalue
        |   | | |   |-ImplicitCastExpr 0x7f87d3831b88 <col:6> 'BOOL (*)[mz]':'BOOL (*)[mz]' <LValueToRValue>
        |   | | |   | `-DeclRefExpr 0x7f87d3831b48 <col:6> 'BOOL (*)[mz]':'BOOL (*)[mz]' lvalue ParmVar 0x7f87d382f9e0 'z' 'BOOL (*)[mz]':'BOOL (*)[mz]'
        |   | | |   `-ImplicitCastExpr 0x7f87d3831ba0 <col:8> 'int' <LValueToRValue>
        |   | | |     `-DeclRefExpr 0x7f87d3831b68 <col:8> 'int' lvalue Var 0x7f87d3831610 'iz' 'int'
        |   | | `-ImplicitCastExpr 0x7f87d3831c70 <col:12> 'int' <LValueToRValue>
        |   | |   `-DeclRefExpr 0x7f87d3831bd8 <col:12> 'int' lvalue Var 0x7f87d3831690 'jz' 'int'
        |   | `-ImplicitCastExpr 0x7f87d3831e48 <col:18, col:30> 'BOOL':'unsigned char' <IntegralCast>
        |   |   `-BinaryOperator 0x7f87d3831e28 <col:18, col:30> 'int' '&'
        |   |     |-ImplicitCastExpr 0x7f87d3831de0 <col:18, col:26> 'int' <IntegralCast>
        |   |     | `-ImplicitCastExpr 0x7f87d3831dc8 <col:18, col:26> 'BOOL':'unsigned char' <LValueToRValue>
        |   |     |   `-ArraySubscriptExpr 0x7f87d3831d88 <col:18, col:26> 'BOOL':'unsigned char' lvalue
        |   |     |     |-ImplicitCastExpr 0x7f87d3831d58 <col:18, col:22> 'BOOL *' <ArrayToPointerDecay>
        |   |     |     | `-ArraySubscriptExpr 0x7f87d3831d18 <col:18, col:22> 'BOOL [mx]' lvalue
        |   |     |     |   |-ImplicitCastExpr 0x7f87d3831ce8 <col:18> 'BOOL (*)[mx]':'BOOL (*)[mx]' <LValueToRValue>
        |   |     |     |   | `-DeclRefExpr 0x7f87d3831ca8 <col:18> 'BOOL (*)[mx]':'BOOL (*)[mx]' lvalue ParmVar 0x7f87d382f6c0 'x' 'BOOL (*)[mx]':'BOOL (*)[mx]'
        |   |     |     |   `-ImplicitCastExpr 0x7f87d3831d00 <col:20> 'int' <LValueToRValue>
        |   |     |     |     `-DeclRefExpr 0x7f87d3831cc8 <col:20> 'int' lvalue Var 0x7f87d3831510 'ix' 'int'
        |   |     |     `-ImplicitCastExpr 0x7f87d3831d70 <col:24> 'int' <LValueToRValue>
        |   |     |       `-DeclRefExpr 0x7f87d3831d38 <col:24> 'int' lvalue Var 0x7f87d3831590 'jx' 'int'
        |   |     `-ImplicitCastExpr 0x7f87d3831e10 <col:30> 'int' <IntegralCast>
        |   |       `-ImplicitCastExpr 0x7f87d3831df8 <col:30> 'BOOL':'unsigned char' <LValueToRValue>
        |   |         `-DeclRefExpr 0x7f87d3831da8 <col:30> 'BOOL':'unsigned char' lvalue ParmVar 0x7f87d382f738 'y' 'BOOL':'unsigned char'
        |   `-BinaryOperator 0x7f87d3831f30 <line:18:6, col:16> 'int' '='
        |     |-DeclRefExpr 0x7f87d3831e80 <col:6> 'int' lvalue Var 0x7f87d3831690 'jz' 'int'
        |     `-BinaryOperator 0x7f87d3831f10 <col:11, col:16> 'int' '+'
        |       |-ImplicitCastExpr 0x7f87d3831ee0 <col:11> 'int' <LValueToRValue>
        |       | `-DeclRefExpr 0x7f87d3831ea0 <col:11> 'int' lvalue Var 0x7f87d3831690 'jz' 'int'
        |       `-ImplicitCastExpr 0x7f87d3831ef8 <col:16> 'int' <LValueToRValue>
        |         `-DeclRefExpr 0x7f87d3831ec0 <col:16> 'int' lvalue ParmVar 0x7f87d382ffe0 'stepz2' 'int'
        `-BinaryOperator 0x7f87d3832058 <line:20:9, col:19> 'int' '='
          |-DeclRefExpr 0x7f87d3831fa8 <col:9> 'int' lvalue Var 0x7f87d3831610 'iz' 'int'
          `-BinaryOperator 0x7f87d3832038 <col:14, col:19> 'int' '+'
            |-ImplicitCastExpr 0x7f87d3832008 <col:14> 'int' <LValueToRValue>
            | `-DeclRefExpr 0x7f87d3831fc8 <col:14> 'int' lvalue Var 0x7f87d3831610 'iz' 'int'
            `-ImplicitCastExpr 0x7f87d3832020 <col:19> 'int' <LValueToRValue>
              `-DeclRefExpr 0x7f87d3831fe8 <col:19> 'int' lvalue ParmVar 0x7f87d382fe60 'stepz1' 'int'
