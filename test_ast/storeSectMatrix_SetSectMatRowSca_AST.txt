TranslationUnitDecl 0x7f8d5b034608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f8d5b034ea0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f8d5b034ba0 '__int128'
|-TypedefDecl 0x7f8d5b034f10 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f8d5b034bc0 'unsigned __int128'
|-TypedefDecl 0x7f8d5b0351f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f8d5b034ff0 'struct __NSConstantString_tag'
|   `-Record 0x7f8d5b034f68 '__NSConstantString_tag'
|-TypedefDecl 0x7f8d5b035290 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f8d5b035250 'char *'
|   `-BuiltinType 0x7f8d5b0346a0 'char'
|-TypedefDecl 0x7f8d5b035568 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f8d5b035510 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f8d5b035370 'struct __va_list_tag'
|     `-Record 0x7f8d5b0352e8 '__va_list_tag'
`-FunctionDecl 0x7f8d5b08c718 <./tree_src/storeSectMatrix_SetSectMatRowSca.c:3:1, line:11:1> line:3:6 SetSectMatRowSca 'void (int, int, double, double (*)[mz], int, int, int, int)'
  |-ParmVarDecl 0x7f8d5b08c000 <line:4:5, col:9> col:9 used nz 'int'
  |-ParmVarDecl 0x7f8d5b08c080 <col:13, col:17> col:17 used mz 'int'
  |-ParmVarDecl 0x7f8d5b08c100 <col:21, col:28> col:28 used x 'double'
  |-ParmVarDecl 0x7f8d5b08c300 <col:31, col:46> col:38 used z 'double (*)[mz]':'double (*)[mz]'
  |-ParmVarDecl 0x7f8d5b08c380 <col:49, col:53> col:53 used p 'int'
  |-ParmVarDecl 0x7f8d5b08c400 <line:5:5, col:9> col:9 used startz2 'int'
  |-ParmVarDecl 0x7f8d5b08c480 <col:18, col:22> col:22 used stopz2 'int'
  |-ParmVarDecl 0x7f8d5b08c500 <col:30, col:34> col:34 used stepz2 'int'
  `-CompoundStmt 0x7f8d5b08cc40 <col:43, line:11:1>
    |-DeclStmt 0x7f8d5b08c8c0 <line:7:5, col:11>
    | `-VarDecl 0x7f8d5b08c858 <col:5, col:9> col:9 used jz 'int'
    `-ForStmt 0x7f8d5b08cc08 <line:8:5, line:10:5>
      |-BinaryOperator 0x7f8d5b08c930 <line:8:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7f8d5b08c8d8 <col:10> 'int' lvalue Var 0x7f8d5b08c858 'jz' 'int'
      | `-ImplicitCastExpr 0x7f8d5b08c918 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f8d5b08c8f8 <col:14> 'int' lvalue ParmVar 0x7f8d5b08c400 'startz2' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7f8d5b08c9c0 <col:23, col:26> 'int' '<'
      | |-ImplicitCastExpr 0x7f8d5b08c990 <col:23> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7f8d5b08c950 <col:23> 'int' lvalue Var 0x7f8d5b08c858 'jz' 'int'
      | `-ImplicitCastExpr 0x7f8d5b08c9a8 <col:26> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f8d5b08c970 <col:26> 'int' lvalue ParmVar 0x7f8d5b08c480 'stopz2' 'int'
      |-CompoundAssignOperator 0x7f8d5b08ca38 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7f8d5b08c9e0 <col:34> 'int' lvalue Var 0x7f8d5b08c858 'jz' 'int'
      | `-ImplicitCastExpr 0x7f8d5b08ca20 <col:39> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f8d5b08ca00 <col:39> 'int' lvalue ParmVar 0x7f8d5b08c500 'stepz2' 'int'
      `-CompoundStmt 0x7f8d5b08cbf0 <col:48, line:10:5>
        `-BinaryOperator 0x7f8d5b08cbd0 <line:9:9, col:20> 'double' '='
          |-ArraySubscriptExpr 0x7f8d5b08cb78 <col:9, col:16> 'double' lvalue
          | |-ImplicitCastExpr 0x7f8d5b08cb48 <col:9, col:12> 'double *' <ArrayToPointerDecay>
          | | `-ArraySubscriptExpr 0x7f8d5b08cad8 <col:9, col:12> 'double [mz]' lvalue
          | |   |-ImplicitCastExpr 0x7f8d5b08caa8 <col:9> 'double (*)[mz]':'double (*)[mz]' <LValueToRValue>
          | |   | `-DeclRefExpr 0x7f8d5b08ca68 <col:9> 'double (*)[mz]':'double (*)[mz]' lvalue ParmVar 0x7f8d5b08c300 'z' 'double (*)[mz]':'double (*)[mz]'
          | |   `-ImplicitCastExpr 0x7f8d5b08cac0 <col:11> 'int' <LValueToRValue>
          | |     `-DeclRefExpr 0x7f8d5b08ca88 <col:11> 'int' lvalue ParmVar 0x7f8d5b08c380 'p' 'int'
          | `-ImplicitCastExpr 0x7f8d5b08cb60 <col:14> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x7f8d5b08caf8 <col:14> 'int' lvalue Var 0x7f8d5b08c858 'jz' 'int'
          `-ImplicitCastExpr 0x7f8d5b08cbb8 <col:20> 'double' <LValueToRValue>
            `-DeclRefExpr 0x7f8d5b08cb98 <col:20> 'double' lvalue ParmVar 0x7f8d5b08c100 'x' 'double'
