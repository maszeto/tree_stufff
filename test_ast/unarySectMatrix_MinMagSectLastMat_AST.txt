TranslationUnitDecl 0x7fc37201fe08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fc3720206a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fc3720203a0 '__int128'
|-TypedefDecl 0x7fc372020710 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fc3720203c0 'unsigned __int128'
|-TypedefDecl 0x7fc3720209f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fc3720207f0 'struct __NSConstantString_tag'
|   `-Record 0x7fc372020768 '__NSConstantString_tag'
|-TypedefDecl 0x7fc372020a90 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fc372020a50 'char *'
|   `-BuiltinType 0x7fc37201fea0 'char'
|-TypedefDecl 0x7fc372020d68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fc372020d10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fc372020b70 'struct __va_list_tag'
|     `-Record 0x7fc372020ae8 '__va_list_tag'
|-TypedefDecl 0x7fc372848800 <./tree_src/unarySectMatrix_MinMagSectLastMat.c:4:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fc37201ff60 'unsigned char'
|-FunctionDecl 0x7fc372849418 <line:12:1, line:28:1> line:12:6 MinMagSectLastMat 'void (int, int, int, double (*)[mx], double *, int, int, int, int, int, int, int, int, int)'
| |-ParmVarDecl 0x7fc372848870 <line:13:5, col:9> col:9 used nx 'int'
| |-ParmVarDecl 0x7fc3728488f0 <col:13, col:17> col:17 used mx 'int'
| |-ParmVarDecl 0x7fc372848970 <col:21, col:25> col:25 used nz 'int'
| |-ParmVarDecl 0x7fc372848b70 <col:29, col:44> col:36 used x 'double (*)[mx]':'double (*)[mx]'
| |-ParmVarDecl 0x7fc372848cf0 <col:47, col:58> col:54 used z 'double *':'double *'
| |-ParmVarDecl 0x7fc372848d70 <line:14:5, col:9> col:9 used startx1 'int'
| |-ParmVarDecl 0x7fc372848df0 <col:18, col:22> col:22 used stopx1 'int'
| |-ParmVarDecl 0x7fc372848e70 <col:30, col:34> col:34 used stepx1 'int'
| |-ParmVarDecl 0x7fc372848ef0 <col:42, col:46> col:46 used startx2 'int'
| |-ParmVarDecl 0x7fc372848f70 <col:55, col:59> col:59 used stopx2 'int'
| |-ParmVarDecl 0x7fc372848ff0 <col:67, col:71> col:71 used stepx2 'int'
| |-ParmVarDecl 0x7fc372849070 <line:15:5, col:9> col:9 used startz 'int'
| |-ParmVarDecl 0x7fc3728490f0 <col:17, col:21> col:21 stopz 'int'
| |-ParmVarDecl 0x7fc372849170 <col:28, col:32> col:32 stepz 'int'
| `-CompoundStmt 0x7fc37284c4f0 <col:40, line:28:1>
|   |-DeclStmt 0x7fc37284b830 <line:17:5, col:27>
|   | |-VarDecl 0x7fc372849588 <col:5, col:9> col:9 used ix 'int'
|   | |-VarDecl 0x7fc372849608 <col:5, col:13> col:13 used jx 'int'
|   | |-VarDecl 0x7fc372849688 <col:5, col:17> col:17 iy 'int'
|   | |-VarDecl 0x7fc372849708 <col:5, col:21> col:21 jy 'int'
|   | `-VarDecl 0x7fc372849788 <col:5, col:25> col:25 used iz 'int'
|   |-DeclStmt 0x7fc37284b8c8 <line:18:5, col:15>
|   | `-VarDecl 0x7fc37284b860 <col:5, col:12> col:12 used val 'double'
|   |-BinaryOperator 0x7fc37284b938 <line:19:5, col:10> 'int' '='
|   | |-DeclRefExpr 0x7fc37284b8e0 <col:5> 'int' lvalue Var 0x7fc372849788 'iz' 'int'
|   | `-ImplicitCastExpr 0x7fc37284b920 <col:10> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fc37284b900 <col:10> 'int' lvalue ParmVar 0x7fc372849070 'startz' 'int'
|   `-ForStmt 0x7fc37284c4b8 <line:20:5, line:27:5>
|     |-BinaryOperator 0x7fc37284b9b0 <line:20:10, col:14> 'int' '='
|     | |-DeclRefExpr 0x7fc37284b958 <col:10> 'int' lvalue Var 0x7fc372849588 'ix' 'int'
|     | `-ImplicitCastExpr 0x7fc37284b998 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fc37284b978 <col:14> 'int' lvalue ParmVar 0x7fc372848d70 'startx1' 'int'
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fc37284ba40 <col:23, col:26> 'int' '<'
|     | |-ImplicitCastExpr 0x7fc37284ba10 <col:23> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fc37284b9d0 <col:23> 'int' lvalue Var 0x7fc372849588 'ix' 'int'
|     | `-ImplicitCastExpr 0x7fc37284ba28 <col:26> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fc37284b9f0 <col:26> 'int' lvalue ParmVar 0x7fc372848df0 'stopx1' 'int'
|     |-CompoundAssignOperator 0x7fc37284bab8 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     | |-DeclRefExpr 0x7fc37284ba60 <col:34> 'int' lvalue Var 0x7fc372849588 'ix' 'int'
|     | `-ImplicitCastExpr 0x7fc37284baa0 <col:39> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fc37284ba80 <col:39> 'int' lvalue ParmVar 0x7fc372848e70 'stepx1' 'int'
|     `-CompoundStmt 0x7fc37284c490 <col:48, line:27:5>
|       |-ForStmt 0x7fc37284c300 <line:22:9, line:24:9>
|       | |-BinaryOperator 0x7fc37284bb60 <line:22:14, col:18> 'int' '='
|       | | |-DeclRefExpr 0x7fc37284bb08 <col:14> 'int' lvalue Var 0x7fc372849608 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7fc37284bb48 <col:18> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fc37284bb28 <col:18> 'int' lvalue ParmVar 0x7fc372848ef0 'startx2' 'int'
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x7fc37284bbf0 <col:27, col:30> 'int' '<'
|       | | |-ImplicitCastExpr 0x7fc37284bbc0 <col:27> 'int' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7fc37284bb80 <col:27> 'int' lvalue Var 0x7fc372849608 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7fc37284bbd8 <col:30> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fc37284bba0 <col:30> 'int' lvalue ParmVar 0x7fc372848f70 'stopx2' 'int'
|       | |-CompoundAssignOperator 0x7fc37284bc68 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|       | | |-DeclRefExpr 0x7fc37284bc10 <col:38> 'int' lvalue Var 0x7fc372849608 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7fc37284bc50 <col:43> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fc37284bc30 <col:43> 'int' lvalue ParmVar 0x7fc372848ff0 'stepx2' 'int'
|       | `-CompoundStmt 0x7fc37284c2e8 <col:52, line:24:9>
|       |   `-BinaryOperator 0x7fc37284c2c8 <line:23:13, col:45> 'double' '='
|       |     |-DeclRefExpr 0x7fc37284bc98 <col:13> 'double' lvalue Var 0x7fc37284b860 'val' 'double'
|       |     `-CallExpr 0x7fc37284c280 <col:19, col:45> 'double'
|       |       |-ImplicitCastExpr 0x7fc37284c268 <col:19> 'double (*)(double, double)' <FunctionToPointerDecay>
|       |       | `-DeclRefExpr 0x7fc37284bec8 <col:19> 'double (double, double)' Function 0x7fc37284bcf8 'fmin' 'double (double, double)'
|       |       |-ImplicitCastExpr 0x7fc37284c2b0 <col:25> 'double' <LValueToRValue>
|       |       | `-DeclRefExpr 0x7fc37284bee8 <col:25> 'double' lvalue Var 0x7fc37284b860 'val' 'double'
|       |       `-CallExpr 0x7fc37284c200 <col:30, col:44> 'double'
|       |         |-ImplicitCastExpr 0x7fc37284c1e8 <col:30> 'double (*)(double)' <FunctionToPointerDecay>
|       |         | `-DeclRefExpr 0x7fc37284c0a0 <col:30> 'double (double)' Function 0x7fc37284bf40 'fabs' 'double (double)'
|       |         `-ImplicitCastExpr 0x7fc37284c228 <col:35, col:43> 'double' <LValueToRValue>
|       |           `-ArraySubscriptExpr 0x7fc37284c1a0 <col:35, col:43> 'double' lvalue
|       |             |-ImplicitCastExpr 0x7fc37284c170 <col:35, col:39> 'double *' <ArrayToPointerDecay>
|       |             | `-ArraySubscriptExpr 0x7fc37284c130 <col:35, col:39> 'double [mx]' lvalue
|       |             |   |-ImplicitCastExpr 0x7fc37284c100 <col:35> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
|       |             |   | `-DeclRefExpr 0x7fc37284c0c0 <col:35> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7fc372848b70 'x' 'double (*)[mx]':'double (*)[mx]'
|       |             |   `-ImplicitCastExpr 0x7fc37284c118 <col:37> 'int' <LValueToRValue>
|       |             |     `-DeclRefExpr 0x7fc37284c0e0 <col:37> 'int' lvalue Var 0x7fc372849588 'ix' 'int'
|       |             `-ImplicitCastExpr 0x7fc37284c188 <col:41> 'int' <LValueToRValue>
|       |               `-DeclRefExpr 0x7fc37284c150 <col:41> 'int' lvalue Var 0x7fc372849608 'jx' 'int'
|       |-BinaryOperator 0x7fc37284c400 <line:25:9, col:17> 'double' '='
|       | |-ArraySubscriptExpr 0x7fc37284c3a8 <col:9, col:13> 'double' lvalue
|       | | |-ImplicitCastExpr 0x7fc37284c378 <col:9> 'double *':'double *' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7fc37284c338 <col:9> 'double *':'double *' lvalue ParmVar 0x7fc372848cf0 'z' 'double *':'double *'
|       | | `-ImplicitCastExpr 0x7fc37284c390 <col:11> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fc37284c358 <col:11> 'int' lvalue Var 0x7fc372849788 'iz' 'int'
|       | `-ImplicitCastExpr 0x7fc37284c3e8 <col:17> 'double' <LValueToRValue>
|       |   `-DeclRefExpr 0x7fc37284c3c8 <col:17> 'double' lvalue Var 0x7fc37284b860 'val' 'double'
|       `-CompoundAssignOperator 0x7fc37284c460 <line:26:9, col:15> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|         |-DeclRefExpr 0x7fc37284c420 <col:9> 'int' lvalue Var 0x7fc372849788 'iz' 'int'
|         `-IntegerLiteral 0x7fc37284c440 <col:15> 'int' 1
|-FunctionDecl 0x7fc37284bcf8 <line:23:19> col:19 implicit used fmin 'double (double, double)' extern
| |-ParmVarDecl 0x7fc37284bd98 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x7fc37284be00 <<invalid sloc>> <invalid sloc> 'double'
| |-NoThrowAttr 0x7fc37284be78 <col:19> Implicit
| `-ConstAttr 0x7fc37284beb8 <col:19> Implicit
`-FunctionDecl 0x7fc37284bf40 <col:30> col:30 implicit used fabs 'double (double)' extern
  |-ParmVarDecl 0x7fc37284bfe0 <<invalid sloc>> <invalid sloc> 'double'
  |-NoThrowAttr 0x7fc37284c050 <col:30> Implicit
  `-ConstAttr 0x7fc37284c090 <col:30> Implicit
