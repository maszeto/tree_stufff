TranslationUnitDecl 0x7fcf20838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fcf208394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fcf208391a0 '__int128'
|-TypedefDecl 0x7fcf20839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fcf208391c0 'unsigned __int128'
|-TypedefDecl 0x7fcf208397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fcf208395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fcf20839568 '__NSConstantString_tag'
|-TypedefDecl 0x7fcf20839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fcf20839850 'char *'
|   `-BuiltinType 0x7fcf20838ca0 'char'
|-TypedefDecl 0x7fcf20839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fcf20839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fcf20839970 'struct __va_list_tag'
|     `-Record 0x7fcf208398e8 '__va_list_tag'
|-TypedefDecl 0x7fcf2102f200 <./tree_src/unaryWholeMatrix_SumSuffixWholeFirstMat.c:4:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fcf20838d60 'unsigned char'
`-FunctionDecl 0x7fcf2102f918 <line:11:1, line:21:1> line:11:6 SumSuffixWholeFirstMat 'void (int, int, double (*)[m], double (*)[m])'
  |-ParmVarDecl 0x7fcf2102f270 <line:12:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7fcf2102f2f0 <col:12, col:16> col:16 used m 'int'
  |-ParmVarDecl 0x7fcf2102f4f0 <col:19, col:32> col:26 used x 'double (*)[m]':'double (*)[m]'
  |-ParmVarDecl 0x7fcf2102f6f0 <col:35, col:48> col:42 used y 'double (*)[m]':'double (*)[m]'
  `-CompoundStmt 0x7fcf210324f8 <col:52, line:21:1>
    |-DeclStmt 0x7fcf2102fb38 <line:14:5, col:13>
    | |-VarDecl 0x7fcf2102fa38 <col:5, col:9> col:9 used i 'int'
    | `-VarDecl 0x7fcf2102fab8 <col:5, col:12> col:12 used j 'int'
    `-ForStmt 0x7fcf210324c0 <line:15:5, line:20:5>
      |-BinaryOperator 0x7fcf2102fb90 <line:15:10, col:12> 'int' '='
      | |-DeclRefExpr 0x7fcf2102fb50 <col:10> 'int' lvalue Var 0x7fcf2102fa38 'i' 'int'
      | `-IntegerLiteral 0x7fcf2102fb70 <col:12> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x7fcf2102fc20 <col:15, col:17> 'int' '<'
      | |-ImplicitCastExpr 0x7fcf2102fbf0 <col:15> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fcf2102fbb0 <col:15> 'int' lvalue Var 0x7fcf2102fa38 'i' 'int'
      | `-ImplicitCastExpr 0x7fcf2102fc08 <col:17> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fcf2102fbd0 <col:17> 'int' lvalue ParmVar 0x7fcf2102f270 'n' 'int'
      |-UnaryOperator 0x7fcf2102fc60 <col:20, col:21> 'int' postfix '++'
      | `-DeclRefExpr 0x7fcf2102fc40 <col:20> 'int' lvalue Var 0x7fcf2102fa38 'i' 'int'
      `-CompoundStmt 0x7fcf210324a0 <col:26, line:20:5>
        |-BinaryOperator 0x7fcf2102fec0 <line:16:9, col:25> 'double' '='
        | |-ArraySubscriptExpr 0x7fcf2102fd88 <col:9, col:15> 'double' lvalue
        | | |-ImplicitCastExpr 0x7fcf2102fd58 <col:9, col:12> 'double *' <ArrayToPointerDecay>
        | | | `-ArraySubscriptExpr 0x7fcf2102fce8 <col:9, col:12> 'double [m]' lvalue
        | | |   |-ImplicitCastExpr 0x7fcf2102fcb8 <col:9> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
        | | |   | `-DeclRefExpr 0x7fcf2102fc78 <col:9> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fcf2102f6f0 'y' 'double (*)[m]':'double (*)[m]'
        | | |   `-ImplicitCastExpr 0x7fcf2102fcd0 <col:11> 'int' <LValueToRValue>
        | | |     `-DeclRefExpr 0x7fcf2102fc98 <col:11> 'int' lvalue ParmVar 0x7fcf2102f2f0 'm' 'int'
        | | `-ImplicitCastExpr 0x7fcf2102fd70 <col:14> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fcf2102fd08 <col:14> 'int' lvalue Var 0x7fcf2102fa38 'i' 'int'
        | `-ImplicitCastExpr 0x7fcf2102fea8 <col:19, col:25> 'double' <LValueToRValue>
        |   `-ArraySubscriptExpr 0x7fcf2102fe88 <col:19, col:25> 'double' lvalue
        |     |-ImplicitCastExpr 0x7fcf2102fe58 <col:19, col:22> 'double *' <ArrayToPointerDecay>
        |     | `-ArraySubscriptExpr 0x7fcf2102fe18 <col:19, col:22> 'double [m]' lvalue
        |     |   |-ImplicitCastExpr 0x7fcf2102fde8 <col:19> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
        |     |   | `-DeclRefExpr 0x7fcf2102fda8 <col:19> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fcf2102f4f0 'x' 'double (*)[m]':'double (*)[m]'
        |     |   `-ImplicitCastExpr 0x7fcf2102fe00 <col:21> 'int' <LValueToRValue>
        |     |     `-DeclRefExpr 0x7fcf2102fdc8 <col:21> 'int' lvalue ParmVar 0x7fcf2102f2f0 'm' 'int'
        |     `-ImplicitCastExpr 0x7fcf2102fe70 <col:24> 'int' <LValueToRValue>
        |       `-DeclRefExpr 0x7fcf2102fe38 <col:24> 'int' lvalue Var 0x7fcf2102fa38 'i' 'int'
        `-ForStmt 0x7fcf21032468 <line:17:9, line:19:9>
          |-BinaryOperator 0x7fcf2102ff78 <line:17:14, col:20> 'int' '='
          | |-DeclRefExpr 0x7fcf2102fee0 <col:14> 'int' lvalue Var 0x7fcf2102fab8 'j' 'int'
          | `-BinaryOperator 0x7fcf2102ff58 <col:18, col:20> 'int' '-'
          |   |-ImplicitCastExpr 0x7fcf2102ff40 <col:18> 'int' <LValueToRValue>
          |   | `-DeclRefExpr 0x7fcf2102ff00 <col:18> 'int' lvalue ParmVar 0x7fcf2102f2f0 'm' 'int'
          |   `-IntegerLiteral 0x7fcf2102ff20 <col:20> 'int' 1
          |-<<<NULL>>>
          |-BinaryOperator 0x7fcf2102fff0 <col:23, col:25> 'int' '>'
          | |-ImplicitCastExpr 0x7fcf2102ffd8 <col:23> 'int' <LValueToRValue>
          | | `-DeclRefExpr 0x7fcf2102ff98 <col:23> 'int' lvalue Var 0x7fcf2102fab8 'j' 'int'
          | `-IntegerLiteral 0x7fcf2102ffb8 <col:25> 'int' 1
          |-CompoundAssignOperator 0x7fcf21030068 <col:28, col:33> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
          | |-DeclRefExpr 0x7fcf21030010 <col:28> 'int' lvalue Var 0x7fcf2102fab8 'j' 'int'
          | `-UnaryOperator 0x7fcf21030050 <col:32, col:33> 'int' prefix '-'
          |   `-IntegerLiteral 0x7fcf21030030 <col:33> 'int' 1
          `-CompoundStmt 0x7fcf21032450 <col:37, line:19:9>
            `-BinaryOperator 0x7fcf21032430 <line:18:6, col:34> 'double' '='
              |-ArraySubscriptExpr 0x7fcf21030178 <col:6, col:12> 'double' lvalue
              | |-ImplicitCastExpr 0x7fcf21030148 <col:6, col:9> 'double *' <ArrayToPointerDecay>
              | | `-ArraySubscriptExpr 0x7fcf21030108 <col:6, col:9> 'double [m]' lvalue
              | |   |-ImplicitCastExpr 0x7fcf210300d8 <col:6> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
              | |   | `-DeclRefExpr 0x7fcf21030098 <col:6> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fcf2102f6f0 'y' 'double (*)[m]':'double (*)[m]'
              | |   `-ImplicitCastExpr 0x7fcf210300f0 <col:8> 'int' <LValueToRValue>
              | |     `-DeclRefExpr 0x7fcf210300b8 <col:8> 'int' lvalue Var 0x7fcf2102fab8 'j' 'int'
              | `-ImplicitCastExpr 0x7fcf21030160 <col:11> 'int' <LValueToRValue>
              |   `-DeclRefExpr 0x7fcf21030128 <col:11> 'int' lvalue Var 0x7fcf2102fa38 'i' 'int'
              `-BinaryOperator 0x7fcf21032410 <col:16, col:34> 'double' '+'
                |-ImplicitCastExpr 0x7fcf210323e0 <col:16, col:24> 'double' <LValueToRValue>
                | `-ArraySubscriptExpr 0x7fcf210322c0 <col:16, col:24> 'double' lvalue
                |   |-ImplicitCastExpr 0x7fcf21032290 <col:16, col:21> 'double *' <ArrayToPointerDecay>
                |   | `-ArraySubscriptExpr 0x7fcf21032250 <col:16, col:21> 'double [m]' lvalue
                |   |   |-ImplicitCastExpr 0x7fcf21032238 <col:16> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
                |   |   | `-DeclRefExpr 0x7fcf21030198 <col:16> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fcf2102f6f0 'y' 'double (*)[m]':'double (*)[m]'
                |   |   `-BinaryOperator 0x7fcf21032218 <col:18, col:20> 'int' '+'
                |   |     |-ImplicitCastExpr 0x7fcf21032200 <col:18> 'int' <LValueToRValue>
                |   |     | `-DeclRefExpr 0x7fcf210301b8 <col:18> 'int' lvalue Var 0x7fcf2102fab8 'j' 'int'
                |   |     `-IntegerLiteral 0x7fcf210301d8 <col:20> 'int' 1
                |   `-ImplicitCastExpr 0x7fcf210322a8 <col:23> 'int' <LValueToRValue>
                |     `-DeclRefExpr 0x7fcf21032270 <col:23> 'int' lvalue Var 0x7fcf2102fa38 'i' 'int'
                `-ImplicitCastExpr 0x7fcf210323f8 <col:28, col:34> 'double' <LValueToRValue>
                  `-ArraySubscriptExpr 0x7fcf210323c0 <col:28, col:34> 'double' lvalue
                    |-ImplicitCastExpr 0x7fcf21032390 <col:28, col:31> 'double *' <ArrayToPointerDecay>
                    | `-ArraySubscriptExpr 0x7fcf21032350 <col:28, col:31> 'double [m]' lvalue
                    |   |-ImplicitCastExpr 0x7fcf21032320 <col:28> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
                    |   | `-DeclRefExpr 0x7fcf210322e0 <col:28> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fcf2102f4f0 'x' 'double (*)[m]':'double (*)[m]'
                    |   `-ImplicitCastExpr 0x7fcf21032338 <col:30> 'int' <LValueToRValue>
                    |     `-DeclRefExpr 0x7fcf21032300 <col:30> 'int' lvalue Var 0x7fcf2102fab8 'j' 'int'
                    `-ImplicitCastExpr 0x7fcf210323a8 <col:33> 'int' <LValueToRValue>
                      `-DeclRefExpr 0x7fcf21032370 <col:33> 'int' lvalue Var 0x7fcf2102fa38 'i' 'int'
