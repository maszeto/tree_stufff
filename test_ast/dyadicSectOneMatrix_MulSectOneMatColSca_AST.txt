TranslationUnitDecl 0x7fe9d381fc08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fe9d38204a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fe9d38201a0 '__int128'
|-TypedefDecl 0x7fe9d3820510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fe9d38201c0 'unsigned __int128'
|-TypedefDecl 0x7fe9d38207f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fe9d38205f0 'struct __NSConstantString_tag'
|   `-Record 0x7fe9d3820568 '__NSConstantString_tag'
|-TypedefDecl 0x7fe9d3820890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fe9d3820850 'char *'
|   `-BuiltinType 0x7fe9d381fca0 'char'
|-TypedefDecl 0x7fe9d3820b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fe9d3820b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fe9d3820970 'struct __va_list_tag'
|     `-Record 0x7fe9d38208e8 '__va_list_tag'
|-TypedefDecl 0x7fe9d303e800 <./tree_src/dyadicSectOneMatrix_MulSectOneMatColSca.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fe9d381fd60 'unsigned char'
`-FunctionDecl 0x7fe9d303f3d8 <line:6:1, line:16:1> line:6:6 MulSectOneMatColSca 'void (int, int, int, double, double (*)[m], double (*)[m], int, int, int, int, int, int)'
  |-ParmVarDecl 0x7fe9d303e870 <line:7:5, col:9> col:9 used m 'int'
  |-ParmVarDecl 0x7fe9d303e8f0 <col:12, col:16> col:16 used n 'int'
  |-ParmVarDecl 0x7fe9d303e970 <col:19, col:23> col:23 used p 'int'
  |-ParmVarDecl 0x7fe9d303e9f0 <col:26, col:33> col:33 used y 'double'
  |-ParmVarDecl 0x7fe9d303ebf0 <col:36, col:49> col:43 used z 'double (*)[m]':'double (*)[m]'
  |-ParmVarDecl 0x7fe9d303edf0 <col:52, col:65> col:59 used x 'double (*)[m]':'double (*)[m]'
  |-ParmVarDecl 0x7fe9d303ee70 <line:8:5, col:9> col:9 used sz1 'int'
  |-ParmVarDecl 0x7fe9d303eef0 <col:14, col:18> col:18 ez1 'int'
  |-ParmVarDecl 0x7fe9d303ef70 <col:23, col:27> col:27 used bz1 'int'
  |-ParmVarDecl 0x7fe9d303eff0 <col:32, col:36> col:36 used sx1 'int'
  |-ParmVarDecl 0x7fe9d303f070 <col:41, col:45> col:45 used ex1 'int'
  |-ParmVarDecl 0x7fe9d303f0f0 <col:50, col:54> col:54 used bx1 'int'
  `-CompoundStmt 0x7fe9d3040c08 <col:60, line:16:1>
    |-DeclStmt 0x7fe9d303f638 <line:10:5, col:12>
    | |-VarDecl 0x7fe9d303f538 <col:5, col:9> col:9 used j 'int'
    | `-VarDecl 0x7fe9d303f5b8 <col:5, col:11> col:11 used i 'int'
    |-BinaryOperator 0x7fe9d303f6a8 <line:11:5, col:8> 'int' '='
    | |-DeclRefExpr 0x7fe9d303f650 <col:5> 'int' lvalue Var 0x7fe9d303f538 'j' 'int'
    | `-ImplicitCastExpr 0x7fe9d303f690 <col:8> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7fe9d303f670 <col:8> 'int' lvalue ParmVar 0x7fe9d303ef70 'bz1' 'int'
    `-ForStmt 0x7fe9d3040bd0 <line:12:5, line:15:5>
      |-BinaryOperator 0x7fe9d303f720 <line:12:9, col:12> 'int' '='
      | |-DeclRefExpr 0x7fe9d303f6c8 <col:9> 'int' lvalue Var 0x7fe9d303f5b8 'i' 'int'
      | `-ImplicitCastExpr 0x7fe9d303f708 <col:12> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fe9d303f6e8 <col:12> 'int' lvalue ParmVar 0x7fe9d303f0f0 'bx1' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7fe9d303f7b0 <col:17, col:19> 'int' '<'
      | |-ImplicitCastExpr 0x7fe9d303f780 <col:17> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fe9d303f740 <col:17> 'int' lvalue Var 0x7fe9d303f5b8 'i' 'int'
      | `-ImplicitCastExpr 0x7fe9d303f798 <col:19> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fe9d303f760 <col:19> 'int' lvalue ParmVar 0x7fe9d303f070 'ex1' 'int'
      |-CompoundAssignOperator 0x7fe9d3040838 <col:24, col:28> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7fe9d303f7d0 <col:24> 'int' lvalue Var 0x7fe9d303f5b8 'i' 'int'
      | `-ImplicitCastExpr 0x7fe9d3040820 <col:28> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fe9d3040800 <col:28> 'int' lvalue ParmVar 0x7fe9d303eff0 'sx1' 'int'
      `-CompoundStmt 0x7fe9d3040bb0 <col:34, line:15:5>
        |-BinaryOperator 0x7fe9d3040b08 <line:13:2, col:19> 'double' '='
        | |-ArraySubscriptExpr 0x7fe9d3040978 <col:2, col:8> 'double' lvalue
        | | |-ImplicitCastExpr 0x7fe9d3040948 <col:2, col:5> 'double *' <ArrayToPointerDecay>
        | | | `-ArraySubscriptExpr 0x7fe9d30408d8 <col:2, col:5> 'double [m]' lvalue
        | | |   |-ImplicitCastExpr 0x7fe9d30408a8 <col:2> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
        | | |   | `-DeclRefExpr 0x7fe9d3040868 <col:2> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fe9d303ebf0 'z' 'double (*)[m]':'double (*)[m]'
        | | |   `-ImplicitCastExpr 0x7fe9d30408c0 <col:4> 'int' <LValueToRValue>
        | | |     `-DeclRefExpr 0x7fe9d3040888 <col:4> 'int' lvalue Var 0x7fe9d303f538 'j' 'int'
        | | `-ImplicitCastExpr 0x7fe9d3040960 <col:7> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fe9d30408f8 <col:7> 'int' lvalue ParmVar 0x7fe9d303e970 'p' 'int'
        | `-BinaryOperator 0x7fe9d3040ae8 <col:11, col:19> 'double' '*'
        |   |-ImplicitCastExpr 0x7fe9d3040ab8 <col:11, col:17> 'double' <LValueToRValue>
        |   | `-ArraySubscriptExpr 0x7fe9d3040a78 <col:11, col:17> 'double' lvalue
        |   |   |-ImplicitCastExpr 0x7fe9d3040a48 <col:11, col:14> 'double *' <ArrayToPointerDecay>
        |   |   | `-ArraySubscriptExpr 0x7fe9d3040a08 <col:11, col:14> 'double [m]' lvalue
        |   |   |   |-ImplicitCastExpr 0x7fe9d30409d8 <col:11> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
        |   |   |   | `-DeclRefExpr 0x7fe9d3040998 <col:11> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fe9d303edf0 'x' 'double (*)[m]':'double (*)[m]'
        |   |   |   `-ImplicitCastExpr 0x7fe9d30409f0 <col:13> 'int' <LValueToRValue>
        |   |   |     `-DeclRefExpr 0x7fe9d30409b8 <col:13> 'int' lvalue Var 0x7fe9d303f5b8 'i' 'int'
        |   |   `-ImplicitCastExpr 0x7fe9d3040a60 <col:16> 'int' <LValueToRValue>
        |   |     `-DeclRefExpr 0x7fe9d3040a28 <col:16> 'int' lvalue ParmVar 0x7fe9d303e970 'p' 'int'
        |   `-ImplicitCastExpr 0x7fe9d3040ad0 <col:19> 'double' <LValueToRValue>
        |     `-DeclRefExpr 0x7fe9d3040a98 <col:19> 'double' lvalue ParmVar 0x7fe9d303e9f0 'y' 'double'
        `-CompoundAssignOperator 0x7fe9d3040b80 <line:14:9, col:13> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
          |-DeclRefExpr 0x7fe9d3040b28 <col:9> 'int' lvalue Var 0x7fe9d303f538 'j' 'int'
          `-ImplicitCastExpr 0x7fe9d3040b68 <col:13> 'int' <LValueToRValue>
            `-DeclRefExpr 0x7fe9d3040b48 <col:13> 'int' lvalue ParmVar 0x7fe9d303ee70 'sz1' 'int'
