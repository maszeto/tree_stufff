TranslationUnitDecl 0x7fbfd8038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fbfd80394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fbfd80391a0 '__int128'
|-TypedefDecl 0x7fbfd8039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fbfd80391c0 'unsigned __int128'
|-TypedefDecl 0x7fbfd80397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fbfd80395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fbfd8039568 '__NSConstantString_tag'
|-TypedefDecl 0x7fbfd8039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fbfd8039850 'char *'
|   `-BuiltinType 0x7fbfd8038ca0 'char'
|-TypedefDecl 0x7fbfd8039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fbfd8039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fbfd8039970 'struct __va_list_tag'
|     `-Record 0x7fbfd80398e8 '__va_list_tag'
|-TypedefDecl 0x7fbfd8091600 <./tree_src/dyadicSectMatrix_PowSectMat.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fbfd8038d60 'unsigned char'
|-FunctionDecl 0x7fbfd8093cb8 <line:6:1, line:27:1> line:6:6 PowSectMat 'void (int, int, int, int, int, int, double (*)[mx], double (*)[my], double (*)[mz], int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)'
| |-ParmVarDecl 0x7fbfd8091670 <line:7:5, col:9> col:9 used nx 'int'
| |-ParmVarDecl 0x7fbfd80916f0 <col:13, col:17> col:17 used mx 'int'
| |-ParmVarDecl 0x7fbfd8091770 <col:21, col:25> col:25 used ny 'int'
| |-ParmVarDecl 0x7fbfd80917f0 <col:29, col:33> col:33 used my 'int'
| |-ParmVarDecl 0x7fbfd8091870 <col:37, col:41> col:41 used nz 'int'
| |-ParmVarDecl 0x7fbfd80918f0 <col:45, col:49> col:49 used mz 'int'
| |-ParmVarDecl 0x7fbfd8091af0 <line:8:5, col:20> col:12 used x 'double (*)[mx]':'double (*)[mx]'
| |-ParmVarDecl 0x7fbfd8091cf0 <col:23, col:38> col:30 used y 'double (*)[my]':'double (*)[my]'
| |-ParmVarDecl 0x7fbfd8091ef0 <col:41, col:56> col:48 used z 'double (*)[mz]':'double (*)[mz]'
| |-ParmVarDecl 0x7fbfd8091f70 <line:9:5, col:9> col:9 used startx1 'int'
| |-ParmVarDecl 0x7fbfd8091ff0 <col:18, col:22> col:22 used stopx1 'int'
| |-ParmVarDecl 0x7fbfd8092070 <col:30, col:34> col:34 used stepx1 'int'
| |-ParmVarDecl 0x7fbfd80920f0 <col:42, col:46> col:46 used startx2 'int'
| |-ParmVarDecl 0x7fbfd8092170 <col:55, col:59> col:59 used stopx2 'int'
| |-ParmVarDecl 0x7fbfd80921f0 <col:67, col:71> col:71 used stepx2 'int'
| |-ParmVarDecl 0x7fbfd8092270 <line:10:5, col:9> col:9 used starty1 'int'
| |-ParmVarDecl 0x7fbfd80922f0 <col:18, col:22> col:22 stopy1 'int'
| |-ParmVarDecl 0x7fbfd8092370 <col:30, col:34> col:34 used stepy1 'int'
| |-ParmVarDecl 0x7fbfd80923f0 <col:42, col:46> col:46 used starty2 'int'
| |-ParmVarDecl 0x7fbfd8092470 <col:55, col:59> col:59 stopy2 'int'
| |-ParmVarDecl 0x7fbfd80924f0 <col:67, col:71> col:71 used stepy2 'int'
| |-ParmVarDecl 0x7fbfd8092570 <line:11:5, col:9> col:9 used startz1 'int'
| |-ParmVarDecl 0x7fbfd8093600 <col:18, col:22> col:22 stopz1 'int'
| |-ParmVarDecl 0x7fbfd8093680 <col:30, col:34> col:34 used stepz1 'int'
| |-ParmVarDecl 0x7fbfd8093700 <col:42, col:46> col:46 used startz2 'int'
| |-ParmVarDecl 0x7fbfd8093780 <col:55, col:59> col:59 stopz2 'int'
| |-ParmVarDecl 0x7fbfd8093800 <col:67, col:71> col:71 used stepz2 'int'
| `-CompoundStmt 0x7fbfd8095080 <col:79, line:27:1>
|   |-DeclStmt 0x7fbfd80941b0 <line:13:5, col:31>
|   | |-VarDecl 0x7fbfd8093e90 <col:5, col:9> col:9 used ix 'int'
|   | |-VarDecl 0x7fbfd8093f10 <col:5, col:13> col:13 used jx 'int'
|   | |-VarDecl 0x7fbfd8093f90 <col:5, col:17> col:17 used iy 'int'
|   | |-VarDecl 0x7fbfd8094010 <col:5, col:21> col:21 used jy 'int'
|   | |-VarDecl 0x7fbfd8094090 <col:5, col:25> col:25 used iz 'int'
|   | `-VarDecl 0x7fbfd8094110 <col:5, col:29> col:29 used jz 'int'
|   |-BinaryOperator 0x7fbfd8094220 <line:14:5, col:10> 'int' '='
|   | |-DeclRefExpr 0x7fbfd80941c8 <col:5> 'int' lvalue Var 0x7fbfd8093f90 'iy' 'int'
|   | `-ImplicitCastExpr 0x7fbfd8094208 <col:10> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fbfd80941e8 <col:10> 'int' lvalue ParmVar 0x7fbfd8092270 'starty1' 'int'
|   |-BinaryOperator 0x7fbfd8094298 <line:15:5, col:10> 'int' '='
|   | |-DeclRefExpr 0x7fbfd8094240 <col:5> 'int' lvalue Var 0x7fbfd8094090 'iz' 'int'
|   | `-ImplicitCastExpr 0x7fbfd8094280 <col:10> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fbfd8094260 <col:10> 'int' lvalue ParmVar 0x7fbfd8092570 'startz1' 'int'
|   `-ForStmt 0x7fbfd8095048 <line:16:5, line:26:5>
|     |-BinaryOperator 0x7fbfd8094310 <line:16:10, col:14> 'int' '='
|     | |-DeclRefExpr 0x7fbfd80942b8 <col:10> 'int' lvalue Var 0x7fbfd8093e90 'ix' 'int'
|     | `-ImplicitCastExpr 0x7fbfd80942f8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fbfd80942d8 <col:14> 'int' lvalue ParmVar 0x7fbfd8091f70 'startx1' 'int'
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fbfd80943a0 <col:23, col:26> 'int' '<'
|     | |-ImplicitCastExpr 0x7fbfd8094370 <col:23> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fbfd8094330 <col:23> 'int' lvalue Var 0x7fbfd8093e90 'ix' 'int'
|     | `-ImplicitCastExpr 0x7fbfd8094388 <col:26> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fbfd8094350 <col:26> 'int' lvalue ParmVar 0x7fbfd8091ff0 'stopx1' 'int'
|     |-CompoundAssignOperator 0x7fbfd8094418 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     | |-DeclRefExpr 0x7fbfd80943c0 <col:34> 'int' lvalue Var 0x7fbfd8093e90 'ix' 'int'
|     | `-ImplicitCastExpr 0x7fbfd8094400 <col:39> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fbfd80943e0 <col:39> 'int' lvalue ParmVar 0x7fbfd8092070 'stepx1' 'int'
|     `-CompoundStmt 0x7fbfd8095010 <col:48, line:26:5>
|       |-BinaryOperator 0x7fbfd80944a0 <line:17:9, col:14> 'int' '='
|       | |-DeclRefExpr 0x7fbfd8094448 <col:9> 'int' lvalue Var 0x7fbfd8094010 'jy' 'int'
|       | `-ImplicitCastExpr 0x7fbfd8094488 <col:14> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x7fbfd8094468 <col:14> 'int' lvalue ParmVar 0x7fbfd80923f0 'starty2' 'int'
|       |-BinaryOperator 0x7fbfd8094518 <line:18:9, col:14> 'int' '='
|       | |-DeclRefExpr 0x7fbfd80944c0 <col:9> 'int' lvalue Var 0x7fbfd8094110 'jz' 'int'
|       | `-ImplicitCastExpr 0x7fbfd8094500 <col:14> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x7fbfd80944e0 <col:14> 'int' lvalue ParmVar 0x7fbfd8093700 'startz2' 'int'
|       |-ForStmt 0x7fbfd8094ec8 <line:19:9, line:23:9>
|       | |-BinaryOperator 0x7fbfd8094590 <line:19:14, col:18> 'int' '='
|       | | |-DeclRefExpr 0x7fbfd8094538 <col:14> 'int' lvalue Var 0x7fbfd8093f10 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7fbfd8094578 <col:18> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fbfd8094558 <col:18> 'int' lvalue ParmVar 0x7fbfd80920f0 'startx2' 'int'
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x7fbfd8094630 <col:27, col:30> 'int' '<'
|       | | |-ImplicitCastExpr 0x7fbfd8094600 <col:27> 'int' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7fbfd80945b0 <col:27> 'int' lvalue Var 0x7fbfd8093f10 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7fbfd8094618 <col:30> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fbfd80945d0 <col:30> 'int' lvalue ParmVar 0x7fbfd8092170 'stopx2' 'int'
|       | |-CompoundAssignOperator 0x7fbfd80946a8 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|       | | |-DeclRefExpr 0x7fbfd8094650 <col:38> 'int' lvalue Var 0x7fbfd8093f10 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7fbfd8094690 <col:43> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fbfd8094670 <col:43> 'int' lvalue ParmVar 0x7fbfd80921f0 'stepx2' 'int'
|       | `-CompoundStmt 0x7fbfd8094ea0 <col:52, line:23:9>
|       |   |-BinaryOperator 0x7fbfd8094ce0 <line:20:6, col:42> 'double' '='
|       |   | |-ArraySubscriptExpr 0x7fbfd80947e8 <col:6, col:14> 'double' lvalue
|       |   | | |-ImplicitCastExpr 0x7fbfd80947b8 <col:6, col:10> 'double *' <ArrayToPointerDecay>
|       |   | | | `-ArraySubscriptExpr 0x7fbfd8094748 <col:6, col:10> 'double [mz]' lvalue
|       |   | | |   |-ImplicitCastExpr 0x7fbfd8094718 <col:6> 'double (*)[mz]':'double (*)[mz]' <LValueToRValue>
|       |   | | |   | `-DeclRefExpr 0x7fbfd80946d8 <col:6> 'double (*)[mz]':'double (*)[mz]' lvalue ParmVar 0x7fbfd8091ef0 'z' 'double (*)[mz]':'double (*)[mz]'
|       |   | | |   `-ImplicitCastExpr 0x7fbfd8094730 <col:8> 'int' <LValueToRValue>
|       |   | | |     `-DeclRefExpr 0x7fbfd80946f8 <col:8> 'int' lvalue Var 0x7fbfd8094090 'iz' 'int'
|       |   | | `-ImplicitCastExpr 0x7fbfd80947d0 <col:12> 'int' <LValueToRValue>
|       |   | |   `-DeclRefExpr 0x7fbfd8094768 <col:12> 'int' lvalue Var 0x7fbfd8094110 'jz' 'int'
|       |   | `-CallExpr 0x7fbfd8094c80 <col:18, col:42> 'double'
|       |   |   |-ImplicitCastExpr 0x7fbfd8094c68 <col:18> 'double (*)(double, double)' <FunctionToPointerDecay>
|       |   |   | `-DeclRefExpr 0x7fbfd8094a18 <col:18> 'double (double, double)' Function 0x7fbfd8094848 'pow' 'double (double, double)'
|       |   |   |-ImplicitCastExpr 0x7fbfd8094cb0 <col:22, col:30> 'double' <LValueToRValue>
|       |   |   | `-ArraySubscriptExpr 0x7fbfd8094b18 <col:22, col:30> 'double' lvalue
|       |   |   |   |-ImplicitCastExpr 0x7fbfd8094ae8 <col:22, col:26> 'double *' <ArrayToPointerDecay>
|       |   |   |   | `-ArraySubscriptExpr 0x7fbfd8094aa8 <col:22, col:26> 'double [mx]' lvalue
|       |   |   |   |   |-ImplicitCastExpr 0x7fbfd8094a78 <col:22> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
|       |   |   |   |   | `-DeclRefExpr 0x7fbfd8094a38 <col:22> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7fbfd8091af0 'x' 'double (*)[mx]':'double (*)[mx]'
|       |   |   |   |   `-ImplicitCastExpr 0x7fbfd8094a90 <col:24> 'int' <LValueToRValue>
|       |   |   |   |     `-DeclRefExpr 0x7fbfd8094a58 <col:24> 'int' lvalue Var 0x7fbfd8093e90 'ix' 'int'
|       |   |   |   `-ImplicitCastExpr 0x7fbfd8094b00 <col:28> 'int' <LValueToRValue>
|       |   |   |     `-DeclRefExpr 0x7fbfd8094ac8 <col:28> 'int' lvalue Var 0x7fbfd8093f10 'jx' 'int'
|       |   |   `-ImplicitCastExpr 0x7fbfd8094cc8 <col:33, col:41> 'double' <LValueToRValue>
|       |   |     `-ArraySubscriptExpr 0x7fbfd8094c18 <col:33, col:41> 'double' lvalue
|       |   |       |-ImplicitCastExpr 0x7fbfd8094be8 <col:33, col:37> 'double *' <ArrayToPointerDecay>
|       |   |       | `-ArraySubscriptExpr 0x7fbfd8094ba8 <col:33, col:37> 'double [my]' lvalue
|       |   |       |   |-ImplicitCastExpr 0x7fbfd8094b78 <col:33> 'double (*)[my]':'double (*)[my]' <LValueToRValue>
|       |   |       |   | `-DeclRefExpr 0x7fbfd8094b38 <col:33> 'double (*)[my]':'double (*)[my]' lvalue ParmVar 0x7fbfd8091cf0 'y' 'double (*)[my]':'double (*)[my]'
|       |   |       |   `-ImplicitCastExpr 0x7fbfd8094b90 <col:35> 'int' <LValueToRValue>
|       |   |       |     `-DeclRefExpr 0x7fbfd8094b58 <col:35> 'int' lvalue Var 0x7fbfd8093f90 'iy' 'int'
|       |   |       `-ImplicitCastExpr 0x7fbfd8094c00 <col:39> 'int' <LValueToRValue>
|       |   |         `-DeclRefExpr 0x7fbfd8094bc8 <col:39> 'int' lvalue Var 0x7fbfd8094010 'jy' 'int'
|       |   |-BinaryOperator 0x7fbfd8094db0 <line:21:6, col:16> 'int' '='
|       |   | |-DeclRefExpr 0x7fbfd8094d00 <col:6> 'int' lvalue Var 0x7fbfd8094010 'jy' 'int'
|       |   | `-BinaryOperator 0x7fbfd8094d90 <col:11, col:16> 'int' '+'
|       |   |   |-ImplicitCastExpr 0x7fbfd8094d60 <col:11> 'int' <LValueToRValue>
|       |   |   | `-DeclRefExpr 0x7fbfd8094d20 <col:11> 'int' lvalue Var 0x7fbfd8094010 'jy' 'int'
|       |   |   `-ImplicitCastExpr 0x7fbfd8094d78 <col:16> 'int' <LValueToRValue>
|       |   |     `-DeclRefExpr 0x7fbfd8094d40 <col:16> 'int' lvalue ParmVar 0x7fbfd80924f0 'stepy2' 'int'
|       |   `-BinaryOperator 0x7fbfd8094e80 <line:22:6, col:16> 'int' '='
|       |     |-DeclRefExpr 0x7fbfd8094dd0 <col:6> 'int' lvalue Var 0x7fbfd8094110 'jz' 'int'
|       |     `-BinaryOperator 0x7fbfd8094e60 <col:11, col:16> 'int' '+'
|       |       |-ImplicitCastExpr 0x7fbfd8094e30 <col:11> 'int' <LValueToRValue>
|       |       | `-DeclRefExpr 0x7fbfd8094df0 <col:11> 'int' lvalue Var 0x7fbfd8094110 'jz' 'int'
|       |       `-ImplicitCastExpr 0x7fbfd8094e48 <col:16> 'int' <LValueToRValue>
|       |         `-DeclRefExpr 0x7fbfd8094e10 <col:16> 'int' lvalue ParmVar 0x7fbfd8093800 'stepz2' 'int'
|       |-CompoundAssignOperator 0x7fbfd8094f58 <line:24:9, col:15> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|       | |-DeclRefExpr 0x7fbfd8094f00 <col:9> 'int' lvalue Var 0x7fbfd8093f90 'iy' 'int'
|       | `-ImplicitCastExpr 0x7fbfd8094f40 <col:15> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x7fbfd8094f20 <col:15> 'int' lvalue ParmVar 0x7fbfd8092370 'stepy1' 'int'
|       `-CompoundAssignOperator 0x7fbfd8094fe0 <line:25:9, col:15> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|         |-DeclRefExpr 0x7fbfd8094f88 <col:9> 'int' lvalue Var 0x7fbfd8094090 'iz' 'int'
|         `-ImplicitCastExpr 0x7fbfd8094fc8 <col:15> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x7fbfd8094fa8 <col:15> 'int' lvalue ParmVar 0x7fbfd8093680 'stepz1' 'int'
`-FunctionDecl 0x7fbfd8094848 <line:20:18> col:18 implicit used pow 'double (double, double)' extern
  |-ParmVarDecl 0x7fbfd80948e8 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x7fbfd8094950 <<invalid sloc>> <invalid sloc> 'double'
  |-ConstAttr 0x7fbfd80949c8 <col:18> Implicit
  `-NoThrowAttr 0x7fbfd8094a08 <col:18> Implicit
