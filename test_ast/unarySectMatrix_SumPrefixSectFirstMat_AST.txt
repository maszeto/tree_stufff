TranslationUnitDecl 0x7faece838608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7faece838ea0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7faece838ba0 '__int128'
|-TypedefDecl 0x7faece838f10 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7faece838bc0 'unsigned __int128'
|-TypedefDecl 0x7faece8391f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7faece838ff0 'struct __NSConstantString_tag'
|   `-Record 0x7faece838f68 '__NSConstantString_tag'
|-TypedefDecl 0x7faece839290 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7faece839250 'char *'
|   `-BuiltinType 0x7faece8386a0 'char'
|-TypedefDecl 0x7faece839568 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7faece839510 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7faece839370 'struct __va_list_tag'
|     `-Record 0x7faece8392e8 '__va_list_tag'
|-TypedefDecl 0x7faece891000 <./tree_src/unarySectMatrix_SumPrefixSectFirstMat.c:4:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7faece838760 'unsigned char'
`-FunctionDecl 0x7faecf809600 <line:11:1, line:25:1> line:11:6 SumPrefixSectFirstMat 'void (int, int, int, int, double (*)[mx], double (*)[my], int, int, int, int, int, int, int, int, int, int, int, int)'
  |-ParmVarDecl 0x7faece891070 <line:12:5, col:9> col:9 used nx 'int'
  |-ParmVarDecl 0x7faece8910f0 <col:13, col:17> col:17 used mx 'int'
  |-ParmVarDecl 0x7faece891170 <col:21, col:25> col:25 used ny 'int'
  |-ParmVarDecl 0x7faece8911f0 <col:29, col:33> col:33 used my 'int'
  |-ParmVarDecl 0x7faece8913f0 <col:37, col:52> col:44 used x 'double (*)[mx]':'double (*)[mx]'
  |-ParmVarDecl 0x7faece8915f0 <col:55, col:70> col:62 used y 'double (*)[my]':'double (*)[my]'
  |-ParmVarDecl 0x7faece891670 <line:13:5, col:9> col:9 used startx1 'int'
  |-ParmVarDecl 0x7faece8916f0 <col:18, col:22> col:22 used stopx1 'int'
  |-ParmVarDecl 0x7faece891770 <col:30, col:34> col:34 used stepx1 'int'
  |-ParmVarDecl 0x7faece8917f0 <col:42, col:46> col:46 used startx2 'int'
  |-ParmVarDecl 0x7faece891870 <col:55, col:59> col:59 used stopx2 'int'
  |-ParmVarDecl 0x7faece8918f0 <col:67, col:71> col:71 used stepx2 'int'
  |-ParmVarDecl 0x7faece891970 <line:14:5, col:9> col:9 used starty1 'int'
  |-ParmVarDecl 0x7faece8919f0 <col:18, col:22> col:22 stopy1 'int'
  |-ParmVarDecl 0x7faece891a70 <col:30, col:34> col:34 stepy1 'int'
  |-ParmVarDecl 0x7faece891af0 <col:42, col:46> col:46 used starty2 'int'
  |-ParmVarDecl 0x7faece891b70 <col:55, col:59> col:59 stopy2 'int'
  |-ParmVarDecl 0x7faece891bf0 <col:67, col:71> col:71 stepy2 'int'
  `-CompoundStmt 0x7faecf80a508 <col:79, line:25:1>
    |-DeclStmt 0x7faecf8099a0 <line:16:5, col:23>
    | |-VarDecl 0x7faecf809790 <col:5, col:9> col:9 used ix 'int'
    | |-VarDecl 0x7faecf809810 <col:5, col:13> col:13 used jx 'int'
    | |-VarDecl 0x7faecf809890 <col:5, col:17> col:17 used iy 'int'
    | `-VarDecl 0x7faecf809910 <col:5, col:21> col:21 used jy 'int'
    |-BinaryOperator 0x7faecf809a10 <line:17:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7faecf8099b8 <col:5> 'int' lvalue Var 0x7faecf809890 'iy' 'int'
    | `-ImplicitCastExpr 0x7faecf8099f8 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7faecf8099d8 <col:10> 'int' lvalue ParmVar 0x7faece891970 'starty1' 'int'
    `-ForStmt 0x7faecf80a4d0 <line:18:5, line:24:5>
      |-BinaryOperator 0x7faecf809a88 <line:18:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7faecf809a30 <col:10> 'int' lvalue Var 0x7faecf809790 'ix' 'int'
      | `-ImplicitCastExpr 0x7faecf809a70 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7faecf809a50 <col:14> 'int' lvalue ParmVar 0x7faece891670 'startx1' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7faecf809b18 <col:23, col:26> 'int' '<'
      | |-ImplicitCastExpr 0x7faecf809ae8 <col:23> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7faecf809aa8 <col:23> 'int' lvalue Var 0x7faecf809790 'ix' 'int'
      | `-ImplicitCastExpr 0x7faecf809b00 <col:26> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7faecf809ac8 <col:26> 'int' lvalue ParmVar 0x7faece8916f0 'stopx1' 'int'
      |-CompoundAssignOperator 0x7faecf809b90 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7faecf809b38 <col:34> 'int' lvalue Var 0x7faecf809790 'ix' 'int'
      | `-ImplicitCastExpr 0x7faecf809b78 <col:39> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7faecf809b58 <col:39> 'int' lvalue ParmVar 0x7faece891770 'stepx1' 'int'
      `-CompoundStmt 0x7faecf80a4a8 <col:48, line:24:5>
        |-BinaryOperator 0x7faecf809e00 <line:19:9, col:39> 'double' '='
        | |-ArraySubscriptExpr 0x7faecf809cc8 <col:9, col:22> 'double' lvalue
        | | |-ImplicitCastExpr 0x7faecf809c98 <col:9, col:18> 'double *' <ArrayToPointerDecay>
        | | | `-ArraySubscriptExpr 0x7faecf809c30 <col:9, col:18> 'double [my]' lvalue
        | | |   |-ImplicitCastExpr 0x7faecf809c00 <col:9> 'double (*)[my]':'double (*)[my]' <LValueToRValue>
        | | |   | `-DeclRefExpr 0x7faecf809bc0 <col:9> 'double (*)[my]':'double (*)[my]' lvalue ParmVar 0x7faece8915f0 'y' 'double (*)[my]':'double (*)[my]'
        | | |   `-ImplicitCastExpr 0x7faecf809c18 <col:11> 'int' <LValueToRValue>
        | | |     `-DeclRefExpr 0x7faecf809be0 <col:11> 'int' lvalue ParmVar 0x7faece891970 'starty1' 'int'
        | | `-ImplicitCastExpr 0x7faecf809cb0 <col:20> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7faecf809c50 <col:20> 'int' lvalue Var 0x7faecf809890 'iy' 'int'
        | `-ImplicitCastExpr 0x7faecf809de8 <col:26, col:39> 'double' <LValueToRValue>
        |   `-ArraySubscriptExpr 0x7faecf809dc8 <col:26, col:39> 'double' lvalue
        |     |-ImplicitCastExpr 0x7faecf809d98 <col:26, col:35> 'double *' <ArrayToPointerDecay>
        |     | `-ArraySubscriptExpr 0x7faecf809d58 <col:26, col:35> 'double [mx]' lvalue
        |     |   |-ImplicitCastExpr 0x7faecf809d28 <col:26> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
        |     |   | `-DeclRefExpr 0x7faecf809ce8 <col:26> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7faece8913f0 'x' 'double (*)[mx]':'double (*)[mx]'
        |     |   `-ImplicitCastExpr 0x7faecf809d40 <col:28> 'int' <LValueToRValue>
        |     |     `-DeclRefExpr 0x7faecf809d08 <col:28> 'int' lvalue ParmVar 0x7faece891670 'startx1' 'int'
        |     `-ImplicitCastExpr 0x7faecf809db0 <col:37> 'int' <LValueToRValue>
        |       `-DeclRefExpr 0x7faecf809d78 <col:37> 'int' lvalue Var 0x7faecf809790 'ix' 'int'
        |-BinaryOperator 0x7faecf809eb8 <line:20:9, col:22> 'int' '='
        | |-DeclRefExpr 0x7faecf809e20 <col:9> 'int' lvalue Var 0x7faecf809910 'jy' 'int'
        | `-BinaryOperator 0x7faecf809e98 <col:14, col:22> 'int' '+'
        |   |-ImplicitCastExpr 0x7faecf809e80 <col:14> 'int' <LValueToRValue>
        |   | `-DeclRefExpr 0x7faecf809e40 <col:14> 'int' lvalue ParmVar 0x7faece891af0 'starty2' 'int'
        |   `-IntegerLiteral 0x7faecf809e60 <col:22> 'int' 1
        `-ForStmt 0x7faecf80a470 <line:21:9, line:23:9>
          |-BinaryOperator 0x7faecf809f70 <line:21:14, col:26> 'int' '='
          | |-DeclRefExpr 0x7faecf809ed8 <col:14> 'int' lvalue Var 0x7faecf809810 'jx' 'int'
          | `-BinaryOperator 0x7faecf809f50 <col:18, col:26> 'int' '+'
          |   |-ImplicitCastExpr 0x7faecf809f38 <col:18> 'int' <LValueToRValue>
          |   | `-DeclRefExpr 0x7faecf809ef8 <col:18> 'int' lvalue ParmVar 0x7faece8917f0 'startx2' 'int'
          |   `-IntegerLiteral 0x7faecf809f18 <col:26> 'int' 1
          |-<<<NULL>>>
          |-BinaryOperator 0x7faecf80a000 <col:29, col:32> 'int' '<'
          | |-ImplicitCastExpr 0x7faecf809fd0 <col:29> 'int' <LValueToRValue>
          | | `-DeclRefExpr 0x7faecf809f90 <col:29> 'int' lvalue Var 0x7faecf809810 'jx' 'int'
          | `-ImplicitCastExpr 0x7faecf809fe8 <col:32> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x7faecf809fb0 <col:32> 'int' lvalue ParmVar 0x7faece891870 'stopx2' 'int'
          |-CompoundAssignOperator 0x7faecf80a078 <col:40, col:45> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
          | |-DeclRefExpr 0x7faecf80a020 <col:40> 'int' lvalue Var 0x7faecf809810 'jx' 'int'
          | `-ImplicitCastExpr 0x7faecf80a060 <col:45> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x7faecf80a040 <col:45> 'int' lvalue ParmVar 0x7faece8918f0 'stepx2' 'int'
          `-CompoundStmt 0x7faecf80a458 <col:54, line:23:9>
            `-BinaryOperator 0x7faecf80a438 <line:22:13, col:47> 'double' '='
              |-ArraySubscriptExpr 0x7faecf80a188 <col:13, col:21> 'double' lvalue
              | |-ImplicitCastExpr 0x7faecf80a158 <col:13, col:17> 'double *' <ArrayToPointerDecay>
              | | `-ArraySubscriptExpr 0x7faecf80a118 <col:13, col:17> 'double [my]' lvalue
              | |   |-ImplicitCastExpr 0x7faecf80a0e8 <col:13> 'double (*)[my]':'double (*)[my]' <LValueToRValue>
              | |   | `-DeclRefExpr 0x7faecf80a0a8 <col:13> 'double (*)[my]':'double (*)[my]' lvalue ParmVar 0x7faece8915f0 'y' 'double (*)[my]':'double (*)[my]'
              | |   `-ImplicitCastExpr 0x7faecf80a100 <col:15> 'int' <LValueToRValue>
              | |     `-DeclRefExpr 0x7faecf80a0c8 <col:15> 'int' lvalue Var 0x7faecf809910 'jy' 'int'
              | `-ImplicitCastExpr 0x7faecf80a170 <col:19> 'int' <LValueToRValue>
              |   `-DeclRefExpr 0x7faecf80a138 <col:19> 'int' lvalue Var 0x7faecf809890 'iy' 'int'
              `-BinaryOperator 0x7faecf80a418 <col:25, col:47> 'double' '+'
                |-ImplicitCastExpr 0x7faecf80a3e8 <col:25, col:35> 'double' <LValueToRValue>
                | `-ArraySubscriptExpr 0x7faecf80a2c8 <col:25, col:35> 'double' lvalue
                |   |-ImplicitCastExpr 0x7faecf80a298 <col:25, col:31> 'double *' <ArrayToPointerDecay>
                |   | `-ArraySubscriptExpr 0x7faecf80a258 <col:25, col:31> 'double [my]' lvalue
                |   |   |-ImplicitCastExpr 0x7faecf80a240 <col:25> 'double (*)[my]':'double (*)[my]' <LValueToRValue>
                |   |   | `-DeclRefExpr 0x7faecf80a1a8 <col:25> 'double (*)[my]':'double (*)[my]' lvalue ParmVar 0x7faece8915f0 'y' 'double (*)[my]':'double (*)[my]'
                |   |   `-BinaryOperator 0x7faecf80a220 <col:27, col:30> 'int' '-'
                |   |     |-ImplicitCastExpr 0x7faecf80a208 <col:27> 'int' <LValueToRValue>
                |   |     | `-DeclRefExpr 0x7faecf80a1c8 <col:27> 'int' lvalue Var 0x7faecf809910 'jy' 'int'
                |   |     `-IntegerLiteral 0x7faecf80a1e8 <col:30> 'int' 1
                |   `-ImplicitCastExpr 0x7faecf80a2b0 <col:33> 'int' <LValueToRValue>
                |     `-DeclRefExpr 0x7faecf80a278 <col:33> 'int' lvalue Var 0x7faecf809890 'iy' 'int'
                `-ImplicitCastExpr 0x7faecf80a400 <col:39, col:47> 'double' <LValueToRValue>
                  `-ArraySubscriptExpr 0x7faecf80a3c8 <col:39, col:47> 'double' lvalue
                    |-ImplicitCastExpr 0x7faecf80a398 <col:39, col:43> 'double *' <ArrayToPointerDecay>
                    | `-ArraySubscriptExpr 0x7faecf80a358 <col:39, col:43> 'double [mx]' lvalue
                    |   |-ImplicitCastExpr 0x7faecf80a328 <col:39> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
                    |   | `-DeclRefExpr 0x7faecf80a2e8 <col:39> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7faece8913f0 'x' 'double (*)[mx]':'double (*)[mx]'
                    |   `-ImplicitCastExpr 0x7faecf80a340 <col:41> 'int' <LValueToRValue>
                    |     `-DeclRefExpr 0x7faecf80a308 <col:41> 'int' lvalue Var 0x7faecf809810 'jx' 'int'
                    `-ImplicitCastExpr 0x7faecf80a3b0 <col:45> 'int' <LValueToRValue>
                      `-DeclRefExpr 0x7faecf80a378 <col:45> 'int' lvalue Var 0x7faecf809790 'ix' 'int'
