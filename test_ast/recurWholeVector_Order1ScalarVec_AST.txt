TranslationUnitDecl 0x7fdbb7038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fdbb70394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fdbb70391a0 '__int128'
|-TypedefDecl 0x7fdbb7039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fdbb70391c0 'unsigned __int128'
|-TypedefDecl 0x7fdbb70397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fdbb70395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fdbb7039568 '__NSConstantString_tag'
|-TypedefDecl 0x7fdbb7039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fdbb7039850 'char *'
|   `-BuiltinType 0x7fdbb7038ca0 'char'
|-TypedefDecl 0x7fdbb7039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fdbb7039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fdbb7039970 'struct __va_list_tag'
|     `-Record 0x7fdbb70398e8 '__va_list_tag'
`-FunctionDecl 0x7fdbb782e698 <./tree_src/recurWholeVector_Order1ScalarVec.c:3:1, line:10:1> line:3:6 Order1ScalarVec 'void (int, double *, double *, double)'
  |-ParmVarDecl 0x7fdbb782e200 <line:4:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7fdbb782e380 <col:12, col:22> col:19 used x 'double *':'double *'
  |-ParmVarDecl 0x7fdbb782e4d0 <col:25, col:35> col:32 used b 'double *':'double *'
  |-ParmVarDecl 0x7fdbb782e550 <col:38, col:45> col:45 used a 'double'
  `-CompoundStmt 0x7fdbb782ec68 <col:49, line:10:1>
    |-DeclStmt 0x7fdbb782e820 <line:6:5, col:10>
    | `-VarDecl 0x7fdbb782e7b8 <col:5, col:9> col:9 used i 'int'
    `-ForStmt 0x7fdbb782ec30 <line:7:5, line:9:5>
      |-BinaryOperator 0x7fdbb782e878 <line:7:10, col:13> 'int' '='
      | |-DeclRefExpr 0x7fdbb782e838 <col:10> 'int' lvalue Var 0x7fdbb782e7b8 'i' 'int'
      | `-IntegerLiteral 0x7fdbb782e858 <col:13> 'int' 1
      |-<<<NULL>>>
      |-BinaryOperator 0x7fdbb782e908 <col:16, col:18> 'int' '<'
      | |-ImplicitCastExpr 0x7fdbb782e8d8 <col:16> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fdbb782e898 <col:16> 'int' lvalue Var 0x7fdbb782e7b8 'i' 'int'
      | `-ImplicitCastExpr 0x7fdbb782e8f0 <col:18> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fdbb782e8b8 <col:18> 'int' lvalue ParmVar 0x7fdbb782e200 'n' 'int'
      |-UnaryOperator 0x7fdbb782e948 <col:21, col:22> 'int' postfix '++'
      | `-DeclRefExpr 0x7fdbb782e928 <col:21> 'int' lvalue Var 0x7fdbb782e7b8 'i' 'int'
      `-CompoundStmt 0x7fdbb782ec18 <col:27, line:9:5>
        `-BinaryOperator 0x7fdbb782ebf8 <line:8:9, col:32> 'double' '='
          |-ArraySubscriptExpr 0x7fdbb782e9d0 <col:9, col:12> 'double' lvalue
          | |-ImplicitCastExpr 0x7fdbb782e9a0 <col:9> 'double *':'double *' <LValueToRValue>
          | | `-DeclRefExpr 0x7fdbb782e960 <col:9> 'double *':'double *' lvalue ParmVar 0x7fdbb782e380 'x' 'double *':'double *'
          | `-ImplicitCastExpr 0x7fdbb782e9b8 <col:11> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x7fdbb782e980 <col:11> 'int' lvalue Var 0x7fdbb782e7b8 'i' 'int'
          `-BinaryOperator 0x7fdbb782ebd8 <col:16, col:32> 'double' '+'
            |-BinaryOperator 0x7fdbb782eb10 <col:16, col:25> 'double' '*'
            | |-ImplicitCastExpr 0x7fdbb782eae0 <col:16, col:21> 'double' <LValueToRValue>
            | | `-ArraySubscriptExpr 0x7fdbb782eaa0 <col:16, col:21> 'double' lvalue
            | |   |-ImplicitCastExpr 0x7fdbb782ea88 <col:16> 'double *':'double *' <LValueToRValue>
            | |   | `-DeclRefExpr 0x7fdbb782e9f0 <col:16> 'double *':'double *' lvalue ParmVar 0x7fdbb782e380 'x' 'double *':'double *'
            | |   `-BinaryOperator 0x7fdbb782ea68 <col:18, col:20> 'int' '-'
            | |     |-ImplicitCastExpr 0x7fdbb782ea50 <col:18> 'int' <LValueToRValue>
            | |     | `-DeclRefExpr 0x7fdbb782ea10 <col:18> 'int' lvalue Var 0x7fdbb782e7b8 'i' 'int'
            | |     `-IntegerLiteral 0x7fdbb782ea30 <col:20> 'int' 1
            | `-ImplicitCastExpr 0x7fdbb782eaf8 <col:25> 'double' <LValueToRValue>
            |   `-DeclRefExpr 0x7fdbb782eac0 <col:25> 'double' lvalue ParmVar 0x7fdbb782e550 'a' 'double'
            `-ImplicitCastExpr 0x7fdbb782ebc0 <col:29, col:32> 'double' <LValueToRValue>
              `-ArraySubscriptExpr 0x7fdbb782eba0 <col:29, col:32> 'double' lvalue
                |-ImplicitCastExpr 0x7fdbb782eb70 <col:29> 'double *':'double *' <LValueToRValue>
                | `-DeclRefExpr 0x7fdbb782eb30 <col:29> 'double *':'double *' lvalue ParmVar 0x7fdbb782e4d0 'b' 'double *':'double *'
                `-ImplicitCastExpr 0x7fdbb782eb88 <col:31> 'int' <LValueToRValue>
                  `-DeclRefExpr 0x7fdbb782eb50 <col:31> 'int' lvalue Var 0x7fdbb782e7b8 'i' 'int'
