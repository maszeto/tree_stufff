TranslationUnitDecl 0x7fa9a2827808 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fa9a28280a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fa9a2827da0 '__int128'
|-TypedefDecl 0x7fa9a2828110 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fa9a2827dc0 'unsigned __int128'
|-TypedefDecl 0x7fa9a28283f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fa9a28281f0 'struct __NSConstantString_tag'
|   `-Record 0x7fa9a2828168 '__NSConstantString_tag'
|-TypedefDecl 0x7fa9a2828490 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fa9a2828450 'char *'
|   `-BuiltinType 0x7fa9a28278a0 'char'
|-TypedefDecl 0x7fa9a2828768 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fa9a2828710 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fa9a2828570 'struct __va_list_tag'
|     `-Record 0x7fa9a28284e8 '__va_list_tag'
|-TypedefDecl 0x7fa9a2880200 <./tree_src/extendWholeMatrix_ModWholeScaMat.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fa9a2827960 'unsigned char'
|-FunctionDecl 0x7fa9a28809a8 <line:6:1, line:15:1> line:6:6 ModWholeScaMat 'void (int, int, double, double (*)[m], double (*)[m])'
| |-ParmVarDecl 0x7fa9a2880270 <line:7:5, col:9> col:9 used n 'int'
| |-ParmVarDecl 0x7fa9a28802f0 <col:12, col:16> col:16 used m 'int'
| |-ParmVarDecl 0x7fa9a2880370 <col:19, col:26> col:26 used x 'double'
| |-ParmVarDecl 0x7fa9a2880570 <col:29, col:42> col:36 used y 'double (*)[m]':'double (*)[m]'
| |-ParmVarDecl 0x7fa9a2880770 <col:45, col:58> col:52 used z 'double (*)[m]':'double (*)[m]'
| `-CompoundStmt 0x7fa9a2882420 <col:62, line:15:1>
|   |-DeclStmt 0x7fa9a2880bd0 <line:9:5, col:13>
|   | |-VarDecl 0x7fa9a2880ad0 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x7fa9a2880b50 <col:5, col:12> col:12 used j 'int'
|   `-ForStmt 0x7fa9a28823e8 <line:10:5, line:14:5>
|     |-BinaryOperator 0x7fa9a2880c28 <line:10:10, col:13> 'int' '='
|     | |-DeclRefExpr 0x7fa9a2880be8 <col:10> 'int' lvalue Var 0x7fa9a2880ad0 'i' 'int'
|     | `-IntegerLiteral 0x7fa9a2880c08 <col:13> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fa9a2880cb8 <col:16, col:18> 'int' '<'
|     | |-ImplicitCastExpr 0x7fa9a2880c88 <col:16> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fa9a2880c48 <col:16> 'int' lvalue Var 0x7fa9a2880ad0 'i' 'int'
|     | `-ImplicitCastExpr 0x7fa9a2880ca0 <col:18> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fa9a2880c68 <col:18> 'int' lvalue ParmVar 0x7fa9a2880270 'n' 'int'
|     |-UnaryOperator 0x7fa9a2880cf8 <col:21, col:22> 'int' postfix '++'
|     | `-DeclRefExpr 0x7fa9a2880cd8 <col:21> 'int' lvalue Var 0x7fa9a2880ad0 'i' 'int'
|     `-CompoundStmt 0x7fa9a28823d0 <col:27, line:14:5>
|       `-ForStmt 0x7fa9a2882398 <line:11:9, line:13:9>
|         |-BinaryOperator 0x7fa9a2880d50 <line:11:14, col:17> 'int' '='
|         | |-DeclRefExpr 0x7fa9a2880d10 <col:14> 'int' lvalue Var 0x7fa9a2880b50 'j' 'int'
|         | `-IntegerLiteral 0x7fa9a2880d30 <col:17> 'int' 0
|         |-<<<NULL>>>
|         |-BinaryOperator 0x7fa9a2880de0 <col:20, col:22> 'int' '<'
|         | |-ImplicitCastExpr 0x7fa9a2880db0 <col:20> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x7fa9a2880d70 <col:20> 'int' lvalue Var 0x7fa9a2880b50 'j' 'int'
|         | `-ImplicitCastExpr 0x7fa9a2880dc8 <col:22> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x7fa9a2880d90 <col:22> 'int' lvalue ParmVar 0x7fa9a28802f0 'm' 'int'
|         |-UnaryOperator 0x7fa9a2880e20 <col:25, col:26> 'int' postfix '++'
|         | `-DeclRefExpr 0x7fa9a2880e00 <col:25> 'int' lvalue Var 0x7fa9a2880b50 'j' 'int'
|         `-CompoundStmt 0x7fa9a2882380 <col:31, line:13:9>
|           `-BinaryOperator 0x7fa9a2882360 <line:12:6, col:30> 'double' '='
|             |-ArraySubscriptExpr 0x7fa9a2880f48 <col:6, col:12> 'double' lvalue
|             | |-ImplicitCastExpr 0x7fa9a2880f18 <col:6, col:9> 'double *' <ArrayToPointerDecay>
|             | | `-ArraySubscriptExpr 0x7fa9a2880ea8 <col:6, col:9> 'double [m]' lvalue
|             | |   |-ImplicitCastExpr 0x7fa9a2880e78 <col:6> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
|             | |   | `-DeclRefExpr 0x7fa9a2880e38 <col:6> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fa9a2880770 'z' 'double (*)[m]':'double (*)[m]'
|             | |   `-ImplicitCastExpr 0x7fa9a2880e90 <col:8> 'int' <LValueToRValue>
|             | |     `-DeclRefExpr 0x7fa9a2880e58 <col:8> 'int' lvalue Var 0x7fa9a2880ad0 'i' 'int'
|             | `-ImplicitCastExpr 0x7fa9a2880f30 <col:11> 'int' <LValueToRValue>
|             |   `-DeclRefExpr 0x7fa9a2880ec8 <col:11> 'int' lvalue Var 0x7fa9a2880b50 'j' 'int'
|             `-CallExpr 0x7fa9a2882300 <col:16, col:30> 'double'
|               |-ImplicitCastExpr 0x7fa9a28822e8 <col:16> 'double (*)(double, double)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x7fa9a2881178 <col:16> 'double (double, double)' Function 0x7fa9a2880fa8 'fmod' 'double (double, double)'
|               |-ImplicitCastExpr 0x7fa9a2882330 <col:21> 'double' <LValueToRValue>
|               | `-DeclRefExpr 0x7fa9a2881198 <col:21> 'double' lvalue ParmVar 0x7fa9a2880370 'x' 'double'
|               `-ImplicitCastExpr 0x7fa9a2882348 <col:23, col:29> 'double' <LValueToRValue>
|                 `-ArraySubscriptExpr 0x7fa9a28822a0 <col:23, col:29> 'double' lvalue
|                   |-ImplicitCastExpr 0x7fa9a2882270 <col:23, col:26> 'double *' <ArrayToPointerDecay>
|                   | `-ArraySubscriptExpr 0x7fa9a2882230 <col:23, col:26> 'double [m]' lvalue
|                   |   |-ImplicitCastExpr 0x7fa9a2882200 <col:23> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
|                   |   | `-DeclRefExpr 0x7fa9a28811b8 <col:23> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fa9a2880570 'y' 'double (*)[m]':'double (*)[m]'
|                   |   `-ImplicitCastExpr 0x7fa9a2882218 <col:25> 'int' <LValueToRValue>
|                   |     `-DeclRefExpr 0x7fa9a28811d8 <col:25> 'int' lvalue Var 0x7fa9a2880ad0 'i' 'int'
|                   `-ImplicitCastExpr 0x7fa9a2882288 <col:28> 'int' <LValueToRValue>
|                     `-DeclRefExpr 0x7fa9a2882250 <col:28> 'int' lvalue Var 0x7fa9a2880b50 'j' 'int'
`-FunctionDecl 0x7fa9a2880fa8 <col:16> col:16 implicit used fmod 'double (double, double)' extern
  |-ParmVarDecl 0x7fa9a2881048 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x7fa9a28810b0 <<invalid sloc>> <invalid sloc> 'double'
  |-ConstAttr 0x7fa9a2881128 <col:16> Implicit
  `-NoThrowAttr 0x7fa9a2881168 <col:16> Implicit
