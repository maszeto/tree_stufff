TranslationUnitDecl 0x7febd5038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7febd50394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7febd50391a0 '__int128'
|-TypedefDecl 0x7febd5039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7febd50391c0 'unsigned __int128'
|-TypedefDecl 0x7febd50397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7febd50395f0 'struct __NSConstantString_tag'
|   `-Record 0x7febd5039568 '__NSConstantString_tag'
|-TypedefDecl 0x7febd5039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7febd5039850 'char *'
|   `-BuiltinType 0x7febd5038ca0 'char'
|-TypedefDecl 0x7febd5039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7febd5039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7febd5039970 'struct __va_list_tag'
|     `-Record 0x7febd50398e8 '__va_list_tag'
|-TypedefDecl 0x7febd582f200 <./tree_src/unarySectMatrix_AllSectLastMat.c:4:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x7febd5038d60 'unsigned char'
`-FunctionDecl 0x7febd582ff58 <line:11:1, line:27:1> line:11:6 AllSectLastMat 'void (int, int, int, BOOL (*)[mx], BOOL *, int, int, int, int, int, int, int, int, int)'
  |-ParmVarDecl 0x7febd582f270 <line:12:5, col:9> col:9 used nx 'int'
  |-ParmVarDecl 0x7febd582f2f0 <col:13, col:17> col:17 used mx 'int'
  |-ParmVarDecl 0x7febd582f370 <col:21, col:25> col:25 used nz 'int'
  |-ParmVarDecl 0x7febd582f640 <col:29, col:42> col:34 used x 'BOOL (*)[mx]':'BOOL (*)[mx]'
  |-ParmVarDecl 0x7febd582f830 <col:45, col:54> col:50 used z 'BOOL *':'BOOL *'
  |-ParmVarDecl 0x7febd582f8b0 <line:13:5, col:9> col:9 used startx1 'int'
  |-ParmVarDecl 0x7febd582f930 <col:18, col:22> col:22 used stopx1 'int'
  |-ParmVarDecl 0x7febd582f9b0 <col:30, col:34> col:34 used stepx1 'int'
  |-ParmVarDecl 0x7febd582fa30 <col:42, col:46> col:46 used startx2 'int'
  |-ParmVarDecl 0x7febd582fab0 <col:55, col:59> col:59 used stopx2 'int'
  |-ParmVarDecl 0x7febd582fb30 <col:67, col:71> col:71 used stepx2 'int'
  |-ParmVarDecl 0x7febd582fbb0 <line:14:5, col:9> col:9 used startz 'int'
  |-ParmVarDecl 0x7febd582fc30 <col:17, col:21> col:21 stopz 'int'
  |-ParmVarDecl 0x7febd582fcb0 <col:28, col:32> col:32 used stepz 'int'
  `-CompoundStmt 0x7febd5832c70 <col:40, line:27:1>
    |-DeclStmt 0x7febd5832398 <line:16:5, col:27>
    | |-VarDecl 0x7febd58300c8 <col:5, col:9> col:9 used ix 'int'
    | |-VarDecl 0x7febd5830148 <col:5, col:13> col:13 used jx 'int'
    | |-VarDecl 0x7febd5832200 <col:5, col:17> col:17 iy 'int'
    | |-VarDecl 0x7febd5832280 <col:5, col:21> col:21 jy 'int'
    | `-VarDecl 0x7febd5832300 <col:5, col:25> col:25 used iz 'int'
    |-DeclStmt 0x7febd5832428 <line:17:5, col:13>
    | `-VarDecl 0x7febd58323c0 <col:5, col:10> col:10 used val 'BOOL':'unsigned char'
    |-BinaryOperator 0x7febd5832498 <line:18:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7febd5832440 <col:5> 'int' lvalue Var 0x7febd5832300 'iz' 'int'
    | `-ImplicitCastExpr 0x7febd5832480 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7febd5832460 <col:10> 'int' lvalue ParmVar 0x7febd582fbb0 'startz' 'int'
    `-ForStmt 0x7febd5832c38 <line:19:5, line:26:5>
      |-BinaryOperator 0x7febd5832510 <line:19:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7febd58324b8 <col:10> 'int' lvalue Var 0x7febd58300c8 'ix' 'int'
      | `-ImplicitCastExpr 0x7febd58324f8 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7febd58324d8 <col:14> 'int' lvalue ParmVar 0x7febd582f8b0 'startx1' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7febd58325a0 <col:23, col:26> 'int' '<'
      | |-ImplicitCastExpr 0x7febd5832570 <col:23> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7febd5832530 <col:23> 'int' lvalue Var 0x7febd58300c8 'ix' 'int'
      | `-ImplicitCastExpr 0x7febd5832588 <col:26> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7febd5832550 <col:26> 'int' lvalue ParmVar 0x7febd582f930 'stopx1' 'int'
      |-CompoundAssignOperator 0x7febd5832618 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7febd58325c0 <col:34> 'int' lvalue Var 0x7febd58300c8 'ix' 'int'
      | `-ImplicitCastExpr 0x7febd5832600 <col:39> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7febd58325e0 <col:39> 'int' lvalue ParmVar 0x7febd582f9b0 'stepx1' 'int'
      `-CompoundStmt 0x7febd5832c08 <col:48, line:26:5>
        |-BinaryOperator 0x7febd58326a0 <line:20:9, line:5:14> 'BOOL':'unsigned char' '='
        | |-DeclRefExpr 0x7febd5832648 <line:20:9> 'BOOL':'unsigned char' lvalue Var 0x7febd58323c0 'val' 'BOOL':'unsigned char'
        | `-ImplicitCastExpr 0x7febd5832688 <line:5:14> 'BOOL':'unsigned char' <IntegralCast>
        |   `-IntegerLiteral 0x7febd5832668 <col:14> 'int' 1
        |-ForStmt 0x7febd5832a60 <line:21:9, line:23:9>
        | |-BinaryOperator 0x7febd5832718 <line:21:14, col:18> 'int' '='
        | | |-DeclRefExpr 0x7febd58326c0 <col:14> 'int' lvalue Var 0x7febd5830148 'jx' 'int'
        | | `-ImplicitCastExpr 0x7febd5832700 <col:18> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7febd58326e0 <col:18> 'int' lvalue ParmVar 0x7febd582fa30 'startx2' 'int'
        | |-<<<NULL>>>
        | |-BinaryOperator 0x7febd58327a8 <col:27, col:30> 'int' '<'
        | | |-ImplicitCastExpr 0x7febd5832778 <col:27> 'int' <LValueToRValue>
        | | | `-DeclRefExpr 0x7febd5832738 <col:27> 'int' lvalue Var 0x7febd5830148 'jx' 'int'
        | | `-ImplicitCastExpr 0x7febd5832790 <col:30> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7febd5832758 <col:30> 'int' lvalue ParmVar 0x7febd582fab0 'stopx2' 'int'
        | |-CompoundAssignOperator 0x7febd5832820 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
        | | |-DeclRefExpr 0x7febd58327c8 <col:38> 'int' lvalue Var 0x7febd5830148 'jx' 'int'
        | | `-ImplicitCastExpr 0x7febd5832808 <col:43> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7febd58327e8 <col:43> 'int' lvalue ParmVar 0x7febd582fb30 'stepx2' 'int'
        | `-CompoundStmt 0x7febd5832a48 <col:52, line:23:9>
        |   `-BinaryOperator 0x7febd5832a28 <line:22:13, col:33> 'BOOL':'unsigned char' '='
        |     |-DeclRefExpr 0x7febd5832850 <col:13> 'BOOL':'unsigned char' lvalue Var 0x7febd58323c0 'val' 'BOOL':'unsigned char'
        |     `-ImplicitCastExpr 0x7febd5832a10 <col:19, col:33> 'BOOL':'unsigned char' <IntegralCast>
        |       `-BinaryOperator 0x7febd58329f0 <col:19, col:33> 'int' '&'
        |         |-ImplicitCastExpr 0x7febd58329a8 <col:19> 'int' <IntegralCast>
        |         | `-ImplicitCastExpr 0x7febd5832990 <col:19> 'BOOL':'unsigned char' <LValueToRValue>
        |         |   `-DeclRefExpr 0x7febd5832870 <col:19> 'BOOL':'unsigned char' lvalue Var 0x7febd58323c0 'val' 'BOOL':'unsigned char'
        |         `-ImplicitCastExpr 0x7febd58329d8 <col:25, col:33> 'int' <IntegralCast>
        |           `-ImplicitCastExpr 0x7febd58329c0 <col:25, col:33> 'BOOL':'unsigned char' <LValueToRValue>
        |             `-ArraySubscriptExpr 0x7febd5832970 <col:25, col:33> 'BOOL':'unsigned char' lvalue
        |               |-ImplicitCastExpr 0x7febd5832940 <col:25, col:29> 'BOOL *' <ArrayToPointerDecay>
        |               | `-ArraySubscriptExpr 0x7febd5832900 <col:25, col:29> 'BOOL [mx]' lvalue
        |               |   |-ImplicitCastExpr 0x7febd58328d0 <col:25> 'BOOL (*)[mx]':'BOOL (*)[mx]' <LValueToRValue>
        |               |   | `-DeclRefExpr 0x7febd5832890 <col:25> 'BOOL (*)[mx]':'BOOL (*)[mx]' lvalue ParmVar 0x7febd582f640 'x' 'BOOL (*)[mx]':'BOOL (*)[mx]'
        |               |   `-ImplicitCastExpr 0x7febd58328e8 <col:27> 'int' <LValueToRValue>
        |               |     `-DeclRefExpr 0x7febd58328b0 <col:27> 'int' lvalue Var 0x7febd58300c8 'ix' 'int'
        |               `-ImplicitCastExpr 0x7febd5832958 <col:31> 'int' <LValueToRValue>
        |                 `-DeclRefExpr 0x7febd5832920 <col:31> 'int' lvalue Var 0x7febd5830148 'jx' 'int'
        |-BinaryOperator 0x7febd5832b60 <line:24:9, col:17> 'BOOL':'unsigned char' '='
        | |-ArraySubscriptExpr 0x7febd5832b08 <col:9, col:13> 'BOOL':'unsigned char' lvalue
        | | |-ImplicitCastExpr 0x7febd5832ad8 <col:9> 'BOOL *':'BOOL *' <LValueToRValue>
        | | | `-DeclRefExpr 0x7febd5832a98 <col:9> 'BOOL *':'BOOL *' lvalue ParmVar 0x7febd582f830 'z' 'BOOL *':'BOOL *'
        | | `-ImplicitCastExpr 0x7febd5832af0 <col:11> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7febd5832ab8 <col:11> 'int' lvalue Var 0x7febd5832300 'iz' 'int'
        | `-ImplicitCastExpr 0x7febd5832b48 <col:17> 'BOOL':'unsigned char' <LValueToRValue>
        |   `-DeclRefExpr 0x7febd5832b28 <col:17> 'BOOL':'unsigned char' lvalue Var 0x7febd58323c0 'val' 'BOOL':'unsigned char'
        `-CompoundAssignOperator 0x7febd5832bd8 <line:25:9, col:15> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
          |-DeclRefExpr 0x7febd5832b80 <col:9> 'int' lvalue Var 0x7febd5832300 'iz' 'int'
          `-ImplicitCastExpr 0x7febd5832bc0 <col:15> 'int' <LValueToRValue>
            `-DeclRefExpr 0x7febd5832ba0 <col:15> 'int' lvalue ParmVar 0x7febd582fcb0 'stepz' 'int'
