TranslationUnitDecl 0x7faa79038608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7faa79038ea0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7faa79038ba0 '__int128'
|-TypedefDecl 0x7faa79038f10 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7faa79038bc0 'unsigned __int128'
|-TypedefDecl 0x7faa790391f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7faa79038ff0 'struct __NSConstantString_tag'
|   `-Record 0x7faa79038f68 '__NSConstantString_tag'
|-TypedefDecl 0x7faa79039290 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7faa79039250 'char *'
|   `-BuiltinType 0x7faa790386a0 'char'
|-TypedefDecl 0x7faa79039568 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7faa79039510 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7faa79039370 'struct __va_list_tag'
|     `-Record 0x7faa790392e8 '__va_list_tag'
|-TypedefDecl 0x7faa79091000 <./tree_src/extendSectVector_AddSectScaVec.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7faa79038760 'unsigned char'
`-FunctionDecl 0x7faa79091928 <line:6:1, line:17:1> line:6:6 AddSectScaVec 'void (int, int, double, double *, double *, int, int, int, int, int, int)'
  |-ParmVarDecl 0x7faa79091070 <line:7:5, col:9> col:9 used ny 'int'
  |-ParmVarDecl 0x7faa790910f0 <col:13, col:17> col:17 used nz 'int'
  |-ParmVarDecl 0x7faa79091170 <line:8:5, col:12> col:12 used x 'double'
  |-ParmVarDecl 0x7faa790912f0 <col:15, col:26> col:22 used y 'double *':'double *'
  |-ParmVarDecl 0x7faa79091440 <col:29, col:40> col:36 used z 'double *':'double *'
  |-ParmVarDecl 0x7faa790914c0 <line:9:5, col:9> col:9 used starty 'int'
  |-ParmVarDecl 0x7faa79091540 <col:17, col:21> col:21 used stopy 'int'
  |-ParmVarDecl 0x7faa790915c0 <col:28, col:32> col:32 used stepy 'int'
  |-ParmVarDecl 0x7faa79091640 <col:39, col:43> col:43 used startz 'int'
  |-ParmVarDecl 0x7faa790916c0 <col:51, col:55> col:55 stopz 'int'
  |-ParmVarDecl 0x7faa79091740 <col:62, col:66> col:66 used stepz 'int'
  `-CompoundStmt 0x7faa79093038 <col:74, line:17:1>
    |-DeclStmt 0x7faa79091b80 <line:11:5, col:15>
    | |-VarDecl 0x7faa79091a80 <col:5, col:9> col:9 used iy 'int'
    | `-VarDecl 0x7faa79091b00 <col:5, col:13> col:13 used iz 'int'
    |-BinaryOperator 0x7faa79091bf0 <line:12:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7faa79091b98 <col:5> 'int' lvalue Var 0x7faa79091b00 'iz' 'int'
    | `-ImplicitCastExpr 0x7faa79091bd8 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7faa79091bb8 <col:10> 'int' lvalue ParmVar 0x7faa79091640 'startz' 'int'
    `-ForStmt 0x7faa79093000 <line:13:5, line:16:5>
      |-BinaryOperator 0x7faa79091c68 <line:13:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7faa79091c10 <col:10> 'int' lvalue Var 0x7faa79091a80 'iy' 'int'
      | `-ImplicitCastExpr 0x7faa79091c50 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7faa79091c30 <col:14> 'int' lvalue ParmVar 0x7faa790914c0 'starty' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7faa79091cf8 <col:22, col:25> 'int' '<'
      | |-ImplicitCastExpr 0x7faa79091cc8 <col:22> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7faa79091c88 <col:22> 'int' lvalue Var 0x7faa79091a80 'iy' 'int'
      | `-ImplicitCastExpr 0x7faa79091ce0 <col:25> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7faa79091ca8 <col:25> 'int' lvalue ParmVar 0x7faa79091540 'stopy' 'int'
      |-CompoundAssignOperator 0x7faa79091d70 <col:32, col:37> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7faa79091d18 <col:32> 'int' lvalue Var 0x7faa79091a80 'iy' 'int'
      | `-ImplicitCastExpr 0x7faa79091d58 <col:37> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7faa79091d38 <col:37> 'int' lvalue ParmVar 0x7faa790915c0 'stepy' 'int'
      `-CompoundStmt 0x7faa79091fd8 <col:45, line:16:5>
        |-BinaryOperator 0x7faa79091f30 <line:14:9, col:25> 'double' '='
        | |-ArraySubscriptExpr 0x7faa79091e10 <col:9, col:13> 'double' lvalue
        | | |-ImplicitCastExpr 0x7faa79091de0 <col:9> 'double *':'double *' <LValueToRValue>
        | | | `-DeclRefExpr 0x7faa79091da0 <col:9> 'double *':'double *' lvalue ParmVar 0x7faa79091440 'z' 'double *':'double *'
        | | `-ImplicitCastExpr 0x7faa79091df8 <col:11> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7faa79091dc0 <col:11> 'int' lvalue Var 0x7faa79091b00 'iz' 'int'
        | `-BinaryOperator 0x7faa79091f10 <col:17, col:25> 'double' '+'
        |   |-ImplicitCastExpr 0x7faa79091ee0 <col:17> 'double' <LValueToRValue>
        |   | `-DeclRefExpr 0x7faa79091e30 <col:17> 'double' lvalue ParmVar 0x7faa79091170 'x' 'double'
        |   `-ImplicitCastExpr 0x7faa79091ef8 <col:21, col:25> 'double' <LValueToRValue>
        |     `-ArraySubscriptExpr 0x7faa79091ec0 <col:21, col:25> 'double' lvalue
        |       |-ImplicitCastExpr 0x7faa79091e90 <col:21> 'double *':'double *' <LValueToRValue>
        |       | `-DeclRefExpr 0x7faa79091e50 <col:21> 'double *':'double *' lvalue ParmVar 0x7faa790912f0 'y' 'double *':'double *'
        |       `-ImplicitCastExpr 0x7faa79091ea8 <col:23> 'int' <LValueToRValue>
        |         `-DeclRefExpr 0x7faa79091e70 <col:23> 'int' lvalue Var 0x7faa79091a80 'iy' 'int'
        `-CompoundAssignOperator 0x7faa79091fa8 <line:15:9, col:15> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
          |-DeclRefExpr 0x7faa79091f50 <col:9> 'int' lvalue Var 0x7faa79091b00 'iz' 'int'
          `-ImplicitCastExpr 0x7faa79091f90 <col:15> 'int' <LValueToRValue>
            `-DeclRefExpr 0x7faa79091f70 <col:15> 'int' lvalue ParmVar 0x7faa79091740 'stepz' 'int'
