TranslationUnitDecl 0x7fbf2b038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fbf2b0394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fbf2b0391a0 '__int128'
|-TypedefDecl 0x7fbf2b039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fbf2b0391c0 'unsigned __int128'
|-TypedefDecl 0x7fbf2b0397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fbf2b0395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fbf2b039568 '__NSConstantString_tag'
|-TypedefDecl 0x7fbf2b039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fbf2b039850 'char *'
|   `-BuiltinType 0x7fbf2b038ca0 'char'
|-TypedefDecl 0x7fbf2b039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fbf2b039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fbf2b039970 'struct __va_list_tag'
|     `-Record 0x7fbf2b0398e8 '__va_list_tag'
|-TypedefDecl 0x7fbf2b091600 <./tree_src/dyadicSectMatrix_OrSectMat.c:3:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x7fbf2b038d60 'unsigned char'
`-FunctionDecl 0x7fbf2b093f38 <line:6:1, line:27:1> line:6:6 OrSectMat 'void (int, int, int, int, int, int, BOOL (*)[mx], BOOL (*)[my], BOOL (*)[mz], int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)'
  |-ParmVarDecl 0x7fbf2b091670 <line:7:5, col:9> col:9 used nx 'int'
  |-ParmVarDecl 0x7fbf2b0916f0 <col:13, col:17> col:17 used mx 'int'
  |-ParmVarDecl 0x7fbf2b091770 <col:21, col:25> col:25 used ny 'int'
  |-ParmVarDecl 0x7fbf2b0917f0 <col:29, col:33> col:33 used my 'int'
  |-ParmVarDecl 0x7fbf2b091870 <col:37, col:41> col:41 used nz 'int'
  |-ParmVarDecl 0x7fbf2b0918f0 <col:45, col:49> col:49 used mz 'int'
  |-ParmVarDecl 0x7fbf2b091bc0 <line:8:5, col:18> col:10 used x 'BOOL (*)[mx]':'BOOL (*)[mx]'
  |-ParmVarDecl 0x7fbf2b091e70 <col:21, col:34> col:26 used y 'BOOL (*)[my]':'BOOL (*)[my]'
  |-ParmVarDecl 0x7fbf2b092120 <col:37, col:50> col:42 used z 'BOOL (*)[mz]':'BOOL (*)[mz]'
  |-ParmVarDecl 0x7fbf2b0921a0 <line:9:5, col:9> col:9 used startx1 'int'
  |-ParmVarDecl 0x7fbf2b092220 <col:18, col:22> col:22 used stopx1 'int'
  |-ParmVarDecl 0x7fbf2b0922a0 <col:30, col:34> col:34 used stepx1 'int'
  |-ParmVarDecl 0x7fbf2b092320 <col:42, col:46> col:46 used startx2 'int'
  |-ParmVarDecl 0x7fbf2b0923a0 <col:55, col:59> col:59 used stopx2 'int'
  |-ParmVarDecl 0x7fbf2b092420 <col:67, col:71> col:71 used stepx2 'int'
  |-ParmVarDecl 0x7fbf2b0924a0 <line:10:5, col:9> col:9 used starty1 'int'
  |-ParmVarDecl 0x7fbf2b092520 <col:18, col:22> col:22 stopy1 'int'
  |-ParmVarDecl 0x7fbf2b093600 <col:30, col:34> col:34 used stepy1 'int'
  |-ParmVarDecl 0x7fbf2b093680 <col:42, col:46> col:46 used starty2 'int'
  |-ParmVarDecl 0x7fbf2b093700 <col:55, col:59> col:59 stopy2 'int'
  |-ParmVarDecl 0x7fbf2b093780 <col:67, col:71> col:71 used stepy2 'int'
  |-ParmVarDecl 0x7fbf2b093800 <line:11:5, col:9> col:9 used startz1 'int'
  |-ParmVarDecl 0x7fbf2b093880 <col:18, col:22> col:22 stopz1 'int'
  |-ParmVarDecl 0x7fbf2b093900 <col:30, col:34> col:34 used stepz1 'int'
  |-ParmVarDecl 0x7fbf2b093980 <col:42, col:46> col:46 used startz2 'int'
  |-ParmVarDecl 0x7fbf2b093a00 <col:55, col:59> col:59 stopz2 'int'
  |-ParmVarDecl 0x7fbf2b093a80 <col:67, col:71> col:71 used stepz2 'int'
  `-CompoundStmt 0x7fbf2b0950f0 <col:79, line:27:1>
    |-DeclStmt 0x7fbf2b094430 <line:13:5, col:31>
    | |-VarDecl 0x7fbf2b094110 <col:5, col:9> col:9 used ix 'int'
    | |-VarDecl 0x7fbf2b094190 <col:5, col:13> col:13 used jx 'int'
    | |-VarDecl 0x7fbf2b094210 <col:5, col:17> col:17 used iy 'int'
    | |-VarDecl 0x7fbf2b094290 <col:5, col:21> col:21 used jy 'int'
    | |-VarDecl 0x7fbf2b094310 <col:5, col:25> col:25 used iz 'int'
    | `-VarDecl 0x7fbf2b094390 <col:5, col:29> col:29 used jz 'int'
    |-BinaryOperator 0x7fbf2b0944a0 <line:14:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7fbf2b094448 <col:5> 'int' lvalue Var 0x7fbf2b094210 'iy' 'int'
    | `-ImplicitCastExpr 0x7fbf2b094488 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7fbf2b094468 <col:10> 'int' lvalue ParmVar 0x7fbf2b0924a0 'starty1' 'int'
    |-BinaryOperator 0x7fbf2b094518 <line:15:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7fbf2b0944c0 <col:5> 'int' lvalue Var 0x7fbf2b094310 'iz' 'int'
    | `-ImplicitCastExpr 0x7fbf2b094500 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7fbf2b0944e0 <col:10> 'int' lvalue ParmVar 0x7fbf2b093800 'startz1' 'int'
    `-ForStmt 0x7fbf2b0950b8 <line:16:5, line:26:5>
      |-BinaryOperator 0x7fbf2b094590 <line:16:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7fbf2b094538 <col:10> 'int' lvalue Var 0x7fbf2b094110 'ix' 'int'
      | `-ImplicitCastExpr 0x7fbf2b094578 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fbf2b094558 <col:14> 'int' lvalue ParmVar 0x7fbf2b0921a0 'startx1' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7fbf2b094630 <col:23, col:26> 'int' '<'
      | |-ImplicitCastExpr 0x7fbf2b094600 <col:23> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fbf2b0945b0 <col:23> 'int' lvalue Var 0x7fbf2b094110 'ix' 'int'
      | `-ImplicitCastExpr 0x7fbf2b094618 <col:26> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fbf2b0945d0 <col:26> 'int' lvalue ParmVar 0x7fbf2b092220 'stopx1' 'int'
      |-CompoundAssignOperator 0x7fbf2b0946a8 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7fbf2b094650 <col:34> 'int' lvalue Var 0x7fbf2b094110 'ix' 'int'
      | `-ImplicitCastExpr 0x7fbf2b094690 <col:39> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fbf2b094670 <col:39> 'int' lvalue ParmVar 0x7fbf2b0922a0 'stepx1' 'int'
      `-CompoundStmt 0x7fbf2b095080 <col:48, line:26:5>
        |-BinaryOperator 0x7fbf2b094730 <line:17:9, col:14> 'int' '='
        | |-DeclRefExpr 0x7fbf2b0946d8 <col:9> 'int' lvalue Var 0x7fbf2b094290 'jy' 'int'
        | `-ImplicitCastExpr 0x7fbf2b094718 <col:14> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x7fbf2b0946f8 <col:14> 'int' lvalue ParmVar 0x7fbf2b093680 'starty2' 'int'
        |-BinaryOperator 0x7fbf2b0947a8 <line:18:9, col:14> 'int' '='
        | |-DeclRefExpr 0x7fbf2b094750 <col:9> 'int' lvalue Var 0x7fbf2b094390 'jz' 'int'
        | `-ImplicitCastExpr 0x7fbf2b094790 <col:14> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x7fbf2b094770 <col:14> 'int' lvalue ParmVar 0x7fbf2b093980 'startz2' 'int'
        |-ForStmt 0x7fbf2b094f38 <line:19:9, line:23:9>
        | |-BinaryOperator 0x7fbf2b094820 <line:19:14, col:18> 'int' '='
        | | |-DeclRefExpr 0x7fbf2b0947c8 <col:14> 'int' lvalue Var 0x7fbf2b094190 'jx' 'int'
        | | `-ImplicitCastExpr 0x7fbf2b094808 <col:18> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fbf2b0947e8 <col:18> 'int' lvalue ParmVar 0x7fbf2b092320 'startx2' 'int'
        | |-<<<NULL>>>
        | |-BinaryOperator 0x7fbf2b0948b0 <col:27, col:30> 'int' '<'
        | | |-ImplicitCastExpr 0x7fbf2b094880 <col:27> 'int' <LValueToRValue>
        | | | `-DeclRefExpr 0x7fbf2b094840 <col:27> 'int' lvalue Var 0x7fbf2b094190 'jx' 'int'
        | | `-ImplicitCastExpr 0x7fbf2b094898 <col:30> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fbf2b094860 <col:30> 'int' lvalue ParmVar 0x7fbf2b0923a0 'stopx2' 'int'
        | |-CompoundAssignOperator 0x7fbf2b094928 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
        | | |-DeclRefExpr 0x7fbf2b0948d0 <col:38> 'int' lvalue Var 0x7fbf2b094190 'jx' 'int'
        | | `-ImplicitCastExpr 0x7fbf2b094910 <col:43> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fbf2b0948f0 <col:43> 'int' lvalue ParmVar 0x7fbf2b092420 'stepx2' 'int'
        | `-CompoundStmt 0x7fbf2b094f10 <col:52, line:23:9>
        |   |-BinaryOperator 0x7fbf2b094d50 <line:20:6, col:38> 'BOOL':'unsigned char' '='
        |   | |-ArraySubscriptExpr 0x7fbf2b094a98 <col:6, col:14> 'BOOL':'unsigned char' lvalue
        |   | | |-ImplicitCastExpr 0x7fbf2b094a68 <col:6, col:10> 'BOOL *' <ArrayToPointerDecay>
        |   | | | `-ArraySubscriptExpr 0x7fbf2b0949c8 <col:6, col:10> 'BOOL [mz]' lvalue
        |   | | |   |-ImplicitCastExpr 0x7fbf2b094998 <col:6> 'BOOL (*)[mz]':'BOOL (*)[mz]' <LValueToRValue>
        |   | | |   | `-DeclRefExpr 0x7fbf2b094958 <col:6> 'BOOL (*)[mz]':'BOOL (*)[mz]' lvalue ParmVar 0x7fbf2b092120 'z' 'BOOL (*)[mz]':'BOOL (*)[mz]'
        |   | | |   `-ImplicitCastExpr 0x7fbf2b0949b0 <col:8> 'int' <LValueToRValue>
        |   | | |     `-DeclRefExpr 0x7fbf2b094978 <col:8> 'int' lvalue Var 0x7fbf2b094310 'iz' 'int'
        |   | | `-ImplicitCastExpr 0x7fbf2b094a80 <col:12> 'int' <LValueToRValue>
        |   | |   `-DeclRefExpr 0x7fbf2b0949e8 <col:12> 'int' lvalue Var 0x7fbf2b094390 'jz' 'int'
        |   | `-ImplicitCastExpr 0x7fbf2b094d38 <col:18, col:38> 'BOOL':'unsigned char' <IntegralCast>
        |   |   `-BinaryOperator 0x7fbf2b094d18 <col:18, col:38> 'int' '|'
        |   |     |-ImplicitCastExpr 0x7fbf2b094cd0 <col:18, col:26> 'int' <IntegralCast>
        |   |     | `-ImplicitCastExpr 0x7fbf2b094cb8 <col:18, col:26> 'BOOL':'unsigned char' <LValueToRValue>
        |   |     |   `-ArraySubscriptExpr 0x7fbf2b094b98 <col:18, col:26> 'BOOL':'unsigned char' lvalue
        |   |     |     |-ImplicitCastExpr 0x7fbf2b094b68 <col:18, col:22> 'BOOL *' <ArrayToPointerDecay>
        |   |     |     | `-ArraySubscriptExpr 0x7fbf2b094b28 <col:18, col:22> 'BOOL [mx]' lvalue
        |   |     |     |   |-ImplicitCastExpr 0x7fbf2b094af8 <col:18> 'BOOL (*)[mx]':'BOOL (*)[mx]' <LValueToRValue>
        |   |     |     |   | `-DeclRefExpr 0x7fbf2b094ab8 <col:18> 'BOOL (*)[mx]':'BOOL (*)[mx]' lvalue ParmVar 0x7fbf2b091bc0 'x' 'BOOL (*)[mx]':'BOOL (*)[mx]'
        |   |     |     |   `-ImplicitCastExpr 0x7fbf2b094b10 <col:20> 'int' <LValueToRValue>
        |   |     |     |     `-DeclRefExpr 0x7fbf2b094ad8 <col:20> 'int' lvalue Var 0x7fbf2b094110 'ix' 'int'
        |   |     |     `-ImplicitCastExpr 0x7fbf2b094b80 <col:24> 'int' <LValueToRValue>
        |   |     |       `-DeclRefExpr 0x7fbf2b094b48 <col:24> 'int' lvalue Var 0x7fbf2b094190 'jx' 'int'
        |   |     `-ImplicitCastExpr 0x7fbf2b094d00 <col:30, col:38> 'int' <IntegralCast>
        |   |       `-ImplicitCastExpr 0x7fbf2b094ce8 <col:30, col:38> 'BOOL':'unsigned char' <LValueToRValue>
        |   |         `-ArraySubscriptExpr 0x7fbf2b094c98 <col:30, col:38> 'BOOL':'unsigned char' lvalue
        |   |           |-ImplicitCastExpr 0x7fbf2b094c68 <col:30, col:34> 'BOOL *' <ArrayToPointerDecay>
        |   |           | `-ArraySubscriptExpr 0x7fbf2b094c28 <col:30, col:34> 'BOOL [my]' lvalue
        |   |           |   |-ImplicitCastExpr 0x7fbf2b094bf8 <col:30> 'BOOL (*)[my]':'BOOL (*)[my]' <LValueToRValue>
        |   |           |   | `-DeclRefExpr 0x7fbf2b094bb8 <col:30> 'BOOL (*)[my]':'BOOL (*)[my]' lvalue ParmVar 0x7fbf2b091e70 'y' 'BOOL (*)[my]':'BOOL (*)[my]'
        |   |           |   `-ImplicitCastExpr 0x7fbf2b094c10 <col:32> 'int' <LValueToRValue>
        |   |           |     `-DeclRefExpr 0x7fbf2b094bd8 <col:32> 'int' lvalue Var 0x7fbf2b094210 'iy' 'int'
        |   |           `-ImplicitCastExpr 0x7fbf2b094c80 <col:36> 'int' <LValueToRValue>
        |   |             `-DeclRefExpr 0x7fbf2b094c48 <col:36> 'int' lvalue Var 0x7fbf2b094290 'jy' 'int'
        |   |-BinaryOperator 0x7fbf2b094e20 <line:21:6, col:16> 'int' '='
        |   | |-DeclRefExpr 0x7fbf2b094d70 <col:6> 'int' lvalue Var 0x7fbf2b094290 'jy' 'int'
        |   | `-BinaryOperator 0x7fbf2b094e00 <col:11, col:16> 'int' '+'
        |   |   |-ImplicitCastExpr 0x7fbf2b094dd0 <col:11> 'int' <LValueToRValue>
        |   |   | `-DeclRefExpr 0x7fbf2b094d90 <col:11> 'int' lvalue Var 0x7fbf2b094290 'jy' 'int'
        |   |   `-ImplicitCastExpr 0x7fbf2b094de8 <col:16> 'int' <LValueToRValue>
        |   |     `-DeclRefExpr 0x7fbf2b094db0 <col:16> 'int' lvalue ParmVar 0x7fbf2b093780 'stepy2' 'int'
        |   `-BinaryOperator 0x7fbf2b094ef0 <line:22:6, col:16> 'int' '='
        |     |-DeclRefExpr 0x7fbf2b094e40 <col:6> 'int' lvalue Var 0x7fbf2b094390 'jz' 'int'
        |     `-BinaryOperator 0x7fbf2b094ed0 <col:11, col:16> 'int' '+'
        |       |-ImplicitCastExpr 0x7fbf2b094ea0 <col:11> 'int' <LValueToRValue>
        |       | `-DeclRefExpr 0x7fbf2b094e60 <col:11> 'int' lvalue Var 0x7fbf2b094390 'jz' 'int'
        |       `-ImplicitCastExpr 0x7fbf2b094eb8 <col:16> 'int' <LValueToRValue>
        |         `-DeclRefExpr 0x7fbf2b094e80 <col:16> 'int' lvalue ParmVar 0x7fbf2b093a80 'stepz2' 'int'
        |-CompoundAssignOperator 0x7fbf2b094fc8 <line:24:9, col:15> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
        | |-DeclRefExpr 0x7fbf2b094f70 <col:9> 'int' lvalue Var 0x7fbf2b094210 'iy' 'int'
        | `-ImplicitCastExpr 0x7fbf2b094fb0 <col:15> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x7fbf2b094f90 <col:15> 'int' lvalue ParmVar 0x7fbf2b093600 'stepy1' 'int'
        `-CompoundAssignOperator 0x7fbf2b095050 <line:25:9, col:15> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
          |-DeclRefExpr 0x7fbf2b094ff8 <col:9> 'int' lvalue Var 0x7fbf2b094310 'iz' 'int'
          `-ImplicitCastExpr 0x7fbf2b095038 <col:15> 'int' <LValueToRValue>
            `-DeclRefExpr 0x7fbf2b095018 <col:15> 'int' lvalue ParmVar 0x7fbf2b093900 'stepz1' 'int'
