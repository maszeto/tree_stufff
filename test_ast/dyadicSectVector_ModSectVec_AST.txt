TranslationUnitDecl 0x7f884b838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f884b8394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f884b8391a0 '__int128'
|-TypedefDecl 0x7f884b839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f884b8391c0 'unsigned __int128'
|-TypedefDecl 0x7f884b8397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f884b8395f0 'struct __NSConstantString_tag'
|   `-Record 0x7f884b839568 '__NSConstantString_tag'
|-TypedefDecl 0x7f884b839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f884b839850 'char *'
|   `-BuiltinType 0x7f884b838ca0 'char'
|-TypedefDecl 0x7f884b839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f884b839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f884b839970 'struct __va_list_tag'
|     `-Record 0x7f884b8398e8 '__va_list_tag'
|-TypedefDecl 0x7f884c02f200 <./tree_src/dyadicSectVector_ModSectVec.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7f884b838d60 'unsigned char'
|-FunctionDecl 0x7f884c02fd28 <line:6:1, line:19:1> line:6:6 ModSectVec 'void (int, double *, double *, double *, int, int, int, int, int, int, int, int, int)'
| |-ParmVarDecl 0x7f884c02f270 <line:7:5, col:9> col:9 used n 'int'
| |-ParmVarDecl 0x7f884c02f3f0 <col:12, col:22> col:19 used x 'double *':'double *'
| |-ParmVarDecl 0x7f884c02f540 <col:25, col:35> col:32 used y 'double *':'double *'
| |-ParmVarDecl 0x7f884c02f690 <col:38, col:48> col:45 used z 'double *':'double *'
| |-ParmVarDecl 0x7f884c02f710 <line:8:5, col:9> col:9 used startx 'int'
| |-ParmVarDecl 0x7f884c02f790 <col:17, col:21> col:21 used stopx 'int'
| |-ParmVarDecl 0x7f884c02f810 <col:28, col:32> col:32 used stepx 'int'
| |-ParmVarDecl 0x7f884c02f890 <col:39, col:43> col:43 used starty 'int'
| |-ParmVarDecl 0x7f884c02f910 <col:51, col:55> col:55 stopy 'int'
| |-ParmVarDecl 0x7f884c02f990 <col:62, col:66> col:66 used stepy 'int'
| |-ParmVarDecl 0x7f884c02fa10 <line:9:5, col:9> col:9 used startz 'int'
| |-ParmVarDecl 0x7f884c02fa90 <col:17, col:21> col:21 stopz 'int'
| |-ParmVarDecl 0x7f884c02fb10 <col:28, col:32> col:32 used stepz 'int'
| `-CompoundStmt 0x7f884c031960 <col:40, line:19:1>
|   |-DeclStmt 0x7f884c030018 <line:11:5, col:17>
|   | |-VarDecl 0x7f884c02fe90 <col:5, col:9> col:9 used ix 'int'
|   | |-VarDecl 0x7f884c02ff10 <col:5, col:12> col:12 used iy 'int'
|   | `-VarDecl 0x7f884c02ff90 <col:5, col:15> col:15 used iz 'int'
|   |-BinaryOperator 0x7f884c030088 <line:12:5, col:10> 'int' '='
|   | |-DeclRefExpr 0x7f884c030030 <col:5> 'int' lvalue Var 0x7f884c02ff10 'iy' 'int'
|   | `-ImplicitCastExpr 0x7f884c030070 <col:10> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7f884c030050 <col:10> 'int' lvalue ParmVar 0x7f884c02f890 'starty' 'int'
|   |-BinaryOperator 0x7f884c030100 <line:13:5, col:10> 'int' '='
|   | |-DeclRefExpr 0x7f884c0300a8 <col:5> 'int' lvalue Var 0x7f884c02ff90 'iz' 'int'
|   | `-ImplicitCastExpr 0x7f884c0300e8 <col:10> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7f884c0300c8 <col:10> 'int' lvalue ParmVar 0x7f884c02fa10 'startz' 'int'
|   `-ForStmt 0x7f884c031928 <line:14:5, line:18:5>
|     |-BinaryOperator 0x7f884c030178 <line:14:10, col:14> 'int' '='
|     | |-DeclRefExpr 0x7f884c030120 <col:10> 'int' lvalue Var 0x7f884c02fe90 'ix' 'int'
|     | `-ImplicitCastExpr 0x7f884c030160 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7f884c030140 <col:14> 'int' lvalue ParmVar 0x7f884c02f710 'startx' 'int'
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7f884c031218 <col:22, col:25> 'int' '<'
|     | |-ImplicitCastExpr 0x7f884c0301d8 <col:22> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7f884c030198 <col:22> 'int' lvalue Var 0x7f884c02fe90 'ix' 'int'
|     | `-ImplicitCastExpr 0x7f884c031200 <col:25> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7f884c0301b8 <col:25> 'int' lvalue ParmVar 0x7f884c02f790 'stopx' 'int'
|     |-CompoundAssignOperator 0x7f884c031290 <col:32, col:37> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     | |-DeclRefExpr 0x7f884c031238 <col:32> 'int' lvalue Var 0x7f884c02fe90 'ix' 'int'
|     | `-ImplicitCastExpr 0x7f884c031278 <col:37> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7f884c031258 <col:37> 'int' lvalue ParmVar 0x7f884c02f810 'stepx' 'int'
|     `-CompoundStmt 0x7f884c031900 <col:45, line:18:5>
|       |-BinaryOperator 0x7f884c031740 <line:15:4, col:28> 'double' '='
|       | |-ArraySubscriptExpr 0x7f884c031330 <col:4, col:8> 'double' lvalue
|       | | |-ImplicitCastExpr 0x7f884c031300 <col:4> 'double *':'double *' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7f884c0312c0 <col:4> 'double *':'double *' lvalue ParmVar 0x7f884c02f690 'z' 'double *':'double *'
|       | | `-ImplicitCastExpr 0x7f884c031318 <col:6> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7f884c0312e0 <col:6> 'int' lvalue Var 0x7f884c02ff90 'iz' 'int'
|       | `-CallExpr 0x7f884c0316e0 <col:12, col:28> 'double'
|       |   |-ImplicitCastExpr 0x7f884c0316c8 <col:12> 'double (*)(double, double)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x7f884c031558 <col:12> 'double (double, double)' Function 0x7f884c031388 'fmod' 'double (double, double)'
|       |   |-ImplicitCastExpr 0x7f884c031710 <col:17, col:21> 'double' <LValueToRValue>
|       |   | `-ArraySubscriptExpr 0x7f884c0315e8 <col:17, col:21> 'double' lvalue
|       |   |   |-ImplicitCastExpr 0x7f884c0315b8 <col:17> 'double *':'double *' <LValueToRValue>
|       |   |   | `-DeclRefExpr 0x7f884c031578 <col:17> 'double *':'double *' lvalue ParmVar 0x7f884c02f3f0 'x' 'double *':'double *'
|       |   |   `-ImplicitCastExpr 0x7f884c0315d0 <col:19> 'int' <LValueToRValue>
|       |   |     `-DeclRefExpr 0x7f884c031598 <col:19> 'int' lvalue Var 0x7f884c02fe90 'ix' 'int'
|       |   `-ImplicitCastExpr 0x7f884c031728 <col:23, col:27> 'double' <LValueToRValue>
|       |     `-ArraySubscriptExpr 0x7f884c031678 <col:23, col:27> 'double' lvalue
|       |       |-ImplicitCastExpr 0x7f884c031648 <col:23> 'double *':'double *' <LValueToRValue>
|       |       | `-DeclRefExpr 0x7f884c031608 <col:23> 'double *':'double *' lvalue ParmVar 0x7f884c02f540 'y' 'double *':'double *'
|       |       `-ImplicitCastExpr 0x7f884c031660 <col:25> 'int' <LValueToRValue>
|       |         `-DeclRefExpr 0x7f884c031628 <col:25> 'int' lvalue Var 0x7f884c02ff10 'iy' 'int'
|       |-BinaryOperator 0x7f884c031810 <line:16:4, col:14> 'int' '='
|       | |-DeclRefExpr 0x7f884c031760 <col:4> 'int' lvalue Var 0x7f884c02ff10 'iy' 'int'
|       | `-BinaryOperator 0x7f884c0317f0 <col:9, col:14> 'int' '+'
|       |   |-ImplicitCastExpr 0x7f884c0317c0 <col:9> 'int' <LValueToRValue>
|       |   | `-DeclRefExpr 0x7f884c031780 <col:9> 'int' lvalue Var 0x7f884c02ff10 'iy' 'int'
|       |   `-ImplicitCastExpr 0x7f884c0317d8 <col:14> 'int' <LValueToRValue>
|       |     `-DeclRefExpr 0x7f884c0317a0 <col:14> 'int' lvalue ParmVar 0x7f884c02f990 'stepy' 'int'
|       `-BinaryOperator 0x7f884c0318e0 <line:17:4, col:14> 'int' '='
|         |-DeclRefExpr 0x7f884c031830 <col:4> 'int' lvalue Var 0x7f884c02ff90 'iz' 'int'
|         `-BinaryOperator 0x7f884c0318c0 <col:9, col:14> 'int' '+'
|           |-ImplicitCastExpr 0x7f884c031890 <col:9> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x7f884c031850 <col:9> 'int' lvalue Var 0x7f884c02ff90 'iz' 'int'
|           `-ImplicitCastExpr 0x7f884c0318a8 <col:14> 'int' <LValueToRValue>
|             `-DeclRefExpr 0x7f884c031870 <col:14> 'int' lvalue ParmVar 0x7f884c02fb10 'stepz' 'int'
`-FunctionDecl 0x7f884c031388 <line:15:12> col:12 implicit used fmod 'double (double, double)' extern
  |-ParmVarDecl 0x7f884c031428 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x7f884c031490 <<invalid sloc>> <invalid sloc> 'double'
  |-ConstAttr 0x7f884c031508 <col:12> Implicit
  `-NoThrowAttr 0x7f884c031548 <col:12> Implicit
