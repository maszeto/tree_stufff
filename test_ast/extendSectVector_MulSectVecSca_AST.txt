TranslationUnitDecl 0x7fbb3a025208 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fbb3a025aa0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fbb3a0257a0 '__int128'
|-TypedefDecl 0x7fbb3a025b10 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fbb3a0257c0 'unsigned __int128'
|-TypedefDecl 0x7fbb3a025df8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fbb3a025bf0 'struct __NSConstantString_tag'
|   `-Record 0x7fbb3a025b68 '__NSConstantString_tag'
|-TypedefDecl 0x7fbb3a025e90 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fbb3a025e50 'char *'
|   `-BuiltinType 0x7fbb3a0252a0 'char'
|-TypedefDecl 0x7fbb3a026168 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fbb3a026110 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fbb3a025f70 'struct __va_list_tag'
|     `-Record 0x7fbb3a025ee8 '__va_list_tag'
|-TypedefDecl 0x7fbb3a07dc00 <./tree_src/extendSectVector_MulSectVecSca.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fbb3a025360 'unsigned char'
`-FunctionDecl 0x7fbb3a07e528 <line:6:1, line:17:1> line:6:6 MulSectVecSca 'void (int, int, double *, double, double *, int, int, int, int, int, int)'
  |-ParmVarDecl 0x7fbb3a07dc70 <line:7:5, col:9> col:9 used nx 'int'
  |-ParmVarDecl 0x7fbb3a07dcf0 <col:13, col:17> col:17 used nz 'int'
  |-ParmVarDecl 0x7fbb3a07de70 <line:8:5, col:16> col:12 used x 'double *':'double *'
  |-ParmVarDecl 0x7fbb3a07def0 <col:19, col:26> col:26 used y 'double'
  |-ParmVarDecl 0x7fbb3a07e040 <col:29, col:40> col:36 used z 'double *':'double *'
  |-ParmVarDecl 0x7fbb3a07e0c0 <line:9:5, col:9> col:9 used startx 'int'
  |-ParmVarDecl 0x7fbb3a07e140 <col:17, col:21> col:21 used stopx 'int'
  |-ParmVarDecl 0x7fbb3a07e1c0 <col:28, col:32> col:32 used stepx 'int'
  |-ParmVarDecl 0x7fbb3a07e240 <col:39, col:43> col:43 used startz 'int'
  |-ParmVarDecl 0x7fbb3a07e2c0 <col:51, col:55> col:55 stopz 'int'
  |-ParmVarDecl 0x7fbb3a07e340 <col:62, col:66> col:66 used stepz 'int'
  `-CompoundStmt 0x7fbb3a07fc38 <col:74, line:17:1>
    |-DeclStmt 0x7fbb3a07e780 <line:11:5, col:15>
    | |-VarDecl 0x7fbb3a07e680 <col:5, col:9> col:9 used ix 'int'
    | `-VarDecl 0x7fbb3a07e700 <col:5, col:13> col:13 used iz 'int'
    |-BinaryOperator 0x7fbb3a07e7f0 <line:12:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7fbb3a07e798 <col:5> 'int' lvalue Var 0x7fbb3a07e700 'iz' 'int'
    | `-ImplicitCastExpr 0x7fbb3a07e7d8 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7fbb3a07e7b8 <col:10> 'int' lvalue ParmVar 0x7fbb3a07e240 'startz' 'int'
    `-ForStmt 0x7fbb3a07fc00 <line:13:5, line:16:5>
      |-BinaryOperator 0x7fbb3a07e868 <line:13:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7fbb3a07e810 <col:10> 'int' lvalue Var 0x7fbb3a07e680 'ix' 'int'
      | `-ImplicitCastExpr 0x7fbb3a07e850 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fbb3a07e830 <col:14> 'int' lvalue ParmVar 0x7fbb3a07e0c0 'startx' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7fbb3a07e8f8 <col:22, col:25> 'int' '<'
      | |-ImplicitCastExpr 0x7fbb3a07e8c8 <col:22> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fbb3a07e888 <col:22> 'int' lvalue Var 0x7fbb3a07e680 'ix' 'int'
      | `-ImplicitCastExpr 0x7fbb3a07e8e0 <col:25> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fbb3a07e8a8 <col:25> 'int' lvalue ParmVar 0x7fbb3a07e140 'stopx' 'int'
      |-CompoundAssignOperator 0x7fbb3a07e970 <col:32, col:37> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7fbb3a07e918 <col:32> 'int' lvalue Var 0x7fbb3a07e680 'ix' 'int'
      | `-ImplicitCastExpr 0x7fbb3a07e958 <col:37> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fbb3a07e938 <col:37> 'int' lvalue ParmVar 0x7fbb3a07e1c0 'stepx' 'int'
      `-CompoundStmt 0x7fbb3a07ebd8 <col:45, line:16:5>
        |-BinaryOperator 0x7fbb3a07eb30 <line:14:9, col:25> 'double' '='
        | |-ArraySubscriptExpr 0x7fbb3a07ea10 <col:9, col:13> 'double' lvalue
        | | |-ImplicitCastExpr 0x7fbb3a07e9e0 <col:9> 'double *':'double *' <LValueToRValue>
        | | | `-DeclRefExpr 0x7fbb3a07e9a0 <col:9> 'double *':'double *' lvalue ParmVar 0x7fbb3a07e040 'z' 'double *':'double *'
        | | `-ImplicitCastExpr 0x7fbb3a07e9f8 <col:11> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fbb3a07e9c0 <col:11> 'int' lvalue Var 0x7fbb3a07e700 'iz' 'int'
        | `-BinaryOperator 0x7fbb3a07eb10 <col:17, col:25> 'double' '*'
        |   |-ImplicitCastExpr 0x7fbb3a07eae0 <col:17, col:21> 'double' <LValueToRValue>
        |   | `-ArraySubscriptExpr 0x7fbb3a07eaa0 <col:17, col:21> 'double' lvalue
        |   |   |-ImplicitCastExpr 0x7fbb3a07ea70 <col:17> 'double *':'double *' <LValueToRValue>
        |   |   | `-DeclRefExpr 0x7fbb3a07ea30 <col:17> 'double *':'double *' lvalue ParmVar 0x7fbb3a07de70 'x' 'double *':'double *'
        |   |   `-ImplicitCastExpr 0x7fbb3a07ea88 <col:19> 'int' <LValueToRValue>
        |   |     `-DeclRefExpr 0x7fbb3a07ea50 <col:19> 'int' lvalue Var 0x7fbb3a07e680 'ix' 'int'
        |   `-ImplicitCastExpr 0x7fbb3a07eaf8 <col:25> 'double' <LValueToRValue>
        |     `-DeclRefExpr 0x7fbb3a07eac0 <col:25> 'double' lvalue ParmVar 0x7fbb3a07def0 'y' 'double'
        `-CompoundAssignOperator 0x7fbb3a07eba8 <line:15:9, col:15> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
          |-DeclRefExpr 0x7fbb3a07eb50 <col:9> 'int' lvalue Var 0x7fbb3a07e700 'iz' 'int'
          `-ImplicitCastExpr 0x7fbb3a07eb90 <col:15> 'int' <LValueToRValue>
            `-DeclRefExpr 0x7fbb3a07eb70 <col:15> 'int' lvalue ParmVar 0x7fbb3a07e340 'stepz' 'int'
