TranslationUnitDecl 0x7f964480de08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f964480e6a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f964480e3a0 '__int128'
|-TypedefDecl 0x7f964480e710 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f964480e3c0 'unsigned __int128'
|-TypedefDecl 0x7f964480e9f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f964480e7f0 'struct __NSConstantString_tag'
|   `-Record 0x7f964480e768 '__NSConstantString_tag'
|-TypedefDecl 0x7f964480ea90 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f964480ea50 'char *'
|   `-BuiltinType 0x7f964480dea0 'char'
|-TypedefDecl 0x7f964480ed68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f964480ed10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f964480eb70 'struct __va_list_tag'
|     `-Record 0x7f964480eae8 '__va_list_tag'
|-TypedefDecl 0x7f9644055e00 <./tree_src/extendSectMatrix_HiSectMatRowVec.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7f964480df60 'unsigned char'
|-FunctionDecl 0x7f9644058178 <line:6:1, line:25:1> line:6:6 HiSectMatRowVec 'void (int, int, int, int, int, double (*)[mx], double *, double (*)[mz], int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)'
| |-ParmVarDecl 0x7f9644055e70 <line:7:5, col:9> col:9 used nx 'int'
| |-ParmVarDecl 0x7f9644055ef0 <col:13, col:17> col:17 used mx 'int'
| |-ParmVarDecl 0x7f9644055f70 <col:21, col:25> col:25 used ny 'int'
| |-ParmVarDecl 0x7f9644055ff0 <col:29, col:33> col:33 used nz 'int'
| |-ParmVarDecl 0x7f9644056070 <col:37, col:41> col:41 used mz 'int'
| |-ParmVarDecl 0x7f9644056270 <line:8:5, col:20> col:12 used x 'double (*)[mx]':'double (*)[mx]'
| |-ParmVarDecl 0x7f96440563f0 <col:23, col:34> col:30 used y 'double *':'double *'
| |-ParmVarDecl 0x7f96440565f0 <col:37, col:52> col:44 used z 'double (*)[mz]':'double (*)[mz]'
| |-ParmVarDecl 0x7f9644056670 <line:9:5, col:9> col:9 used startx1 'int'
| |-ParmVarDecl 0x7f96440566f0 <col:18, col:22> col:22 used stopx1 'int'
| |-ParmVarDecl 0x7f9644056770 <col:30, col:34> col:34 used stepx1 'int'
| |-ParmVarDecl 0x7f96440567f0 <col:42, col:46> col:46 used startx2 'int'
| |-ParmVarDecl 0x7f9644056870 <col:55, col:59> col:59 used stopx2 'int'
| |-ParmVarDecl 0x7f96440568f0 <col:67, col:71> col:71 used stepx2 'int'
| |-ParmVarDecl 0x7f9644056970 <line:10:5, col:9> col:9 used starty 'int'
| |-ParmVarDecl 0x7f96440569f0 <col:17, col:21> col:21 stopy 'int'
| |-ParmVarDecl 0x7f9644056a70 <col:28, col:32> col:32 used stepy 'int'
| |-ParmVarDecl 0x7f9644056af0 <line:11:5, col:9> col:9 used startz1 'int'
| |-ParmVarDecl 0x7f9644056b70 <col:18, col:22> col:22 stopz1 'int'
| |-ParmVarDecl 0x7f9644056bf0 <col:30, col:34> col:34 used stepz1 'int'
| |-ParmVarDecl 0x7f9644056c70 <col:42, col:46> col:46 used startz2 'int'
| |-ParmVarDecl 0x7f9644056cf0 <col:55, col:59> col:59 stopz2 'int'
| |-ParmVarDecl 0x7f9644056d70 <col:67, col:71> col:71 used stepz2 'int'
| `-CompoundStmt 0x7f96440593a8 <col:80, line:25:1>
|   |-DeclStmt 0x7f9644058650 <line:13:5, col:31>
|   | |-VarDecl 0x7f9644058330 <col:5, col:9> col:9 used ix 'int'
|   | |-VarDecl 0x7f96440583b0 <col:5, col:13> col:13 used jx 'int'
|   | |-VarDecl 0x7f9644058430 <col:5, col:17> col:17 iy 'int'
|   | |-VarDecl 0x7f96440584b0 <col:5, col:21> col:21 used jy 'int'
|   | |-VarDecl 0x7f9644058530 <col:5, col:25> col:25 used iz 'int'
|   | `-VarDecl 0x7f96440585b0 <col:5, col:29> col:29 used jz 'int'
|   |-BinaryOperator 0x7f96440586c0 <line:14:5, col:10> 'int' '='
|   | |-DeclRefExpr 0x7f9644058668 <col:5> 'int' lvalue Var 0x7f9644058530 'iz' 'int'
|   | `-ImplicitCastExpr 0x7f96440586a8 <col:10> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7f9644058688 <col:10> 'int' lvalue ParmVar 0x7f9644056af0 'startz1' 'int'
|   `-ForStmt 0x7f9644059370 <line:15:5, line:24:5>
|     |-BinaryOperator 0x7f9644058738 <line:15:10, col:14> 'int' '='
|     | |-DeclRefExpr 0x7f96440586e0 <col:10> 'int' lvalue Var 0x7f9644058330 'ix' 'int'
|     | `-ImplicitCastExpr 0x7f9644058720 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7f9644058700 <col:14> 'int' lvalue ParmVar 0x7f9644056670 'startx1' 'int'
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7f96440587c8 <col:23, col:26> 'int' '<'
|     | |-ImplicitCastExpr 0x7f9644058798 <col:23> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7f9644058758 <col:23> 'int' lvalue Var 0x7f9644058330 'ix' 'int'
|     | `-ImplicitCastExpr 0x7f96440587b0 <col:26> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7f9644058778 <col:26> 'int' lvalue ParmVar 0x7f96440566f0 'stopx1' 'int'
|     |-CompoundAssignOperator 0x7f9644058840 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     | |-DeclRefExpr 0x7f96440587e8 <col:34> 'int' lvalue Var 0x7f9644058330 'ix' 'int'
|     | `-ImplicitCastExpr 0x7f9644058828 <col:39> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7f9644058808 <col:39> 'int' lvalue ParmVar 0x7f9644056770 'stepx1' 'int'
|     `-CompoundStmt 0x7f9644059340 <col:48, line:24:5>
|       |-BinaryOperator 0x7f96440588c8 <line:16:9, col:14> 'int' '='
|       | |-DeclRefExpr 0x7f9644058870 <col:9> 'int' lvalue Var 0x7f96440584b0 'jy' 'int'
|       | `-ImplicitCastExpr 0x7f96440588b0 <col:14> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x7f9644058890 <col:14> 'int' lvalue ParmVar 0x7f9644056970 'starty' 'int'
|       |-BinaryOperator 0x7f9644058940 <line:17:9, col:14> 'int' '='
|       | |-DeclRefExpr 0x7f96440588e8 <col:9> 'int' lvalue Var 0x7f96440585b0 'jz' 'int'
|       | `-ImplicitCastExpr 0x7f9644058928 <col:14> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x7f9644058908 <col:14> 'int' lvalue ParmVar 0x7f9644056c70 'startz2' 'int'
|       |-ForStmt 0x7f9644059238 <line:18:9, line:22:9>
|       | |-BinaryOperator 0x7f96440589b8 <line:18:14, col:18> 'int' '='
|       | | |-DeclRefExpr 0x7f9644058960 <col:14> 'int' lvalue Var 0x7f96440583b0 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7f96440589a0 <col:18> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7f9644058980 <col:18> 'int' lvalue ParmVar 0x7f96440567f0 'startx2' 'int'
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x7f9644058a48 <col:27, col:30> 'int' '<'
|       | | |-ImplicitCastExpr 0x7f9644058a18 <col:27> 'int' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7f96440589d8 <col:27> 'int' lvalue Var 0x7f96440583b0 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7f9644058a30 <col:30> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7f96440589f8 <col:30> 'int' lvalue ParmVar 0x7f9644056870 'stopx2' 'int'
|       | |-CompoundAssignOperator 0x7f9644058ac0 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|       | | |-DeclRefExpr 0x7f9644058a68 <col:38> 'int' lvalue Var 0x7f96440583b0 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7f9644058aa8 <col:43> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7f9644058a88 <col:43> 'int' lvalue ParmVar 0x7f96440568f0 'stepx2' 'int'
|       | `-CompoundStmt 0x7f9644059210 <col:52, line:22:9>
|       |   |-BinaryOperator 0x7f9644059050 <line:19:6, col:38> 'double' '='
|       |   | |-ArraySubscriptExpr 0x7f9644058bd0 <col:6, col:14> 'double' lvalue
|       |   | | |-ImplicitCastExpr 0x7f9644058ba0 <col:6, col:10> 'double *' <ArrayToPointerDecay>
|       |   | | | `-ArraySubscriptExpr 0x7f9644058b60 <col:6, col:10> 'double [mz]' lvalue
|       |   | | |   |-ImplicitCastExpr 0x7f9644058b30 <col:6> 'double (*)[mz]':'double (*)[mz]' <LValueToRValue>
|       |   | | |   | `-DeclRefExpr 0x7f9644058af0 <col:6> 'double (*)[mz]':'double (*)[mz]' lvalue ParmVar 0x7f96440565f0 'z' 'double (*)[mz]':'double (*)[mz]'
|       |   | | |   `-ImplicitCastExpr 0x7f9644058b48 <col:8> 'int' <LValueToRValue>
|       |   | | |     `-DeclRefExpr 0x7f9644058b10 <col:8> 'int' lvalue Var 0x7f9644058530 'iz' 'int'
|       |   | | `-ImplicitCastExpr 0x7f9644058bb8 <col:12> 'int' <LValueToRValue>
|       |   | |   `-DeclRefExpr 0x7f9644058b80 <col:12> 'int' lvalue Var 0x7f96440585b0 'jz' 'int'
|       |   | `-CallExpr 0x7f9644058ff0 <col:18, col:38> 'double'
|       |   |   |-ImplicitCastExpr 0x7f9644058fd8 <col:18> 'double (*)(double, double)' <FunctionToPointerDecay>
|       |   |   | `-DeclRefExpr 0x7f9644058e00 <col:18> 'double (double, double)' Function 0x7f9644058c28 'fmax' 'double (double, double)'
|       |   |   |-ImplicitCastExpr 0x7f9644059020 <col:23, col:31> 'double' <LValueToRValue>
|       |   |   | `-ArraySubscriptExpr 0x7f9644058f00 <col:23, col:31> 'double' lvalue
|       |   |   |   |-ImplicitCastExpr 0x7f9644058ed0 <col:23, col:27> 'double *' <ArrayToPointerDecay>
|       |   |   |   | `-ArraySubscriptExpr 0x7f9644058e90 <col:23, col:27> 'double [mx]' lvalue
|       |   |   |   |   |-ImplicitCastExpr 0x7f9644058e60 <col:23> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
|       |   |   |   |   | `-DeclRefExpr 0x7f9644058e20 <col:23> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7f9644056270 'x' 'double (*)[mx]':'double (*)[mx]'
|       |   |   |   |   `-ImplicitCastExpr 0x7f9644058e78 <col:25> 'int' <LValueToRValue>
|       |   |   |   |     `-DeclRefExpr 0x7f9644058e40 <col:25> 'int' lvalue Var 0x7f9644058330 'ix' 'int'
|       |   |   |   `-ImplicitCastExpr 0x7f9644058ee8 <col:29> 'int' <LValueToRValue>
|       |   |   |     `-DeclRefExpr 0x7f9644058eb0 <col:29> 'int' lvalue Var 0x7f96440583b0 'jx' 'int'
|       |   |   `-ImplicitCastExpr 0x7f9644059038 <col:33, col:37> 'double' <LValueToRValue>
|       |   |     `-ArraySubscriptExpr 0x7f9644058f90 <col:33, col:37> 'double' lvalue
|       |   |       |-ImplicitCastExpr 0x7f9644058f60 <col:33> 'double *':'double *' <LValueToRValue>
|       |   |       | `-DeclRefExpr 0x7f9644058f20 <col:33> 'double *':'double *' lvalue ParmVar 0x7f96440563f0 'y' 'double *':'double *'
|       |   |       `-ImplicitCastExpr 0x7f9644058f78 <col:35> 'int' <LValueToRValue>
|       |   |         `-DeclRefExpr 0x7f9644058f40 <col:35> 'int' lvalue Var 0x7f96440584b0 'jy' 'int'
|       |   |-BinaryOperator 0x7f9644059120 <line:20:6, col:16> 'int' '='
|       |   | |-DeclRefExpr 0x7f9644059070 <col:6> 'int' lvalue Var 0x7f96440584b0 'jy' 'int'
|       |   | `-BinaryOperator 0x7f9644059100 <col:11, col:16> 'int' '+'
|       |   |   |-ImplicitCastExpr 0x7f96440590d0 <col:11> 'int' <LValueToRValue>
|       |   |   | `-DeclRefExpr 0x7f9644059090 <col:11> 'int' lvalue Var 0x7f96440584b0 'jy' 'int'
|       |   |   `-ImplicitCastExpr 0x7f96440590e8 <col:16> 'int' <LValueToRValue>
|       |   |     `-DeclRefExpr 0x7f96440590b0 <col:16> 'int' lvalue ParmVar 0x7f9644056a70 'stepy' 'int'
|       |   `-BinaryOperator 0x7f96440591f0 <line:21:6, col:16> 'int' '='
|       |     |-DeclRefExpr 0x7f9644059140 <col:6> 'int' lvalue Var 0x7f96440585b0 'jz' 'int'
|       |     `-BinaryOperator 0x7f96440591d0 <col:11, col:16> 'int' '+'
|       |       |-ImplicitCastExpr 0x7f96440591a0 <col:11> 'int' <LValueToRValue>
|       |       | `-DeclRefExpr 0x7f9644059160 <col:11> 'int' lvalue Var 0x7f96440585b0 'jz' 'int'
|       |       `-ImplicitCastExpr 0x7f96440591b8 <col:16> 'int' <LValueToRValue>
|       |         `-DeclRefExpr 0x7f9644059180 <col:16> 'int' lvalue ParmVar 0x7f9644056d70 'stepz2' 'int'
|       `-BinaryOperator 0x7f9644059320 <line:23:9, col:19> 'int' '='
|         |-DeclRefExpr 0x7f9644059270 <col:9> 'int' lvalue Var 0x7f9644058530 'iz' 'int'
|         `-BinaryOperator 0x7f9644059300 <col:14, col:19> 'int' '+'
|           |-ImplicitCastExpr 0x7f96440592d0 <col:14> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x7f9644059290 <col:14> 'int' lvalue Var 0x7f9644058530 'iz' 'int'
|           `-ImplicitCastExpr 0x7f96440592e8 <col:19> 'int' <LValueToRValue>
|             `-DeclRefExpr 0x7f96440592b0 <col:19> 'int' lvalue ParmVar 0x7f9644056bf0 'stepz1' 'int'
`-FunctionDecl 0x7f9644058c28 <line:19:18> col:18 implicit used fmax 'double (double, double)' extern
  |-ParmVarDecl 0x7f9644058cc8 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x7f9644058d30 <<invalid sloc>> <invalid sloc> 'double'
  |-NoThrowAttr 0x7f9644058da8 <col:18> Implicit
  `-ConstAttr 0x7f9644058de8 <col:18> Implicit
