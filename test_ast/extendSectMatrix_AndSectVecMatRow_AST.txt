TranslationUnitDecl 0x7fa7e3838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fa7e38394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fa7e38391a0 '__int128'
|-TypedefDecl 0x7fa7e3839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fa7e38391c0 'unsigned __int128'
|-TypedefDecl 0x7fa7e38397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fa7e38395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fa7e3839568 '__NSConstantString_tag'
|-TypedefDecl 0x7fa7e3839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fa7e3839850 'char *'
|   `-BuiltinType 0x7fa7e3838ca0 'char'
|-TypedefDecl 0x7fa7e3839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fa7e3839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fa7e3839970 'struct __va_list_tag'
|     `-Record 0x7fa7e38398e8 '__va_list_tag'
|-TypedefDecl 0x7fa7e402f200 <./tree_src/extendSectMatrix_AndSectVecMatRow.c:3:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x7fa7e3838d60 'unsigned char'
`-FunctionDecl 0x7fa7e4031768 <line:6:1, line:25:1> line:6:6 AndSectVecMatRow 'void (int, int, int, int, int, BOOL *, BOOL (*)[my], BOOL (*)[mz], int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)'
  |-ParmVarDecl 0x7fa7e402f270 <line:7:5, col:9> col:9 used nx 'int'
  |-ParmVarDecl 0x7fa7e402f2f0 <col:13, col:17> col:17 used ny 'int'
  |-ParmVarDecl 0x7fa7e402f370 <col:21, col:25> col:25 used my 'int'
  |-ParmVarDecl 0x7fa7e402f3f0 <col:29, col:33> col:33 used nz 'int'
  |-ParmVarDecl 0x7fa7e402f470 <col:37, col:41> col:41 used mz 'int'
  |-ParmVarDecl 0x7fa7e402f680 <line:8:5, col:14> col:10 used x 'BOOL *':'BOOL *'
  |-ParmVarDecl 0x7fa7e402f930 <col:17, col:30> col:22 used y 'BOOL (*)[my]':'BOOL (*)[my]'
  |-ParmVarDecl 0x7fa7e402fbe0 <col:33, col:46> col:38 used z 'BOOL (*)[mz]':'BOOL (*)[mz]'
  |-ParmVarDecl 0x7fa7e402fc60 <line:9:5, col:9> col:9 used startx 'int'
  |-ParmVarDecl 0x7fa7e402fce0 <col:17, col:21> col:21 stopx 'int'
  |-ParmVarDecl 0x7fa7e402fd60 <col:28, col:32> col:32 used stepx 'int'
  |-ParmVarDecl 0x7fa7e402fde0 <line:10:5, col:9> col:9 used starty1 'int'
  |-ParmVarDecl 0x7fa7e402fe60 <col:18, col:22> col:22 used stopy1 'int'
  |-ParmVarDecl 0x7fa7e402fee0 <col:30, col:34> col:34 used stepy1 'int'
  |-ParmVarDecl 0x7fa7e402ff60 <col:42, col:46> col:46 used starty2 'int'
  |-ParmVarDecl 0x7fa7e402ffe0 <col:55, col:59> col:59 used stopy2 'int'
  |-ParmVarDecl 0x7fa7e4030060 <col:67, col:71> col:71 used stepy2 'int'
  |-ParmVarDecl 0x7fa7e40300e0 <line:11:5, col:9> col:9 used startz1 'int'
  |-ParmVarDecl 0x7fa7e4030160 <col:18, col:22> col:22 stopz1 'int'
  |-ParmVarDecl 0x7fa7e4031200 <col:30, col:34> col:34 used stepz1 'int'
  |-ParmVarDecl 0x7fa7e4031280 <col:42, col:46> col:46 used startz2 'int'
  |-ParmVarDecl 0x7fa7e4031300 <col:55, col:59> col:59 stopz2 'int'
  |-ParmVarDecl 0x7fa7e4031380 <col:67, col:71> col:71 used stepz2 'int'
  `-CompoundStmt 0x7fa7e382d160 <col:80, line:25:1>
    |-DeclStmt 0x7fa7e4031c40 <line:13:5, col:31>
    | |-VarDecl 0x7fa7e4031920 <col:5, col:9> col:9 ix 'int'
    | |-VarDecl 0x7fa7e40319a0 <col:5, col:13> col:13 used jx 'int'
    | |-VarDecl 0x7fa7e4031a20 <col:5, col:17> col:17 used iy 'int'
    | |-VarDecl 0x7fa7e4031aa0 <col:5, col:21> col:21 used jy 'int'
    | |-VarDecl 0x7fa7e4031b20 <col:5, col:25> col:25 used iz 'int'
    | `-VarDecl 0x7fa7e4031ba0 <col:5, col:29> col:29 used jz 'int'
    |-BinaryOperator 0x7fa7e4031cb0 <line:14:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7fa7e4031c58 <col:5> 'int' lvalue Var 0x7fa7e4031b20 'iz' 'int'
    | `-ImplicitCastExpr 0x7fa7e4031c98 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7fa7e4031c78 <col:10> 'int' lvalue ParmVar 0x7fa7e40300e0 'startz1' 'int'
    `-ForStmt 0x7fa7e382d128 <line:15:5, line:24:5>
      |-BinaryOperator 0x7fa7e4031d28 <line:15:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7fa7e4031cd0 <col:10> 'int' lvalue Var 0x7fa7e4031a20 'iy' 'int'
      | `-ImplicitCastExpr 0x7fa7e4031d10 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fa7e4031cf0 <col:14> 'int' lvalue ParmVar 0x7fa7e402fde0 'starty1' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7fa7e4031db8 <col:23, col:26> 'int' '<'
      | |-ImplicitCastExpr 0x7fa7e4031d88 <col:23> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fa7e4031d48 <col:23> 'int' lvalue Var 0x7fa7e4031a20 'iy' 'int'
      | `-ImplicitCastExpr 0x7fa7e4031da0 <col:26> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fa7e4031d68 <col:26> 'int' lvalue ParmVar 0x7fa7e402fe60 'stopy1' 'int'
      |-CompoundAssignOperator 0x7fa7e4031e30 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7fa7e4031dd8 <col:34> 'int' lvalue Var 0x7fa7e4031a20 'iy' 'int'
      | `-ImplicitCastExpr 0x7fa7e4031e18 <col:39> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fa7e4031df8 <col:39> 'int' lvalue ParmVar 0x7fa7e402fee0 'stepy1' 'int'
      `-CompoundStmt 0x7fa7e382d0f8 <col:48, line:24:5>
        |-BinaryOperator 0x7fa7e4031eb8 <line:16:9, col:14> 'int' '='
        | |-DeclRefExpr 0x7fa7e4031e60 <col:9> 'int' lvalue Var 0x7fa7e40319a0 'jx' 'int'
        | `-ImplicitCastExpr 0x7fa7e4031ea0 <col:14> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x7fa7e4031e80 <col:14> 'int' lvalue ParmVar 0x7fa7e402fc60 'startx' 'int'
        |-BinaryOperator 0x7fa7e4031f30 <line:17:9, col:14> 'int' '='
        | |-DeclRefExpr 0x7fa7e4031ed8 <col:9> 'int' lvalue Var 0x7fa7e4031ba0 'jz' 'int'
        | `-ImplicitCastExpr 0x7fa7e4031f18 <col:14> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x7fa7e4031ef8 <col:14> 'int' lvalue ParmVar 0x7fa7e4031280 'startz2' 'int'
        |-ForStmt 0x7fa7e382cff0 <line:18:9, line:22:9>
        | |-BinaryOperator 0x7fa7e4031fa8 <line:18:14, col:18> 'int' '='
        | | |-DeclRefExpr 0x7fa7e4031f50 <col:14> 'int' lvalue Var 0x7fa7e4031aa0 'jy' 'int'
        | | `-ImplicitCastExpr 0x7fa7e4031f90 <col:18> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fa7e4031f70 <col:18> 'int' lvalue ParmVar 0x7fa7e402ff60 'starty2' 'int'
        | |-<<<NULL>>>
        | |-BinaryOperator 0x7fa7e4032038 <col:27, col:30> 'int' '<'
        | | |-ImplicitCastExpr 0x7fa7e4032008 <col:27> 'int' <LValueToRValue>
        | | | `-DeclRefExpr 0x7fa7e4031fc8 <col:27> 'int' lvalue Var 0x7fa7e4031aa0 'jy' 'int'
        | | `-ImplicitCastExpr 0x7fa7e4032020 <col:30> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fa7e4031fe8 <col:30> 'int' lvalue ParmVar 0x7fa7e402ffe0 'stopy2' 'int'
        | |-CompoundAssignOperator 0x7fa7e40320b0 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
        | | |-DeclRefExpr 0x7fa7e4032058 <col:38> 'int' lvalue Var 0x7fa7e4031aa0 'jy' 'int'
        | | `-ImplicitCastExpr 0x7fa7e4032098 <col:43> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fa7e4032078 <col:43> 'int' lvalue ParmVar 0x7fa7e4030060 'stepy2' 'int'
        | `-CompoundStmt 0x7fa7e382cfc8 <col:52, line:22:9>
        |   |-BinaryOperator 0x7fa7e382ce08 <line:19:6, col:34> 'BOOL':'unsigned char' '='
        |   | |-ArraySubscriptExpr 0x7fa7e40321c0 <col:6, col:14> 'BOOL':'unsigned char' lvalue
        |   | | |-ImplicitCastExpr 0x7fa7e4032190 <col:6, col:10> 'BOOL *' <ArrayToPointerDecay>
        |   | | | `-ArraySubscriptExpr 0x7fa7e4032150 <col:6, col:10> 'BOOL [mz]' lvalue
        |   | | |   |-ImplicitCastExpr 0x7fa7e4032120 <col:6> 'BOOL (*)[mz]':'BOOL (*)[mz]' <LValueToRValue>
        |   | | |   | `-DeclRefExpr 0x7fa7e40320e0 <col:6> 'BOOL (*)[mz]':'BOOL (*)[mz]' lvalue ParmVar 0x7fa7e402fbe0 'z' 'BOOL (*)[mz]':'BOOL (*)[mz]'
        |   | | |   `-ImplicitCastExpr 0x7fa7e4032138 <col:8> 'int' <LValueToRValue>
        |   | | |     `-DeclRefExpr 0x7fa7e4032100 <col:8> 'int' lvalue Var 0x7fa7e4031b20 'iz' 'int'
        |   | | `-ImplicitCastExpr 0x7fa7e40321a8 <col:12> 'int' <LValueToRValue>
        |   | |   `-DeclRefExpr 0x7fa7e4032170 <col:12> 'int' lvalue Var 0x7fa7e4031ba0 'jz' 'int'
        |   | `-ImplicitCastExpr 0x7fa7e382cdf0 <col:18, col:34> 'BOOL':'unsigned char' <IntegralCast>
        |   |   `-BinaryOperator 0x7fa7e382cdd0 <col:18, col:34> 'int' '&'
        |   |     |-ImplicitCastExpr 0x7fa7e382cd88 <col:18, col:22> 'int' <IntegralCast>
        |   |     | `-ImplicitCastExpr 0x7fa7e382cd70 <col:18, col:22> 'BOOL':'unsigned char' <LValueToRValue>
        |   |     |   `-ArraySubscriptExpr 0x7fa7e382cc50 <col:18, col:22> 'BOOL':'unsigned char' lvalue
        |   |     |     |-ImplicitCastExpr 0x7fa7e382cc20 <col:18> 'BOOL *':'BOOL *' <LValueToRValue>
        |   |     |     | `-DeclRefExpr 0x7fa7e40321e0 <col:18> 'BOOL *':'BOOL *' lvalue ParmVar 0x7fa7e402f680 'x' 'BOOL *':'BOOL *'
        |   |     |     `-ImplicitCastExpr 0x7fa7e382cc38 <col:20> 'int' <LValueToRValue>
        |   |     |       `-DeclRefExpr 0x7fa7e382cc00 <col:20> 'int' lvalue Var 0x7fa7e40319a0 'jx' 'int'
        |   |     `-ImplicitCastExpr 0x7fa7e382cdb8 <col:26, col:34> 'int' <IntegralCast>
        |   |       `-ImplicitCastExpr 0x7fa7e382cda0 <col:26, col:34> 'BOOL':'unsigned char' <LValueToRValue>
        |   |         `-ArraySubscriptExpr 0x7fa7e382cd50 <col:26, col:34> 'BOOL':'unsigned char' lvalue
        |   |           |-ImplicitCastExpr 0x7fa7e382cd20 <col:26, col:30> 'BOOL *' <ArrayToPointerDecay>
        |   |           | `-ArraySubscriptExpr 0x7fa7e382cce0 <col:26, col:30> 'BOOL [my]' lvalue
        |   |           |   |-ImplicitCastExpr 0x7fa7e382ccb0 <col:26> 'BOOL (*)[my]':'BOOL (*)[my]' <LValueToRValue>
        |   |           |   | `-DeclRefExpr 0x7fa7e382cc70 <col:26> 'BOOL (*)[my]':'BOOL (*)[my]' lvalue ParmVar 0x7fa7e402f930 'y' 'BOOL (*)[my]':'BOOL (*)[my]'
        |   |           |   `-ImplicitCastExpr 0x7fa7e382ccc8 <col:28> 'int' <LValueToRValue>
        |   |           |     `-DeclRefExpr 0x7fa7e382cc90 <col:28> 'int' lvalue Var 0x7fa7e4031a20 'iy' 'int'
        |   |           `-ImplicitCastExpr 0x7fa7e382cd38 <col:32> 'int' <LValueToRValue>
        |   |             `-DeclRefExpr 0x7fa7e382cd00 <col:32> 'int' lvalue Var 0x7fa7e4031aa0 'jy' 'int'
        |   |-BinaryOperator 0x7fa7e382ced8 <line:20:6, col:16> 'int' '='
        |   | |-DeclRefExpr 0x7fa7e382ce28 <col:6> 'int' lvalue Var 0x7fa7e40319a0 'jx' 'int'
        |   | `-BinaryOperator 0x7fa7e382ceb8 <col:11, col:16> 'int' '+'
        |   |   |-ImplicitCastExpr 0x7fa7e382ce88 <col:11> 'int' <LValueToRValue>
        |   |   | `-DeclRefExpr 0x7fa7e382ce48 <col:11> 'int' lvalue Var 0x7fa7e40319a0 'jx' 'int'
        |   |   `-ImplicitCastExpr 0x7fa7e382cea0 <col:16> 'int' <LValueToRValue>
        |   |     `-DeclRefExpr 0x7fa7e382ce68 <col:16> 'int' lvalue ParmVar 0x7fa7e402fd60 'stepx' 'int'
        |   `-BinaryOperator 0x7fa7e382cfa8 <line:21:6, col:16> 'int' '='
        |     |-DeclRefExpr 0x7fa7e382cef8 <col:6> 'int' lvalue Var 0x7fa7e4031ba0 'jz' 'int'
        |     `-BinaryOperator 0x7fa7e382cf88 <col:11, col:16> 'int' '+'
        |       |-ImplicitCastExpr 0x7fa7e382cf58 <col:11> 'int' <LValueToRValue>
        |       | `-DeclRefExpr 0x7fa7e382cf18 <col:11> 'int' lvalue Var 0x7fa7e4031ba0 'jz' 'int'
        |       `-ImplicitCastExpr 0x7fa7e382cf70 <col:16> 'int' <LValueToRValue>
        |         `-DeclRefExpr 0x7fa7e382cf38 <col:16> 'int' lvalue ParmVar 0x7fa7e4031380 'stepz2' 'int'
        `-BinaryOperator 0x7fa7e382d0d8 <line:23:9, col:19> 'int' '='
          |-DeclRefExpr 0x7fa7e382d028 <col:9> 'int' lvalue Var 0x7fa7e4031b20 'iz' 'int'
          `-BinaryOperator 0x7fa7e382d0b8 <col:14, col:19> 'int' '+'
            |-ImplicitCastExpr 0x7fa7e382d088 <col:14> 'int' <LValueToRValue>
            | `-DeclRefExpr 0x7fa7e382d048 <col:14> 'int' lvalue Var 0x7fa7e4031b20 'iz' 'int'
            `-ImplicitCastExpr 0x7fa7e382d0a0 <col:19> 'int' <LValueToRValue>
              `-DeclRefExpr 0x7fa7e382d068 <col:19> 'int' lvalue ParmVar 0x7fa7e4031200 'stepz1' 'int'
