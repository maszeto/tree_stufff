TranslationUnitDecl 0x7f9ec481f008 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f9ec481f8a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f9ec481f5a0 '__int128'
|-TypedefDecl 0x7f9ec481f910 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f9ec481f5c0 'unsigned __int128'
|-TypedefDecl 0x7f9ec481fbf8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f9ec481f9f0 'struct __NSConstantString_tag'
|   `-Record 0x7f9ec481f968 '__NSConstantString_tag'
|-TypedefDecl 0x7f9ec481fc90 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f9ec481fc50 'char *'
|   `-BuiltinType 0x7f9ec481f0a0 'char'
|-TypedefDecl 0x7f9ec481ff68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f9ec481ff10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f9ec481fd70 'struct __va_list_tag'
|     `-Record 0x7f9ec481fce8 '__va_list_tag'
|-TypedefDecl 0x7f9ec4877a00 <./tree_src/extendSectMatrix_LoSectVecMatRow.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7f9ec481f160 'unsigned char'
|-FunctionDecl 0x7f9ec4879d78 <line:6:1, line:25:1> line:6:6 LoSectVecMatRow 'void (int, int, int, int, int, double *, double (*)[my], double (*)[mz], int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)'
| |-ParmVarDecl 0x7f9ec4877a70 <line:7:5, col:9> col:9 used nx 'int'
| |-ParmVarDecl 0x7f9ec4877af0 <col:13, col:17> col:17 used ny 'int'
| |-ParmVarDecl 0x7f9ec4877b70 <col:21, col:25> col:25 used my 'int'
| |-ParmVarDecl 0x7f9ec4877bf0 <col:29, col:33> col:33 used nz 'int'
| |-ParmVarDecl 0x7f9ec4877c70 <col:37, col:41> col:41 used mz 'int'
| |-ParmVarDecl 0x7f9ec4877df0 <line:8:5, col:16> col:12 used x 'double *':'double *'
| |-ParmVarDecl 0x7f9ec4877ff0 <col:19, col:34> col:26 used y 'double (*)[my]':'double (*)[my]'
| |-ParmVarDecl 0x7f9ec48781f0 <col:37, col:52> col:44 used z 'double (*)[mz]':'double (*)[mz]'
| |-ParmVarDecl 0x7f9ec4878270 <line:9:5, col:9> col:9 used startx 'int'
| |-ParmVarDecl 0x7f9ec48782f0 <col:17, col:21> col:21 stopx 'int'
| |-ParmVarDecl 0x7f9ec4878370 <col:28, col:32> col:32 used stepx 'int'
| |-ParmVarDecl 0x7f9ec48783f0 <line:10:5, col:9> col:9 used starty1 'int'
| |-ParmVarDecl 0x7f9ec4878470 <col:18, col:22> col:22 used stopy1 'int'
| |-ParmVarDecl 0x7f9ec48784f0 <col:30, col:34> col:34 used stepy1 'int'
| |-ParmVarDecl 0x7f9ec4878570 <col:42, col:46> col:46 used starty2 'int'
| |-ParmVarDecl 0x7f9ec48785f0 <col:55, col:59> col:59 used stopy2 'int'
| |-ParmVarDecl 0x7f9ec4878670 <col:67, col:71> col:71 used stepy2 'int'
| |-ParmVarDecl 0x7f9ec48786f0 <line:11:5, col:9> col:9 used startz1 'int'
| |-ParmVarDecl 0x7f9ec4878770 <col:18, col:22> col:22 stopz1 'int'
| |-ParmVarDecl 0x7f9ec48787f0 <col:30, col:34> col:34 used stepz1 'int'
| |-ParmVarDecl 0x7f9ec4878870 <col:42, col:46> col:46 used startz2 'int'
| |-ParmVarDecl 0x7f9ec48788f0 <col:55, col:59> col:59 stopz2 'int'
| |-ParmVarDecl 0x7f9ec4878970 <col:67, col:71> col:71 used stepz2 'int'
| `-CompoundStmt 0x7f9ec487afa8 <col:80, line:25:1>
|   |-DeclStmt 0x7f9ec487a250 <line:13:5, col:31>
|   | |-VarDecl 0x7f9ec4879f30 <col:5, col:9> col:9 ix 'int'
|   | |-VarDecl 0x7f9ec4879fb0 <col:5, col:13> col:13 used jx 'int'
|   | |-VarDecl 0x7f9ec487a030 <col:5, col:17> col:17 used iy 'int'
|   | |-VarDecl 0x7f9ec487a0b0 <col:5, col:21> col:21 used jy 'int'
|   | |-VarDecl 0x7f9ec487a130 <col:5, col:25> col:25 used iz 'int'
|   | `-VarDecl 0x7f9ec487a1b0 <col:5, col:29> col:29 used jz 'int'
|   |-BinaryOperator 0x7f9ec487a2c0 <line:14:5, col:10> 'int' '='
|   | |-DeclRefExpr 0x7f9ec487a268 <col:5> 'int' lvalue Var 0x7f9ec487a130 'iz' 'int'
|   | `-ImplicitCastExpr 0x7f9ec487a2a8 <col:10> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7f9ec487a288 <col:10> 'int' lvalue ParmVar 0x7f9ec48786f0 'startz1' 'int'
|   `-ForStmt 0x7f9ec487af70 <line:15:5, line:24:5>
|     |-BinaryOperator 0x7f9ec487a338 <line:15:10, col:14> 'int' '='
|     | |-DeclRefExpr 0x7f9ec487a2e0 <col:10> 'int' lvalue Var 0x7f9ec487a030 'iy' 'int'
|     | `-ImplicitCastExpr 0x7f9ec487a320 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7f9ec487a300 <col:14> 'int' lvalue ParmVar 0x7f9ec48783f0 'starty1' 'int'
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7f9ec487a3c8 <col:23, col:26> 'int' '<'
|     | |-ImplicitCastExpr 0x7f9ec487a398 <col:23> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7f9ec487a358 <col:23> 'int' lvalue Var 0x7f9ec487a030 'iy' 'int'
|     | `-ImplicitCastExpr 0x7f9ec487a3b0 <col:26> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7f9ec487a378 <col:26> 'int' lvalue ParmVar 0x7f9ec4878470 'stopy1' 'int'
|     |-CompoundAssignOperator 0x7f9ec487a440 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     | |-DeclRefExpr 0x7f9ec487a3e8 <col:34> 'int' lvalue Var 0x7f9ec487a030 'iy' 'int'
|     | `-ImplicitCastExpr 0x7f9ec487a428 <col:39> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7f9ec487a408 <col:39> 'int' lvalue ParmVar 0x7f9ec48784f0 'stepy1' 'int'
|     `-CompoundStmt 0x7f9ec487af40 <col:48, line:24:5>
|       |-BinaryOperator 0x7f9ec487a4c8 <line:16:9, col:14> 'int' '='
|       | |-DeclRefExpr 0x7f9ec487a470 <col:9> 'int' lvalue Var 0x7f9ec4879fb0 'jx' 'int'
|       | `-ImplicitCastExpr 0x7f9ec487a4b0 <col:14> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x7f9ec487a490 <col:14> 'int' lvalue ParmVar 0x7f9ec4878270 'startx' 'int'
|       |-BinaryOperator 0x7f9ec487a540 <line:17:9, col:14> 'int' '='
|       | |-DeclRefExpr 0x7f9ec487a4e8 <col:9> 'int' lvalue Var 0x7f9ec487a1b0 'jz' 'int'
|       | `-ImplicitCastExpr 0x7f9ec487a528 <col:14> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x7f9ec487a508 <col:14> 'int' lvalue ParmVar 0x7f9ec4878870 'startz2' 'int'
|       |-ForStmt 0x7f9ec487ae38 <line:18:9, line:22:9>
|       | |-BinaryOperator 0x7f9ec487a5b8 <line:18:14, col:18> 'int' '='
|       | | |-DeclRefExpr 0x7f9ec487a560 <col:14> 'int' lvalue Var 0x7f9ec487a0b0 'jy' 'int'
|       | | `-ImplicitCastExpr 0x7f9ec487a5a0 <col:18> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7f9ec487a580 <col:18> 'int' lvalue ParmVar 0x7f9ec4878570 'starty2' 'int'
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x7f9ec487a648 <col:27, col:30> 'int' '<'
|       | | |-ImplicitCastExpr 0x7f9ec487a618 <col:27> 'int' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7f9ec487a5d8 <col:27> 'int' lvalue Var 0x7f9ec487a0b0 'jy' 'int'
|       | | `-ImplicitCastExpr 0x7f9ec487a630 <col:30> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7f9ec487a5f8 <col:30> 'int' lvalue ParmVar 0x7f9ec48785f0 'stopy2' 'int'
|       | |-CompoundAssignOperator 0x7f9ec487a6c0 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|       | | |-DeclRefExpr 0x7f9ec487a668 <col:38> 'int' lvalue Var 0x7f9ec487a0b0 'jy' 'int'
|       | | `-ImplicitCastExpr 0x7f9ec487a6a8 <col:43> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7f9ec487a688 <col:43> 'int' lvalue ParmVar 0x7f9ec4878670 'stepy2' 'int'
|       | `-CompoundStmt 0x7f9ec487ae10 <col:52, line:22:9>
|       |   |-BinaryOperator 0x7f9ec487ac50 <line:19:6, col:38> 'double' '='
|       |   | |-ArraySubscriptExpr 0x7f9ec487a7d0 <col:6, col:14> 'double' lvalue
|       |   | | |-ImplicitCastExpr 0x7f9ec487a7a0 <col:6, col:10> 'double *' <ArrayToPointerDecay>
|       |   | | | `-ArraySubscriptExpr 0x7f9ec487a760 <col:6, col:10> 'double [mz]' lvalue
|       |   | | |   |-ImplicitCastExpr 0x7f9ec487a730 <col:6> 'double (*)[mz]':'double (*)[mz]' <LValueToRValue>
|       |   | | |   | `-DeclRefExpr 0x7f9ec487a6f0 <col:6> 'double (*)[mz]':'double (*)[mz]' lvalue ParmVar 0x7f9ec48781f0 'z' 'double (*)[mz]':'double (*)[mz]'
|       |   | | |   `-ImplicitCastExpr 0x7f9ec487a748 <col:8> 'int' <LValueToRValue>
|       |   | | |     `-DeclRefExpr 0x7f9ec487a710 <col:8> 'int' lvalue Var 0x7f9ec487a130 'iz' 'int'
|       |   | | `-ImplicitCastExpr 0x7f9ec487a7b8 <col:12> 'int' <LValueToRValue>
|       |   | |   `-DeclRefExpr 0x7f9ec487a780 <col:12> 'int' lvalue Var 0x7f9ec487a1b0 'jz' 'int'
|       |   | `-CallExpr 0x7f9ec487abf0 <col:18, col:38> 'double'
|       |   |   |-ImplicitCastExpr 0x7f9ec487abd8 <col:18> 'double (*)(double, double)' <FunctionToPointerDecay>
|       |   |   | `-DeclRefExpr 0x7f9ec487aa00 <col:18> 'double (double, double)' Function 0x7f9ec487a828 'fmin' 'double (double, double)'
|       |   |   |-ImplicitCastExpr 0x7f9ec487ac20 <col:23, col:27> 'double' <LValueToRValue>
|       |   |   | `-ArraySubscriptExpr 0x7f9ec487aa90 <col:23, col:27> 'double' lvalue
|       |   |   |   |-ImplicitCastExpr 0x7f9ec487aa60 <col:23> 'double *':'double *' <LValueToRValue>
|       |   |   |   | `-DeclRefExpr 0x7f9ec487aa20 <col:23> 'double *':'double *' lvalue ParmVar 0x7f9ec4877df0 'x' 'double *':'double *'
|       |   |   |   `-ImplicitCastExpr 0x7f9ec487aa78 <col:25> 'int' <LValueToRValue>
|       |   |   |     `-DeclRefExpr 0x7f9ec487aa40 <col:25> 'int' lvalue Var 0x7f9ec4879fb0 'jx' 'int'
|       |   |   `-ImplicitCastExpr 0x7f9ec487ac38 <col:29, col:37> 'double' <LValueToRValue>
|       |   |     `-ArraySubscriptExpr 0x7f9ec487ab90 <col:29, col:37> 'double' lvalue
|       |   |       |-ImplicitCastExpr 0x7f9ec487ab60 <col:29, col:33> 'double *' <ArrayToPointerDecay>
|       |   |       | `-ArraySubscriptExpr 0x7f9ec487ab20 <col:29, col:33> 'double [my]' lvalue
|       |   |       |   |-ImplicitCastExpr 0x7f9ec487aaf0 <col:29> 'double (*)[my]':'double (*)[my]' <LValueToRValue>
|       |   |       |   | `-DeclRefExpr 0x7f9ec487aab0 <col:29> 'double (*)[my]':'double (*)[my]' lvalue ParmVar 0x7f9ec4877ff0 'y' 'double (*)[my]':'double (*)[my]'
|       |   |       |   `-ImplicitCastExpr 0x7f9ec487ab08 <col:31> 'int' <LValueToRValue>
|       |   |       |     `-DeclRefExpr 0x7f9ec487aad0 <col:31> 'int' lvalue Var 0x7f9ec487a030 'iy' 'int'
|       |   |       `-ImplicitCastExpr 0x7f9ec487ab78 <col:35> 'int' <LValueToRValue>
|       |   |         `-DeclRefExpr 0x7f9ec487ab40 <col:35> 'int' lvalue Var 0x7f9ec487a0b0 'jy' 'int'
|       |   |-BinaryOperator 0x7f9ec487ad20 <line:20:6, col:16> 'int' '='
|       |   | |-DeclRefExpr 0x7f9ec487ac70 <col:6> 'int' lvalue Var 0x7f9ec4879fb0 'jx' 'int'
|       |   | `-BinaryOperator 0x7f9ec487ad00 <col:11, col:16> 'int' '+'
|       |   |   |-ImplicitCastExpr 0x7f9ec487acd0 <col:11> 'int' <LValueToRValue>
|       |   |   | `-DeclRefExpr 0x7f9ec487ac90 <col:11> 'int' lvalue Var 0x7f9ec4879fb0 'jx' 'int'
|       |   |   `-ImplicitCastExpr 0x7f9ec487ace8 <col:16> 'int' <LValueToRValue>
|       |   |     `-DeclRefExpr 0x7f9ec487acb0 <col:16> 'int' lvalue ParmVar 0x7f9ec4878370 'stepx' 'int'
|       |   `-BinaryOperator 0x7f9ec487adf0 <line:21:6, col:16> 'int' '='
|       |     |-DeclRefExpr 0x7f9ec487ad40 <col:6> 'int' lvalue Var 0x7f9ec487a1b0 'jz' 'int'
|       |     `-BinaryOperator 0x7f9ec487add0 <col:11, col:16> 'int' '+'
|       |       |-ImplicitCastExpr 0x7f9ec487ada0 <col:11> 'int' <LValueToRValue>
|       |       | `-DeclRefExpr 0x7f9ec487ad60 <col:11> 'int' lvalue Var 0x7f9ec487a1b0 'jz' 'int'
|       |       `-ImplicitCastExpr 0x7f9ec487adb8 <col:16> 'int' <LValueToRValue>
|       |         `-DeclRefExpr 0x7f9ec487ad80 <col:16> 'int' lvalue ParmVar 0x7f9ec4878970 'stepz2' 'int'
|       `-BinaryOperator 0x7f9ec487af20 <line:23:9, col:19> 'int' '='
|         |-DeclRefExpr 0x7f9ec487ae70 <col:9> 'int' lvalue Var 0x7f9ec487a130 'iz' 'int'
|         `-BinaryOperator 0x7f9ec487af00 <col:14, col:19> 'int' '+'
|           |-ImplicitCastExpr 0x7f9ec487aed0 <col:14> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x7f9ec487ae90 <col:14> 'int' lvalue Var 0x7f9ec487a130 'iz' 'int'
|           `-ImplicitCastExpr 0x7f9ec487aee8 <col:19> 'int' <LValueToRValue>
|             `-DeclRefExpr 0x7f9ec487aeb0 <col:19> 'int' lvalue ParmVar 0x7f9ec48787f0 'stepz1' 'int'
`-FunctionDecl 0x7f9ec487a828 <line:19:18> col:18 implicit used fmin 'double (double, double)' extern
  |-ParmVarDecl 0x7f9ec487a8c8 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x7f9ec487a930 <<invalid sloc>> <invalid sloc> 'double'
  |-NoThrowAttr 0x7f9ec487a9a8 <col:18> Implicit
  `-ConstAttr 0x7f9ec487a9e8 <col:18> Implicit
