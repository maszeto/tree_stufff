TranslationUnitDecl 0x7fd453838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fd4538394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fd4538391a0 '__int128'
|-TypedefDecl 0x7fd453839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fd4538391c0 'unsigned __int128'
|-TypedefDecl 0x7fd4538397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fd4538395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fd453839568 '__NSConstantString_tag'
|-TypedefDecl 0x7fd453839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fd453839850 'char *'
|   `-BuiltinType 0x7fd453838ca0 'char'
|-TypedefDecl 0x7fd453839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fd453839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fd453839970 'struct __va_list_tag'
|     `-Record 0x7fd4538398e8 '__va_list_tag'
|-TypedefDecl 0x7fd45402f200 <./tree_src/extendSectMatrix_ModSectMatSca.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fd453838d60 'unsigned char'
|-FunctionDecl 0x7fd454031200 <line:6:1, line:22:1> line:6:6 ModSectMatSca 'void (int, int, int, int, double (*)[mx], double, double (*)[mz], int, int, int, int, int, int, int, int, int, int, int, int)'
| |-ParmVarDecl 0x7fd45402f270 <line:7:5, col:9> col:9 used nx 'int'
| |-ParmVarDecl 0x7fd45402f2f0 <col:13, col:17> col:17 used mx 'int'
| |-ParmVarDecl 0x7fd45402f370 <col:21, col:25> col:25 used nz 'int'
| |-ParmVarDecl 0x7fd45402f3f0 <col:29, col:33> col:33 used mz 'int'
| |-ParmVarDecl 0x7fd45402f5f0 <line:8:5, col:20> col:12 used x 'double (*)[mx]':'double (*)[mx]'
| |-ParmVarDecl 0x7fd45402f670 <col:23, col:30> col:30 used y 'double'
| |-ParmVarDecl 0x7fd45402f870 <col:33, col:48> col:40 used z 'double (*)[mz]':'double (*)[mz]'
| |-ParmVarDecl 0x7fd45402f8f0 <line:9:5, col:9> col:9 used startx1 'int'
| |-ParmVarDecl 0x7fd45402f970 <col:18, col:22> col:22 used stopx1 'int'
| |-ParmVarDecl 0x7fd45402f9f0 <col:30, col:34> col:34 used stepx1 'int'
| |-ParmVarDecl 0x7fd45402fa70 <col:42, col:46> col:46 used startx2 'int'
| |-ParmVarDecl 0x7fd45402faf0 <col:55, col:59> col:59 used stopx2 'int'
| |-ParmVarDecl 0x7fd45402fb70 <col:67, col:71> col:71 used stepx2 'int'
| |-ParmVarDecl 0x7fd45402fbf0 <line:10:5, col:9> col:9 used startz1 'int'
| |-ParmVarDecl 0x7fd45402fc70 <col:18, col:22> col:22 stopz1 'int'
| |-ParmVarDecl 0x7fd45402fcf0 <col:30, col:34> col:34 used stepz1 'int'
| |-ParmVarDecl 0x7fd45402fd70 <col:42, col:46> col:46 used startz2 'int'
| |-ParmVarDecl 0x7fd45402fdf0 <col:55, col:59> col:59 stopz2 'int'
| |-ParmVarDecl 0x7fd45402fe70 <col:67, col:71> col:71 used stepz2 'int'
| `-CompoundStmt 0x7fd454032168 <col:80, line:22:1>
|   |-DeclStmt 0x7fd4540315a8 <line:12:5, col:23>
|   | |-VarDecl 0x7fd454031398 <col:5, col:9> col:9 used ix 'int'
|   | |-VarDecl 0x7fd454031418 <col:5, col:13> col:13 used jx 'int'
|   | |-VarDecl 0x7fd454031498 <col:5, col:17> col:17 used iz 'int'
|   | `-VarDecl 0x7fd454031518 <col:5, col:21> col:21 used jz 'int'
|   |-BinaryOperator 0x7fd454031618 <line:13:5, col:10> 'int' '='
|   | |-DeclRefExpr 0x7fd4540315c0 <col:5> 'int' lvalue Var 0x7fd454031498 'iz' 'int'
|   | `-ImplicitCastExpr 0x7fd454031600 <col:10> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fd4540315e0 <col:10> 'int' lvalue ParmVar 0x7fd45402fbf0 'startz1' 'int'
|   `-ForStmt 0x7fd454032130 <line:14:5, line:21:5>
|     |-BinaryOperator 0x7fd454031690 <line:14:10, col:14> 'int' '='
|     | |-DeclRefExpr 0x7fd454031638 <col:10> 'int' lvalue Var 0x7fd454031398 'ix' 'int'
|     | `-ImplicitCastExpr 0x7fd454031678 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fd454031658 <col:14> 'int' lvalue ParmVar 0x7fd45402f8f0 'startx1' 'int'
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fd454031720 <col:23, col:26> 'int' '<'
|     | |-ImplicitCastExpr 0x7fd4540316f0 <col:23> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fd4540316b0 <col:23> 'int' lvalue Var 0x7fd454031398 'ix' 'int'
|     | `-ImplicitCastExpr 0x7fd454031708 <col:26> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fd4540316d0 <col:26> 'int' lvalue ParmVar 0x7fd45402f970 'stopx1' 'int'
|     |-CompoundAssignOperator 0x7fd454031798 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     | |-DeclRefExpr 0x7fd454031740 <col:34> 'int' lvalue Var 0x7fd454031398 'ix' 'int'
|     | `-ImplicitCastExpr 0x7fd454031780 <col:39> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fd454031760 <col:39> 'int' lvalue ParmVar 0x7fd45402f9f0 'stepx1' 'int'
|     `-CompoundStmt 0x7fd454032108 <col:48, line:21:5>
|       |-BinaryOperator 0x7fd454031820 <line:15:9, col:14> 'int' '='
|       | |-DeclRefExpr 0x7fd4540317c8 <col:9> 'int' lvalue Var 0x7fd454031518 'jz' 'int'
|       | `-ImplicitCastExpr 0x7fd454031808 <col:14> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x7fd4540317e8 <col:14> 'int' lvalue ParmVar 0x7fd45402fd70 'startz2' 'int'
|       |-ForStmt 0x7fd454032000 <line:16:9, line:19:9>
|       | |-BinaryOperator 0x7fd454031898 <line:16:14, col:18> 'int' '='
|       | | |-DeclRefExpr 0x7fd454031840 <col:14> 'int' lvalue Var 0x7fd454031418 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7fd454031880 <col:18> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fd454031860 <col:18> 'int' lvalue ParmVar 0x7fd45402fa70 'startx2' 'int'
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x7fd454031928 <col:27, col:30> 'int' '<'
|       | | |-ImplicitCastExpr 0x7fd4540318f8 <col:27> 'int' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7fd4540318b8 <col:27> 'int' lvalue Var 0x7fd454031418 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7fd454031910 <col:30> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fd4540318d8 <col:30> 'int' lvalue ParmVar 0x7fd45402faf0 'stopx2' 'int'
|       | |-CompoundAssignOperator 0x7fd4540319a0 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|       | | |-DeclRefExpr 0x7fd454031948 <col:38> 'int' lvalue Var 0x7fd454031418 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7fd454031988 <col:43> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fd454031968 <col:43> 'int' lvalue ParmVar 0x7fd45402fb70 'stepx2' 'int'
|       | `-CompoundStmt 0x7fd454031fe0 <col:52, line:19:9>
|       |   |-BinaryOperator 0x7fd454031ef0 <line:17:6, col:34> 'double' '='
|       |   | |-ArraySubscriptExpr 0x7fd454031ad8 <col:6, col:14> 'double' lvalue
|       |   | | |-ImplicitCastExpr 0x7fd454031aa8 <col:6, col:10> 'double *' <ArrayToPointerDecay>
|       |   | | | `-ArraySubscriptExpr 0x7fd454031a40 <col:6, col:10> 'double [mz]' lvalue
|       |   | | |   |-ImplicitCastExpr 0x7fd454031a10 <col:6> 'double (*)[mz]':'double (*)[mz]' <LValueToRValue>
|       |   | | |   | `-DeclRefExpr 0x7fd4540319d0 <col:6> 'double (*)[mz]':'double (*)[mz]' lvalue ParmVar 0x7fd45402f870 'z' 'double (*)[mz]':'double (*)[mz]'
|       |   | | |   `-ImplicitCastExpr 0x7fd454031a28 <col:8> 'int' <LValueToRValue>
|       |   | | |     `-DeclRefExpr 0x7fd4540319f0 <col:8> 'int' lvalue Var 0x7fd454031498 'iz' 'int'
|       |   | | `-ImplicitCastExpr 0x7fd454031ac0 <col:12> 'int' <LValueToRValue>
|       |   | |   `-DeclRefExpr 0x7fd454031a60 <col:12> 'int' lvalue Var 0x7fd454031518 'jz' 'int'
|       |   | `-CallExpr 0x7fd454031e90 <col:18, col:34> 'double'
|       |   |   |-ImplicitCastExpr 0x7fd454031e78 <col:18> 'double (*)(double, double)' <FunctionToPointerDecay>
|       |   |   | `-DeclRefExpr 0x7fd454031d08 <col:18> 'double (double, double)' Function 0x7fd454031b38 'fmod' 'double (double, double)'
|       |   |   |-ImplicitCastExpr 0x7fd454031ec0 <col:23, col:31> 'double' <LValueToRValue>
|       |   |   | `-ArraySubscriptExpr 0x7fd454031e08 <col:23, col:31> 'double' lvalue
|       |   |   |   |-ImplicitCastExpr 0x7fd454031dd8 <col:23, col:27> 'double *' <ArrayToPointerDecay>
|       |   |   |   | `-ArraySubscriptExpr 0x7fd454031d98 <col:23, col:27> 'double [mx]' lvalue
|       |   |   |   |   |-ImplicitCastExpr 0x7fd454031d68 <col:23> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
|       |   |   |   |   | `-DeclRefExpr 0x7fd454031d28 <col:23> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7fd45402f5f0 'x' 'double (*)[mx]':'double (*)[mx]'
|       |   |   |   |   `-ImplicitCastExpr 0x7fd454031d80 <col:25> 'int' <LValueToRValue>
|       |   |   |   |     `-DeclRefExpr 0x7fd454031d48 <col:25> 'int' lvalue Var 0x7fd454031398 'ix' 'int'
|       |   |   |   `-ImplicitCastExpr 0x7fd454031df0 <col:29> 'int' <LValueToRValue>
|       |   |   |     `-DeclRefExpr 0x7fd454031db8 <col:29> 'int' lvalue Var 0x7fd454031418 'jx' 'int'
|       |   |   `-ImplicitCastExpr 0x7fd454031ed8 <col:33> 'double' <LValueToRValue>
|       |   |     `-DeclRefExpr 0x7fd454031e28 <col:33> 'double' lvalue ParmVar 0x7fd45402f670 'y' 'double'
|       |   `-BinaryOperator 0x7fd454031fc0 <line:18:6, col:16> 'int' '='
|       |     |-DeclRefExpr 0x7fd454031f10 <col:6> 'int' lvalue Var 0x7fd454031518 'jz' 'int'
|       |     `-BinaryOperator 0x7fd454031fa0 <col:11, col:16> 'int' '+'
|       |       |-ImplicitCastExpr 0x7fd454031f70 <col:11> 'int' <LValueToRValue>
|       |       | `-DeclRefExpr 0x7fd454031f30 <col:11> 'int' lvalue Var 0x7fd454031518 'jz' 'int'
|       |       `-ImplicitCastExpr 0x7fd454031f88 <col:16> 'int' <LValueToRValue>
|       |         `-DeclRefExpr 0x7fd454031f50 <col:16> 'int' lvalue ParmVar 0x7fd45402fe70 'stepz2' 'int'
|       `-BinaryOperator 0x7fd4540320e8 <line:20:9, col:19> 'int' '='
|         |-DeclRefExpr 0x7fd454032038 <col:9> 'int' lvalue Var 0x7fd454031498 'iz' 'int'
|         `-BinaryOperator 0x7fd4540320c8 <col:14, col:19> 'int' '+'
|           |-ImplicitCastExpr 0x7fd454032098 <col:14> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x7fd454032058 <col:14> 'int' lvalue Var 0x7fd454031498 'iz' 'int'
|           `-ImplicitCastExpr 0x7fd4540320b0 <col:19> 'int' <LValueToRValue>
|             `-DeclRefExpr 0x7fd454032078 <col:19> 'int' lvalue ParmVar 0x7fd45402fcf0 'stepz1' 'int'
`-FunctionDecl 0x7fd454031b38 <line:17:18> col:18 implicit used fmod 'double (double, double)' extern
  |-ParmVarDecl 0x7fd454031bd8 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x7fd454031c40 <<invalid sloc>> <invalid sloc> 'double'
  |-ConstAttr 0x7fd454031cb8 <col:18> Implicit
  `-NoThrowAttr 0x7fd454031cf8 <col:18> Implicit
