TranslationUnitDecl 0x7fa8c1838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fa8c18394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fa8c18391a0 '__int128'
|-TypedefDecl 0x7fa8c1839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fa8c18391c0 'unsigned __int128'
|-TypedefDecl 0x7fa8c18397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fa8c18395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fa8c1839568 '__NSConstantString_tag'
|-TypedefDecl 0x7fa8c1839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fa8c1839850 'char *'
|   `-BuiltinType 0x7fa8c1838ca0 'char'
|-TypedefDecl 0x7fa8c1839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fa8c1839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fa8c1839970 'struct __va_list_tag'
|     `-Record 0x7fa8c18398e8 '__va_list_tag'
|-TypedefDecl 0x7fa8c202f200 <./tree_src/unarySectMatrix_MinSectFirstMat.c:4:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fa8c1838d60 'unsigned char'
|-FunctionDecl 0x7fa8c202fe18 <line:12:1, line:28:1> line:12:6 MinSectFirstMat 'void (int, int, int, double (*)[mx], double *, int, int, int, int, int, int, int, int, int)'
| |-ParmVarDecl 0x7fa8c202f270 <line:13:5, col:9> col:9 used nx 'int'
| |-ParmVarDecl 0x7fa8c202f2f0 <col:13, col:17> col:17 used mx 'int'
| |-ParmVarDecl 0x7fa8c202f370 <col:21, col:25> col:25 used nz 'int'
| |-ParmVarDecl 0x7fa8c202f570 <col:29, col:44> col:36 used x 'double (*)[mx]':'double (*)[mx]'
| |-ParmVarDecl 0x7fa8c202f6f0 <col:47, col:58> col:54 used z 'double *':'double *'
| |-ParmVarDecl 0x7fa8c202f770 <line:14:5, col:9> col:9 used startx1 'int'
| |-ParmVarDecl 0x7fa8c202f7f0 <col:18, col:22> col:22 used stopx1 'int'
| |-ParmVarDecl 0x7fa8c202f870 <col:30, col:34> col:34 used stepx1 'int'
| |-ParmVarDecl 0x7fa8c202f8f0 <col:42, col:46> col:46 used startx2 'int'
| |-ParmVarDecl 0x7fa8c202f970 <col:55, col:59> col:59 used stopx2 'int'
| |-ParmVarDecl 0x7fa8c202f9f0 <col:67, col:71> col:71 used stepx2 'int'
| |-ParmVarDecl 0x7fa8c202fa70 <line:15:5, col:9> col:9 used startz 'int'
| |-ParmVarDecl 0x7fa8c202faf0 <col:17, col:21> col:21 stopz 'int'
| |-ParmVarDecl 0x7fa8c202fb70 <col:28, col:32> col:32 used stepz 'int'
| `-CompoundStmt 0x7fa8c2032bd0 <col:40, line:28:1>
|   |-DeclStmt 0x7fa8c2030110 <line:17:5, col:19>
|   | |-VarDecl 0x7fa8c202ff88 <col:5, col:9> col:9 used ix 'int'
|   | |-VarDecl 0x7fa8c2030008 <col:5, col:13> col:13 used jx 'int'
|   | `-VarDecl 0x7fa8c2030088 <col:5, col:17> col:17 used iz 'int'
|   |-DeclStmt 0x7fa8c20301a8 <line:18:5, col:15>
|   | `-VarDecl 0x7fa8c2030140 <col:5, col:12> col:12 used val 'double'
|   |-BinaryOperator 0x7fa8c2032218 <line:19:5, col:10> 'int' '='
|   | |-DeclRefExpr 0x7fa8c20301c0 <col:5> 'int' lvalue Var 0x7fa8c2030088 'iz' 'int'
|   | `-ImplicitCastExpr 0x7fa8c2032200 <col:10> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fa8c20301e0 <col:10> 'int' lvalue ParmVar 0x7fa8c202fa70 'startz' 'int'
|   `-ForStmt 0x7fa8c2032b98 <line:20:5, line:27:5>
|     |-BinaryOperator 0x7fa8c2032290 <line:20:10, col:14> 'int' '='
|     | |-DeclRefExpr 0x7fa8c2032238 <col:10> 'int' lvalue Var 0x7fa8c202ff88 'ix' 'int'
|     | `-ImplicitCastExpr 0x7fa8c2032278 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fa8c2032258 <col:14> 'int' lvalue ParmVar 0x7fa8c202f770 'startx1' 'int'
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fa8c2032320 <col:23, col:26> 'int' '<'
|     | |-ImplicitCastExpr 0x7fa8c20322f0 <col:23> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fa8c20322b0 <col:23> 'int' lvalue Var 0x7fa8c202ff88 'ix' 'int'
|     | `-ImplicitCastExpr 0x7fa8c2032308 <col:26> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fa8c20322d0 <col:26> 'int' lvalue ParmVar 0x7fa8c202f7f0 'stopx1' 'int'
|     |-CompoundAssignOperator 0x7fa8c2032398 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     | |-DeclRefExpr 0x7fa8c2032340 <col:34> 'int' lvalue Var 0x7fa8c202ff88 'ix' 'int'
|     | `-ImplicitCastExpr 0x7fa8c2032380 <col:39> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fa8c2032360 <col:39> 'int' lvalue ParmVar 0x7fa8c202f870 'stepx1' 'int'
|     `-CompoundStmt 0x7fa8c2032b70 <col:48, line:27:5>
|       |-ForStmt 0x7fa8c20329c8 <line:22:9, line:24:9>
|       | |-BinaryOperator 0x7fa8c2032440 <line:22:14, col:18> 'int' '='
|       | | |-DeclRefExpr 0x7fa8c20323e8 <col:14> 'int' lvalue Var 0x7fa8c2030008 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7fa8c2032428 <col:18> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fa8c2032408 <col:18> 'int' lvalue ParmVar 0x7fa8c202f8f0 'startx2' 'int'
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x7fa8c20324d0 <col:27, col:30> 'int' '<'
|       | | |-ImplicitCastExpr 0x7fa8c20324a0 <col:27> 'int' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7fa8c2032460 <col:27> 'int' lvalue Var 0x7fa8c2030008 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7fa8c20324b8 <col:30> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fa8c2032480 <col:30> 'int' lvalue ParmVar 0x7fa8c202f970 'stopx2' 'int'
|       | |-CompoundAssignOperator 0x7fa8c2032548 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|       | | |-DeclRefExpr 0x7fa8c20324f0 <col:38> 'int' lvalue Var 0x7fa8c2030008 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7fa8c2032530 <col:43> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fa8c2032510 <col:43> 'int' lvalue ParmVar 0x7fa8c202f9f0 'stepx2' 'int'
|       | `-CompoundStmt 0x7fa8c20329b0 <col:52, line:24:9>
|       |   `-BinaryOperator 0x7fa8c2032990 <line:23:13, col:38> 'double' '='
|       |     |-DeclRefExpr 0x7fa8c2032578 <col:13> 'double' lvalue Var 0x7fa8c2030140 'val' 'double'
|       |     `-CallExpr 0x7fa8c2032930 <col:19, col:38> 'double'
|       |       |-ImplicitCastExpr 0x7fa8c2032918 <col:19> 'double (*)(double, double)' <FunctionToPointerDecay>
|       |       | `-DeclRefExpr 0x7fa8c20327a8 <col:19> 'double (double, double)' Function 0x7fa8c20325d8 'fmin' 'double (double, double)'
|       |       |-ImplicitCastExpr 0x7fa8c2032960 <col:24> 'double' <LValueToRValue>
|       |       | `-DeclRefExpr 0x7fa8c20327c8 <col:24> 'double' lvalue Var 0x7fa8c2030140 'val' 'double'
|       |       `-ImplicitCastExpr 0x7fa8c2032978 <col:29, col:37> 'double' <LValueToRValue>
|       |         `-ArraySubscriptExpr 0x7fa8c20328c8 <col:29, col:37> 'double' lvalue
|       |           |-ImplicitCastExpr 0x7fa8c2032898 <col:29, col:33> 'double *' <ArrayToPointerDecay>
|       |           | `-ArraySubscriptExpr 0x7fa8c2032858 <col:29, col:33> 'double [mx]' lvalue
|       |           |   |-ImplicitCastExpr 0x7fa8c2032828 <col:29> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
|       |           |   | `-DeclRefExpr 0x7fa8c20327e8 <col:29> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7fa8c202f570 'x' 'double (*)[mx]':'double (*)[mx]'
|       |           |   `-ImplicitCastExpr 0x7fa8c2032840 <col:31> 'int' <LValueToRValue>
|       |           |     `-DeclRefExpr 0x7fa8c2032808 <col:31> 'int' lvalue Var 0x7fa8c2030008 'jx' 'int'
|       |           `-ImplicitCastExpr 0x7fa8c20328b0 <col:35> 'int' <LValueToRValue>
|       |             `-DeclRefExpr 0x7fa8c2032878 <col:35> 'int' lvalue Var 0x7fa8c202ff88 'ix' 'int'
|       |-BinaryOperator 0x7fa8c2032ac8 <line:25:9, col:17> 'double' '='
|       | |-ArraySubscriptExpr 0x7fa8c2032a70 <col:9, col:13> 'double' lvalue
|       | | |-ImplicitCastExpr 0x7fa8c2032a40 <col:9> 'double *':'double *' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7fa8c2032a00 <col:9> 'double *':'double *' lvalue ParmVar 0x7fa8c202f6f0 'z' 'double *':'double *'
|       | | `-ImplicitCastExpr 0x7fa8c2032a58 <col:11> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fa8c2032a20 <col:11> 'int' lvalue Var 0x7fa8c2030088 'iz' 'int'
|       | `-ImplicitCastExpr 0x7fa8c2032ab0 <col:17> 'double' <LValueToRValue>
|       |   `-DeclRefExpr 0x7fa8c2032a90 <col:17> 'double' lvalue Var 0x7fa8c2030140 'val' 'double'
|       `-CompoundAssignOperator 0x7fa8c2032b40 <line:26:9, col:15> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|         |-DeclRefExpr 0x7fa8c2032ae8 <col:9> 'int' lvalue Var 0x7fa8c2030088 'iz' 'int'
|         `-ImplicitCastExpr 0x7fa8c2032b28 <col:15> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x7fa8c2032b08 <col:15> 'int' lvalue ParmVar 0x7fa8c202fb70 'stepz' 'int'
`-FunctionDecl 0x7fa8c20325d8 <line:23:19> col:19 implicit used fmin 'double (double, double)' extern
  |-ParmVarDecl 0x7fa8c2032678 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x7fa8c20326e0 <<invalid sloc>> <invalid sloc> 'double'
  |-NoThrowAttr 0x7fa8c2032758 <col:19> Implicit
  `-ConstAttr 0x7fa8c2032798 <col:19> Implicit
