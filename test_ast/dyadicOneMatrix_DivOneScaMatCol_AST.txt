TranslationUnitDecl 0x7fcf1e038608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fcf1e038ea0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fcf1e038ba0 '__int128'
|-TypedefDecl 0x7fcf1e038f10 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fcf1e038bc0 'unsigned __int128'
|-TypedefDecl 0x7fcf1e0391f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fcf1e038ff0 'struct __NSConstantString_tag'
|   `-Record 0x7fcf1e038f68 '__NSConstantString_tag'
|-TypedefDecl 0x7fcf1e039290 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fcf1e039250 'char *'
|   `-BuiltinType 0x7fcf1e0386a0 'char'
|-TypedefDecl 0x7fcf1e039568 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fcf1e039510 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fcf1e039370 'struct __va_list_tag'
|     `-Record 0x7fcf1e0392e8 '__va_list_tag'
|-TypedefDecl 0x7fcf1e82f200 <./tree_src/dyadicOneMatrix_DivOneScaMatCol.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fcf1e038760 'unsigned char'
`-FunctionDecl 0x7fcf1e82fa48 <line:5:1, line:12:1> line:5:6 DivOneScaMatCol 'void (int, int, int, double, double (*)[m], double (*)[m])'
  |-ParmVarDecl 0x7fcf1e82f270 <line:6:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7fcf1e82f2f0 <col:12, col:16> col:16 used m 'int'
  |-ParmVarDecl 0x7fcf1e82f370 <col:19, col:23> col:23 used p 'int'
  |-ParmVarDecl 0x7fcf1e82f3f0 <col:26, col:33> col:33 used x 'double'
  |-ParmVarDecl 0x7fcf1e82f5f0 <col:36, col:49> col:43 used y 'double (*)[m]':'double (*)[m]'
  |-ParmVarDecl 0x7fcf1e82f7f0 <col:52, col:65> col:59 used z 'double (*)[m]':'double (*)[m]'
  `-CompoundStmt 0x7fcf1e8300c8 <col:69, line:12:1>
    |-DeclStmt 0x7fcf1e82fc78 <line:8:5, col:13>
    | |-VarDecl 0x7fcf1e82fb78 <col:5, col:9> col:9 used i 'int'
    | `-VarDecl 0x7fcf1e82fbf8 <col:5, col:12> col:12 j 'int'
    `-ForStmt 0x7fcf1e830090 <line:9:5, line:11:5>
      |-BinaryOperator 0x7fcf1e82fcd0 <line:9:10, col:13> 'int' '='
      | |-DeclRefExpr 0x7fcf1e82fc90 <col:10> 'int' lvalue Var 0x7fcf1e82fb78 'i' 'int'
      | `-IntegerLiteral 0x7fcf1e82fcb0 <col:13> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x7fcf1e82fd60 <col:16, col:18> 'int' '<'
      | |-ImplicitCastExpr 0x7fcf1e82fd30 <col:16> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fcf1e82fcf0 <col:16> 'int' lvalue Var 0x7fcf1e82fb78 'i' 'int'
      | `-ImplicitCastExpr 0x7fcf1e82fd48 <col:18> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fcf1e82fd10 <col:18> 'int' lvalue ParmVar 0x7fcf1e82f270 'n' 'int'
      |-UnaryOperator 0x7fcf1e82fda0 <col:21, col:22> 'int' postfix '++'
      | `-DeclRefExpr 0x7fcf1e82fd80 <col:21> 'int' lvalue Var 0x7fcf1e82fb78 'i' 'int'
      `-CompoundStmt 0x7fcf1e830078 <col:27, line:11:5>
        `-BinaryOperator 0x7fcf1e830058 <line:10:9, col:29> 'double' '='
          |-ArraySubscriptExpr 0x7fcf1e82fec8 <col:9, col:15> 'double' lvalue
          | |-ImplicitCastExpr 0x7fcf1e82fe98 <col:9, col:12> 'double *' <ArrayToPointerDecay>
          | | `-ArraySubscriptExpr 0x7fcf1e82fe28 <col:9, col:12> 'double [m]' lvalue
          | |   |-ImplicitCastExpr 0x7fcf1e82fdf8 <col:9> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
          | |   | `-DeclRefExpr 0x7fcf1e82fdb8 <col:9> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fcf1e82f7f0 'z' 'double (*)[m]':'double (*)[m]'
          | |   `-ImplicitCastExpr 0x7fcf1e82fe10 <col:11> 'int' <LValueToRValue>
          | |     `-DeclRefExpr 0x7fcf1e82fdd8 <col:11> 'int' lvalue Var 0x7fcf1e82fb78 'i' 'int'
          | `-ImplicitCastExpr 0x7fcf1e82feb0 <col:14> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x7fcf1e82fe48 <col:14> 'int' lvalue ParmVar 0x7fcf1e82f370 'p' 'int'
          `-BinaryOperator 0x7fcf1e830038 <col:19, col:29> 'double' '/'
            |-ImplicitCastExpr 0x7fcf1e830008 <col:19> 'double' <LValueToRValue>
            | `-DeclRefExpr 0x7fcf1e82fee8 <col:19> 'double' lvalue ParmVar 0x7fcf1e82f3f0 'x' 'double'
            `-ImplicitCastExpr 0x7fcf1e830020 <col:23, col:29> 'double' <LValueToRValue>
              `-ArraySubscriptExpr 0x7fcf1e82ffe8 <col:23, col:29> 'double' lvalue
                |-ImplicitCastExpr 0x7fcf1e82ffb8 <col:23, col:26> 'double *' <ArrayToPointerDecay>
                | `-ArraySubscriptExpr 0x7fcf1e82ff78 <col:23, col:26> 'double [m]' lvalue
                |   |-ImplicitCastExpr 0x7fcf1e82ff48 <col:23> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
                |   | `-DeclRefExpr 0x7fcf1e82ff08 <col:23> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fcf1e82f5f0 'y' 'double (*)[m]':'double (*)[m]'
                |   `-ImplicitCastExpr 0x7fcf1e82ff60 <col:25> 'int' <LValueToRValue>
                |     `-DeclRefExpr 0x7fcf1e82ff28 <col:25> 'int' lvalue Var 0x7fcf1e82fb78 'i' 'int'
                `-ImplicitCastExpr 0x7fcf1e82ffd0 <col:28> 'int' <LValueToRValue>
                  `-DeclRefExpr 0x7fcf1e82ff98 <col:28> 'int' lvalue ParmVar 0x7fcf1e82f370 'p' 'int'
