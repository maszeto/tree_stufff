TranslationUnitDecl 0x7fe724038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fe7240394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fe7240391a0 '__int128'
|-TypedefDecl 0x7fe724039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fe7240391c0 'unsigned __int128'
|-TypedefDecl 0x7fe7240397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fe7240395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fe724039568 '__NSConstantString_tag'
|-TypedefDecl 0x7fe724039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fe724039850 'char *'
|   `-BuiltinType 0x7fe724038ca0 'char'
|-TypedefDecl 0x7fe724039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fe724039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fe724039970 'struct __va_list_tag'
|     `-Record 0x7fe7240398e8 '__va_list_tag'
|-TypedefDecl 0x7fe724091600 <./tree_src/extendSectVector_OrSectScaVec.c:3:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x7fe724038d60 'unsigned char'
`-FunctionDecl 0x7fe724091ff8 <line:6:1, line:17:1> line:6:6 OrSectScaVec 'void (int, int, BOOL, BOOL *, BOOL *, int, int, int, int, int, int)'
  |-ParmVarDecl 0x7fe724091670 <line:7:5, col:9> col:9 used ny 'int'
  |-ParmVarDecl 0x7fe7240916f0 <col:13, col:17> col:17 used nz 'int'
  |-ParmVarDecl 0x7fe724091790 <line:8:5, col:10> col:10 used x 'BOOL':'unsigned char'
  |-ParmVarDecl 0x7fe724091980 <col:13, col:22> col:18 used y 'BOOL *':'BOOL *'
  |-ParmVarDecl 0x7fe724091b10 <col:25, col:34> col:30 used z 'BOOL *':'BOOL *'
  |-ParmVarDecl 0x7fe724091b90 <line:9:5, col:9> col:9 used starty 'int'
  |-ParmVarDecl 0x7fe724091c10 <col:17, col:21> col:21 used stopy 'int'
  |-ParmVarDecl 0x7fe724091c90 <col:28, col:32> col:32 used stepy 'int'
  |-ParmVarDecl 0x7fe724091d10 <col:39, col:43> col:43 used startz 'int'
  |-ParmVarDecl 0x7fe724091d90 <col:51, col:55> col:55 stopz 'int'
  |-ParmVarDecl 0x7fe724091e10 <col:62, col:66> col:66 used stepz 'int'
  `-CompoundStmt 0x7fe724093750 <col:74, line:17:1>
    |-DeclStmt 0x7fe724092250 <line:11:5, col:15>
    | |-VarDecl 0x7fe724092150 <col:5, col:9> col:9 used iy 'int'
    | `-VarDecl 0x7fe7240921d0 <col:5, col:13> col:13 used iz 'int'
    |-BinaryOperator 0x7fe7240922c0 <line:12:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7fe724092268 <col:5> 'int' lvalue Var 0x7fe7240921d0 'iz' 'int'
    | `-ImplicitCastExpr 0x7fe7240922a8 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7fe724092288 <col:10> 'int' lvalue ParmVar 0x7fe724091d10 'startz' 'int'
    `-ForStmt 0x7fe724093718 <line:13:5, line:16:5>
      |-BinaryOperator 0x7fe724092338 <line:13:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7fe7240922e0 <col:10> 'int' lvalue Var 0x7fe724092150 'iy' 'int'
      | `-ImplicitCastExpr 0x7fe724092320 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fe724092300 <col:14> 'int' lvalue ParmVar 0x7fe724091b90 'starty' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7fe7240923c8 <col:22, col:25> 'int' '<'
      | |-ImplicitCastExpr 0x7fe724092398 <col:22> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fe724092358 <col:22> 'int' lvalue Var 0x7fe724092150 'iy' 'int'
      | `-ImplicitCastExpr 0x7fe7240923b0 <col:25> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fe724092378 <col:25> 'int' lvalue ParmVar 0x7fe724091c10 'stopy' 'int'
      |-CompoundAssignOperator 0x7fe724092440 <col:32, col:37> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7fe7240923e8 <col:32> 'int' lvalue Var 0x7fe724092150 'iy' 'int'
      | `-ImplicitCastExpr 0x7fe724092428 <col:37> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fe724092408 <col:37> 'int' lvalue ParmVar 0x7fe724091c90 'stepy' 'int'
      `-CompoundStmt 0x7fe7240936f8 <col:45, line:16:5>
        |-BinaryOperator 0x7fe724093650 <line:14:4, col:20> 'BOOL':'unsigned char' '='
        | |-ArraySubscriptExpr 0x7fe7240924e0 <col:4, col:8> 'BOOL':'unsigned char' lvalue
        | | |-ImplicitCastExpr 0x7fe7240924b0 <col:4> 'BOOL *':'BOOL *' <LValueToRValue>
        | | | `-DeclRefExpr 0x7fe724092470 <col:4> 'BOOL *':'BOOL *' lvalue ParmVar 0x7fe724091b10 'z' 'BOOL *':'BOOL *'
        | | `-ImplicitCastExpr 0x7fe7240924c8 <col:6> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fe724092490 <col:6> 'int' lvalue Var 0x7fe7240921d0 'iz' 'int'
        | `-ImplicitCastExpr 0x7fe724093638 <col:12, col:20> 'BOOL':'unsigned char' <IntegralCast>
        |   `-BinaryOperator 0x7fe724093618 <col:12, col:20> 'int' '|'
        |     |-ImplicitCastExpr 0x7fe7240925c8 <col:12> 'int' <IntegralCast>
        |     | `-ImplicitCastExpr 0x7fe7240925b0 <col:12> 'BOOL':'unsigned char' <LValueToRValue>
        |     |   `-DeclRefExpr 0x7fe724092500 <col:12> 'BOOL':'unsigned char' lvalue ParmVar 0x7fe724091790 'x' 'BOOL':'unsigned char'
        |     `-ImplicitCastExpr 0x7fe724093600 <col:16, col:20> 'int' <IntegralCast>
        |       `-ImplicitCastExpr 0x7fe7240925e0 <col:16, col:20> 'BOOL':'unsigned char' <LValueToRValue>
        |         `-ArraySubscriptExpr 0x7fe724092590 <col:16, col:20> 'BOOL':'unsigned char' lvalue
        |           |-ImplicitCastExpr 0x7fe724092560 <col:16> 'BOOL *':'BOOL *' <LValueToRValue>
        |           | `-DeclRefExpr 0x7fe724092520 <col:16> 'BOOL *':'BOOL *' lvalue ParmVar 0x7fe724091980 'y' 'BOOL *':'BOOL *'
        |           `-ImplicitCastExpr 0x7fe724092578 <col:18> 'int' <LValueToRValue>
        |             `-DeclRefExpr 0x7fe724092540 <col:18> 'int' lvalue Var 0x7fe724092150 'iy' 'int'
        `-CompoundAssignOperator 0x7fe7240936c8 <line:15:4, col:10> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
          |-DeclRefExpr 0x7fe724093670 <col:4> 'int' lvalue Var 0x7fe7240921d0 'iz' 'int'
          `-ImplicitCastExpr 0x7fe7240936b0 <col:10> 'int' <LValueToRValue>
            `-DeclRefExpr 0x7fe724093690 <col:10> 'int' lvalue ParmVar 0x7fe724091e10 'stepz' 'int'
