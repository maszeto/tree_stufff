TranslationUnitDecl 0x7f8251038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f82510394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f82510391a0 '__int128'
|-TypedefDecl 0x7f8251039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f82510391c0 'unsigned __int128'
|-TypedefDecl 0x7f82510397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f82510395f0 'struct __NSConstantString_tag'
|   `-Record 0x7f8251039568 '__NSConstantString_tag'
|-TypedefDecl 0x7f8251039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f8251039850 'char *'
|   `-BuiltinType 0x7f8251038ca0 'char'
|-TypedefDecl 0x7f8251039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f8251039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f8251039970 'struct __va_list_tag'
|     `-Record 0x7f82510398e8 '__va_list_tag'
|-TypedefDecl 0x7f825182f200 <./tree_src/dyadicSectOneMatrix_AddSectOneScaMatCol.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7f8251038d60 'unsigned char'
`-FunctionDecl 0x7f825182fdd8 <line:6:1, line:16:1> line:6:6 AddSectOneScaMatCol 'void (int, int, int, double, double (*)[m], double (*)[m], int, int, int, int, int, int)'
  |-ParmVarDecl 0x7f825182f270 <line:7:5, col:9> col:9 used m 'int'
  |-ParmVarDecl 0x7f825182f2f0 <col:12, col:16> col:16 used n 'int'
  |-ParmVarDecl 0x7f825182f370 <col:19, col:23> col:23 used p 'int'
  |-ParmVarDecl 0x7f825182f3f0 <col:26, col:33> col:33 used x 'double'
  |-ParmVarDecl 0x7f825182f5f0 <col:36, col:49> col:43 used z 'double (*)[m]':'double (*)[m]'
  |-ParmVarDecl 0x7f825182f7f0 <col:52, col:65> col:59 used y 'double (*)[m]':'double (*)[m]'
  |-ParmVarDecl 0x7f825182f870 <line:8:5, col:9> col:9 used sz1 'int'
  |-ParmVarDecl 0x7f825182f8f0 <col:14, col:18> col:18 ez1 'int'
  |-ParmVarDecl 0x7f825182f970 <col:23, col:27> col:27 used bz1 'int'
  |-ParmVarDecl 0x7f825182f9f0 <col:32, col:36> col:36 used sy1 'int'
  |-ParmVarDecl 0x7f825182fa70 <col:41, col:45> col:45 used ey1 'int'
  |-ParmVarDecl 0x7f825182faf0 <col:50, col:54> col:54 used by1 'int'
  `-CompoundStmt 0x7f825102e608 <col:59, line:16:1>
    |-DeclStmt 0x7f8251830038 <line:10:5, col:12>
    | |-VarDecl 0x7f825182ff38 <col:5, col:9> col:9 used j 'int'
    | `-VarDecl 0x7f825182ffb8 <col:5, col:11> col:11 used i 'int'
    |-BinaryOperator 0x7f82518300a8 <line:11:5, col:8> 'int' '='
    | |-DeclRefExpr 0x7f8251830050 <col:5> 'int' lvalue Var 0x7f825182ff38 'j' 'int'
    | `-ImplicitCastExpr 0x7f8251830090 <col:8> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7f8251830070 <col:8> 'int' lvalue ParmVar 0x7f825182f970 'bz1' 'int'
    `-ForStmt 0x7f825102e5d0 <line:12:5, line:15:5>
      |-BinaryOperator 0x7f8251830120 <line:12:10, col:13> 'int' '='
      | |-DeclRefExpr 0x7f82518300c8 <col:10> 'int' lvalue Var 0x7f825182ffb8 'i' 'int'
      | `-ImplicitCastExpr 0x7f8251830108 <col:13> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f82518300e8 <col:13> 'int' lvalue ParmVar 0x7f825182faf0 'by1' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7f82518301b0 <col:18, col:20> 'int' '<'
      | |-ImplicitCastExpr 0x7f8251830180 <col:18> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7f8251830140 <col:18> 'int' lvalue Var 0x7f825182ffb8 'i' 'int'
      | `-ImplicitCastExpr 0x7f8251830198 <col:20> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f8251830160 <col:20> 'int' lvalue ParmVar 0x7f825182fa70 'ey1' 'int'
      |-CompoundAssignOperator 0x7f825102e238 <col:25, col:29> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7f82518301d0 <col:25> 'int' lvalue Var 0x7f825182ffb8 'i' 'int'
      | `-ImplicitCastExpr 0x7f825102e220 <col:29> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f825102e200 <col:29> 'int' lvalue ParmVar 0x7f825182f9f0 'sy1' 'int'
      `-CompoundStmt 0x7f825102e5b0 <col:35, line:15:5>
        |-BinaryOperator 0x7f825102e508 <line:13:2, col:19> 'double' '='
        | |-ArraySubscriptExpr 0x7f825102e378 <col:2, col:8> 'double' lvalue
        | | |-ImplicitCastExpr 0x7f825102e348 <col:2, col:5> 'double *' <ArrayToPointerDecay>
        | | | `-ArraySubscriptExpr 0x7f825102e2d8 <col:2, col:5> 'double [m]' lvalue
        | | |   |-ImplicitCastExpr 0x7f825102e2a8 <col:2> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
        | | |   | `-DeclRefExpr 0x7f825102e268 <col:2> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f825182f5f0 'z' 'double (*)[m]':'double (*)[m]'
        | | |   `-ImplicitCastExpr 0x7f825102e2c0 <col:4> 'int' <LValueToRValue>
        | | |     `-DeclRefExpr 0x7f825102e288 <col:4> 'int' lvalue Var 0x7f825182ff38 'j' 'int'
        | | `-ImplicitCastExpr 0x7f825102e360 <col:7> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7f825102e2f8 <col:7> 'int' lvalue ParmVar 0x7f825182f370 'p' 'int'
        | `-BinaryOperator 0x7f825102e4e8 <col:11, col:19> 'double' '+'
        |   |-ImplicitCastExpr 0x7f825102e4b8 <col:11> 'double' <LValueToRValue>
        |   | `-DeclRefExpr 0x7f825102e398 <col:11> 'double' lvalue ParmVar 0x7f825182f3f0 'x' 'double'
        |   `-ImplicitCastExpr 0x7f825102e4d0 <col:13, col:19> 'double' <LValueToRValue>
        |     `-ArraySubscriptExpr 0x7f825102e498 <col:13, col:19> 'double' lvalue
        |       |-ImplicitCastExpr 0x7f825102e468 <col:13, col:16> 'double *' <ArrayToPointerDecay>
        |       | `-ArraySubscriptExpr 0x7f825102e428 <col:13, col:16> 'double [m]' lvalue
        |       |   |-ImplicitCastExpr 0x7f825102e3f8 <col:13> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
        |       |   | `-DeclRefExpr 0x7f825102e3b8 <col:13> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f825182f7f0 'y' 'double (*)[m]':'double (*)[m]'
        |       |   `-ImplicitCastExpr 0x7f825102e410 <col:15> 'int' <LValueToRValue>
        |       |     `-DeclRefExpr 0x7f825102e3d8 <col:15> 'int' lvalue Var 0x7f825182ffb8 'i' 'int'
        |       `-ImplicitCastExpr 0x7f825102e480 <col:18> 'int' <LValueToRValue>
        |         `-DeclRefExpr 0x7f825102e448 <col:18> 'int' lvalue ParmVar 0x7f825182f370 'p' 'int'
        `-CompoundAssignOperator 0x7f825102e580 <line:14:9, col:13> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
          |-DeclRefExpr 0x7f825102e528 <col:9> 'int' lvalue Var 0x7f825182ff38 'j' 'int'
          `-ImplicitCastExpr 0x7f825102e568 <col:13> 'int' <LValueToRValue>
            `-DeclRefExpr 0x7f825102e548 <col:13> 'int' lvalue ParmVar 0x7f825182f870 'sz1' 'int'
