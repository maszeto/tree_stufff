TranslationUnitDecl 0x7f8c3902e008 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f8c3902e8a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f8c3902e5a0 '__int128'
|-TypedefDecl 0x7f8c3902e910 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f8c3902e5c0 'unsigned __int128'
|-TypedefDecl 0x7f8c3902ebf8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f8c3902e9f0 'struct __NSConstantString_tag'
|   `-Record 0x7f8c3902e968 '__NSConstantString_tag'
|-TypedefDecl 0x7f8c3902ec90 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f8c3902ec50 'char *'
|   `-BuiltinType 0x7f8c3902e0a0 'char'
|-TypedefDecl 0x7f8c3902ef68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f8c3902ef10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f8c3902ed70 'struct __va_list_tag'
|     `-Record 0x7f8c3902ece8 '__va_list_tag'
|-TypedefDecl 0x7f8c38839800 <./tree_src/extendWholeMatrix_HiWholeMatColVec.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7f8c3902e160 'unsigned char'
|-FunctionDecl 0x7f8c3883a0a8 <line:6:1, line:15:1> line:6:6 HiWholeMatColVec 'void (int, int, double (*)[m], double *, double (*)[m])'
| |-ParmVarDecl 0x7f8c38839870 <line:7:5, col:9> col:9 used n 'int'
| |-ParmVarDecl 0x7f8c388398f0 <col:12, col:16> col:16 used m 'int'
| |-ParmVarDecl 0x7f8c38839af0 <col:19, col:32> col:26 used x 'double (*)[m]':'double (*)[m]'
| |-ParmVarDecl 0x7f8c38839c70 <col:35, col:45> col:42 used y 'double *':'double *'
| |-ParmVarDecl 0x7f8c38839e70 <col:48, col:61> col:55 used z 'double (*)[m]':'double (*)[m]'
| `-CompoundStmt 0x7f8c3883c160 <col:65, line:15:1>
|   |-DeclStmt 0x7f8c3883a2d0 <line:9:5, col:13>
|   | |-VarDecl 0x7f8c3883a1d0 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x7f8c3883a250 <col:5, col:12> col:12 used j 'int'
|   `-ForStmt 0x7f8c3883c128 <line:10:5, line:14:5>
|     |-BinaryOperator 0x7f8c3883a328 <line:10:10, col:13> 'int' '='
|     | |-DeclRefExpr 0x7f8c3883a2e8 <col:10> 'int' lvalue Var 0x7f8c3883a1d0 'i' 'int'
|     | `-IntegerLiteral 0x7f8c3883a308 <col:13> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7f8c3883a3b8 <col:16, col:18> 'int' '<'
|     | |-ImplicitCastExpr 0x7f8c3883a388 <col:16> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7f8c3883a348 <col:16> 'int' lvalue Var 0x7f8c3883a1d0 'i' 'int'
|     | `-ImplicitCastExpr 0x7f8c3883a3a0 <col:18> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7f8c3883a368 <col:18> 'int' lvalue ParmVar 0x7f8c38839870 'n' 'int'
|     |-UnaryOperator 0x7f8c3883a3f8 <col:21, col:22> 'int' postfix '++'
|     | `-DeclRefExpr 0x7f8c3883a3d8 <col:21> 'int' lvalue Var 0x7f8c3883a1d0 'i' 'int'
|     `-CompoundStmt 0x7f8c3883c110 <col:27, line:14:5>
|       `-ForStmt 0x7f8c3883c0d8 <line:11:9, line:13:9>
|         |-BinaryOperator 0x7f8c3883a450 <line:11:14, col:17> 'int' '='
|         | |-DeclRefExpr 0x7f8c3883a410 <col:14> 'int' lvalue Var 0x7f8c3883a250 'j' 'int'
|         | `-IntegerLiteral 0x7f8c3883a430 <col:17> 'int' 0
|         |-<<<NULL>>>
|         |-BinaryOperator 0x7f8c3883a4e0 <col:20, col:22> 'int' '<'
|         | |-ImplicitCastExpr 0x7f8c3883a4b0 <col:20> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x7f8c3883a470 <col:20> 'int' lvalue Var 0x7f8c3883a250 'j' 'int'
|         | `-ImplicitCastExpr 0x7f8c3883a4c8 <col:22> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x7f8c3883a490 <col:22> 'int' lvalue ParmVar 0x7f8c388398f0 'm' 'int'
|         |-UnaryOperator 0x7f8c3883a520 <col:25, col:26> 'int' postfix '++'
|         | `-DeclRefExpr 0x7f8c3883a500 <col:25> 'int' lvalue Var 0x7f8c3883a250 'j' 'int'
|         `-CompoundStmt 0x7f8c3883c0c0 <col:31, line:13:9>
|           `-BinaryOperator 0x7f8c3883c0a0 <line:12:6, col:33> 'double' '='
|             |-ArraySubscriptExpr 0x7f8c3883a618 <col:6, col:12> 'double' lvalue
|             | |-ImplicitCastExpr 0x7f8c3883a5e8 <col:6, col:9> 'double *' <ArrayToPointerDecay>
|             | | `-ArraySubscriptExpr 0x7f8c3883a5a8 <col:6, col:9> 'double [m]' lvalue
|             | |   |-ImplicitCastExpr 0x7f8c3883a578 <col:6> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
|             | |   | `-DeclRefExpr 0x7f8c3883a538 <col:6> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f8c38839e70 'z' 'double (*)[m]':'double (*)[m]'
|             | |   `-ImplicitCastExpr 0x7f8c3883a590 <col:8> 'int' <LValueToRValue>
|             | |     `-DeclRefExpr 0x7f8c3883a558 <col:8> 'int' lvalue Var 0x7f8c3883a250 'j' 'int'
|             | `-ImplicitCastExpr 0x7f8c3883a600 <col:11> 'int' <LValueToRValue>
|             |   `-DeclRefExpr 0x7f8c3883a5c8 <col:11> 'int' lvalue Var 0x7f8c3883a1d0 'i' 'int'
|             `-CallExpr 0x7f8c3883c040 <col:16, col:33> 'double'
|               |-ImplicitCastExpr 0x7f8c3883c028 <col:16> 'double (*)(double, double)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x7f8c3883be50 <col:16> 'double (double, double)' Function 0x7f8c3883a678 'fmax' 'double (double, double)'
|               |-ImplicitCastExpr 0x7f8c3883c070 <col:21, col:27> 'double' <LValueToRValue>
|               | `-ArraySubscriptExpr 0x7f8c3883bf50 <col:21, col:27> 'double' lvalue
|               |   |-ImplicitCastExpr 0x7f8c3883bf20 <col:21, col:24> 'double *' <ArrayToPointerDecay>
|               |   | `-ArraySubscriptExpr 0x7f8c3883bee0 <col:21, col:24> 'double [m]' lvalue
|               |   |   |-ImplicitCastExpr 0x7f8c3883beb0 <col:21> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
|               |   |   | `-DeclRefExpr 0x7f8c3883be70 <col:21> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f8c38839af0 'x' 'double (*)[m]':'double (*)[m]'
|               |   |   `-ImplicitCastExpr 0x7f8c3883bec8 <col:23> 'int' <LValueToRValue>
|               |   |     `-DeclRefExpr 0x7f8c3883be90 <col:23> 'int' lvalue Var 0x7f8c3883a250 'j' 'int'
|               |   `-ImplicitCastExpr 0x7f8c3883bf38 <col:26> 'int' <LValueToRValue>
|               |     `-DeclRefExpr 0x7f8c3883bf00 <col:26> 'int' lvalue Var 0x7f8c3883a1d0 'i' 'int'
|               `-ImplicitCastExpr 0x7f8c3883c088 <col:29, col:32> 'double' <LValueToRValue>
|                 `-ArraySubscriptExpr 0x7f8c3883bfe0 <col:29, col:32> 'double' lvalue
|                   |-ImplicitCastExpr 0x7f8c3883bfb0 <col:29> 'double *':'double *' <LValueToRValue>
|                   | `-DeclRefExpr 0x7f8c3883bf70 <col:29> 'double *':'double *' lvalue ParmVar 0x7f8c38839c70 'y' 'double *':'double *'
|                   `-ImplicitCastExpr 0x7f8c3883bfc8 <col:31> 'int' <LValueToRValue>
|                     `-DeclRefExpr 0x7f8c3883bf90 <col:31> 'int' lvalue Var 0x7f8c3883a250 'j' 'int'
`-FunctionDecl 0x7f8c3883a678 <col:16> col:16 implicit used fmax 'double (double, double)' extern
  |-ParmVarDecl 0x7f8c3883a718 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x7f8c3883a780 <<invalid sloc>> <invalid sloc> 'double'
  |-NoThrowAttr 0x7f8c3883be00 <col:16> Implicit
  `-ConstAttr 0x7f8c3883be40 <col:16> Implicit
