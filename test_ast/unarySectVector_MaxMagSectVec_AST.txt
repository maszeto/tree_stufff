TranslationUnitDecl 0x7fdf8e038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fdf8e0394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fdf8e0391a0 '__int128'
|-TypedefDecl 0x7fdf8e039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fdf8e0391c0 'unsigned __int128'
|-TypedefDecl 0x7fdf8e0397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fdf8e0395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fdf8e039568 '__NSConstantString_tag'
|-TypedefDecl 0x7fdf8e039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fdf8e039850 'char *'
|   `-BuiltinType 0x7fdf8e038ca0 'char'
|-TypedefDecl 0x7fdf8e039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fdf8e039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fdf8e039970 'struct __va_list_tag'
|     `-Record 0x7fdf8e0398e8 '__va_list_tag'
|-TypedefDecl 0x7fdf8e091600 <./tree_src/unarySectVector_MaxMagSectVec.c:4:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fdf8e038d60 'unsigned char'
|-FunctionDecl 0x7fdf8e091b68 <line:12:1, line:22:1> line:12:6 MaxMagSectVec 'void (int, double *, double *, int, int, int)'
| |-ParmVarDecl 0x7fdf8e091670 <line:13:5, col:9> col:9 used n 'int'
| |-ParmVarDecl 0x7fdf8e0917f0 <col:12, col:22> col:19 used x 'double *':'double *'
| |-ParmVarDecl 0x7fdf8e091870 <col:25, col:33> col:33 used z 'double *'
| |-ParmVarDecl 0x7fdf8e0918f0 <line:14:5, col:9> col:9 used startx 'int'
| |-ParmVarDecl 0x7fdf8e091970 <col:17, col:21> col:21 used stopx 'int'
| |-ParmVarDecl 0x7fdf8e0919f0 <col:28, col:32> col:32 used stepx 'int'
| `-CompoundStmt 0x7fdf8e094620 <col:40, line:22:1>
|   |-DeclStmt 0x7fdf8e091d00 <line:16:5, col:10>
|   | `-VarDecl 0x7fdf8e091c98 <col:5, col:9> col:9 used i 'int'
|   |-DeclStmt 0x7fdf8e091d98 <line:17:5, col:19>
|   | `-VarDecl 0x7fdf8e091d30 <col:5, col:12> col:12 used t 'double'
|   |-ForStmt 0x7fdf8e092530 <line:18:5, line:20:5>
|   | |-BinaryOperator 0x7fdf8e091e08 <line:18:10, col:13> 'int' '='
|   | | |-DeclRefExpr 0x7fdf8e091db0 <col:10> 'int' lvalue Var 0x7fdf8e091c98 'i' 'int'
|   | | `-ImplicitCastExpr 0x7fdf8e091df0 <col:13> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fdf8e091dd0 <col:13> 'int' lvalue ParmVar 0x7fdf8e0918f0 'startx' 'int'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fdf8e091e98 <col:21, col:23> 'int' '<'
|   | | |-ImplicitCastExpr 0x7fdf8e091e68 <col:21> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fdf8e091e28 <col:21> 'int' lvalue Var 0x7fdf8e091c98 'i' 'int'
|   | | `-ImplicitCastExpr 0x7fdf8e091e80 <col:23> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fdf8e091e48 <col:23> 'int' lvalue ParmVar 0x7fdf8e091970 'stopx' 'int'
|   | |-CompoundAssignOperator 0x7fdf8e091f10 <col:30, col:34> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | | |-DeclRefExpr 0x7fdf8e091eb8 <col:30> 'int' lvalue Var 0x7fdf8e091c98 'i' 'int'
|   | | `-ImplicitCastExpr 0x7fdf8e091ef8 <col:34> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fdf8e091ed8 <col:34> 'int' lvalue ParmVar 0x7fdf8e0919f0 'stepx' 'int'
|   | `-CompoundStmt 0x7fdf8e092518 <col:42, line:20:5>
|   |   `-BinaryOperator 0x7fdf8e0924f8 <line:19:9, col:32> 'double' '='
|   |     |-DeclRefExpr 0x7fdf8e091f40 <col:9> 'double' lvalue Var 0x7fdf8e091d30 't' 'double'
|   |     `-CallExpr 0x7fdf8e0924b0 <col:13, col:32> 'double'
|   |       |-ImplicitCastExpr 0x7fdf8e092498 <col:13> 'double (*)(double, double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x7fdf8e092168 <col:13> 'double (double, double)' Function 0x7fdf8e091f98 'fmax' 'double (double, double)'
|   |       |-ImplicitCastExpr 0x7fdf8e0924e0 <col:18> 'double' <LValueToRValue>
|   |       | `-DeclRefExpr 0x7fdf8e092188 <col:18> 'double' lvalue Var 0x7fdf8e091d30 't' 'double'
|   |       `-CallExpr 0x7fdf8e092430 <col:21, col:31> 'double'
|   |         |-ImplicitCastExpr 0x7fdf8e092418 <col:21> 'double (*)(double)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x7fdf8e092340 <col:21> 'double (double)' Function 0x7fdf8e0921e0 'fabs' 'double (double)'
|   |         `-ImplicitCastExpr 0x7fdf8e092458 <col:27, col:30> 'double' <LValueToRValue>
|   |           `-ArraySubscriptExpr 0x7fdf8e0923d0 <col:27, col:30> 'double' lvalue
|   |             |-ImplicitCastExpr 0x7fdf8e0923a0 <col:27> 'double *':'double *' <LValueToRValue>
|   |             | `-DeclRefExpr 0x7fdf8e092360 <col:27> 'double *':'double *' lvalue ParmVar 0x7fdf8e0917f0 'x' 'double *':'double *'
|   |             `-ImplicitCastExpr 0x7fdf8e0923b8 <col:29> 'int' <LValueToRValue>
|   |               `-DeclRefExpr 0x7fdf8e092380 <col:29> 'int' lvalue Var 0x7fdf8e091c98 'i' 'int'
|   `-BinaryOperator 0x7fdf8e094600 <line:21:5, col:10> 'double' '='
|     |-UnaryOperator 0x7fdf8e0925a0 <col:5, col:6> 'double' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x7fdf8e092588 <col:6> 'double *' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fdf8e092568 <col:6> 'double *' lvalue ParmVar 0x7fdf8e091870 'z' 'double *'
|     `-ImplicitCastExpr 0x7fdf8e0925d8 <col:10> 'double' <LValueToRValue>
|       `-DeclRefExpr 0x7fdf8e0925b8 <col:10> 'double' lvalue Var 0x7fdf8e091d30 't' 'double'
|-FunctionDecl 0x7fdf8e091f98 <line:19:13> col:13 implicit used fmax 'double (double, double)' extern
| |-ParmVarDecl 0x7fdf8e092038 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x7fdf8e0920a0 <<invalid sloc>> <invalid sloc> 'double'
| |-NoThrowAttr 0x7fdf8e092118 <col:13> Implicit
| `-ConstAttr 0x7fdf8e092158 <col:13> Implicit
`-FunctionDecl 0x7fdf8e0921e0 <col:21> col:21 implicit used fabs 'double (double)' extern
  |-ParmVarDecl 0x7fdf8e092280 <<invalid sloc>> <invalid sloc> 'double'
  |-NoThrowAttr 0x7fdf8e0922f0 <col:21> Implicit
  `-ConstAttr 0x7fdf8e092330 <col:21> Implicit
