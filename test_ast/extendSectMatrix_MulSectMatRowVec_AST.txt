TranslationUnitDecl 0x7fd209038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fd2090394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fd2090391a0 '__int128'
|-TypedefDecl 0x7fd209039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fd2090391c0 'unsigned __int128'
|-TypedefDecl 0x7fd2090397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fd2090395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fd209039568 '__NSConstantString_tag'
|-TypedefDecl 0x7fd209039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fd209039850 'char *'
|   `-BuiltinType 0x7fd209038ca0 'char'
|-TypedefDecl 0x7fd209039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fd209039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fd209039970 'struct __va_list_tag'
|     `-Record 0x7fd2090398e8 '__va_list_tag'
|-TypedefDecl 0x7fd209091600 <./tree_src/extendSectMatrix_MulSectMatRowVec.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fd209038d60 'unsigned char'
`-FunctionDecl 0x7fd209093978 <line:5:1, line:24:1> line:5:6 MulSectMatRowVec 'void (int, int, int, int, int, double (*)[mx], double *, double (*)[mz], int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)'
  |-ParmVarDecl 0x7fd209091670 <line:6:5, col:9> col:9 used nx 'int'
  |-ParmVarDecl 0x7fd2090916f0 <col:13, col:17> col:17 used mx 'int'
  |-ParmVarDecl 0x7fd209091770 <col:21, col:25> col:25 used ny 'int'
  |-ParmVarDecl 0x7fd2090917f0 <col:29, col:33> col:33 used nz 'int'
  |-ParmVarDecl 0x7fd209091870 <col:37, col:41> col:41 used mz 'int'
  |-ParmVarDecl 0x7fd209091a70 <line:7:5, col:20> col:12 used x 'double (*)[mx]':'double (*)[mx]'
  |-ParmVarDecl 0x7fd209091bf0 <col:23, col:34> col:30 used y 'double *':'double *'
  |-ParmVarDecl 0x7fd209091df0 <col:37, col:52> col:44 used z 'double (*)[mz]':'double (*)[mz]'
  |-ParmVarDecl 0x7fd209091e70 <line:8:5, col:9> col:9 used startx1 'int'
  |-ParmVarDecl 0x7fd209091ef0 <col:18, col:22> col:22 used stopx1 'int'
  |-ParmVarDecl 0x7fd209091f70 <col:30, col:34> col:34 used stepx1 'int'
  |-ParmVarDecl 0x7fd209091ff0 <col:42, col:46> col:46 used startx2 'int'
  |-ParmVarDecl 0x7fd209092070 <col:55, col:59> col:59 used stopx2 'int'
  |-ParmVarDecl 0x7fd2090920f0 <col:67, col:71> col:71 used stepx2 'int'
  |-ParmVarDecl 0x7fd209092170 <line:9:5, col:9> col:9 used starty 'int'
  |-ParmVarDecl 0x7fd2090921f0 <col:17, col:21> col:21 stopy 'int'
  |-ParmVarDecl 0x7fd209092270 <col:28, col:32> col:32 used stepy 'int'
  |-ParmVarDecl 0x7fd2090922f0 <line:10:5, col:9> col:9 used startz1 'int'
  |-ParmVarDecl 0x7fd209092370 <col:18, col:22> col:22 stopz1 'int'
  |-ParmVarDecl 0x7fd2090923f0 <col:30, col:34> col:34 used stepz1 'int'
  |-ParmVarDecl 0x7fd209092470 <col:42, col:46> col:46 used startz2 'int'
  |-ParmVarDecl 0x7fd2090924f0 <col:55, col:59> col:59 stopz2 'int'
  |-ParmVarDecl 0x7fd209092570 <col:67, col:71> col:71 used stepz2 'int'
  `-CompoundStmt 0x7fd209094938 <col:80, line:24:1>
    |-DeclStmt 0x7fd209093e50 <line:12:5, col:31>
    | |-VarDecl 0x7fd209093b30 <col:5, col:9> col:9 used ix 'int'
    | |-VarDecl 0x7fd209093bb0 <col:5, col:13> col:13 used jx 'int'
    | |-VarDecl 0x7fd209093c30 <col:5, col:17> col:17 iy 'int'
    | |-VarDecl 0x7fd209093cb0 <col:5, col:21> col:21 used jy 'int'
    | |-VarDecl 0x7fd209093d30 <col:5, col:25> col:25 used iz 'int'
    | `-VarDecl 0x7fd209093db0 <col:5, col:29> col:29 used jz 'int'
    |-BinaryOperator 0x7fd209093ec0 <line:13:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7fd209093e68 <col:5> 'int' lvalue Var 0x7fd209093d30 'iz' 'int'
    | `-ImplicitCastExpr 0x7fd209093ea8 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7fd209093e88 <col:10> 'int' lvalue ParmVar 0x7fd2090922f0 'startz1' 'int'
    `-ForStmt 0x7fd209094900 <line:14:5, line:23:5>
      |-BinaryOperator 0x7fd209093f38 <line:14:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7fd209093ee0 <col:10> 'int' lvalue Var 0x7fd209093b30 'ix' 'int'
      | `-ImplicitCastExpr 0x7fd209093f20 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fd209093f00 <col:14> 'int' lvalue ParmVar 0x7fd209091e70 'startx1' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7fd209093fc8 <col:23, col:26> 'int' '<'
      | |-ImplicitCastExpr 0x7fd209093f98 <col:23> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fd209093f58 <col:23> 'int' lvalue Var 0x7fd209093b30 'ix' 'int'
      | `-ImplicitCastExpr 0x7fd209093fb0 <col:26> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fd209093f78 <col:26> 'int' lvalue ParmVar 0x7fd209091ef0 'stopx1' 'int'
      |-CompoundAssignOperator 0x7fd209094040 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7fd209093fe8 <col:34> 'int' lvalue Var 0x7fd209093b30 'ix' 'int'
      | `-ImplicitCastExpr 0x7fd209094028 <col:39> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fd209094008 <col:39> 'int' lvalue ParmVar 0x7fd209091f70 'stepx1' 'int'
      `-CompoundStmt 0x7fd2090948d0 <col:48, line:23:5>
        |-BinaryOperator 0x7fd2090940c8 <line:15:9, col:14> 'int' '='
        | |-DeclRefExpr 0x7fd209094070 <col:9> 'int' lvalue Var 0x7fd209093cb0 'jy' 'int'
        | `-ImplicitCastExpr 0x7fd2090940b0 <col:14> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x7fd209094090 <col:14> 'int' lvalue ParmVar 0x7fd209092170 'starty' 'int'
        |-BinaryOperator 0x7fd209094140 <line:16:9, col:14> 'int' '='
        | |-DeclRefExpr 0x7fd2090940e8 <col:9> 'int' lvalue Var 0x7fd209093db0 'jz' 'int'
        | `-ImplicitCastExpr 0x7fd209094128 <col:14> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x7fd209094108 <col:14> 'int' lvalue ParmVar 0x7fd209092470 'startz2' 'int'
        |-ForStmt 0x7fd2090947c8 <line:17:9, line:21:9>
        | |-BinaryOperator 0x7fd2090941b8 <line:17:14, col:18> 'int' '='
        | | |-DeclRefExpr 0x7fd209094160 <col:14> 'int' lvalue Var 0x7fd209093bb0 'jx' 'int'
        | | `-ImplicitCastExpr 0x7fd2090941a0 <col:18> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fd209094180 <col:18> 'int' lvalue ParmVar 0x7fd209091ff0 'startx2' 'int'
        | |-<<<NULL>>>
        | |-BinaryOperator 0x7fd209094248 <col:27, col:30> 'int' '<'
        | | |-ImplicitCastExpr 0x7fd209094218 <col:27> 'int' <LValueToRValue>
        | | | `-DeclRefExpr 0x7fd2090941d8 <col:27> 'int' lvalue Var 0x7fd209093bb0 'jx' 'int'
        | | `-ImplicitCastExpr 0x7fd209094230 <col:30> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fd2090941f8 <col:30> 'int' lvalue ParmVar 0x7fd209092070 'stopx2' 'int'
        | |-CompoundAssignOperator 0x7fd2090942c0 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
        | | |-DeclRefExpr 0x7fd209094268 <col:38> 'int' lvalue Var 0x7fd209093bb0 'jx' 'int'
        | | `-ImplicitCastExpr 0x7fd2090942a8 <col:43> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fd209094288 <col:43> 'int' lvalue ParmVar 0x7fd2090920f0 'stepx2' 'int'
        | `-CompoundStmt 0x7fd2090947a0 <col:52, line:21:9>
        |   |-BinaryOperator 0x7fd2090945d0 <line:18:6, col:34> 'double' '='
        |   | |-ArraySubscriptExpr 0x7fd2090943d0 <col:6, col:14> 'double' lvalue
        |   | | |-ImplicitCastExpr 0x7fd2090943a0 <col:6, col:10> 'double *' <ArrayToPointerDecay>
        |   | | | `-ArraySubscriptExpr 0x7fd209094360 <col:6, col:10> 'double [mz]' lvalue
        |   | | |   |-ImplicitCastExpr 0x7fd209094330 <col:6> 'double (*)[mz]':'double (*)[mz]' <LValueToRValue>
        |   | | |   | `-DeclRefExpr 0x7fd2090942f0 <col:6> 'double (*)[mz]':'double (*)[mz]' lvalue ParmVar 0x7fd209091df0 'z' 'double (*)[mz]':'double (*)[mz]'
        |   | | |   `-ImplicitCastExpr 0x7fd209094348 <col:8> 'int' <LValueToRValue>
        |   | | |     `-DeclRefExpr 0x7fd209094310 <col:8> 'int' lvalue Var 0x7fd209093d30 'iz' 'int'
        |   | | `-ImplicitCastExpr 0x7fd2090943b8 <col:12> 'int' <LValueToRValue>
        |   | |   `-DeclRefExpr 0x7fd209094380 <col:12> 'int' lvalue Var 0x7fd209093db0 'jz' 'int'
        |   | `-BinaryOperator 0x7fd2090945b0 <col:18, col:34> 'double' '*'
        |   |   |-ImplicitCastExpr 0x7fd209094580 <col:18, col:26> 'double' <LValueToRValue>
        |   |   | `-ArraySubscriptExpr 0x7fd2090944d0 <col:18, col:26> 'double' lvalue
        |   |   |   |-ImplicitCastExpr 0x7fd2090944a0 <col:18, col:22> 'double *' <ArrayToPointerDecay>
        |   |   |   | `-ArraySubscriptExpr 0x7fd209094460 <col:18, col:22> 'double [mx]' lvalue
        |   |   |   |   |-ImplicitCastExpr 0x7fd209094430 <col:18> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
        |   |   |   |   | `-DeclRefExpr 0x7fd2090943f0 <col:18> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7fd209091a70 'x' 'double (*)[mx]':'double (*)[mx]'
        |   |   |   |   `-ImplicitCastExpr 0x7fd209094448 <col:20> 'int' <LValueToRValue>
        |   |   |   |     `-DeclRefExpr 0x7fd209094410 <col:20> 'int' lvalue Var 0x7fd209093b30 'ix' 'int'
        |   |   |   `-ImplicitCastExpr 0x7fd2090944b8 <col:24> 'int' <LValueToRValue>
        |   |   |     `-DeclRefExpr 0x7fd209094480 <col:24> 'int' lvalue Var 0x7fd209093bb0 'jx' 'int'
        |   |   `-ImplicitCastExpr 0x7fd209094598 <col:30, col:34> 'double' <LValueToRValue>
        |   |     `-ArraySubscriptExpr 0x7fd209094560 <col:30, col:34> 'double' lvalue
        |   |       |-ImplicitCastExpr 0x7fd209094530 <col:30> 'double *':'double *' <LValueToRValue>
        |   |       | `-DeclRefExpr 0x7fd2090944f0 <col:30> 'double *':'double *' lvalue ParmVar 0x7fd209091bf0 'y' 'double *':'double *'
        |   |       `-ImplicitCastExpr 0x7fd209094548 <col:32> 'int' <LValueToRValue>
        |   |         `-DeclRefExpr 0x7fd209094510 <col:32> 'int' lvalue Var 0x7fd209093cb0 'jy' 'int'
        |   |-BinaryOperator 0x7fd2090946b0 <line:19:6, col:16> 'int' '='
        |   | |-DeclRefExpr 0x7fd209094600 <col:6> 'int' lvalue Var 0x7fd209093cb0 'jy' 'int'
        |   | `-BinaryOperator 0x7fd209094690 <col:11, col:16> 'int' '+'
        |   |   |-ImplicitCastExpr 0x7fd209094660 <col:11> 'int' <LValueToRValue>
        |   |   | `-DeclRefExpr 0x7fd209094620 <col:11> 'int' lvalue Var 0x7fd209093cb0 'jy' 'int'
        |   |   `-ImplicitCastExpr 0x7fd209094678 <col:16> 'int' <LValueToRValue>
        |   |     `-DeclRefExpr 0x7fd209094640 <col:16> 'int' lvalue ParmVar 0x7fd209092270 'stepy' 'int'
        |   `-BinaryOperator 0x7fd209094780 <line:20:6, col:16> 'int' '='
        |     |-DeclRefExpr 0x7fd2090946d0 <col:6> 'int' lvalue Var 0x7fd209093db0 'jz' 'int'
        |     `-BinaryOperator 0x7fd209094760 <col:11, col:16> 'int' '+'
        |       |-ImplicitCastExpr 0x7fd209094730 <col:11> 'int' <LValueToRValue>
        |       | `-DeclRefExpr 0x7fd2090946f0 <col:11> 'int' lvalue Var 0x7fd209093db0 'jz' 'int'
        |       `-ImplicitCastExpr 0x7fd209094748 <col:16> 'int' <LValueToRValue>
        |         `-DeclRefExpr 0x7fd209094710 <col:16> 'int' lvalue ParmVar 0x7fd209092570 'stepz2' 'int'
        `-BinaryOperator 0x7fd2090948b0 <line:22:9, col:19> 'int' '='
          |-DeclRefExpr 0x7fd209094800 <col:9> 'int' lvalue Var 0x7fd209093d30 'iz' 'int'
          `-BinaryOperator 0x7fd209094890 <col:14, col:19> 'int' '+'
            |-ImplicitCastExpr 0x7fd209094860 <col:14> 'int' <LValueToRValue>
            | `-DeclRefExpr 0x7fd209094820 <col:14> 'int' lvalue Var 0x7fd209093d30 'iz' 'int'
            `-ImplicitCastExpr 0x7fd209094878 <col:19> 'int' <LValueToRValue>
              `-DeclRefExpr 0x7fd209094840 <col:19> 'int' lvalue ParmVar 0x7fd2090923f0 'stepz1' 'int'
