TranslationUnitDecl 0x7ffa23838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7ffa238394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7ffa238391a0 '__int128'
|-TypedefDecl 0x7ffa23839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7ffa238391c0 'unsigned __int128'
|-TypedefDecl 0x7ffa238397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7ffa238395f0 'struct __NSConstantString_tag'
|   `-Record 0x7ffa23839568 '__NSConstantString_tag'
|-TypedefDecl 0x7ffa23839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7ffa23839850 'char *'
|   `-BuiltinType 0x7ffa23838ca0 'char'
|-TypedefDecl 0x7ffa23839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7ffa23839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7ffa23839970 'struct __va_list_tag'
|     `-Record 0x7ffa238398e8 '__va_list_tag'
`-FunctionDecl 0x7ffa23890938 <./tree_src/storeSectVector_SetSectVecSca.c:3:1, line:10:1> line:3:6 SetSectVecSca 'void (double, double *, int, int, int)'
  |-ParmVarDecl 0x7ffa23890600 <line:4:5, col:12> col:12 used x 'double'
  |-ParmVarDecl 0x7ffa238906b0 <col:15, col:23> col:23 used z 'double *'
  |-ParmVarDecl 0x7ffa23890730 <col:26, col:30> col:30 used startz 'int'
  |-ParmVarDecl 0x7ffa238907b0 <col:38, col:42> col:42 used stopz 'int'
  |-ParmVarDecl 0x7ffa23890830 <col:49, col:53> col:53 used stepz 'int'
  `-CompoundStmt 0x7ffa23890da8 <col:61, line:10:1>
    |-DeclStmt 0x7ffa23890ac8 <line:6:5, col:10>
    | `-VarDecl 0x7ffa23890a60 <col:5, col:9> col:9 used i 'int'
    `-ForStmt 0x7ffa23890d70 <line:7:5, line:9:5>
      |-BinaryOperator 0x7ffa23890b38 <line:7:10, col:12> 'int' '='
      | |-DeclRefExpr 0x7ffa23890ae0 <col:10> 'int' lvalue Var 0x7ffa23890a60 'i' 'int'
      | `-ImplicitCastExpr 0x7ffa23890b20 <col:12> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7ffa23890b00 <col:12> 'int' lvalue ParmVar 0x7ffa23890730 'startz' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7ffa23890bc8 <col:20, col:22> 'int' '<'
      | |-ImplicitCastExpr 0x7ffa23890b98 <col:20> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7ffa23890b58 <col:20> 'int' lvalue Var 0x7ffa23890a60 'i' 'int'
      | `-ImplicitCastExpr 0x7ffa23890bb0 <col:22> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7ffa23890b78 <col:22> 'int' lvalue ParmVar 0x7ffa238907b0 'stopz' 'int'
      |-CompoundAssignOperator 0x7ffa23890c40 <col:29, col:33> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7ffa23890be8 <col:29> 'int' lvalue Var 0x7ffa23890a60 'i' 'int'
      | `-ImplicitCastExpr 0x7ffa23890c28 <col:33> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7ffa23890c08 <col:33> 'int' lvalue ParmVar 0x7ffa23890830 'stepz' 'int'
      `-CompoundStmt 0x7ffa23890d58 <col:41, line:9:5>
        `-BinaryOperator 0x7ffa23890d38 <line:8:9, col:16> 'double' '='
          |-ArraySubscriptExpr 0x7ffa23890ce0 <col:9, col:12> 'double' lvalue
          | |-ImplicitCastExpr 0x7ffa23890cb0 <col:9> 'double *' <LValueToRValue>
          | | `-DeclRefExpr 0x7ffa23890c70 <col:9> 'double *' lvalue ParmVar 0x7ffa238906b0 'z' 'double *'
          | `-ImplicitCastExpr 0x7ffa23890cc8 <col:11> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x7ffa23890c90 <col:11> 'int' lvalue Var 0x7ffa23890a60 'i' 'int'
          `-ImplicitCastExpr 0x7ffa23890d20 <col:16> 'double' <LValueToRValue>
            `-DeclRefExpr 0x7ffa23890d00 <col:16> 'double' lvalue ParmVar 0x7ffa23890600 'x' 'double'
