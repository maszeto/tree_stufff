TranslationUnitDecl 0x7fe6ab838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fe6ab8394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fe6ab8391a0 '__int128'
|-TypedefDecl 0x7fe6ab839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fe6ab8391c0 'unsigned __int128'
|-TypedefDecl 0x7fe6ab8397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fe6ab8395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fe6ab839568 '__NSConstantString_tag'
|-TypedefDecl 0x7fe6ab839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fe6ab839850 'char *'
|   `-BuiltinType 0x7fe6ab838ca0 'char'
|-TypedefDecl 0x7fe6ab839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fe6ab839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fe6ab839970 'struct __va_list_tag'
|     `-Record 0x7fe6ab8398e8 '__va_list_tag'
|-TypedefDecl 0x7fe6ac02f200 <./tree_src/unarySectMatrix_ProdSectLastMat.c:4:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fe6ab838d60 'unsigned char'
`-FunctionDecl 0x7fe6ac02fe18 <line:11:1, line:27:1> line:11:6 ProdSectLastMat 'void (int, int, int, double (*)[mx], double *, int, int, int, int, int, int, int, int, int)'
  |-ParmVarDecl 0x7fe6ac02f270 <line:12:5, col:9> col:9 used nx 'int'
  |-ParmVarDecl 0x7fe6ac02f2f0 <col:13, col:17> col:17 used mx 'int'
  |-ParmVarDecl 0x7fe6ac02f370 <col:21, col:25> col:25 used nz 'int'
  |-ParmVarDecl 0x7fe6ac02f570 <col:29, col:44> col:36 used x 'double (*)[mx]':'double (*)[mx]'
  |-ParmVarDecl 0x7fe6ac02f6f0 <col:47, col:58> col:54 used z 'double *':'double *'
  |-ParmVarDecl 0x7fe6ac02f770 <line:13:5, col:9> col:9 used startx1 'int'
  |-ParmVarDecl 0x7fe6ac02f7f0 <col:18, col:22> col:22 used stopx1 'int'
  |-ParmVarDecl 0x7fe6ac02f870 <col:30, col:34> col:34 used stepx1 'int'
  |-ParmVarDecl 0x7fe6ac02f8f0 <col:42, col:46> col:46 used startx2 'int'
  |-ParmVarDecl 0x7fe6ac02f970 <col:55, col:59> col:59 used stopx2 'int'
  |-ParmVarDecl 0x7fe6ac02f9f0 <col:67, col:71> col:71 used stepx2 'int'
  |-ParmVarDecl 0x7fe6ac02fa70 <line:14:5, col:9> col:9 used startz 'int'
  |-ParmVarDecl 0x7fe6ac02faf0 <col:17, col:21> col:21 stopz 'int'
  |-ParmVarDecl 0x7fe6ac02fb70 <col:28, col:32> col:32 used stepz 'int'
  `-CompoundStmt 0x7fe6ac032a68 <col:40, line:27:1>
    |-DeclStmt 0x7fe6ac032230 <line:16:5, col:27>
    | |-VarDecl 0x7fe6ac02ff88 <col:5, col:9> col:9 used ix 'int'
    | |-VarDecl 0x7fe6ac030008 <col:5, col:13> col:13 used jx 'int'
    | |-VarDecl 0x7fe6ac030088 <col:5, col:17> col:17 iy 'int'
    | |-VarDecl 0x7fe6ac030108 <col:5, col:21> col:21 jy 'int'
    | `-VarDecl 0x7fe6ac030188 <col:5, col:25> col:25 used iz 'int'
    |-DeclStmt 0x7fe6ac0322c8 <line:17:5, col:15>
    | `-VarDecl 0x7fe6ac032260 <col:5, col:12> col:12 used val 'double'
    |-BinaryOperator 0x7fe6ac032338 <line:18:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7fe6ac0322e0 <col:5> 'int' lvalue Var 0x7fe6ac030188 'iz' 'int'
    | `-ImplicitCastExpr 0x7fe6ac032320 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7fe6ac032300 <col:10> 'int' lvalue ParmVar 0x7fe6ac02fa70 'startz' 'int'
    `-ForStmt 0x7fe6ac032a30 <line:19:5, line:26:5>
      |-BinaryOperator 0x7fe6ac0323b0 <line:19:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7fe6ac032358 <col:10> 'int' lvalue Var 0x7fe6ac02ff88 'ix' 'int'
      | `-ImplicitCastExpr 0x7fe6ac032398 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fe6ac032378 <col:14> 'int' lvalue ParmVar 0x7fe6ac02f770 'startx1' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7fe6ac032440 <col:23, col:26> 'int' '<'
      | |-ImplicitCastExpr 0x7fe6ac032410 <col:23> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fe6ac0323d0 <col:23> 'int' lvalue Var 0x7fe6ac02ff88 'ix' 'int'
      | `-ImplicitCastExpr 0x7fe6ac032428 <col:26> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fe6ac0323f0 <col:26> 'int' lvalue ParmVar 0x7fe6ac02f7f0 'stopx1' 'int'
      |-CompoundAssignOperator 0x7fe6ac0324b8 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7fe6ac032460 <col:34> 'int' lvalue Var 0x7fe6ac02ff88 'ix' 'int'
      | `-ImplicitCastExpr 0x7fe6ac0324a0 <col:39> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fe6ac032480 <col:39> 'int' lvalue ParmVar 0x7fe6ac02f870 'stepx1' 'int'
      `-CompoundStmt 0x7fe6ac032a08 <col:48, line:26:5>
        |-ForStmt 0x7fe6ac032860 <line:21:9, line:23:9>
        | |-BinaryOperator 0x7fe6ac032560 <line:21:14, col:18> 'int' '='
        | | |-DeclRefExpr 0x7fe6ac032508 <col:14> 'int' lvalue Var 0x7fe6ac030008 'jx' 'int'
        | | `-ImplicitCastExpr 0x7fe6ac032548 <col:18> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fe6ac032528 <col:18> 'int' lvalue ParmVar 0x7fe6ac02f8f0 'startx2' 'int'
        | |-<<<NULL>>>
        | |-BinaryOperator 0x7fe6ac0325f0 <col:27, col:30> 'int' '<'
        | | |-ImplicitCastExpr 0x7fe6ac0325c0 <col:27> 'int' <LValueToRValue>
        | | | `-DeclRefExpr 0x7fe6ac032580 <col:27> 'int' lvalue Var 0x7fe6ac030008 'jx' 'int'
        | | `-ImplicitCastExpr 0x7fe6ac0325d8 <col:30> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fe6ac0325a0 <col:30> 'int' lvalue ParmVar 0x7fe6ac02f970 'stopx2' 'int'
        | |-CompoundAssignOperator 0x7fe6ac032668 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
        | | |-DeclRefExpr 0x7fe6ac032610 <col:38> 'int' lvalue Var 0x7fe6ac030008 'jx' 'int'
        | | `-ImplicitCastExpr 0x7fe6ac032650 <col:43> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fe6ac032630 <col:43> 'int' lvalue ParmVar 0x7fe6ac02f9f0 'stepx2' 'int'
        | `-CompoundStmt 0x7fe6ac032848 <col:52, line:23:9>
        |   `-BinaryOperator 0x7fe6ac032828 <line:22:13, col:33> 'double' '='
        |     |-DeclRefExpr 0x7fe6ac032698 <col:13> 'double' lvalue Var 0x7fe6ac032260 'val' 'double'
        |     `-BinaryOperator 0x7fe6ac032808 <col:19, col:33> 'double' '*'
        |       |-ImplicitCastExpr 0x7fe6ac0327d8 <col:19> 'double' <LValueToRValue>
        |       | `-DeclRefExpr 0x7fe6ac0326b8 <col:19> 'double' lvalue Var 0x7fe6ac032260 'val' 'double'
        |       `-ImplicitCastExpr 0x7fe6ac0327f0 <col:25, col:33> 'double' <LValueToRValue>
        |         `-ArraySubscriptExpr 0x7fe6ac0327b8 <col:25, col:33> 'double' lvalue
        |           |-ImplicitCastExpr 0x7fe6ac032788 <col:25, col:29> 'double *' <ArrayToPointerDecay>
        |           | `-ArraySubscriptExpr 0x7fe6ac032748 <col:25, col:29> 'double [mx]' lvalue
        |           |   |-ImplicitCastExpr 0x7fe6ac032718 <col:25> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
        |           |   | `-DeclRefExpr 0x7fe6ac0326d8 <col:25> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7fe6ac02f570 'x' 'double (*)[mx]':'double (*)[mx]'
        |           |   `-ImplicitCastExpr 0x7fe6ac032730 <col:27> 'int' <LValueToRValue>
        |           |     `-DeclRefExpr 0x7fe6ac0326f8 <col:27> 'int' lvalue Var 0x7fe6ac02ff88 'ix' 'int'
        |           `-ImplicitCastExpr 0x7fe6ac0327a0 <col:31> 'int' <LValueToRValue>
        |             `-DeclRefExpr 0x7fe6ac032768 <col:31> 'int' lvalue Var 0x7fe6ac030008 'jx' 'int'
        |-BinaryOperator 0x7fe6ac032960 <line:24:9, col:17> 'double' '='
        | |-ArraySubscriptExpr 0x7fe6ac032908 <col:9, col:13> 'double' lvalue
        | | |-ImplicitCastExpr 0x7fe6ac0328d8 <col:9> 'double *':'double *' <LValueToRValue>
        | | | `-DeclRefExpr 0x7fe6ac032898 <col:9> 'double *':'double *' lvalue ParmVar 0x7fe6ac02f6f0 'z' 'double *':'double *'
        | | `-ImplicitCastExpr 0x7fe6ac0328f0 <col:11> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fe6ac0328b8 <col:11> 'int' lvalue Var 0x7fe6ac030188 'iz' 'int'
        | `-ImplicitCastExpr 0x7fe6ac032948 <col:17> 'double' <LValueToRValue>
        |   `-DeclRefExpr 0x7fe6ac032928 <col:17> 'double' lvalue Var 0x7fe6ac032260 'val' 'double'
        `-CompoundAssignOperator 0x7fe6ac0329d8 <line:25:9, col:15> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
          |-DeclRefExpr 0x7fe6ac032980 <col:9> 'int' lvalue Var 0x7fe6ac030188 'iz' 'int'
          `-ImplicitCastExpr 0x7fe6ac0329c0 <col:15> 'int' <LValueToRValue>
            `-DeclRefExpr 0x7fe6ac0329a0 <col:15> 'int' lvalue ParmVar 0x7fe6ac02fb70 'stepz' 'int'
