TranslationUnitDecl 0x7ffac780c208 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7ffac780caa0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7ffac780c7a0 '__int128'
|-TypedefDecl 0x7ffac780cb10 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7ffac780c7c0 'unsigned __int128'
|-TypedefDecl 0x7ffac780cdf8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7ffac780cbf0 'struct __NSConstantString_tag'
|   `-Record 0x7ffac780cb68 '__NSConstantString_tag'
|-TypedefDecl 0x7ffac780ce90 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7ffac780ce50 'char *'
|   `-BuiltinType 0x7ffac780c2a0 'char'
|-TypedefDecl 0x7ffac780d168 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7ffac780d110 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7ffac780cf70 'struct __va_list_tag'
|     `-Record 0x7ffac780cee8 '__va_list_tag'
|-TypedefDecl 0x7ffacb008200 <./tree_src/unarySectMatrix_SumSuffixSectLastMat.c:4:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7ffac780c360 'unsigned char'
`-FunctionDecl 0x7ffac800c600 <line:11:1, line:25:1> line:11:6 SumSuffixSectLastMat 'void (int, int, int, int, double (*)[mx], double (*)[my], int, int, int, int, int, int, int, int, int, int, int, int)'
  |-ParmVarDecl 0x7ffacb008270 <line:12:5, col:9> col:9 used nx 'int'
  |-ParmVarDecl 0x7ffacb0082f0 <col:13, col:17> col:17 used mx 'int'
  |-ParmVarDecl 0x7ffacb008370 <col:21, col:25> col:25 used ny 'int'
  |-ParmVarDecl 0x7ffacb0083f0 <col:29, col:33> col:33 used my 'int'
  |-ParmVarDecl 0x7ffacb0085f0 <col:37, col:52> col:44 used x 'double (*)[mx]':'double (*)[mx]'
  |-ParmVarDecl 0x7ffacb0087f0 <col:55, col:70> col:62 used y 'double (*)[my]':'double (*)[my]'
  |-ParmVarDecl 0x7ffacb008870 <line:13:5, col:9> col:9 used startx1 'int'
  |-ParmVarDecl 0x7ffacb0088f0 <col:18, col:22> col:22 used stopx1 'int'
  |-ParmVarDecl 0x7ffacb008970 <col:30, col:34> col:34 used stepx1 'int'
  |-ParmVarDecl 0x7ffacb0089f0 <col:42, col:46> col:46 used startx2 'int'
  |-ParmVarDecl 0x7ffacb008a70 <col:55, col:59> col:59 used stopx2 'int'
  |-ParmVarDecl 0x7ffacb008af0 <col:67, col:71> col:71 used stepx2 'int'
  |-ParmVarDecl 0x7ffacb008b70 <line:14:5, col:9> col:9 used starty1 'int'
  |-ParmVarDecl 0x7ffacb008bf0 <col:18, col:22> col:22 stopy1 'int'
  |-ParmVarDecl 0x7ffacb008c70 <col:30, col:34> col:34 stepy1 'int'
  |-ParmVarDecl 0x7ffacb008cf0 <col:42, col:46> col:46 used starty2 'int'
  |-ParmVarDecl 0x7ffacb008d70 <col:55, col:59> col:59 used stopy2 'int'
  |-ParmVarDecl 0x7ffacb008df0 <col:67, col:71> col:71 stepy2 'int'
  `-CompoundStmt 0x7ffac800d4e0 <col:79, line:25:1>
    |-DeclStmt 0x7ffac800c9a0 <line:16:5, col:23>
    | |-VarDecl 0x7ffac800c790 <col:5, col:9> col:9 used ix 'int'
    | |-VarDecl 0x7ffac800c810 <col:5, col:13> col:13 used jx 'int'
    | |-VarDecl 0x7ffac800c890 <col:5, col:17> col:17 used iy 'int'
    | `-VarDecl 0x7ffac800c910 <col:5, col:21> col:21 used jy 'int'
    |-BinaryOperator 0x7ffac800ca10 <line:17:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7ffac800c9b8 <col:5> 'int' lvalue Var 0x7ffac800c890 'iy' 'int'
    | `-ImplicitCastExpr 0x7ffac800c9f8 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7ffac800c9d8 <col:10> 'int' lvalue ParmVar 0x7ffacb008b70 'starty1' 'int'
    `-ForStmt 0x7ffac800d4a8 <line:18:5, line:24:5>
      |-BinaryOperator 0x7ffac800ca88 <line:18:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7ffac800ca30 <col:10> 'int' lvalue Var 0x7ffac800c790 'ix' 'int'
      | `-ImplicitCastExpr 0x7ffac800ca70 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7ffac800ca50 <col:14> 'int' lvalue ParmVar 0x7ffacb008870 'startx1' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7ffac800cb18 <col:23, col:26> 'int' '<'
      | |-ImplicitCastExpr 0x7ffac800cae8 <col:23> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7ffac800caa8 <col:23> 'int' lvalue Var 0x7ffac800c790 'ix' 'int'
      | `-ImplicitCastExpr 0x7ffac800cb00 <col:26> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7ffac800cac8 <col:26> 'int' lvalue ParmVar 0x7ffacb0088f0 'stopx1' 'int'
      |-CompoundAssignOperator 0x7ffac800cb90 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7ffac800cb38 <col:34> 'int' lvalue Var 0x7ffac800c790 'ix' 'int'
      | `-ImplicitCastExpr 0x7ffac800cb78 <col:39> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7ffac800cb58 <col:39> 'int' lvalue ParmVar 0x7ffacb008970 'stepx1' 'int'
      `-CompoundStmt 0x7ffac800d480 <col:48, line:24:5>
        |-BinaryOperator 0x7ffac800ce00 <line:19:9, col:37> 'double' '='
        | |-ArraySubscriptExpr 0x7ffac800ccc8 <col:9, col:21> 'double' lvalue
        | | |-ImplicitCastExpr 0x7ffac800cc98 <col:9, col:13> 'double *' <ArrayToPointerDecay>
        | | | `-ArraySubscriptExpr 0x7ffac800cc30 <col:9, col:13> 'double [my]' lvalue
        | | |   |-ImplicitCastExpr 0x7ffac800cc00 <col:9> 'double (*)[my]':'double (*)[my]' <LValueToRValue>
        | | |   | `-DeclRefExpr 0x7ffac800cbc0 <col:9> 'double (*)[my]':'double (*)[my]' lvalue ParmVar 0x7ffacb0087f0 'y' 'double (*)[my]':'double (*)[my]'
        | | |   `-ImplicitCastExpr 0x7ffac800cc18 <col:11> 'int' <LValueToRValue>
        | | |     `-DeclRefExpr 0x7ffac800cbe0 <col:11> 'int' lvalue Var 0x7ffac800c890 'iy' 'int'
        | | `-ImplicitCastExpr 0x7ffac800ccb0 <col:15> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7ffac800cc50 <col:15> 'int' lvalue ParmVar 0x7ffacb008d70 'stopy2' 'int'
        | `-ImplicitCastExpr 0x7ffac800cde8 <col:25, col:37> 'double' <LValueToRValue>
        |   `-ArraySubscriptExpr 0x7ffac800cdc8 <col:25, col:37> 'double' lvalue
        |     |-ImplicitCastExpr 0x7ffac800cd98 <col:25, col:29> 'double *' <ArrayToPointerDecay>
        |     | `-ArraySubscriptExpr 0x7ffac800cd58 <col:25, col:29> 'double [mx]' lvalue
        |     |   |-ImplicitCastExpr 0x7ffac800cd28 <col:25> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
        |     |   | `-DeclRefExpr 0x7ffac800cce8 <col:25> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7ffacb0085f0 'x' 'double (*)[mx]':'double (*)[mx]'
        |     |   `-ImplicitCastExpr 0x7ffac800cd40 <col:27> 'int' <LValueToRValue>
        |     |     `-DeclRefExpr 0x7ffac800cd08 <col:27> 'int' lvalue Var 0x7ffac800c790 'ix' 'int'
        |     `-ImplicitCastExpr 0x7ffac800cdb0 <col:31> 'int' <LValueToRValue>
        |       `-DeclRefExpr 0x7ffac800cd78 <col:31> 'int' lvalue ParmVar 0x7ffacb008a70 'stopx2' 'int'
        |-BinaryOperator 0x7ffac800ce78 <line:20:9, col:14> 'int' '='
        | |-DeclRefExpr 0x7ffac800ce20 <col:9> 'int' lvalue Var 0x7ffac800c910 'jy' 'int'
        | `-ImplicitCastExpr 0x7ffac800ce60 <col:14> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x7ffac800ce40 <col:14> 'int' lvalue ParmVar 0x7ffacb008cf0 'starty2' 'int'
        `-ForStmt 0x7ffac800d448 <line:21:9, line:23:9>
          |-BinaryOperator 0x7ffac800cf30 <line:21:14, col:25> 'int' '='
          | |-DeclRefExpr 0x7ffac800ce98 <col:14> 'int' lvalue Var 0x7ffac800c810 'jx' 'int'
          | `-BinaryOperator 0x7ffac800cf10 <col:18, col:25> 'int' '-'
          |   |-ImplicitCastExpr 0x7ffac800cef8 <col:18> 'int' <LValueToRValue>
          |   | `-DeclRefExpr 0x7ffac800ceb8 <col:18> 'int' lvalue ParmVar 0x7ffacb008a70 'stopx2' 'int'
          |   `-IntegerLiteral 0x7ffac800ced8 <col:25> 'int' 1
          |-<<<NULL>>>
          |-BinaryOperator 0x7ffac800cfc0 <col:28, col:31> 'int' '<'
          | |-ImplicitCastExpr 0x7ffac800cf90 <col:28> 'int' <LValueToRValue>
          | | `-DeclRefExpr 0x7ffac800cf50 <col:28> 'int' lvalue Var 0x7ffac800c810 'jx' 'int'
          | `-ImplicitCastExpr 0x7ffac800cfa8 <col:31> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x7ffac800cf70 <col:31> 'int' lvalue ParmVar 0x7ffacb0089f0 'startx2' 'int'
          |-CompoundAssignOperator 0x7ffac800d050 <col:40, col:46> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
          | |-DeclRefExpr 0x7ffac800cfe0 <col:40> 'int' lvalue Var 0x7ffac800c810 'jx' 'int'
          | `-UnaryOperator 0x7ffac800d038 <col:45, col:46> 'int' prefix '-'
          |   `-ImplicitCastExpr 0x7ffac800d020 <col:46> 'int' <LValueToRValue>
          |     `-DeclRefExpr 0x7ffac800d000 <col:46> 'int' lvalue ParmVar 0x7ffacb008af0 'stepx2' 'int'
          `-CompoundStmt 0x7ffac800d430 <col:54, line:23:9>
            `-BinaryOperator 0x7ffac800d410 <line:22:13, col:47> 'double' '='
              |-ArraySubscriptExpr 0x7ffac800d160 <col:13, col:21> 'double' lvalue
              | |-ImplicitCastExpr 0x7ffac800d130 <col:13, col:17> 'double *' <ArrayToPointerDecay>
              | | `-ArraySubscriptExpr 0x7ffac800d0f0 <col:13, col:17> 'double [my]' lvalue
              | |   |-ImplicitCastExpr 0x7ffac800d0c0 <col:13> 'double (*)[my]':'double (*)[my]' <LValueToRValue>
              | |   | `-DeclRefExpr 0x7ffac800d080 <col:13> 'double (*)[my]':'double (*)[my]' lvalue ParmVar 0x7ffacb0087f0 'y' 'double (*)[my]':'double (*)[my]'
              | |   `-ImplicitCastExpr 0x7ffac800d0d8 <col:15> 'int' <LValueToRValue>
              | |     `-DeclRefExpr 0x7ffac800d0a0 <col:15> 'int' lvalue Var 0x7ffac800c890 'iy' 'int'
              | `-ImplicitCastExpr 0x7ffac800d148 <col:19> 'int' <LValueToRValue>
              |   `-DeclRefExpr 0x7ffac800d110 <col:19> 'int' lvalue Var 0x7ffac800c910 'jy' 'int'
              `-BinaryOperator 0x7ffac800d3f0 <col:25, col:47> 'double' '+'
                |-ImplicitCastExpr 0x7ffac800d3c0 <col:25, col:35> 'double' <LValueToRValue>
                | `-ArraySubscriptExpr 0x7ffac800d2a0 <col:25, col:35> 'double' lvalue
                |   |-ImplicitCastExpr 0x7ffac800d288 <col:25, col:29> 'double *' <ArrayToPointerDecay>
                |   | `-ArraySubscriptExpr 0x7ffac800d1f0 <col:25, col:29> 'double [my]' lvalue
                |   |   |-ImplicitCastExpr 0x7ffac800d1c0 <col:25> 'double (*)[my]':'double (*)[my]' <LValueToRValue>
                |   |   | `-DeclRefExpr 0x7ffac800d180 <col:25> 'double (*)[my]':'double (*)[my]' lvalue ParmVar 0x7ffacb0087f0 'y' 'double (*)[my]':'double (*)[my]'
                |   |   `-ImplicitCastExpr 0x7ffac800d1d8 <col:27> 'int' <LValueToRValue>
                |   |     `-DeclRefExpr 0x7ffac800d1a0 <col:27> 'int' lvalue Var 0x7ffac800c890 'iy' 'int'
                |   `-BinaryOperator 0x7ffac800d268 <col:31, col:34> 'int' '+'
                |     |-ImplicitCastExpr 0x7ffac800d250 <col:31> 'int' <LValueToRValue>
                |     | `-DeclRefExpr 0x7ffac800d210 <col:31> 'int' lvalue Var 0x7ffac800c910 'jy' 'int'
                |     `-IntegerLiteral 0x7ffac800d230 <col:34> 'int' 1
                `-ImplicitCastExpr 0x7ffac800d3d8 <col:39, col:47> 'double' <LValueToRValue>
                  `-ArraySubscriptExpr 0x7ffac800d3a0 <col:39, col:47> 'double' lvalue
                    |-ImplicitCastExpr 0x7ffac800d370 <col:39, col:43> 'double *' <ArrayToPointerDecay>
                    | `-ArraySubscriptExpr 0x7ffac800d330 <col:39, col:43> 'double [mx]' lvalue
                    |   |-ImplicitCastExpr 0x7ffac800d300 <col:39> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
                    |   | `-DeclRefExpr 0x7ffac800d2c0 <col:39> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7ffacb0085f0 'x' 'double (*)[mx]':'double (*)[mx]'
                    |   `-ImplicitCastExpr 0x7ffac800d318 <col:41> 'int' <LValueToRValue>
                    |     `-DeclRefExpr 0x7ffac800d2e0 <col:41> 'int' lvalue Var 0x7ffac800c790 'ix' 'int'
                    `-ImplicitCastExpr 0x7ffac800d388 <col:45> 'int' <LValueToRValue>
                      `-DeclRefExpr 0x7ffac800d350 <col:45> 'int' lvalue Var 0x7ffac800c810 'jx' 'int'
