TranslationUnitDecl 0x7fbb34038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fbb340394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fbb340391a0 '__int128'
|-TypedefDecl 0x7fbb34039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fbb340391c0 'unsigned __int128'
|-TypedefDecl 0x7fbb340397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fbb340395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fbb34039568 '__NSConstantString_tag'
|-TypedefDecl 0x7fbb34039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fbb34039850 'char *'
|   `-BuiltinType 0x7fbb34038ca0 'char'
|-TypedefDecl 0x7fbb34039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fbb34039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fbb34039970 'struct __va_list_tag'
|     `-Record 0x7fbb340398e8 '__va_list_tag'
|-TypedefDecl 0x7fbb3482f200 <./tree_src/unarySectMatrix_ProdMagSectFirstMat.c:4:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fbb34038d60 'unsigned char'
|-FunctionDecl 0x7fbb3482fe18 <line:11:1, line:27:1> line:11:6 ProdMagSectFirstMat 'void (int, int, int, double (*)[mx], int *, int, int, int, int, int, int, int, int, int)'
| |-ParmVarDecl 0x7fbb3482f270 <line:12:5, col:9> col:9 used nx 'int'
| |-ParmVarDecl 0x7fbb3482f2f0 <col:13, col:17> col:17 used mx 'int'
| |-ParmVarDecl 0x7fbb3482f370 <col:21, col:25> col:25 used nz 'int'
| |-ParmVarDecl 0x7fbb3482f570 <col:29, col:44> col:36 used x 'double (*)[mx]':'double (*)[mx]'
| |-ParmVarDecl 0x7fbb3482f6f0 <col:47, col:55> col:51 used z 'int *':'int *'
| |-ParmVarDecl 0x7fbb3482f770 <line:13:5, col:9> col:9 used startx1 'int'
| |-ParmVarDecl 0x7fbb3482f7f0 <col:18, col:22> col:22 used stopx1 'int'
| |-ParmVarDecl 0x7fbb3482f870 <col:30, col:34> col:34 used stepx1 'int'
| |-ParmVarDecl 0x7fbb3482f8f0 <col:42, col:46> col:46 used startx2 'int'
| |-ParmVarDecl 0x7fbb3482f970 <col:55, col:59> col:59 used stopx2 'int'
| |-ParmVarDecl 0x7fbb3482f9f0 <col:67, col:71> col:71 used stepx2 'int'
| |-ParmVarDecl 0x7fbb3482fa70 <line:14:5, col:9> col:9 used startz 'int'
| |-ParmVarDecl 0x7fbb3482faf0 <col:17, col:21> col:21 stopz 'int'
| |-ParmVarDecl 0x7fbb3482fb70 <col:28, col:32> col:32 used stepz 'int'
| `-CompoundStmt 0x7fbb34832bb0 <col:40, line:27:1>
|   |-DeclStmt 0x7fbb34830110 <line:16:5, col:19>
|   | |-VarDecl 0x7fbb3482ff88 <col:5, col:9> col:9 used ix 'int'
|   | |-VarDecl 0x7fbb34830008 <col:5, col:13> col:13 used jx 'int'
|   | `-VarDecl 0x7fbb34830088 <col:5, col:17> col:17 used iz 'int'
|   |-DeclStmt 0x7fbb348301a8 <line:17:5, col:15>
|   | `-VarDecl 0x7fbb34830140 <col:5, col:12> col:12 used val 'double'
|   |-BinaryOperator 0x7fbb34832218 <line:18:5, col:10> 'int' '='
|   | |-DeclRefExpr 0x7fbb348301c0 <col:5> 'int' lvalue Var 0x7fbb34830088 'iz' 'int'
|   | `-ImplicitCastExpr 0x7fbb34832200 <col:10> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fbb348301e0 <col:10> 'int' lvalue ParmVar 0x7fbb3482fa70 'startz' 'int'
|   `-ForStmt 0x7fbb34832b78 <line:19:5, line:26:5>
|     |-BinaryOperator 0x7fbb34832290 <line:19:10, col:14> 'int' '='
|     | |-DeclRefExpr 0x7fbb34832238 <col:10> 'int' lvalue Var 0x7fbb3482ff88 'ix' 'int'
|     | `-ImplicitCastExpr 0x7fbb34832278 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fbb34832258 <col:14> 'int' lvalue ParmVar 0x7fbb3482f770 'startx1' 'int'
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fbb34832320 <col:23, col:26> 'int' '<'
|     | |-ImplicitCastExpr 0x7fbb348322f0 <col:23> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fbb348322b0 <col:23> 'int' lvalue Var 0x7fbb3482ff88 'ix' 'int'
|     | `-ImplicitCastExpr 0x7fbb34832308 <col:26> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fbb348322d0 <col:26> 'int' lvalue ParmVar 0x7fbb3482f7f0 'stopx1' 'int'
|     |-CompoundAssignOperator 0x7fbb34832398 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     | |-DeclRefExpr 0x7fbb34832340 <col:34> 'int' lvalue Var 0x7fbb3482ff88 'ix' 'int'
|     | `-ImplicitCastExpr 0x7fbb34832380 <col:39> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fbb34832360 <col:39> 'int' lvalue ParmVar 0x7fbb3482f870 'stepx1' 'int'
|     `-CompoundStmt 0x7fbb34832b50 <col:48, line:26:5>
|       |-ForStmt 0x7fbb34832990 <line:21:9, line:23:9>
|       | |-BinaryOperator 0x7fbb34832440 <line:21:14, col:18> 'int' '='
|       | | |-DeclRefExpr 0x7fbb348323e8 <col:14> 'int' lvalue Var 0x7fbb34830008 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7fbb34832428 <col:18> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fbb34832408 <col:18> 'int' lvalue ParmVar 0x7fbb3482f8f0 'startx2' 'int'
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x7fbb348324d0 <col:27, col:30> 'int' '<'
|       | | |-ImplicitCastExpr 0x7fbb348324a0 <col:27> 'int' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7fbb34832460 <col:27> 'int' lvalue Var 0x7fbb34830008 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7fbb348324b8 <col:30> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fbb34832480 <col:30> 'int' lvalue ParmVar 0x7fbb3482f970 'stopx2' 'int'
|       | |-CompoundAssignOperator 0x7fbb34832548 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|       | | |-DeclRefExpr 0x7fbb348324f0 <col:38> 'int' lvalue Var 0x7fbb34830008 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7fbb34832530 <col:43> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fbb34832510 <col:43> 'int' lvalue ParmVar 0x7fbb3482f9f0 'stepx2' 'int'
|       | `-CompoundStmt 0x7fbb34832978 <col:52, line:23:9>
|       |   `-BinaryOperator 0x7fbb34832958 <line:22:13, col:42> 'double' '='
|       |     |-DeclRefExpr 0x7fbb34832578 <col:13> 'double' lvalue Var 0x7fbb34830140 'val' 'double'
|       |     `-BinaryOperator 0x7fbb34832938 <col:19, col:42> 'double' '*'
|       |       |-ImplicitCastExpr 0x7fbb34832920 <col:19> 'double' <LValueToRValue>
|       |       | `-DeclRefExpr 0x7fbb34832598 <col:19> 'double' lvalue Var 0x7fbb34830140 'val' 'double'
|       |       `-CallExpr 0x7fbb348328e0 <col:25, col:42> 'double'
|       |         |-ImplicitCastExpr 0x7fbb348328c8 <col:25> 'double (*)(double)' <FunctionToPointerDecay>
|       |         | `-DeclRefExpr 0x7fbb34832750 <col:25> 'double (double)' Function 0x7fbb348325f0 'fabs' 'double (double)'
|       |         `-ImplicitCastExpr 0x7fbb34832908 <col:32, col:40> 'double' <LValueToRValue>
|       |           `-ArraySubscriptExpr 0x7fbb34832878 <col:32, col:40> 'double' lvalue
|       |             |-ImplicitCastExpr 0x7fbb34832848 <col:32, col:36> 'double *' <ArrayToPointerDecay>
|       |             | `-ArraySubscriptExpr 0x7fbb348327e0 <col:32, col:36> 'double [mx]' lvalue
|       |             |   |-ImplicitCastExpr 0x7fbb348327b0 <col:32> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
|       |             |   | `-DeclRefExpr 0x7fbb34832770 <col:32> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7fbb3482f570 'x' 'double (*)[mx]':'double (*)[mx]'
|       |             |   `-ImplicitCastExpr 0x7fbb348327c8 <col:34> 'int' <LValueToRValue>
|       |             |     `-DeclRefExpr 0x7fbb34832790 <col:34> 'int' lvalue Var 0x7fbb34830008 'jx' 'int'
|       |             `-ImplicitCastExpr 0x7fbb34832860 <col:38> 'int' <LValueToRValue>
|       |               `-DeclRefExpr 0x7fbb34832800 <col:38> 'int' lvalue Var 0x7fbb3482ff88 'ix' 'int'
|       |-BinaryOperator 0x7fbb34832aa8 <line:24:9, col:17> 'int' '='
|       | |-ArraySubscriptExpr 0x7fbb34832a38 <col:9, col:13> 'int' lvalue
|       | | |-ImplicitCastExpr 0x7fbb34832a08 <col:9> 'int *':'int *' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7fbb348329c8 <col:9> 'int *':'int *' lvalue ParmVar 0x7fbb3482f6f0 'z' 'int *':'int *'
|       | | `-ImplicitCastExpr 0x7fbb34832a20 <col:11> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fbb348329e8 <col:11> 'int' lvalue Var 0x7fbb34830088 'iz' 'int'
|       | `-ImplicitCastExpr 0x7fbb34832a90 <col:17> 'int' <FloatingToIntegral>
|       |   `-ImplicitCastExpr 0x7fbb34832a78 <col:17> 'double' <LValueToRValue>
|       |     `-DeclRefExpr 0x7fbb34832a58 <col:17> 'double' lvalue Var 0x7fbb34830140 'val' 'double'
|       `-CompoundAssignOperator 0x7fbb34832b20 <line:25:9, col:15> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|         |-DeclRefExpr 0x7fbb34832ac8 <col:9> 'int' lvalue Var 0x7fbb34830088 'iz' 'int'
|         `-ImplicitCastExpr 0x7fbb34832b08 <col:15> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x7fbb34832ae8 <col:15> 'int' lvalue ParmVar 0x7fbb3482fb70 'stepz' 'int'
`-FunctionDecl 0x7fbb348325f0 <line:22:25> col:25 implicit used fabs 'double (double)' extern
  |-ParmVarDecl 0x7fbb34832690 <<invalid sloc>> <invalid sloc> 'double'
  |-NoThrowAttr 0x7fbb34832700 <col:25> Implicit
  `-ConstAttr 0x7fbb34832740 <col:25> Implicit
