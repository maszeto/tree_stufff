TranslationUnitDecl 0x7f803d838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f803d8394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f803d8391a0 '__int128'
|-TypedefDecl 0x7f803d839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f803d8391c0 'unsigned __int128'
|-TypedefDecl 0x7f803d8397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f803d8395f0 'struct __NSConstantString_tag'
|   `-Record 0x7f803d839568 '__NSConstantString_tag'
|-TypedefDecl 0x7f803d839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f803d839850 'char *'
|   `-BuiltinType 0x7f803d838ca0 'char'
|-TypedefDecl 0x7f803d839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f803d839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f803d839970 'struct __va_list_tag'
|     `-Record 0x7f803d8398e8 '__va_list_tag'
|-TypedefDecl 0x7f803d891600 <./tree_src/extendWholeMatrix_PowWholeScaMat.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7f803d838d60 'unsigned char'
|-FunctionDecl 0x7f803d891da8 <line:6:1, line:15:1> line:6:6 PowWholeScaMat 'void (int, int, double, double (*)[m], double (*)[m])'
| |-ParmVarDecl 0x7f803d891670 <line:7:5, col:9> col:9 used n 'int'
| |-ParmVarDecl 0x7f803d8916f0 <col:12, col:16> col:16 used m 'int'
| |-ParmVarDecl 0x7f803d891770 <col:19, col:26> col:26 used x 'double'
| |-ParmVarDecl 0x7f803d891970 <col:29, col:42> col:36 used y 'double (*)[m]':'double (*)[m]'
| |-ParmVarDecl 0x7f803d891b70 <col:45, col:58> col:52 used z 'double (*)[m]':'double (*)[m]'
| `-CompoundStmt 0x7f803d893820 <col:62, line:15:1>
|   |-DeclStmt 0x7f803d891fd0 <line:9:5, col:13>
|   | |-VarDecl 0x7f803d891ed0 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x7f803d891f50 <col:5, col:12> col:12 used j 'int'
|   `-ForStmt 0x7f803d8937e8 <line:10:5, line:14:5>
|     |-BinaryOperator 0x7f803d892028 <line:10:10, col:13> 'int' '='
|     | |-DeclRefExpr 0x7f803d891fe8 <col:10> 'int' lvalue Var 0x7f803d891ed0 'i' 'int'
|     | `-IntegerLiteral 0x7f803d892008 <col:13> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7f803d8920b8 <col:16, col:18> 'int' '<'
|     | |-ImplicitCastExpr 0x7f803d892088 <col:16> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7f803d892048 <col:16> 'int' lvalue Var 0x7f803d891ed0 'i' 'int'
|     | `-ImplicitCastExpr 0x7f803d8920a0 <col:18> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7f803d892068 <col:18> 'int' lvalue ParmVar 0x7f803d891670 'n' 'int'
|     |-UnaryOperator 0x7f803d8920f8 <col:21, col:22> 'int' postfix '++'
|     | `-DeclRefExpr 0x7f803d8920d8 <col:21> 'int' lvalue Var 0x7f803d891ed0 'i' 'int'
|     `-CompoundStmt 0x7f803d8937d0 <col:27, line:14:5>
|       `-ForStmt 0x7f803d893798 <line:11:9, line:13:9>
|         |-BinaryOperator 0x7f803d892150 <line:11:14, col:17> 'int' '='
|         | |-DeclRefExpr 0x7f803d892110 <col:14> 'int' lvalue Var 0x7f803d891f50 'j' 'int'
|         | `-IntegerLiteral 0x7f803d892130 <col:17> 'int' 0
|         |-<<<NULL>>>
|         |-BinaryOperator 0x7f803d8921e0 <col:20, col:22> 'int' '<'
|         | |-ImplicitCastExpr 0x7f803d8921b0 <col:20> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x7f803d892170 <col:20> 'int' lvalue Var 0x7f803d891f50 'j' 'int'
|         | `-ImplicitCastExpr 0x7f803d8921c8 <col:22> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x7f803d892190 <col:22> 'int' lvalue ParmVar 0x7f803d8916f0 'm' 'int'
|         |-UnaryOperator 0x7f803d892220 <col:25, col:26> 'int' postfix '++'
|         | `-DeclRefExpr 0x7f803d892200 <col:25> 'int' lvalue Var 0x7f803d891f50 'j' 'int'
|         `-CompoundStmt 0x7f803d893780 <col:31, line:13:9>
|           `-BinaryOperator 0x7f803d893760 <line:12:6, col:30> 'double' '='
|             |-ArraySubscriptExpr 0x7f803d892348 <col:6, col:12> 'double' lvalue
|             | |-ImplicitCastExpr 0x7f803d892318 <col:6, col:9> 'double *' <ArrayToPointerDecay>
|             | | `-ArraySubscriptExpr 0x7f803d8922a8 <col:6, col:9> 'double [m]' lvalue
|             | |   |-ImplicitCastExpr 0x7f803d892278 <col:6> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
|             | |   | `-DeclRefExpr 0x7f803d892238 <col:6> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f803d891b70 'z' 'double (*)[m]':'double (*)[m]'
|             | |   `-ImplicitCastExpr 0x7f803d892290 <col:8> 'int' <LValueToRValue>
|             | |     `-DeclRefExpr 0x7f803d892258 <col:8> 'int' lvalue Var 0x7f803d891ed0 'i' 'int'
|             | `-ImplicitCastExpr 0x7f803d892330 <col:11> 'int' <LValueToRValue>
|             |   `-DeclRefExpr 0x7f803d8922c8 <col:11> 'int' lvalue Var 0x7f803d891f50 'j' 'int'
|             `-CallExpr 0x7f803d893700 <col:16, col:30> 'double'
|               |-ImplicitCastExpr 0x7f803d8936e8 <col:16> 'double (*)(double, double)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x7f803d892578 <col:16> 'double (double, double)' Function 0x7f803d8923a8 'pow' 'double (double, double)'
|               |-ImplicitCastExpr 0x7f803d893730 <col:20> 'double' <LValueToRValue>
|               | `-DeclRefExpr 0x7f803d892598 <col:20> 'double' lvalue ParmVar 0x7f803d891770 'x' 'double'
|               `-ImplicitCastExpr 0x7f803d893748 <col:23, col:29> 'double' <LValueToRValue>
|                 `-ArraySubscriptExpr 0x7f803d8936a0 <col:23, col:29> 'double' lvalue
|                   |-ImplicitCastExpr 0x7f803d893670 <col:23, col:26> 'double *' <ArrayToPointerDecay>
|                   | `-ArraySubscriptExpr 0x7f803d893630 <col:23, col:26> 'double [m]' lvalue
|                   |   |-ImplicitCastExpr 0x7f803d893600 <col:23> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
|                   |   | `-DeclRefExpr 0x7f803d8925b8 <col:23> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f803d891970 'y' 'double (*)[m]':'double (*)[m]'
|                   |   `-ImplicitCastExpr 0x7f803d893618 <col:25> 'int' <LValueToRValue>
|                   |     `-DeclRefExpr 0x7f803d8925d8 <col:25> 'int' lvalue Var 0x7f803d891ed0 'i' 'int'
|                   `-ImplicitCastExpr 0x7f803d893688 <col:28> 'int' <LValueToRValue>
|                     `-DeclRefExpr 0x7f803d893650 <col:28> 'int' lvalue Var 0x7f803d891f50 'j' 'int'
`-FunctionDecl 0x7f803d8923a8 <col:16> col:16 implicit used pow 'double (double, double)' extern
  |-ParmVarDecl 0x7f803d892448 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x7f803d8924b0 <<invalid sloc>> <invalid sloc> 'double'
  |-ConstAttr 0x7f803d892528 <col:16> Implicit
  `-NoThrowAttr 0x7f803d892568 <col:16> Implicit
