TranslationUnitDecl 0x7fd475838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fd4758394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fd4758391a0 '__int128'
|-TypedefDecl 0x7fd475839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fd4758391c0 'unsigned __int128'
|-TypedefDecl 0x7fd4758397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fd4758395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fd475839568 '__NSConstantString_tag'
|-TypedefDecl 0x7fd475839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fd475839850 'char *'
|   `-BuiltinType 0x7fd475838ca0 'char'
|-TypedefDecl 0x7fd475839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fd475839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fd475839970 'struct __va_list_tag'
|     `-Record 0x7fd4758398e8 '__va_list_tag'
|-TypedefDecl 0x7fd475891600 <./tree_src/unarySectMatrix_MinMagSectFirstMat.c:4:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fd475838d60 'unsigned char'
|-FunctionDecl 0x7fd475892218 <line:12:1, line:28:1> line:12:6 MinMagSectFirstMat 'void (int, int, int, double (*)[mx], double *, int, int, int, int, int, int, int, int, int)'
| |-ParmVarDecl 0x7fd475891670 <line:13:5, col:9> col:9 used nx 'int'
| |-ParmVarDecl 0x7fd4758916f0 <col:13, col:17> col:17 used mx 'int'
| |-ParmVarDecl 0x7fd475891770 <col:21, col:25> col:25 used nz 'int'
| |-ParmVarDecl 0x7fd475891970 <col:29, col:44> col:36 used x 'double (*)[mx]':'double (*)[mx]'
| |-ParmVarDecl 0x7fd475891af0 <col:47, col:58> col:54 used z 'double *':'double *'
| |-ParmVarDecl 0x7fd475891b70 <line:14:5, col:9> col:9 used startx1 'int'
| |-ParmVarDecl 0x7fd475891bf0 <col:18, col:22> col:22 used stopx1 'int'
| |-ParmVarDecl 0x7fd475891c70 <col:30, col:34> col:34 used stepx1 'int'
| |-ParmVarDecl 0x7fd475891cf0 <col:42, col:46> col:46 used startx2 'int'
| |-ParmVarDecl 0x7fd475891d70 <col:55, col:59> col:59 used stopx2 'int'
| |-ParmVarDecl 0x7fd475891df0 <col:67, col:71> col:71 used stepx2 'int'
| |-ParmVarDecl 0x7fd475891e70 <line:15:5, col:9> col:9 used startz 'int'
| |-ParmVarDecl 0x7fd475891ef0 <col:17, col:21> col:21 stopz 'int'
| |-ParmVarDecl 0x7fd475891f70 <col:28, col:32> col:32 used stepz 'int'
| `-CompoundStmt 0x7fd4758951e8 <col:40, line:28:1>
|   |-DeclStmt 0x7fd475892510 <line:17:5, col:19>
|   | |-VarDecl 0x7fd475892388 <col:5, col:9> col:9 used ix 'int'
|   | |-VarDecl 0x7fd475892408 <col:5, col:13> col:13 used jx 'int'
|   | `-VarDecl 0x7fd475892488 <col:5, col:17> col:17 used iz 'int'
|   |-DeclStmt 0x7fd4758925a8 <line:18:5, col:15>
|   | `-VarDecl 0x7fd475892540 <col:5, col:12> col:12 used val 'double'
|   |-BinaryOperator 0x7fd475894618 <line:19:5, col:10> 'int' '='
|   | |-DeclRefExpr 0x7fd4758925c0 <col:5> 'int' lvalue Var 0x7fd475892488 'iz' 'int'
|   | `-ImplicitCastExpr 0x7fd475894600 <col:10> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fd4758925e0 <col:10> 'int' lvalue ParmVar 0x7fd475891e70 'startz' 'int'
|   `-ForStmt 0x7fd4758951b0 <line:20:5, line:27:5>
|     |-BinaryOperator 0x7fd475894690 <line:20:10, col:14> 'int' '='
|     | |-DeclRefExpr 0x7fd475894638 <col:10> 'int' lvalue Var 0x7fd475892388 'ix' 'int'
|     | `-ImplicitCastExpr 0x7fd475894678 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fd475894658 <col:14> 'int' lvalue ParmVar 0x7fd475891b70 'startx1' 'int'
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fd475894720 <col:23, col:26> 'int' '<'
|     | |-ImplicitCastExpr 0x7fd4758946f0 <col:23> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fd4758946b0 <col:23> 'int' lvalue Var 0x7fd475892388 'ix' 'int'
|     | `-ImplicitCastExpr 0x7fd475894708 <col:26> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fd4758946d0 <col:26> 'int' lvalue ParmVar 0x7fd475891bf0 'stopx1' 'int'
|     |-CompoundAssignOperator 0x7fd475894798 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     | |-DeclRefExpr 0x7fd475894740 <col:34> 'int' lvalue Var 0x7fd475892388 'ix' 'int'
|     | `-ImplicitCastExpr 0x7fd475894780 <col:39> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fd475894760 <col:39> 'int' lvalue ParmVar 0x7fd475891c70 'stepx1' 'int'
|     `-CompoundStmt 0x7fd475895188 <col:48, line:27:5>
|       |-ForStmt 0x7fd475894fe0 <line:22:9, line:24:9>
|       | |-BinaryOperator 0x7fd475894840 <line:22:14, col:18> 'int' '='
|       | | |-DeclRefExpr 0x7fd4758947e8 <col:14> 'int' lvalue Var 0x7fd475892408 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7fd475894828 <col:18> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fd475894808 <col:18> 'int' lvalue ParmVar 0x7fd475891cf0 'startx2' 'int'
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x7fd4758948d0 <col:27, col:30> 'int' '<'
|       | | |-ImplicitCastExpr 0x7fd4758948a0 <col:27> 'int' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7fd475894860 <col:27> 'int' lvalue Var 0x7fd475892408 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7fd4758948b8 <col:30> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fd475894880 <col:30> 'int' lvalue ParmVar 0x7fd475891d70 'stopx2' 'int'
|       | |-CompoundAssignOperator 0x7fd475894948 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|       | | |-DeclRefExpr 0x7fd4758948f0 <col:38> 'int' lvalue Var 0x7fd475892408 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7fd475894930 <col:43> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fd475894910 <col:43> 'int' lvalue ParmVar 0x7fd475891df0 'stepx2' 'int'
|       | `-CompoundStmt 0x7fd475894fc8 <col:52, line:24:9>
|       |   `-BinaryOperator 0x7fd475894fa8 <line:23:13, col:45> 'double' '='
|       |     |-DeclRefExpr 0x7fd475894978 <col:13> 'double' lvalue Var 0x7fd475892540 'val' 'double'
|       |     `-CallExpr 0x7fd475894f60 <col:19, col:45> 'double'
|       |       |-ImplicitCastExpr 0x7fd475894f48 <col:19> 'double (*)(double, double)' <FunctionToPointerDecay>
|       |       | `-DeclRefExpr 0x7fd475894ba8 <col:19> 'double (double, double)' Function 0x7fd4758949d8 'fmin' 'double (double, double)'
|       |       |-ImplicitCastExpr 0x7fd475894f90 <col:25> 'double' <LValueToRValue>
|       |       | `-DeclRefExpr 0x7fd475894bc8 <col:25> 'double' lvalue Var 0x7fd475892540 'val' 'double'
|       |       `-CallExpr 0x7fd475894ee0 <col:30, col:44> 'double'
|       |         |-ImplicitCastExpr 0x7fd475894ec8 <col:30> 'double (*)(double)' <FunctionToPointerDecay>
|       |         | `-DeclRefExpr 0x7fd475894d80 <col:30> 'double (double)' Function 0x7fd475894c20 'fabs' 'double (double)'
|       |         `-ImplicitCastExpr 0x7fd475894f08 <col:35, col:43> 'double' <LValueToRValue>
|       |           `-ArraySubscriptExpr 0x7fd475894e80 <col:35, col:43> 'double' lvalue
|       |             |-ImplicitCastExpr 0x7fd475894e50 <col:35, col:39> 'double *' <ArrayToPointerDecay>
|       |             | `-ArraySubscriptExpr 0x7fd475894e10 <col:35, col:39> 'double [mx]' lvalue
|       |             |   |-ImplicitCastExpr 0x7fd475894de0 <col:35> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
|       |             |   | `-DeclRefExpr 0x7fd475894da0 <col:35> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7fd475891970 'x' 'double (*)[mx]':'double (*)[mx]'
|       |             |   `-ImplicitCastExpr 0x7fd475894df8 <col:37> 'int' <LValueToRValue>
|       |             |     `-DeclRefExpr 0x7fd475894dc0 <col:37> 'int' lvalue Var 0x7fd475892408 'jx' 'int'
|       |             `-ImplicitCastExpr 0x7fd475894e68 <col:41> 'int' <LValueToRValue>
|       |               `-DeclRefExpr 0x7fd475894e30 <col:41> 'int' lvalue Var 0x7fd475892388 'ix' 'int'
|       |-BinaryOperator 0x7fd4758950e0 <line:25:9, col:17> 'double' '='
|       | |-ArraySubscriptExpr 0x7fd475895088 <col:9, col:13> 'double' lvalue
|       | | |-ImplicitCastExpr 0x7fd475895058 <col:9> 'double *':'double *' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7fd475895018 <col:9> 'double *':'double *' lvalue ParmVar 0x7fd475891af0 'z' 'double *':'double *'
|       | | `-ImplicitCastExpr 0x7fd475895070 <col:11> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fd475895038 <col:11> 'int' lvalue Var 0x7fd475892488 'iz' 'int'
|       | `-ImplicitCastExpr 0x7fd4758950c8 <col:17> 'double' <LValueToRValue>
|       |   `-DeclRefExpr 0x7fd4758950a8 <col:17> 'double' lvalue Var 0x7fd475892540 'val' 'double'
|       `-CompoundAssignOperator 0x7fd475895158 <line:26:9, col:15> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|         |-DeclRefExpr 0x7fd475895100 <col:9> 'int' lvalue Var 0x7fd475892488 'iz' 'int'
|         `-ImplicitCastExpr 0x7fd475895140 <col:15> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x7fd475895120 <col:15> 'int' lvalue ParmVar 0x7fd475891f70 'stepz' 'int'
|-FunctionDecl 0x7fd4758949d8 <line:23:19> col:19 implicit used fmin 'double (double, double)' extern
| |-ParmVarDecl 0x7fd475894a78 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x7fd475894ae0 <<invalid sloc>> <invalid sloc> 'double'
| |-NoThrowAttr 0x7fd475894b58 <col:19> Implicit
| `-ConstAttr 0x7fd475894b98 <col:19> Implicit
`-FunctionDecl 0x7fd475894c20 <col:30> col:30 implicit used fabs 'double (double)' extern
  |-ParmVarDecl 0x7fd475894cc0 <<invalid sloc>> <invalid sloc> 'double'
  |-NoThrowAttr 0x7fd475894d30 <col:30> Implicit
  `-ConstAttr 0x7fd475894d70 <col:30> Implicit
