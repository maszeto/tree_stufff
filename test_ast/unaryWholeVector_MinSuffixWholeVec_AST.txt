TranslationUnitDecl 0x7ffde5038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7ffde50394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7ffde50391a0 '__int128'
|-TypedefDecl 0x7ffde5039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7ffde50391c0 'unsigned __int128'
|-TypedefDecl 0x7ffde50397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7ffde50395f0 'struct __NSConstantString_tag'
|   `-Record 0x7ffde5039568 '__NSConstantString_tag'
|-TypedefDecl 0x7ffde5039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7ffde5039850 'char *'
|   `-BuiltinType 0x7ffde5038ca0 'char'
|-TypedefDecl 0x7ffde5039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7ffde5039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7ffde5039970 'struct __va_list_tag'
|     `-Record 0x7ffde50398e8 '__va_list_tag'
|-TypedefDecl 0x7ffde600fc00 <./tree_src/unaryWholeVector_MinSuffixWholeVec.c:4:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7ffde5038d60 'unsigned char'
|-FunctionDecl 0x7ffde6010068 <line:11:1, line:19:1> line:11:6 MinSuffixWholeVec 'void (int, double *, double *)'
| |-ParmVarDecl 0x7ffde600fc70 <line:12:5, col:9> col:9 used n 'int'
| |-ParmVarDecl 0x7ffde600fdf0 <col:12, col:22> col:19 used x 'double *':'double *'
| |-ParmVarDecl 0x7ffde600ff40 <col:25, col:35> col:32 used y 'double *':'double *'
| `-CompoundStmt 0x7ffde6010ac0 <col:39, line:19:1>
|   |-DeclStmt 0x7ffde60101e8 <line:14:5, col:10>
|   | `-VarDecl 0x7ffde6010180 <col:5, col:9> col:9 used i 'int'
|   |-BinaryOperator 0x7ffde60103b8 <line:15:5, col:19> 'double' '='
|   | |-ArraySubscriptExpr 0x7ffde60102b0 <col:5, col:10> 'double' lvalue
|   | | |-ImplicitCastExpr 0x7ffde6010298 <col:5> 'double *':'double *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7ffde6010200 <col:5> 'double *':'double *' lvalue ParmVar 0x7ffde600ff40 'y' 'double *':'double *'
|   | | `-BinaryOperator 0x7ffde6010278 <col:7, col:9> 'int' '-'
|   | |   |-ImplicitCastExpr 0x7ffde6010260 <col:7> 'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x7ffde6010220 <col:7> 'int' lvalue ParmVar 0x7ffde600fc70 'n' 'int'
|   | |   `-IntegerLiteral 0x7ffde6010240 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x7ffde60103a0 <col:14, col:19> 'double' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x7ffde6010380 <col:14, col:19> 'double' lvalue
|   |     |-ImplicitCastExpr 0x7ffde6010368 <col:14> 'double *':'double *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7ffde60102d0 <col:14> 'double *':'double *' lvalue ParmVar 0x7ffde600fdf0 'x' 'double *':'double *'
|   |     `-BinaryOperator 0x7ffde6010348 <col:16, col:18> 'int' '-'
|   |       |-ImplicitCastExpr 0x7ffde6010330 <col:16> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x7ffde60102f0 <col:16> 'int' lvalue ParmVar 0x7ffde600fc70 'n' 'int'
|   |       `-IntegerLiteral 0x7ffde6010310 <col:18> 'int' 1
|   `-ForStmt 0x7ffde6010a88 <line:16:5, line:18:5>
|     |-BinaryOperator 0x7ffde6010470 <line:16:10, col:15> 'int' '='
|     | |-DeclRefExpr 0x7ffde60103d8 <col:10> 'int' lvalue Var 0x7ffde6010180 'i' 'int'
|     | `-BinaryOperator 0x7ffde6010450 <col:13, col:15> 'int' '-'
|     |   |-ImplicitCastExpr 0x7ffde6010438 <col:13> 'int' <LValueToRValue>
|     |   | `-DeclRefExpr 0x7ffde60103f8 <col:13> 'int' lvalue ParmVar 0x7ffde600fc70 'n' 'int'
|     |   `-IntegerLiteral 0x7ffde6010418 <col:15> 'int' 2
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7ffde60104e8 <col:18, col:20> 'int' '>'
|     | |-ImplicitCastExpr 0x7ffde60104d0 <col:18> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7ffde6010490 <col:18> 'int' lvalue Var 0x7ffde6010180 'i' 'int'
|     | `-IntegerLiteral 0x7ffde60104b0 <col:20> 'int' 1
|     |-CompoundAssignOperator 0x7ffde6010560 <col:23, col:28> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     | |-DeclRefExpr 0x7ffde6010508 <col:23> 'int' lvalue Var 0x7ffde6010180 'i' 'int'
|     | `-UnaryOperator 0x7ffde6010548 <col:27, col:28> 'int' prefix '-'
|     |   `-IntegerLiteral 0x7ffde6010528 <col:28> 'int' 1
|     `-CompoundStmt 0x7ffde6010a70 <col:32, line:18:5>
|       `-BinaryOperator 0x7ffde6010a50 <line:17:9, col:34> 'double' '='
|         |-ArraySubscriptExpr 0x7ffde6010600 <col:9, col:12> 'double' lvalue
|         | |-ImplicitCastExpr 0x7ffde60105d0 <col:9> 'double *':'double *' <LValueToRValue>
|         | | `-DeclRefExpr 0x7ffde6010590 <col:9> 'double *':'double *' lvalue ParmVar 0x7ffde600ff40 'y' 'double *':'double *'
|         | `-ImplicitCastExpr 0x7ffde60105e8 <col:11> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x7ffde60105b0 <col:11> 'int' lvalue Var 0x7ffde6010180 'i' 'int'
|         `-CallExpr 0x7ffde60109f0 <col:16, col:34> 'double'
|           |-ImplicitCastExpr 0x7ffde60109d8 <col:16> 'double (*)(double, double)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x7ffde6010828 <col:16> 'double (double, double)' Function 0x7ffde6010658 'fmin' 'double (double, double)'
|           |-ImplicitCastExpr 0x7ffde6010a20 <col:22, col:27> 'double' <LValueToRValue>
|           | `-ArraySubscriptExpr 0x7ffde60108f8 <col:22, col:27> 'double' lvalue
|           |   |-ImplicitCastExpr 0x7ffde60108e0 <col:22> 'double *':'double *' <LValueToRValue>
|           |   | `-DeclRefExpr 0x7ffde6010848 <col:22> 'double *':'double *' lvalue ParmVar 0x7ffde600ff40 'y' 'double *':'double *'
|           |   `-BinaryOperator 0x7ffde60108c0 <col:24, col:26> 'int' '+'
|           |     |-ImplicitCastExpr 0x7ffde60108a8 <col:24> 'int' <LValueToRValue>
|           |     | `-DeclRefExpr 0x7ffde6010868 <col:24> 'int' lvalue Var 0x7ffde6010180 'i' 'int'
|           |     `-IntegerLiteral 0x7ffde6010888 <col:26> 'int' 1
|           `-ImplicitCastExpr 0x7ffde6010a38 <col:30, col:33> 'double' <LValueToRValue>
|             `-ArraySubscriptExpr 0x7ffde6010988 <col:30, col:33> 'double' lvalue
|               |-ImplicitCastExpr 0x7ffde6010958 <col:30> 'double *':'double *' <LValueToRValue>
|               | `-DeclRefExpr 0x7ffde6010918 <col:30> 'double *':'double *' lvalue ParmVar 0x7ffde600fdf0 'x' 'double *':'double *'
|               `-ImplicitCastExpr 0x7ffde6010970 <col:32> 'int' <LValueToRValue>
|                 `-DeclRefExpr 0x7ffde6010938 <col:32> 'int' lvalue Var 0x7ffde6010180 'i' 'int'
`-FunctionDecl 0x7ffde6010658 <col:16> col:16 implicit used fmin 'double (double, double)' extern
  |-ParmVarDecl 0x7ffde60106f8 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x7ffde6010760 <<invalid sloc>> <invalid sloc> 'double'
  |-NoThrowAttr 0x7ffde60107d8 <col:16> Implicit
  `-ConstAttr 0x7ffde6010818 <col:16> Implicit
