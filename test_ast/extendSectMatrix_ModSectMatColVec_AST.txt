TranslationUnitDecl 0x7f9493038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f94930394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f94930391a0 '__int128'
|-TypedefDecl 0x7f9493039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f94930391c0 'unsigned __int128'
|-TypedefDecl 0x7f94930397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f94930395f0 'struct __NSConstantString_tag'
|   `-Record 0x7f9493039568 '__NSConstantString_tag'
|-TypedefDecl 0x7f9493039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f9493039850 'char *'
|   `-BuiltinType 0x7f9493038ca0 'char'
|-TypedefDecl 0x7f9493039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f9493039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f9493039970 'struct __va_list_tag'
|     `-Record 0x7f94930398e8 '__va_list_tag'
|-TypedefDecl 0x7f949382f200 <./tree_src/extendSectMatrix_ModSectMatColVec.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7f9493038d60 'unsigned char'
|-FunctionDecl 0x7f9493831578 <line:6:1, line:25:1> line:6:6 ModSectMatColVec 'void (int, int, int, int, int, double (*)[mx], double *, double (*)[mz], int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)'
| |-ParmVarDecl 0x7f949382f270 <line:7:5, col:9> col:9 used nx 'int'
| |-ParmVarDecl 0x7f949382f2f0 <col:13, col:17> col:17 used mx 'int'
| |-ParmVarDecl 0x7f949382f370 <col:21, col:25> col:25 used my 'int'
| |-ParmVarDecl 0x7f949382f3f0 <col:29, col:33> col:33 used nz 'int'
| |-ParmVarDecl 0x7f949382f470 <col:37, col:41> col:41 used mz 'int'
| |-ParmVarDecl 0x7f949382f670 <line:8:5, col:20> col:12 used x 'double (*)[mx]':'double (*)[mx]'
| |-ParmVarDecl 0x7f949382f7f0 <col:23, col:34> col:30 used y 'double *':'double *'
| |-ParmVarDecl 0x7f949382f9f0 <col:37, col:52> col:44 used z 'double (*)[mz]':'double (*)[mz]'
| |-ParmVarDecl 0x7f949382fa70 <line:9:5, col:9> col:9 used startx1 'int'
| |-ParmVarDecl 0x7f949382faf0 <col:18, col:22> col:22 used stopx1 'int'
| |-ParmVarDecl 0x7f949382fb70 <col:30, col:34> col:34 used stepx1 'int'
| |-ParmVarDecl 0x7f949382fbf0 <col:42, col:46> col:46 used startx2 'int'
| |-ParmVarDecl 0x7f949382fc70 <col:55, col:59> col:59 used stopx2 'int'
| |-ParmVarDecl 0x7f949382fcf0 <col:67, col:71> col:71 used stepx2 'int'
| |-ParmVarDecl 0x7f949382fd70 <line:10:5, col:9> col:9 used starty 'int'
| |-ParmVarDecl 0x7f949382fdf0 <col:17, col:21> col:21 stopy 'int'
| |-ParmVarDecl 0x7f949382fe70 <col:28, col:32> col:32 used stepy 'int'
| |-ParmVarDecl 0x7f949382fef0 <line:11:5, col:9> col:9 used startz1 'int'
| |-ParmVarDecl 0x7f949382ff70 <col:18, col:22> col:22 stopz1 'int'
| |-ParmVarDecl 0x7f949382fff0 <col:30, col:34> col:34 used stepz1 'int'
| |-ParmVarDecl 0x7f9493830070 <col:42, col:46> col:46 used startz2 'int'
| |-ParmVarDecl 0x7f94938300f0 <col:55, col:59> col:59 stopz2 'int'
| |-ParmVarDecl 0x7f9493830170 <col:67, col:71> col:71 used stepz2 'int'
| `-CompoundStmt 0x7f94938327a8 <col:80, line:25:1>
|   |-DeclStmt 0x7f9493831a50 <line:13:5, col:31>
|   | |-VarDecl 0x7f9493831730 <col:5, col:9> col:9 used ix 'int'
|   | |-VarDecl 0x7f94938317b0 <col:5, col:13> col:13 used jx 'int'
|   | |-VarDecl 0x7f9493831830 <col:5, col:17> col:17 iy 'int'
|   | |-VarDecl 0x7f94938318b0 <col:5, col:21> col:21 used jy 'int'
|   | |-VarDecl 0x7f9493831930 <col:5, col:25> col:25 used iz 'int'
|   | `-VarDecl 0x7f94938319b0 <col:5, col:29> col:29 used jz 'int'
|   |-BinaryOperator 0x7f9493831ac0 <line:14:5, col:10> 'int' '='
|   | |-DeclRefExpr 0x7f9493831a68 <col:5> 'int' lvalue Var 0x7f9493831930 'iz' 'int'
|   | `-ImplicitCastExpr 0x7f9493831aa8 <col:10> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7f9493831a88 <col:10> 'int' lvalue ParmVar 0x7f949382fef0 'startz1' 'int'
|   `-ForStmt 0x7f9493832770 <line:15:5, line:24:5>
|     |-BinaryOperator 0x7f9493831b38 <line:15:10, col:14> 'int' '='
|     | |-DeclRefExpr 0x7f9493831ae0 <col:10> 'int' lvalue Var 0x7f9493831730 'ix' 'int'
|     | `-ImplicitCastExpr 0x7f9493831b20 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7f9493831b00 <col:14> 'int' lvalue ParmVar 0x7f949382fa70 'startx1' 'int'
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7f9493831bc8 <col:23, col:26> 'int' '<'
|     | |-ImplicitCastExpr 0x7f9493831b98 <col:23> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7f9493831b58 <col:23> 'int' lvalue Var 0x7f9493831730 'ix' 'int'
|     | `-ImplicitCastExpr 0x7f9493831bb0 <col:26> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7f9493831b78 <col:26> 'int' lvalue ParmVar 0x7f949382faf0 'stopx1' 'int'
|     |-CompoundAssignOperator 0x7f9493831c40 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     | |-DeclRefExpr 0x7f9493831be8 <col:34> 'int' lvalue Var 0x7f9493831730 'ix' 'int'
|     | `-ImplicitCastExpr 0x7f9493831c28 <col:39> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7f9493831c08 <col:39> 'int' lvalue ParmVar 0x7f949382fb70 'stepx1' 'int'
|     `-CompoundStmt 0x7f9493832740 <col:48, line:24:5>
|       |-BinaryOperator 0x7f9493831cc8 <line:16:9, col:14> 'int' '='
|       | |-DeclRefExpr 0x7f9493831c70 <col:9> 'int' lvalue Var 0x7f94938318b0 'jy' 'int'
|       | `-ImplicitCastExpr 0x7f9493831cb0 <col:14> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x7f9493831c90 <col:14> 'int' lvalue ParmVar 0x7f949382fd70 'starty' 'int'
|       |-BinaryOperator 0x7f9493831d40 <line:17:9, col:14> 'int' '='
|       | |-DeclRefExpr 0x7f9493831ce8 <col:9> 'int' lvalue Var 0x7f94938319b0 'jz' 'int'
|       | `-ImplicitCastExpr 0x7f9493831d28 <col:14> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x7f9493831d08 <col:14> 'int' lvalue ParmVar 0x7f9493830070 'startz2' 'int'
|       |-ForStmt 0x7f9493832638 <line:18:9, line:22:9>
|       | |-BinaryOperator 0x7f9493831db8 <line:18:14, col:18> 'int' '='
|       | | |-DeclRefExpr 0x7f9493831d60 <col:14> 'int' lvalue Var 0x7f94938317b0 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7f9493831da0 <col:18> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7f9493831d80 <col:18> 'int' lvalue ParmVar 0x7f949382fbf0 'startx2' 'int'
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x7f9493831e48 <col:27, col:30> 'int' '<'
|       | | |-ImplicitCastExpr 0x7f9493831e18 <col:27> 'int' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7f9493831dd8 <col:27> 'int' lvalue Var 0x7f94938317b0 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7f9493831e30 <col:30> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7f9493831df8 <col:30> 'int' lvalue ParmVar 0x7f949382fc70 'stopx2' 'int'
|       | |-CompoundAssignOperator 0x7f9493831ec0 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|       | | |-DeclRefExpr 0x7f9493831e68 <col:38> 'int' lvalue Var 0x7f94938317b0 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7f9493831ea8 <col:43> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7f9493831e88 <col:43> 'int' lvalue ParmVar 0x7f949382fcf0 'stepx2' 'int'
|       | `-CompoundStmt 0x7f9493832610 <col:52, line:22:9>
|       |   |-BinaryOperator 0x7f9493832450 <line:19:6, col:38> 'double' '='
|       |   | |-ArraySubscriptExpr 0x7f9493831fd0 <col:6, col:14> 'double' lvalue
|       |   | | |-ImplicitCastExpr 0x7f9493831fa0 <col:6, col:10> 'double *' <ArrayToPointerDecay>
|       |   | | | `-ArraySubscriptExpr 0x7f9493831f60 <col:6, col:10> 'double [mz]' lvalue
|       |   | | |   |-ImplicitCastExpr 0x7f9493831f30 <col:6> 'double (*)[mz]':'double (*)[mz]' <LValueToRValue>
|       |   | | |   | `-DeclRefExpr 0x7f9493831ef0 <col:6> 'double (*)[mz]':'double (*)[mz]' lvalue ParmVar 0x7f949382f9f0 'z' 'double (*)[mz]':'double (*)[mz]'
|       |   | | |   `-ImplicitCastExpr 0x7f9493831f48 <col:8> 'int' <LValueToRValue>
|       |   | | |     `-DeclRefExpr 0x7f9493831f10 <col:8> 'int' lvalue Var 0x7f94938319b0 'jz' 'int'
|       |   | | `-ImplicitCastExpr 0x7f9493831fb8 <col:12> 'int' <LValueToRValue>
|       |   | |   `-DeclRefExpr 0x7f9493831f80 <col:12> 'int' lvalue Var 0x7f9493831930 'iz' 'int'
|       |   | `-CallExpr 0x7f94938323f0 <col:18, col:38> 'double'
|       |   |   |-ImplicitCastExpr 0x7f94938323d8 <col:18> 'double (*)(double, double)' <FunctionToPointerDecay>
|       |   |   | `-DeclRefExpr 0x7f9493832200 <col:18> 'double (double, double)' Function 0x7f9493832028 'fmod' 'double (double, double)'
|       |   |   |-ImplicitCastExpr 0x7f9493832420 <col:23, col:31> 'double' <LValueToRValue>
|       |   |   | `-ArraySubscriptExpr 0x7f9493832300 <col:23, col:31> 'double' lvalue
|       |   |   |   |-ImplicitCastExpr 0x7f94938322d0 <col:23, col:27> 'double *' <ArrayToPointerDecay>
|       |   |   |   | `-ArraySubscriptExpr 0x7f9493832290 <col:23, col:27> 'double [mx]' lvalue
|       |   |   |   |   |-ImplicitCastExpr 0x7f9493832260 <col:23> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
|       |   |   |   |   | `-DeclRefExpr 0x7f9493832220 <col:23> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7f949382f670 'x' 'double (*)[mx]':'double (*)[mx]'
|       |   |   |   |   `-ImplicitCastExpr 0x7f9493832278 <col:25> 'int' <LValueToRValue>
|       |   |   |   |     `-DeclRefExpr 0x7f9493832240 <col:25> 'int' lvalue Var 0x7f94938317b0 'jx' 'int'
|       |   |   |   `-ImplicitCastExpr 0x7f94938322e8 <col:29> 'int' <LValueToRValue>
|       |   |   |     `-DeclRefExpr 0x7f94938322b0 <col:29> 'int' lvalue Var 0x7f9493831730 'ix' 'int'
|       |   |   `-ImplicitCastExpr 0x7f9493832438 <col:33, col:37> 'double' <LValueToRValue>
|       |   |     `-ArraySubscriptExpr 0x7f9493832390 <col:33, col:37> 'double' lvalue
|       |   |       |-ImplicitCastExpr 0x7f9493832360 <col:33> 'double *':'double *' <LValueToRValue>
|       |   |       | `-DeclRefExpr 0x7f9493832320 <col:33> 'double *':'double *' lvalue ParmVar 0x7f949382f7f0 'y' 'double *':'double *'
|       |   |       `-ImplicitCastExpr 0x7f9493832378 <col:35> 'int' <LValueToRValue>
|       |   |         `-DeclRefExpr 0x7f9493832340 <col:35> 'int' lvalue Var 0x7f94938318b0 'jy' 'int'
|       |   |-BinaryOperator 0x7f9493832520 <line:20:6, col:16> 'int' '='
|       |   | |-DeclRefExpr 0x7f9493832470 <col:6> 'int' lvalue Var 0x7f94938318b0 'jy' 'int'
|       |   | `-BinaryOperator 0x7f9493832500 <col:11, col:16> 'int' '+'
|       |   |   |-ImplicitCastExpr 0x7f94938324d0 <col:11> 'int' <LValueToRValue>
|       |   |   | `-DeclRefExpr 0x7f9493832490 <col:11> 'int' lvalue Var 0x7f94938318b0 'jy' 'int'
|       |   |   `-ImplicitCastExpr 0x7f94938324e8 <col:16> 'int' <LValueToRValue>
|       |   |     `-DeclRefExpr 0x7f94938324b0 <col:16> 'int' lvalue ParmVar 0x7f949382fe70 'stepy' 'int'
|       |   `-BinaryOperator 0x7f94938325f0 <line:21:6, col:16> 'int' '='
|       |     |-DeclRefExpr 0x7f9493832540 <col:6> 'int' lvalue Var 0x7f94938319b0 'jz' 'int'
|       |     `-BinaryOperator 0x7f94938325d0 <col:11, col:16> 'int' '+'
|       |       |-ImplicitCastExpr 0x7f94938325a0 <col:11> 'int' <LValueToRValue>
|       |       | `-DeclRefExpr 0x7f9493832560 <col:11> 'int' lvalue Var 0x7f94938319b0 'jz' 'int'
|       |       `-ImplicitCastExpr 0x7f94938325b8 <col:16> 'int' <LValueToRValue>
|       |         `-DeclRefExpr 0x7f9493832580 <col:16> 'int' lvalue ParmVar 0x7f9493830170 'stepz2' 'int'
|       `-BinaryOperator 0x7f9493832720 <line:23:9, col:19> 'int' '='
|         |-DeclRefExpr 0x7f9493832670 <col:9> 'int' lvalue Var 0x7f9493831930 'iz' 'int'
|         `-BinaryOperator 0x7f9493832700 <col:14, col:19> 'int' '+'
|           |-ImplicitCastExpr 0x7f94938326d0 <col:14> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x7f9493832690 <col:14> 'int' lvalue Var 0x7f9493831930 'iz' 'int'
|           `-ImplicitCastExpr 0x7f94938326e8 <col:19> 'int' <LValueToRValue>
|             `-DeclRefExpr 0x7f94938326b0 <col:19> 'int' lvalue ParmVar 0x7f949382fff0 'stepz1' 'int'
`-FunctionDecl 0x7f9493832028 <line:19:18> col:18 implicit used fmod 'double (double, double)' extern
  |-ParmVarDecl 0x7f94938320c8 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x7f9493832130 <<invalid sloc>> <invalid sloc> 'double'
  |-ConstAttr 0x7f94938321a8 <col:18> Implicit
  `-NoThrowAttr 0x7f94938321e8 <col:18> Implicit
