TranslationUnitDecl 0x7f8ec6038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f8ec60394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f8ec60391a0 '__int128'
|-TypedefDecl 0x7f8ec6039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f8ec60391c0 'unsigned __int128'
|-TypedefDecl 0x7f8ec60397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f8ec60395f0 'struct __NSConstantString_tag'
|   `-Record 0x7f8ec6039568 '__NSConstantString_tag'
|-TypedefDecl 0x7f8ec6039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f8ec6039850 'char *'
|   `-BuiltinType 0x7f8ec6038ca0 'char'
|-TypedefDecl 0x7f8ec6039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f8ec6039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f8ec6039970 'struct __va_list_tag'
|     `-Record 0x7f8ec60398e8 '__va_list_tag'
`-FunctionDecl 0x7f8ec682e728 <./tree_src/reccurWholeVector_Order2ScalarOffsetVec.c:3:1, line:10:1> line:3:6 Order2ScalarOffsetVec 'void (int, double *, double, double, double *)'
  |-ParmVarDecl 0x7f8ec682e200 <line:4:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7f8ec682e380 <col:12, col:22> col:19 used x 'double *':'double *'
  |-ParmVarDecl 0x7f8ec682e400 <col:25, col:32> col:32 used a 'double'
  |-ParmVarDecl 0x7f8ec682e480 <col:35, col:42> col:42 used b 'double'
  |-ParmVarDecl 0x7f8ec682e5d0 <col:45, col:55> col:52 used c 'double *':'double *'
  `-CompoundStmt 0x7f8ec682ee60 <col:59, line:10:1>
    |-DeclStmt 0x7f8ec682e8b8 <line:6:5, col:10>
    | `-VarDecl 0x7f8ec682e850 <col:5, col:9> col:9 used i 'int'
    `-ForStmt 0x7f8ec682ee28 <line:7:5, line:9:5>
      |-BinaryOperator 0x7f8ec682e910 <line:7:10, col:13> 'int' '='
      | |-DeclRefExpr 0x7f8ec682e8d0 <col:10> 'int' lvalue Var 0x7f8ec682e850 'i' 'int'
      | `-IntegerLiteral 0x7f8ec682e8f0 <col:13> 'int' 2
      |-<<<NULL>>>
      |-BinaryOperator 0x7f8ec682e9a0 <col:16, col:18> 'int' '<'
      | |-ImplicitCastExpr 0x7f8ec682e970 <col:16> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7f8ec682e930 <col:16> 'int' lvalue Var 0x7f8ec682e850 'i' 'int'
      | `-ImplicitCastExpr 0x7f8ec682e988 <col:18> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f8ec682e950 <col:18> 'int' lvalue ParmVar 0x7f8ec682e200 'n' 'int'
      |-UnaryOperator 0x7f8ec682e9e0 <col:21, col:22> 'int' postfix '++'
      | `-DeclRefExpr 0x7f8ec682e9c0 <col:21> 'int' lvalue Var 0x7f8ec682e850 'i' 'int'
      `-CompoundStmt 0x7f8ec682ee10 <col:27, line:9:5>
        `-BinaryOperator 0x7f8ec682edf0 <line:8:9, col:45> 'double' '='
          |-ArraySubscriptExpr 0x7f8ec682ea68 <col:9, col:12> 'double' lvalue
          | |-ImplicitCastExpr 0x7f8ec682ea38 <col:9> 'double *':'double *' <LValueToRValue>
          | | `-DeclRefExpr 0x7f8ec682e9f8 <col:9> 'double *':'double *' lvalue ParmVar 0x7f8ec682e380 'x' 'double *':'double *'
          | `-ImplicitCastExpr 0x7f8ec682ea50 <col:11> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x7f8ec682ea18 <col:11> 'int' lvalue Var 0x7f8ec682e850 'i' 'int'
          `-BinaryOperator 0x7f8ec682edd0 <col:16, col:45> 'double' '+'
            |-BinaryOperator 0x7f8ec682ed08 <col:16, col:38> 'double' '+'
            | |-BinaryOperator 0x7f8ec682eba8 <col:16, col:25> 'double' '*'
            | | |-ImplicitCastExpr 0x7f8ec682eb78 <col:16, col:21> 'double' <LValueToRValue>
            | | | `-ArraySubscriptExpr 0x7f8ec682eb38 <col:16, col:21> 'double' lvalue
            | | |   |-ImplicitCastExpr 0x7f8ec682eb20 <col:16> 'double *':'double *' <LValueToRValue>
            | | |   | `-DeclRefExpr 0x7f8ec682ea88 <col:16> 'double *':'double *' lvalue ParmVar 0x7f8ec682e380 'x' 'double *':'double *'
            | | |   `-BinaryOperator 0x7f8ec682eb00 <col:18, col:20> 'int' '-'
            | | |     |-ImplicitCastExpr 0x7f8ec682eae8 <col:18> 'int' <LValueToRValue>
            | | |     | `-DeclRefExpr 0x7f8ec682eaa8 <col:18> 'int' lvalue Var 0x7f8ec682e850 'i' 'int'
            | | |     `-IntegerLiteral 0x7f8ec682eac8 <col:20> 'int' 1
            | | `-ImplicitCastExpr 0x7f8ec682eb90 <col:25> 'double' <LValueToRValue>
            | |   `-DeclRefExpr 0x7f8ec682eb58 <col:25> 'double' lvalue ParmVar 0x7f8ec682e400 'a' 'double'
            | `-BinaryOperator 0x7f8ec682ece8 <col:29, col:38> 'double' '*'
            |   |-ImplicitCastExpr 0x7f8ec682ecb8 <col:29, col:34> 'double' <LValueToRValue>
            |   | `-ArraySubscriptExpr 0x7f8ec682ec78 <col:29, col:34> 'double' lvalue
            |   |   |-ImplicitCastExpr 0x7f8ec682ec60 <col:29> 'double *':'double *' <LValueToRValue>
            |   |   | `-DeclRefExpr 0x7f8ec682ebc8 <col:29> 'double *':'double *' lvalue ParmVar 0x7f8ec682e380 'x' 'double *':'double *'
            |   |   `-BinaryOperator 0x7f8ec682ec40 <col:31, col:33> 'int' '-'
            |   |     |-ImplicitCastExpr 0x7f8ec682ec28 <col:31> 'int' <LValueToRValue>
            |   |     | `-DeclRefExpr 0x7f8ec682ebe8 <col:31> 'int' lvalue Var 0x7f8ec682e850 'i' 'int'
            |   |     `-IntegerLiteral 0x7f8ec682ec08 <col:33> 'int' 2
            |   `-ImplicitCastExpr 0x7f8ec682ecd0 <col:38> 'double' <LValueToRValue>
            |     `-DeclRefExpr 0x7f8ec682ec98 <col:38> 'double' lvalue ParmVar 0x7f8ec682e480 'b' 'double'
            `-ImplicitCastExpr 0x7f8ec682edb8 <col:42, col:45> 'double' <LValueToRValue>
              `-ArraySubscriptExpr 0x7f8ec682ed98 <col:42, col:45> 'double' lvalue
                |-ImplicitCastExpr 0x7f8ec682ed68 <col:42> 'double *':'double *' <LValueToRValue>
                | `-DeclRefExpr 0x7f8ec682ed28 <col:42> 'double *':'double *' lvalue ParmVar 0x7f8ec682e5d0 'c' 'double *':'double *'
                `-ImplicitCastExpr 0x7f8ec682ed80 <col:44> 'int' <LValueToRValue>
                  `-DeclRefExpr 0x7f8ec682ed48 <col:44> 'int' lvalue Var 0x7f8ec682e850 'i' 'int'
