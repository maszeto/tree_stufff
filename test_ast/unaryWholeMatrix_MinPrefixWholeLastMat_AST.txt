TranslationUnitDecl 0x7fd271825408 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fd271825ca0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fd2718259a0 '__int128'
|-TypedefDecl 0x7fd271825d10 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fd2718259c0 'unsigned __int128'
|-TypedefDecl 0x7fd271825ff8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fd271825df0 'struct __NSConstantString_tag'
|   `-Record 0x7fd271825d68 '__NSConstantString_tag'
|-TypedefDecl 0x7fd271826090 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fd271826050 'char *'
|   `-BuiltinType 0x7fd2718254a0 'char'
|-TypedefDecl 0x7fd271826368 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fd271826310 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fd271826170 'struct __va_list_tag'
|     `-Record 0x7fd2718260e8 '__va_list_tag'
|-TypedefDecl 0x7fd27202f200 <./tree_src/unaryWholeMatrix_MinPrefixWholeLastMat.c:4:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fd271825560 'unsigned char'
|-FunctionDecl 0x7fd27202f918 <line:11:1, line:21:1> line:11:6 MinPrefixWholeLastMat 'void (int, int, double (*)[m], double (*)[m])'
| |-ParmVarDecl 0x7fd27202f270 <line:12:5, col:9> col:9 used n 'int'
| |-ParmVarDecl 0x7fd27202f2f0 <col:12, col:16> col:16 used m 'int'
| |-ParmVarDecl 0x7fd27202f4f0 <col:19, col:32> col:26 used x 'double (*)[m]':'double (*)[m]'
| |-ParmVarDecl 0x7fd27202f6f0 <col:35, col:48> col:42 used y 'double (*)[m]':'double (*)[m]'
| `-CompoundStmt 0x7fd2720326f8 <col:52, line:21:1>
|   |-DeclStmt 0x7fd27202fb38 <line:14:5, col:13>
|   | |-VarDecl 0x7fd27202fa38 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x7fd27202fab8 <col:5, col:12> col:12 used j 'int'
|   `-ForStmt 0x7fd2720326c0 <line:15:5, line:20:5>
|     |-BinaryOperator 0x7fd27202fb90 <line:15:10, col:13> 'int' '='
|     | |-DeclRefExpr 0x7fd27202fb50 <col:10> 'int' lvalue Var 0x7fd27202fa38 'i' 'int'
|     | `-IntegerLiteral 0x7fd27202fb70 <col:13> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fd27202fc20 <col:16, col:18> 'int' '<'
|     | |-ImplicitCastExpr 0x7fd27202fbf0 <col:16> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fd27202fbb0 <col:16> 'int' lvalue Var 0x7fd27202fa38 'i' 'int'
|     | `-ImplicitCastExpr 0x7fd27202fc08 <col:18> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fd27202fbd0 <col:18> 'int' lvalue ParmVar 0x7fd27202f270 'n' 'int'
|     |-UnaryOperator 0x7fd27202fc60 <col:21, col:22> 'int' postfix '++'
|     | `-DeclRefExpr 0x7fd27202fc40 <col:21> 'int' lvalue Var 0x7fd27202fa38 'i' 'int'
|     `-CompoundStmt 0x7fd2720326a0 <col:27, line:20:5>
|       |-BinaryOperator 0x7fd27202fe90 <line:16:9, col:25> 'double' '='
|       | |-ArraySubscriptExpr 0x7fd27202fd70 <col:9, col:15> 'double' lvalue
|       | | |-ImplicitCastExpr 0x7fd27202fd58 <col:9, col:12> 'double *' <ArrayToPointerDecay>
|       | | | `-ArraySubscriptExpr 0x7fd27202fce8 <col:9, col:12> 'double [m]' lvalue
|       | | |   |-ImplicitCastExpr 0x7fd27202fcb8 <col:9> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
|       | | |   | `-DeclRefExpr 0x7fd27202fc78 <col:9> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fd27202f6f0 'y' 'double (*)[m]':'double (*)[m]'
|       | | |   `-ImplicitCastExpr 0x7fd27202fcd0 <col:11> 'int' <LValueToRValue>
|       | | |     `-DeclRefExpr 0x7fd27202fc98 <col:11> 'int' lvalue Var 0x7fd27202fa38 'i' 'int'
|       | | `-IntegerLiteral 0x7fd27202fd08 <col:14> 'int' 0
|       | `-ImplicitCastExpr 0x7fd27202fe78 <col:19, col:25> 'double' <LValueToRValue>
|       |   `-ArraySubscriptExpr 0x7fd27202fe58 <col:19, col:25> 'double' lvalue
|       |     |-ImplicitCastExpr 0x7fd27202fe40 <col:19, col:22> 'double *' <ArrayToPointerDecay>
|       |     | `-ArraySubscriptExpr 0x7fd27202fe00 <col:19, col:22> 'double [m]' lvalue
|       |     |   |-ImplicitCastExpr 0x7fd27202fdd0 <col:19> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
|       |     |   | `-DeclRefExpr 0x7fd27202fd90 <col:19> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fd27202f4f0 'x' 'double (*)[m]':'double (*)[m]'
|       |     |   `-ImplicitCastExpr 0x7fd27202fde8 <col:21> 'int' <LValueToRValue>
|       |     |     `-DeclRefExpr 0x7fd27202fdb0 <col:21> 'int' lvalue Var 0x7fd27202fa38 'i' 'int'
|       |     `-IntegerLiteral 0x7fd27202fe20 <col:24> 'int' 0
|       `-ForStmt 0x7fd272032668 <line:17:9, line:19:9>
|         |-BinaryOperator 0x7fd27202fef0 <line:17:14, col:18> 'int' '='
|         | |-DeclRefExpr 0x7fd27202feb0 <col:14> 'int' lvalue Var 0x7fd27202fab8 'j' 'int'
|         | `-IntegerLiteral 0x7fd27202fed0 <col:18> 'int' 1
|         |-<<<NULL>>>
|         |-BinaryOperator 0x7fd27202ff80 <col:21, col:23> 'int' '<'
|         | |-ImplicitCastExpr 0x7fd27202ff50 <col:21> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x7fd27202ff10 <col:21> 'int' lvalue Var 0x7fd27202fab8 'j' 'int'
|         | `-ImplicitCastExpr 0x7fd27202ff68 <col:23> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x7fd27202ff30 <col:23> 'int' lvalue ParmVar 0x7fd27202f2f0 'm' 'int'
|         |-UnaryOperator 0x7fd27202ffc0 <col:26, col:27> 'int' postfix '++'
|         | `-DeclRefExpr 0x7fd27202ffa0 <col:26> 'int' lvalue Var 0x7fd27202fab8 'j' 'int'
|         `-CompoundStmt 0x7fd272032650 <col:32, line:19:9>
|           `-BinaryOperator 0x7fd272032630 <line:18:6, col:40> 'double' '='
|             |-ArraySubscriptExpr 0x7fd2720300b8 <col:6, col:12> 'double' lvalue
|             | |-ImplicitCastExpr 0x7fd272030088 <col:6, col:9> 'double *' <ArrayToPointerDecay>
|             | | `-ArraySubscriptExpr 0x7fd272030048 <col:6, col:9> 'double [m]' lvalue
|             | |   |-ImplicitCastExpr 0x7fd272030018 <col:6> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
|             | |   | `-DeclRefExpr 0x7fd27202ffd8 <col:6> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fd27202f6f0 'y' 'double (*)[m]':'double (*)[m]'
|             | |   `-ImplicitCastExpr 0x7fd272030030 <col:8> 'int' <LValueToRValue>
|             | |     `-DeclRefExpr 0x7fd27202fff8 <col:8> 'int' lvalue Var 0x7fd27202fa38 'i' 'int'
|             | `-ImplicitCastExpr 0x7fd2720300a0 <col:11> 'int' <LValueToRValue>
|             |   `-DeclRefExpr 0x7fd272030068 <col:11> 'int' lvalue Var 0x7fd27202fab8 'j' 'int'
|             `-CallExpr 0x7fd2720325d0 <col:16, col:40> 'double'
|               |-ImplicitCastExpr 0x7fd2720325b8 <col:16> 'double (*)(double, double)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x7fd272032330 <col:16> 'double (double, double)' Function 0x7fd272030118 'fmin' 'double (double, double)'
|               |-ImplicitCastExpr 0x7fd272032600 <col:22, col:30> 'double' <LValueToRValue>
|               | `-ArraySubscriptExpr 0x7fd272032470 <col:22, col:30> 'double' lvalue
|               |   |-ImplicitCastExpr 0x7fd272032458 <col:22, col:25> 'double *' <ArrayToPointerDecay>
|               |   | `-ArraySubscriptExpr 0x7fd2720323c0 <col:22, col:25> 'double [m]' lvalue
|               |   |   |-ImplicitCastExpr 0x7fd272032390 <col:22> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
|               |   |   | `-DeclRefExpr 0x7fd272032350 <col:22> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fd27202f6f0 'y' 'double (*)[m]':'double (*)[m]'
|               |   |   `-ImplicitCastExpr 0x7fd2720323a8 <col:24> 'int' <LValueToRValue>
|               |   |     `-DeclRefExpr 0x7fd272032370 <col:24> 'int' lvalue Var 0x7fd27202fa38 'i' 'int'
|               |   `-BinaryOperator 0x7fd272032438 <col:27, col:29> 'int' '-'
|               |     |-ImplicitCastExpr 0x7fd272032420 <col:27> 'int' <LValueToRValue>
|               |     | `-DeclRefExpr 0x7fd2720323e0 <col:27> 'int' lvalue Var 0x7fd27202fab8 'j' 'int'
|               |     `-IntegerLiteral 0x7fd272032400 <col:29> 'int' 1
|               `-ImplicitCastExpr 0x7fd272032618 <col:33, col:39> 'double' <LValueToRValue>
|                 `-ArraySubscriptExpr 0x7fd272032570 <col:33, col:39> 'double' lvalue
|                   |-ImplicitCastExpr 0x7fd272032540 <col:33, col:36> 'double *' <ArrayToPointerDecay>
|                   | `-ArraySubscriptExpr 0x7fd272032500 <col:33, col:36> 'double [m]' lvalue
|                   |   |-ImplicitCastExpr 0x7fd2720324d0 <col:33> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
|                   |   | `-DeclRefExpr 0x7fd272032490 <col:33> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fd27202f4f0 'x' 'double (*)[m]':'double (*)[m]'
|                   |   `-ImplicitCastExpr 0x7fd2720324e8 <col:35> 'int' <LValueToRValue>
|                   |     `-DeclRefExpr 0x7fd2720324b0 <col:35> 'int' lvalue Var 0x7fd27202fa38 'i' 'int'
|                   `-ImplicitCastExpr 0x7fd272032558 <col:38> 'int' <LValueToRValue>
|                     `-DeclRefExpr 0x7fd272032520 <col:38> 'int' lvalue Var 0x7fd27202fab8 'j' 'int'
`-FunctionDecl 0x7fd272030118 <col:16> col:16 implicit used fmin 'double (double, double)' extern
  |-ParmVarDecl 0x7fd272032200 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x7fd272032268 <<invalid sloc>> <invalid sloc> 'double'
  |-NoThrowAttr 0x7fd2720322e0 <col:16> Implicit
  `-ConstAttr 0x7fd272032320 <col:16> Implicit
