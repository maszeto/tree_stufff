TranslationUnitDecl 0x7f8de1838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f8de18394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f8de18391a0 '__int128'
|-TypedefDecl 0x7f8de1839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f8de18391c0 'unsigned __int128'
|-TypedefDecl 0x7f8de18397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f8de18395f0 'struct __NSConstantString_tag'
|   `-Record 0x7f8de1839568 '__NSConstantString_tag'
|-TypedefDecl 0x7f8de1839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f8de1839850 'char *'
|   `-BuiltinType 0x7f8de1838ca0 'char'
|-TypedefDecl 0x7f8de1839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f8de1839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f8de1839970 'struct __va_list_tag'
|     `-Record 0x7f8de18398e8 '__va_list_tag'
|-TypedefDecl 0x7f8de1891600 <./tree_src/dyadicSectOneMatrix_HiSectOneMatRowSca.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7f8de1838d60 'unsigned char'
|-FunctionDecl 0x7f8de18921d8 <line:6:1, line:16:1> line:6:6 HiSectOneMatRowSca 'void (int, int, int, double, double (*)[m], double (*)[m], int, int, int, int, int, int)'
| |-ParmVarDecl 0x7f8de1891670 <line:7:5, col:9> col:9 used m 'int'
| |-ParmVarDecl 0x7f8de18916f0 <col:12, col:16> col:16 used n 'int'
| |-ParmVarDecl 0x7f8de1891770 <col:19, col:23> col:23 used p 'int'
| |-ParmVarDecl 0x7f8de18917f0 <col:26, col:33> col:33 used y 'double'
| |-ParmVarDecl 0x7f8de18919f0 <col:36, col:49> col:43 used z 'double (*)[m]':'double (*)[m]'
| |-ParmVarDecl 0x7f8de1891bf0 <col:52, col:65> col:59 used x 'double (*)[m]':'double (*)[m]'
| |-ParmVarDecl 0x7f8de1891c70 <line:8:5, col:9> col:9 used sz1 'int'
| |-ParmVarDecl 0x7f8de1891cf0 <col:14, col:18> col:18 ez1 'int'
| |-ParmVarDecl 0x7f8de1891d70 <col:23, col:27> col:27 used bz1 'int'
| |-ParmVarDecl 0x7f8de1891df0 <col:32, col:36> col:36 used sx1 'int'
| |-ParmVarDecl 0x7f8de1891e70 <col:41, col:45> col:45 used ex1 'int'
| |-ParmVarDecl 0x7f8de1891ef0 <col:50, col:54> col:54 used bx1 'int'
| `-CompoundStmt 0x7f8de1893c90 <col:60, line:16:1>
|   |-DeclStmt 0x7f8de1892438 <line:10:5, col:12>
|   | |-VarDecl 0x7f8de1892338 <col:5, col:9> col:9 used j 'int'
|   | `-VarDecl 0x7f8de18923b8 <col:5, col:11> col:11 used i 'int'
|   |-BinaryOperator 0x7f8de18924a8 <line:11:5, col:8> 'int' '='
|   | |-DeclRefExpr 0x7f8de1892450 <col:5> 'int' lvalue Var 0x7f8de1892338 'j' 'int'
|   | `-ImplicitCastExpr 0x7f8de1892490 <col:8> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7f8de1892470 <col:8> 'int' lvalue ParmVar 0x7f8de1891d70 'bz1' 'int'
|   `-ForStmt 0x7f8de1893c58 <line:12:5, line:15:5>
|     |-BinaryOperator 0x7f8de1892520 <line:12:9, col:12> 'int' '='
|     | |-DeclRefExpr 0x7f8de18924c8 <col:9> 'int' lvalue Var 0x7f8de18923b8 'i' 'int'
|     | `-ImplicitCastExpr 0x7f8de1892508 <col:12> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7f8de18924e8 <col:12> 'int' lvalue ParmVar 0x7f8de1891ef0 'bx1' 'int'
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7f8de18925b0 <col:17, col:19> 'int' '<'
|     | |-ImplicitCastExpr 0x7f8de1892580 <col:17> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7f8de1892540 <col:17> 'int' lvalue Var 0x7f8de18923b8 'i' 'int'
|     | `-ImplicitCastExpr 0x7f8de1892598 <col:19> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7f8de1892560 <col:19> 'int' lvalue ParmVar 0x7f8de1891e70 'ex1' 'int'
|     |-CompoundAssignOperator 0x7f8de1893638 <col:24, col:28> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     | |-DeclRefExpr 0x7f8de18925d0 <col:24> 'int' lvalue Var 0x7f8de18923b8 'i' 'int'
|     | `-ImplicitCastExpr 0x7f8de1893620 <col:28> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7f8de1893600 <col:28> 'int' lvalue ParmVar 0x7f8de1891df0 'sx1' 'int'
|     `-CompoundStmt 0x7f8de1893c38 <col:34, line:15:5>
|       |-BinaryOperator 0x7f8de1893b90 <line:13:2, col:25> 'double' '='
|       | |-ArraySubscriptExpr 0x7f8de1893778 <col:2, col:8> 'double' lvalue
|       | | |-ImplicitCastExpr 0x7f8de1893748 <col:2, col:5> 'double *' <ArrayToPointerDecay>
|       | | | `-ArraySubscriptExpr 0x7f8de18936d8 <col:2, col:5> 'double [m]' lvalue
|       | | |   |-ImplicitCastExpr 0x7f8de18936a8 <col:2> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
|       | | |   | `-DeclRefExpr 0x7f8de1893668 <col:2> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f8de18919f0 'z' 'double (*)[m]':'double (*)[m]'
|       | | |   `-ImplicitCastExpr 0x7f8de18936c0 <col:4> 'int' <LValueToRValue>
|       | | |     `-DeclRefExpr 0x7f8de1893688 <col:4> 'int' lvalue ParmVar 0x7f8de1891770 'p' 'int'
|       | | `-ImplicitCastExpr 0x7f8de1893760 <col:7> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7f8de18936f8 <col:7> 'int' lvalue Var 0x7f8de1892338 'j' 'int'
|       | `-CallExpr 0x7f8de1893b30 <col:11, col:25> 'double'
|       |   |-ImplicitCastExpr 0x7f8de1893b18 <col:11> 'double (*)(double, double)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x7f8de18939a8 <col:11> 'double (double, double)' Function 0x7f8de18937d8 'fmax' 'double (double, double)'
|       |   |-ImplicitCastExpr 0x7f8de1893b60 <col:16, col:22> 'double' <LValueToRValue>
|       |   | `-ArraySubscriptExpr 0x7f8de1893aa8 <col:16, col:22> 'double' lvalue
|       |   |   |-ImplicitCastExpr 0x7f8de1893a78 <col:16, col:19> 'double *' <ArrayToPointerDecay>
|       |   |   | `-ArraySubscriptExpr 0x7f8de1893a38 <col:16, col:19> 'double [m]' lvalue
|       |   |   |   |-ImplicitCastExpr 0x7f8de1893a08 <col:16> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
|       |   |   |   | `-DeclRefExpr 0x7f8de18939c8 <col:16> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f8de1891bf0 'x' 'double (*)[m]':'double (*)[m]'
|       |   |   |   `-ImplicitCastExpr 0x7f8de1893a20 <col:18> 'int' <LValueToRValue>
|       |   |   |     `-DeclRefExpr 0x7f8de18939e8 <col:18> 'int' lvalue ParmVar 0x7f8de1891770 'p' 'int'
|       |   |   `-ImplicitCastExpr 0x7f8de1893a90 <col:21> 'int' <LValueToRValue>
|       |   |     `-DeclRefExpr 0x7f8de1893a58 <col:21> 'int' lvalue Var 0x7f8de18923b8 'i' 'int'
|       |   `-ImplicitCastExpr 0x7f8de1893b78 <col:24> 'double' <LValueToRValue>
|       |     `-DeclRefExpr 0x7f8de1893ac8 <col:24> 'double' lvalue ParmVar 0x7f8de18917f0 'y' 'double'
|       `-CompoundAssignOperator 0x7f8de1893c08 <line:14:9, col:13> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|         |-DeclRefExpr 0x7f8de1893bb0 <col:9> 'int' lvalue Var 0x7f8de1892338 'j' 'int'
|         `-ImplicitCastExpr 0x7f8de1893bf0 <col:13> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x7f8de1893bd0 <col:13> 'int' lvalue ParmVar 0x7f8de1891c70 'sz1' 'int'
`-FunctionDecl 0x7f8de18937d8 <line:13:11> col:11 implicit used fmax 'double (double, double)' extern
  |-ParmVarDecl 0x7f8de1893878 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x7f8de18938e0 <<invalid sloc>> <invalid sloc> 'double'
  |-NoThrowAttr 0x7f8de1893958 <col:11> Implicit
  `-ConstAttr 0x7f8de1893998 <col:11> Implicit
