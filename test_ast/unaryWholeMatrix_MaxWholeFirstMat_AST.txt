TranslationUnitDecl 0x7fdb9e838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fdb9e8394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fdb9e8391a0 '__int128'
|-TypedefDecl 0x7fdb9e839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fdb9e8391c0 'unsigned __int128'
|-TypedefDecl 0x7fdb9e8397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fdb9e8395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fdb9e839568 '__NSConstantString_tag'
|-TypedefDecl 0x7fdb9e839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fdb9e839850 'char *'
|   `-BuiltinType 0x7fdb9e838ca0 'char'
|-TypedefDecl 0x7fdb9e839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fdb9e839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fdb9e839970 'struct __va_list_tag'
|     `-Record 0x7fdb9e8398e8 '__va_list_tag'
|-TypedefDecl 0x7fdb9f02f200 <./tree_src/unaryWholeMatrix_MaxWholeFirstMat.c:4:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fdb9e838d60 'unsigned char'
|-FunctionDecl 0x7fdb9f02f828 <line:11:1, line:23:1> line:11:6 MaxWholeFirstMat 'void (int, int, double (*)[m], double *)'
| |-ParmVarDecl 0x7fdb9f02f270 <line:12:5, col:9> col:9 used n 'int'
| |-ParmVarDecl 0x7fdb9f02f2f0 <col:12, col:16> col:16 used m 'int'
| |-ParmVarDecl 0x7fdb9f02f4f0 <col:19, col:32> col:26 used x 'double (*)[m]':'double (*)[m]'
| |-ParmVarDecl 0x7fdb9f02f670 <col:35, col:45> col:42 used z 'double *':'double *'
| `-CompoundStmt 0x7fdb9f032340 <col:49, line:23:1>
|   |-DeclStmt 0x7fdb9f02fa48 <line:14:5, col:13>
|   | |-VarDecl 0x7fdb9f02f948 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x7fdb9f02f9c8 <col:5, col:12> col:12 used j 'int'
|   |-DeclStmt 0x7fdb9f02fae0 <line:15:5, col:15>
|   | `-VarDecl 0x7fdb9f02fa78 <col:5, col:12> col:12 used val 'double'
|   `-ForStmt 0x7fdb9f032308 <line:16:5, line:22:5>
|     |-BinaryOperator 0x7fdb9f02fb38 <line:16:10, col:12> 'int' '='
|     | |-DeclRefExpr 0x7fdb9f02faf8 <col:10> 'int' lvalue Var 0x7fdb9f02f948 'i' 'int'
|     | `-IntegerLiteral 0x7fdb9f02fb18 <col:12> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fdb9f02fbc8 <col:15, col:17> 'int' '<'
|     | |-ImplicitCastExpr 0x7fdb9f02fb98 <col:15> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fdb9f02fb58 <col:15> 'int' lvalue Var 0x7fdb9f02f948 'i' 'int'
|     | `-ImplicitCastExpr 0x7fdb9f02fbb0 <col:17> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fdb9f02fb78 <col:17> 'int' lvalue ParmVar 0x7fdb9f02f270 'n' 'int'
|     |-UnaryOperator 0x7fdb9f02fc08 <col:20, col:21> 'int' postfix '++'
|     | `-DeclRefExpr 0x7fdb9f02fbe8 <col:20> 'int' lvalue Var 0x7fdb9f02f948 'i' 'int'
|     `-CompoundStmt 0x7fdb9f0322e8 <col:26, line:22:5>
|       |-ForStmt 0x7fdb9f0301b8 <line:18:9, line:20:9>
|       | |-BinaryOperator 0x7fdb9f02fc80 <line:18:14, col:17> 'int' '='
|       | | |-DeclRefExpr 0x7fdb9f02fc40 <col:14> 'int' lvalue Var 0x7fdb9f02f9c8 'j' 'int'
|       | | `-IntegerLiteral 0x7fdb9f02fc60 <col:17> 'int' 0
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x7fdb9f02fd10 <col:20, col:22> 'int' '<'
|       | | |-ImplicitCastExpr 0x7fdb9f02fce0 <col:20> 'int' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7fdb9f02fca0 <col:20> 'int' lvalue Var 0x7fdb9f02f9c8 'j' 'int'
|       | | `-ImplicitCastExpr 0x7fdb9f02fcf8 <col:22> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fdb9f02fcc0 <col:22> 'int' lvalue ParmVar 0x7fdb9f02f2f0 'm' 'int'
|       | |-UnaryOperator 0x7fdb9f02fd50 <col:25, col:26> 'int' postfix '++'
|       | | `-DeclRefExpr 0x7fdb9f02fd30 <col:25> 'int' lvalue Var 0x7fdb9f02f9c8 'j' 'int'
|       | `-CompoundStmt 0x7fdb9f0301a0 <col:31, line:20:9>
|       |   `-BinaryOperator 0x7fdb9f030180 <line:19:6, col:29> 'double' '='
|       |     |-DeclRefExpr 0x7fdb9f02fd68 <col:6> 'double' lvalue Var 0x7fdb9f02fa78 'val' 'double'
|       |     `-CallExpr 0x7fdb9f030120 <col:12, col:29> 'double'
|       |       |-ImplicitCastExpr 0x7fdb9f030108 <col:12> 'double (*)(double, double)' <FunctionToPointerDecay>
|       |       | `-DeclRefExpr 0x7fdb9f02ff98 <col:12> 'double (double, double)' Function 0x7fdb9f02fdc8 'fmax' 'double (double, double)'
|       |       |-ImplicitCastExpr 0x7fdb9f030150 <col:17> 'double' <LValueToRValue>
|       |       | `-DeclRefExpr 0x7fdb9f02ffb8 <col:17> 'double' lvalue Var 0x7fdb9f02fa78 'val' 'double'
|       |       `-ImplicitCastExpr 0x7fdb9f030168 <col:22, col:28> 'double' <LValueToRValue>
|       |         `-ArraySubscriptExpr 0x7fdb9f0300b8 <col:22, col:28> 'double' lvalue
|       |           |-ImplicitCastExpr 0x7fdb9f030088 <col:22, col:25> 'double *' <ArrayToPointerDecay>
|       |           | `-ArraySubscriptExpr 0x7fdb9f030048 <col:22, col:25> 'double [m]' lvalue
|       |           |   |-ImplicitCastExpr 0x7fdb9f030018 <col:22> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
|       |           |   | `-DeclRefExpr 0x7fdb9f02ffd8 <col:22> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fdb9f02f4f0 'x' 'double (*)[m]':'double (*)[m]'
|       |           |   `-ImplicitCastExpr 0x7fdb9f030030 <col:24> 'int' <LValueToRValue>
|       |           |     `-DeclRefExpr 0x7fdb9f02fff8 <col:24> 'int' lvalue Var 0x7fdb9f02f9c8 'j' 'int'
|       |           `-ImplicitCastExpr 0x7fdb9f0300a0 <col:27> 'int' <LValueToRValue>
|       |             `-DeclRefExpr 0x7fdb9f030068 <col:27> 'int' lvalue Var 0x7fdb9f02f948 'i' 'int'
|       `-BinaryOperator 0x7fdb9f0322c8 <line:21:9, col:16> 'double' '='
|         |-ArraySubscriptExpr 0x7fdb9f032270 <col:9, col:12> 'double' lvalue
|         | |-ImplicitCastExpr 0x7fdb9f032240 <col:9> 'double *':'double *' <LValueToRValue>
|         | | `-DeclRefExpr 0x7fdb9f032200 <col:9> 'double *':'double *' lvalue ParmVar 0x7fdb9f02f670 'z' 'double *':'double *'
|         | `-ImplicitCastExpr 0x7fdb9f032258 <col:11> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x7fdb9f032220 <col:11> 'int' lvalue Var 0x7fdb9f02f948 'i' 'int'
|         `-ImplicitCastExpr 0x7fdb9f0322b0 <col:16> 'double' <LValueToRValue>
|           `-DeclRefExpr 0x7fdb9f032290 <col:16> 'double' lvalue Var 0x7fdb9f02fa78 'val' 'double'
`-FunctionDecl 0x7fdb9f02fdc8 <line:19:12> col:12 implicit used fmax 'double (double, double)' extern
  |-ParmVarDecl 0x7fdb9f02fe68 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x7fdb9f02fed0 <<invalid sloc>> <invalid sloc> 'double'
  |-NoThrowAttr 0x7fdb9f02ff48 <col:12> Implicit
  `-ConstAttr 0x7fdb9f02ff88 <col:12> Implicit
