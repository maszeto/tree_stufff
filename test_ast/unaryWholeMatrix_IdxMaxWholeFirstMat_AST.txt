TranslationUnitDecl 0x7fafa4038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fafa40394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fafa40391a0 '__int128'
|-TypedefDecl 0x7fafa4039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fafa40391c0 'unsigned __int128'
|-TypedefDecl 0x7fafa40397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fafa40395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fafa4039568 '__NSConstantString_tag'
|-TypedefDecl 0x7fafa4039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fafa4039850 'char *'
|   `-BuiltinType 0x7fafa4038ca0 'char'
|-TypedefDecl 0x7fafa4039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fafa4039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fafa4039970 'struct __va_list_tag'
|     `-Record 0x7fafa40398e8 '__va_list_tag'
|-TypedefDecl 0x7fafa482f200 <./tree_src/unaryWholeMatrix_IdxMaxWholeFirstMat.c:4:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fafa4038d60 'unsigned char'
`-FunctionDecl 0x7fafa482f828 <line:12:1, line:28:1> line:12:6 IdxMaxWholeFirstMat 'void (int, int, double (*)[m], int *)'
  |-ParmVarDecl 0x7fafa482f270 <line:13:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7fafa482f2f0 <col:12, col:16> col:16 used m 'int'
  |-ParmVarDecl 0x7fafa482f4f0 <col:19, col:32> col:26 used x 'double (*)[m]':'double (*)[m]'
  |-ParmVarDecl 0x7fafa482f670 <col:35, col:42> col:39 used z 'int *':'int *'
  `-CompoundStmt 0x7fafa48324b8 <col:46, line:28:1>
    |-DeclStmt 0x7fafa482f9b0 <line:15:5, col:15>
    | `-VarDecl 0x7fafa482f948 <col:5, col:12> col:12 used val 'double'
    |-DeclStmt 0x7fafa482fb68 <line:16:5, col:18>
    | |-VarDecl 0x7fafa482f9e0 <col:5, col:9> col:9 used i 'int'
    | |-VarDecl 0x7fafa482fa60 <col:5, col:12> col:12 used j 'int'
    | `-VarDecl 0x7fafa482fae0 <col:5, col:15> col:15 used loc 'int'
    `-ForStmt 0x7fafa4832480 <line:17:5, line:27:5>
      |-BinaryOperator 0x7fafa482fbc0 <line:17:10, col:13> 'int' '='
      | |-DeclRefExpr 0x7fafa482fb80 <col:10> 'int' lvalue Var 0x7fafa482f9e0 'i' 'int'
      | `-IntegerLiteral 0x7fafa482fba0 <col:13> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x7fafa482fc50 <col:16, col:18> 'int' '<'
      | |-ImplicitCastExpr 0x7fafa482fc20 <col:16> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fafa482fbe0 <col:16> 'int' lvalue Var 0x7fafa482f9e0 'i' 'int'
      | `-ImplicitCastExpr 0x7fafa482fc38 <col:18> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fafa482fc00 <col:18> 'int' lvalue ParmVar 0x7fafa482f270 'n' 'int'
      |-UnaryOperator 0x7fafa482fc90 <col:21, col:22> 'int' postfix '++'
      | `-DeclRefExpr 0x7fafa482fc70 <col:21> 'int' lvalue Var 0x7fafa482f9e0 'i' 'int'
      `-CompoundStmt 0x7fafa4832450 <col:27, line:27:5>
        |-BinaryOperator 0x7fafa482fce8 <line:18:9, col:15> 'int' '='
        | |-DeclRefExpr 0x7fafa482fca8 <col:9> 'int' lvalue Var 0x7fafa482fae0 'loc' 'int'
        | `-IntegerLiteral 0x7fafa482fcc8 <col:15> 'int' 1
        |-BinaryOperator 0x7fafa482fe50 <line:19:9, col:22> 'double' '='
        | |-DeclRefExpr 0x7fafa482fd08 <col:9> 'double' lvalue Var 0x7fafa482f948 'val' 'double'
        | `-ImplicitCastExpr 0x7fafa482fe38 <col:16, col:22> 'double' <LValueToRValue>
        |   `-ArraySubscriptExpr 0x7fafa482fe18 <col:16, col:22> 'double' lvalue
        |     |-ImplicitCastExpr 0x7fafa482fde8 <col:16, col:19> 'double *' <ArrayToPointerDecay>
        |     | `-ArraySubscriptExpr 0x7fafa482fd80 <col:16, col:19> 'double [m]' lvalue
        |     |   |-ImplicitCastExpr 0x7fafa482fd68 <col:16> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
        |     |   | `-DeclRefExpr 0x7fafa482fd28 <col:16> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fafa482f4f0 'x' 'double (*)[m]':'double (*)[m]'
        |     |   `-IntegerLiteral 0x7fafa482fd48 <col:18> 'int' 0
        |     `-ImplicitCastExpr 0x7fafa482fe00 <col:21> 'int' <LValueToRValue>
        |       `-DeclRefExpr 0x7fafa482fda0 <col:21> 'int' lvalue Var 0x7fafa482f9e0 'i' 'int'
        |-ForStmt 0x7fafa4832330 <line:20:9, line:25:9>
        | |-BinaryOperator 0x7fafa482feb0 <line:20:14, col:18> 'int' '='
        | | |-DeclRefExpr 0x7fafa482fe70 <col:14> 'int' lvalue Var 0x7fafa482fa60 'j' 'int'
        | | `-IntegerLiteral 0x7fafa482fe90 <col:18> 'int' 1
        | |-<<<NULL>>>
        | |-BinaryOperator 0x7fafa482ff40 <col:21, col:23> 'int' '<'
        | | |-ImplicitCastExpr 0x7fafa482ff10 <col:21> 'int' <LValueToRValue>
        | | | `-DeclRefExpr 0x7fafa482fed0 <col:21> 'int' lvalue Var 0x7fafa482fa60 'j' 'int'
        | | `-ImplicitCastExpr 0x7fafa482ff28 <col:23> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fafa482fef0 <col:23> 'int' lvalue ParmVar 0x7fafa482f2f0 'm' 'int'
        | |-UnaryOperator 0x7fafa482ff80 <col:26, col:27> 'int' postfix '++'
        | | `-DeclRefExpr 0x7fafa482ff60 <col:26> 'int' lvalue Var 0x7fafa482fa60 'j' 'int'
        | `-CompoundStmt 0x7fafa4832318 <col:32, line:25:9>
        |   `-IfStmt 0x7fafa4832300 <line:21:6, line:24:6>
        |     |-BinaryOperator 0x7fafa48300e8 <line:21:10, col:20> 'int' '>'
        |     | |-ImplicitCastExpr 0x7fafa48300b8 <col:10, col:16> 'double' <LValueToRValue>
        |     | | `-ArraySubscriptExpr 0x7fafa4830078 <col:10, col:16> 'double' lvalue
        |     | |   |-ImplicitCastExpr 0x7fafa4830048 <col:10, col:13> 'double *' <ArrayToPointerDecay>
        |     | |   | `-ArraySubscriptExpr 0x7fafa4830008 <col:10, col:13> 'double [m]' lvalue
        |     | |   |   |-ImplicitCastExpr 0x7fafa482ffd8 <col:10> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
        |     | |   |   | `-DeclRefExpr 0x7fafa482ff98 <col:10> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fafa482f4f0 'x' 'double (*)[m]':'double (*)[m]'
        |     | |   |   `-ImplicitCastExpr 0x7fafa482fff0 <col:12> 'int' <LValueToRValue>
        |     | |   |     `-DeclRefExpr 0x7fafa482ffb8 <col:12> 'int' lvalue Var 0x7fafa482fa60 'j' 'int'
        |     | |   `-ImplicitCastExpr 0x7fafa4830060 <col:15> 'int' <LValueToRValue>
        |     | |     `-DeclRefExpr 0x7fafa4830028 <col:15> 'int' lvalue Var 0x7fafa482f9e0 'i' 'int'
        |     | `-ImplicitCastExpr 0x7fafa48300d0 <col:20> 'double' <LValueToRValue>
        |     |   `-DeclRefExpr 0x7fafa4830098 <col:20> 'double' lvalue Var 0x7fafa482f948 'val' 'double'
        |     `-CompoundStmt 0x7fafa48322e0 <col:26, line:24:6>
        |       |-BinaryOperator 0x7fafa4830160 <line:22:7, col:13> 'int' '='
        |       | |-DeclRefExpr 0x7fafa4830108 <col:7> 'int' lvalue Var 0x7fafa482fae0 'loc' 'int'
        |       | `-ImplicitCastExpr 0x7fafa4830148 <col:13> 'int' <LValueToRValue>
        |       |   `-DeclRefExpr 0x7fafa4830128 <col:13> 'int' lvalue Var 0x7fafa482fa60 'j' 'int'
        |       `-BinaryOperator 0x7fafa48322c0 <line:23:7, col:20> 'double' '='
        |         |-DeclRefExpr 0x7fafa4830180 <col:7> 'double' lvalue Var 0x7fafa482f948 'val' 'double'
        |         `-ImplicitCastExpr 0x7fafa48322a8 <col:14, col:20> 'double' <LValueToRValue>
        |           `-ArraySubscriptExpr 0x7fafa4832288 <col:14, col:20> 'double' lvalue
        |             |-ImplicitCastExpr 0x7fafa4832258 <col:14, col:17> 'double *' <ArrayToPointerDecay>
        |             | `-ArraySubscriptExpr 0x7fafa4832218 <col:14, col:17> 'double [m]' lvalue
        |             |   |-ImplicitCastExpr 0x7fafa48301e0 <col:14> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
        |             |   | `-DeclRefExpr 0x7fafa48301a0 <col:14> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fafa482f4f0 'x' 'double (*)[m]':'double (*)[m]'
        |             |   `-ImplicitCastExpr 0x7fafa4832200 <col:16> 'int' <LValueToRValue>
        |             |     `-DeclRefExpr 0x7fafa48301c0 <col:16> 'int' lvalue Var 0x7fafa482fa60 'j' 'int'
        |             `-ImplicitCastExpr 0x7fafa4832270 <col:19> 'int' <LValueToRValue>
        |               `-DeclRefExpr 0x7fafa4832238 <col:19> 'int' lvalue Var 0x7fafa482f9e0 'i' 'int'
        `-BinaryOperator 0x7fafa4832430 <line:26:9, col:16> 'int' '='
          |-ArraySubscriptExpr 0x7fafa48323d8 <col:9, col:12> 'int' lvalue
          | |-ImplicitCastExpr 0x7fafa48323a8 <col:9> 'int *':'int *' <LValueToRValue>
          | | `-DeclRefExpr 0x7fafa4832368 <col:9> 'int *':'int *' lvalue ParmVar 0x7fafa482f670 'z' 'int *':'int *'
          | `-ImplicitCastExpr 0x7fafa48323c0 <col:11> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x7fafa4832388 <col:11> 'int' lvalue Var 0x7fafa482f9e0 'i' 'int'
          `-ImplicitCastExpr 0x7fafa4832418 <col:16> 'int' <LValueToRValue>
            `-DeclRefExpr 0x7fafa48323f8 <col:16> 'int' lvalue Var 0x7fafa482fae0 'loc' 'int'
