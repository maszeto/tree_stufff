TranslationUnitDecl 0x7fe105838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fe1058394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fe1058391a0 '__int128'
|-TypedefDecl 0x7fe105839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fe1058391c0 'unsigned __int128'
|-TypedefDecl 0x7fe1058397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fe1058395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fe105839568 '__NSConstantString_tag'
|-TypedefDecl 0x7fe105839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fe105839850 'char *'
|   `-BuiltinType 0x7fe105838ca0 'char'
|-TypedefDecl 0x7fe105839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fe105839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fe105839970 'struct __va_list_tag'
|     `-Record 0x7fe1058398e8 '__va_list_tag'
|-TypedefDecl 0x7fe105891600 <./tree_src/extendSectMatrix_DivSectMatColVec.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fe105838d60 'unsigned char'
`-FunctionDecl 0x7fe105893978 <line:6:1, line:25:1> line:6:6 DivSectMatColVec 'void (int, int, int, int, int, double (*)[mx], double *, double (*)[mz], int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)'
  |-ParmVarDecl 0x7fe105891670 <line:7:5, col:9> col:9 used nx 'int'
  |-ParmVarDecl 0x7fe1058916f0 <col:13, col:17> col:17 used mx 'int'
  |-ParmVarDecl 0x7fe105891770 <col:21, col:25> col:25 used my 'int'
  |-ParmVarDecl 0x7fe1058917f0 <col:29, col:33> col:33 used nz 'int'
  |-ParmVarDecl 0x7fe105891870 <col:37, col:41> col:41 used mz 'int'
  |-ParmVarDecl 0x7fe105891a70 <line:8:5, col:20> col:12 used x 'double (*)[mx]':'double (*)[mx]'
  |-ParmVarDecl 0x7fe105891bf0 <col:23, col:34> col:30 used y 'double *':'double *'
  |-ParmVarDecl 0x7fe105891df0 <col:37, col:52> col:44 used z 'double (*)[mz]':'double (*)[mz]'
  |-ParmVarDecl 0x7fe105891e70 <line:9:5, col:9> col:9 used startx1 'int'
  |-ParmVarDecl 0x7fe105891ef0 <col:18, col:22> col:22 used stopx1 'int'
  |-ParmVarDecl 0x7fe105891f70 <col:30, col:34> col:34 used stepx1 'int'
  |-ParmVarDecl 0x7fe105891ff0 <col:42, col:46> col:46 used startx2 'int'
  |-ParmVarDecl 0x7fe105892070 <col:55, col:59> col:59 used stopx2 'int'
  |-ParmVarDecl 0x7fe1058920f0 <col:67, col:71> col:71 used stepx2 'int'
  |-ParmVarDecl 0x7fe105892170 <line:10:5, col:9> col:9 used starty 'int'
  |-ParmVarDecl 0x7fe1058921f0 <col:17, col:21> col:21 stopy 'int'
  |-ParmVarDecl 0x7fe105892270 <col:28, col:32> col:32 used stepy 'int'
  |-ParmVarDecl 0x7fe1058922f0 <line:11:5, col:9> col:9 used startz1 'int'
  |-ParmVarDecl 0x7fe105892370 <col:18, col:22> col:22 stopz1 'int'
  |-ParmVarDecl 0x7fe1058923f0 <col:30, col:34> col:34 used stepz1 'int'
  |-ParmVarDecl 0x7fe105892470 <col:42, col:46> col:46 used startz2 'int'
  |-ParmVarDecl 0x7fe1058924f0 <col:55, col:59> col:59 stopz2 'int'
  |-ParmVarDecl 0x7fe105892570 <col:67, col:71> col:71 used stepz2 'int'
  `-CompoundStmt 0x7fe105894938 <col:80, line:25:1>
    |-DeclStmt 0x7fe105893e50 <line:13:5, col:31>
    | |-VarDecl 0x7fe105893b30 <col:5, col:9> col:9 used ix 'int'
    | |-VarDecl 0x7fe105893bb0 <col:5, col:13> col:13 used jx 'int'
    | |-VarDecl 0x7fe105893c30 <col:5, col:17> col:17 iy 'int'
    | |-VarDecl 0x7fe105893cb0 <col:5, col:21> col:21 used jy 'int'
    | |-VarDecl 0x7fe105893d30 <col:5, col:25> col:25 used iz 'int'
    | `-VarDecl 0x7fe105893db0 <col:5, col:29> col:29 used jz 'int'
    |-BinaryOperator 0x7fe105893ec0 <line:14:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7fe105893e68 <col:5> 'int' lvalue Var 0x7fe105893d30 'iz' 'int'
    | `-ImplicitCastExpr 0x7fe105893ea8 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7fe105893e88 <col:10> 'int' lvalue ParmVar 0x7fe1058922f0 'startz1' 'int'
    `-ForStmt 0x7fe105894900 <line:15:5, line:24:5>
      |-BinaryOperator 0x7fe105893f38 <line:15:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7fe105893ee0 <col:10> 'int' lvalue Var 0x7fe105893b30 'ix' 'int'
      | `-ImplicitCastExpr 0x7fe105893f20 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fe105893f00 <col:14> 'int' lvalue ParmVar 0x7fe105891e70 'startx1' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7fe105893fc8 <col:23, col:26> 'int' '<'
      | |-ImplicitCastExpr 0x7fe105893f98 <col:23> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fe105893f58 <col:23> 'int' lvalue Var 0x7fe105893b30 'ix' 'int'
      | `-ImplicitCastExpr 0x7fe105893fb0 <col:26> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fe105893f78 <col:26> 'int' lvalue ParmVar 0x7fe105891ef0 'stopx1' 'int'
      |-CompoundAssignOperator 0x7fe105894040 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7fe105893fe8 <col:34> 'int' lvalue Var 0x7fe105893b30 'ix' 'int'
      | `-ImplicitCastExpr 0x7fe105894028 <col:39> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fe105894008 <col:39> 'int' lvalue ParmVar 0x7fe105891f70 'stepx1' 'int'
      `-CompoundStmt 0x7fe1058948d0 <col:48, line:24:5>
        |-BinaryOperator 0x7fe1058940c8 <line:16:9, col:14> 'int' '='
        | |-DeclRefExpr 0x7fe105894070 <col:9> 'int' lvalue Var 0x7fe105893cb0 'jy' 'int'
        | `-ImplicitCastExpr 0x7fe1058940b0 <col:14> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x7fe105894090 <col:14> 'int' lvalue ParmVar 0x7fe105892170 'starty' 'int'
        |-BinaryOperator 0x7fe105894140 <line:17:9, col:14> 'int' '='
        | |-DeclRefExpr 0x7fe1058940e8 <col:9> 'int' lvalue Var 0x7fe105893db0 'jz' 'int'
        | `-ImplicitCastExpr 0x7fe105894128 <col:14> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x7fe105894108 <col:14> 'int' lvalue ParmVar 0x7fe105892470 'startz2' 'int'
        |-ForStmt 0x7fe1058947c8 <line:18:9, line:22:9>
        | |-BinaryOperator 0x7fe1058941b8 <line:18:14, col:18> 'int' '='
        | | |-DeclRefExpr 0x7fe105894160 <col:14> 'int' lvalue Var 0x7fe105893bb0 'jx' 'int'
        | | `-ImplicitCastExpr 0x7fe1058941a0 <col:18> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fe105894180 <col:18> 'int' lvalue ParmVar 0x7fe105891ff0 'startx2' 'int'
        | |-<<<NULL>>>
        | |-BinaryOperator 0x7fe105894248 <col:27, col:30> 'int' '<'
        | | |-ImplicitCastExpr 0x7fe105894218 <col:27> 'int' <LValueToRValue>
        | | | `-DeclRefExpr 0x7fe1058941d8 <col:27> 'int' lvalue Var 0x7fe105893bb0 'jx' 'int'
        | | `-ImplicitCastExpr 0x7fe105894230 <col:30> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fe1058941f8 <col:30> 'int' lvalue ParmVar 0x7fe105892070 'stopx2' 'int'
        | |-CompoundAssignOperator 0x7fe1058942c0 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
        | | |-DeclRefExpr 0x7fe105894268 <col:38> 'int' lvalue Var 0x7fe105893bb0 'jx' 'int'
        | | `-ImplicitCastExpr 0x7fe1058942a8 <col:43> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fe105894288 <col:43> 'int' lvalue ParmVar 0x7fe1058920f0 'stepx2' 'int'
        | `-CompoundStmt 0x7fe1058947a0 <col:52, line:22:9>
        |   |-BinaryOperator 0x7fe1058945d0 <line:19:6, col:34> 'double' '='
        |   | |-ArraySubscriptExpr 0x7fe1058943d0 <col:6, col:14> 'double' lvalue
        |   | | |-ImplicitCastExpr 0x7fe1058943a0 <col:6, col:10> 'double *' <ArrayToPointerDecay>
        |   | | | `-ArraySubscriptExpr 0x7fe105894360 <col:6, col:10> 'double [mz]' lvalue
        |   | | |   |-ImplicitCastExpr 0x7fe105894330 <col:6> 'double (*)[mz]':'double (*)[mz]' <LValueToRValue>
        |   | | |   | `-DeclRefExpr 0x7fe1058942f0 <col:6> 'double (*)[mz]':'double (*)[mz]' lvalue ParmVar 0x7fe105891df0 'z' 'double (*)[mz]':'double (*)[mz]'
        |   | | |   `-ImplicitCastExpr 0x7fe105894348 <col:8> 'int' <LValueToRValue>
        |   | | |     `-DeclRefExpr 0x7fe105894310 <col:8> 'int' lvalue Var 0x7fe105893db0 'jz' 'int'
        |   | | `-ImplicitCastExpr 0x7fe1058943b8 <col:12> 'int' <LValueToRValue>
        |   | |   `-DeclRefExpr 0x7fe105894380 <col:12> 'int' lvalue Var 0x7fe105893d30 'iz' 'int'
        |   | `-BinaryOperator 0x7fe1058945b0 <col:18, col:34> 'double' '/'
        |   |   |-ImplicitCastExpr 0x7fe105894580 <col:18, col:26> 'double' <LValueToRValue>
        |   |   | `-ArraySubscriptExpr 0x7fe1058944d0 <col:18, col:26> 'double' lvalue
        |   |   |   |-ImplicitCastExpr 0x7fe1058944a0 <col:18, col:22> 'double *' <ArrayToPointerDecay>
        |   |   |   | `-ArraySubscriptExpr 0x7fe105894460 <col:18, col:22> 'double [mx]' lvalue
        |   |   |   |   |-ImplicitCastExpr 0x7fe105894430 <col:18> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
        |   |   |   |   | `-DeclRefExpr 0x7fe1058943f0 <col:18> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7fe105891a70 'x' 'double (*)[mx]':'double (*)[mx]'
        |   |   |   |   `-ImplicitCastExpr 0x7fe105894448 <col:20> 'int' <LValueToRValue>
        |   |   |   |     `-DeclRefExpr 0x7fe105894410 <col:20> 'int' lvalue Var 0x7fe105893bb0 'jx' 'int'
        |   |   |   `-ImplicitCastExpr 0x7fe1058944b8 <col:24> 'int' <LValueToRValue>
        |   |   |     `-DeclRefExpr 0x7fe105894480 <col:24> 'int' lvalue Var 0x7fe105893b30 'ix' 'int'
        |   |   `-ImplicitCastExpr 0x7fe105894598 <col:30, col:34> 'double' <LValueToRValue>
        |   |     `-ArraySubscriptExpr 0x7fe105894560 <col:30, col:34> 'double' lvalue
        |   |       |-ImplicitCastExpr 0x7fe105894530 <col:30> 'double *':'double *' <LValueToRValue>
        |   |       | `-DeclRefExpr 0x7fe1058944f0 <col:30> 'double *':'double *' lvalue ParmVar 0x7fe105891bf0 'y' 'double *':'double *'
        |   |       `-ImplicitCastExpr 0x7fe105894548 <col:32> 'int' <LValueToRValue>
        |   |         `-DeclRefExpr 0x7fe105894510 <col:32> 'int' lvalue Var 0x7fe105893cb0 'jy' 'int'
        |   |-BinaryOperator 0x7fe1058946b0 <line:20:6, col:16> 'int' '='
        |   | |-DeclRefExpr 0x7fe105894600 <col:6> 'int' lvalue Var 0x7fe105893cb0 'jy' 'int'
        |   | `-BinaryOperator 0x7fe105894690 <col:11, col:16> 'int' '+'
        |   |   |-ImplicitCastExpr 0x7fe105894660 <col:11> 'int' <LValueToRValue>
        |   |   | `-DeclRefExpr 0x7fe105894620 <col:11> 'int' lvalue Var 0x7fe105893cb0 'jy' 'int'
        |   |   `-ImplicitCastExpr 0x7fe105894678 <col:16> 'int' <LValueToRValue>
        |   |     `-DeclRefExpr 0x7fe105894640 <col:16> 'int' lvalue ParmVar 0x7fe105892270 'stepy' 'int'
        |   `-BinaryOperator 0x7fe105894780 <line:21:6, col:16> 'int' '='
        |     |-DeclRefExpr 0x7fe1058946d0 <col:6> 'int' lvalue Var 0x7fe105893db0 'jz' 'int'
        |     `-BinaryOperator 0x7fe105894760 <col:11, col:16> 'int' '+'
        |       |-ImplicitCastExpr 0x7fe105894730 <col:11> 'int' <LValueToRValue>
        |       | `-DeclRefExpr 0x7fe1058946f0 <col:11> 'int' lvalue Var 0x7fe105893db0 'jz' 'int'
        |       `-ImplicitCastExpr 0x7fe105894748 <col:16> 'int' <LValueToRValue>
        |         `-DeclRefExpr 0x7fe105894710 <col:16> 'int' lvalue ParmVar 0x7fe105892570 'stepz2' 'int'
        `-BinaryOperator 0x7fe1058948b0 <line:23:9, col:19> 'int' '='
          |-DeclRefExpr 0x7fe105894800 <col:9> 'int' lvalue Var 0x7fe105893d30 'iz' 'int'
          `-BinaryOperator 0x7fe105894890 <col:14, col:19> 'int' '+'
            |-ImplicitCastExpr 0x7fe105894860 <col:14> 'int' <LValueToRValue>
            | `-DeclRefExpr 0x7fe105894820 <col:14> 'int' lvalue Var 0x7fe105893d30 'iz' 'int'
            `-ImplicitCastExpr 0x7fe105894878 <col:19> 'int' <LValueToRValue>
              `-DeclRefExpr 0x7fe105894840 <col:19> 'int' lvalue ParmVar 0x7fe1058923f0 'stepz1' 'int'
