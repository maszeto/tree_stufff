TranslationUnitDecl 0x7f944701f808 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f94470200a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f944701fda0 '__int128'
|-TypedefDecl 0x7f9447020110 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f944701fdc0 'unsigned __int128'
|-TypedefDecl 0x7f94470203f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f94470201f0 'struct __NSConstantString_tag'
|   `-Record 0x7f9447020168 '__NSConstantString_tag'
|-TypedefDecl 0x7f9447020490 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f9447020450 'char *'
|   `-BuiltinType 0x7f944701f8a0 'char'
|-TypedefDecl 0x7f9447020768 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f9447020710 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f9447020570 'struct __va_list_tag'
|     `-Record 0x7f94470204e8 '__va_list_tag'
|-TypedefDecl 0x7f9446848e00 <./tree_src/dyadicSectOneMatrix_ModSectOneScaMatCol.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7f944701f960 'unsigned char'
|-FunctionDecl 0x7f94468499d8 <line:6:1, line:16:1> line:6:6 ModSectOneScaMatCol 'void (int, int, int, double, double (*)[m], double (*)[m], int, int, int, int, int, int)'
| |-ParmVarDecl 0x7f9446848e70 <line:7:5, col:9> col:9 used m 'int'
| |-ParmVarDecl 0x7f9446848ef0 <col:12, col:16> col:16 used n 'int'
| |-ParmVarDecl 0x7f9446848f70 <col:19, col:23> col:23 used p 'int'
| |-ParmVarDecl 0x7f9446848ff0 <col:26, col:33> col:33 used x 'double'
| |-ParmVarDecl 0x7f94468491f0 <col:36, col:49> col:43 used z 'double (*)[m]':'double (*)[m]'
| |-ParmVarDecl 0x7f94468493f0 <col:52, col:65> col:59 used y 'double (*)[m]':'double (*)[m]'
| |-ParmVarDecl 0x7f9446849470 <line:8:5, col:9> col:9 used sz1 'int'
| |-ParmVarDecl 0x7f94468494f0 <col:14, col:18> col:18 ez1 'int'
| |-ParmVarDecl 0x7f9446849570 <col:23, col:27> col:27 used bz1 'int'
| |-ParmVarDecl 0x7f94468495f0 <col:32, col:36> col:36 used sy1 'int'
| |-ParmVarDecl 0x7f9446849670 <col:41, col:45> col:45 used ey1 'int'
| |-ParmVarDecl 0x7f94468496f0 <col:50, col:54> col:54 used by1 'int'
| `-CompoundStmt 0x7f944684b490 <col:59, line:16:1>
|   |-DeclStmt 0x7f9446849c38 <line:10:5, col:12>
|   | |-VarDecl 0x7f9446849b38 <col:5, col:9> col:9 used j 'int'
|   | `-VarDecl 0x7f9446849bb8 <col:5, col:11> col:11 used i 'int'
|   |-BinaryOperator 0x7f9446849ca8 <line:11:5, col:8> 'int' '='
|   | |-DeclRefExpr 0x7f9446849c50 <col:5> 'int' lvalue Var 0x7f9446849b38 'j' 'int'
|   | `-ImplicitCastExpr 0x7f9446849c90 <col:8> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7f9446849c70 <col:8> 'int' lvalue ParmVar 0x7f9446849570 'bz1' 'int'
|   `-ForStmt 0x7f944684b458 <line:12:5, line:15:5>
|     |-BinaryOperator 0x7f9446849d20 <line:12:10, col:13> 'int' '='
|     | |-DeclRefExpr 0x7f9446849cc8 <col:10> 'int' lvalue Var 0x7f9446849bb8 'i' 'int'
|     | `-ImplicitCastExpr 0x7f9446849d08 <col:13> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7f9446849ce8 <col:13> 'int' lvalue ParmVar 0x7f94468496f0 'by1' 'int'
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7f9446849db0 <col:18, col:20> 'int' '<'
|     | |-ImplicitCastExpr 0x7f9446849d80 <col:18> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7f9446849d40 <col:18> 'int' lvalue Var 0x7f9446849bb8 'i' 'int'
|     | `-ImplicitCastExpr 0x7f9446849d98 <col:20> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7f9446849d60 <col:20> 'int' lvalue ParmVar 0x7f9446849670 'ey1' 'int'
|     |-CompoundAssignOperator 0x7f944684ae38 <col:25, col:29> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     | |-DeclRefExpr 0x7f9446849dd0 <col:25> 'int' lvalue Var 0x7f9446849bb8 'i' 'int'
|     | `-ImplicitCastExpr 0x7f944684ae20 <col:29> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7f944684ae00 <col:29> 'int' lvalue ParmVar 0x7f94468495f0 'sy1' 'int'
|     `-CompoundStmt 0x7f944684b438 <col:35, line:15:5>
|       |-BinaryOperator 0x7f944684b390 <line:13:2, col:25> 'double' '='
|       | |-ArraySubscriptExpr 0x7f944684af78 <col:2, col:8> 'double' lvalue
|       | | |-ImplicitCastExpr 0x7f944684af48 <col:2, col:5> 'double *' <ArrayToPointerDecay>
|       | | | `-ArraySubscriptExpr 0x7f944684aed8 <col:2, col:5> 'double [m]' lvalue
|       | | |   |-ImplicitCastExpr 0x7f944684aea8 <col:2> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
|       | | |   | `-DeclRefExpr 0x7f944684ae68 <col:2> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f94468491f0 'z' 'double (*)[m]':'double (*)[m]'
|       | | |   `-ImplicitCastExpr 0x7f944684aec0 <col:4> 'int' <LValueToRValue>
|       | | |     `-DeclRefExpr 0x7f944684ae88 <col:4> 'int' lvalue Var 0x7f9446849b38 'j' 'int'
|       | | `-ImplicitCastExpr 0x7f944684af60 <col:7> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7f944684aef8 <col:7> 'int' lvalue ParmVar 0x7f9446848f70 'p' 'int'
|       | `-CallExpr 0x7f944684b330 <col:11, col:25> 'double'
|       |   |-ImplicitCastExpr 0x7f944684b318 <col:11> 'double (*)(double, double)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x7f944684b1a8 <col:11> 'double (double, double)' Function 0x7f944684afd8 'fmod' 'double (double, double)'
|       |   |-ImplicitCastExpr 0x7f944684b360 <col:16> 'double' <LValueToRValue>
|       |   | `-DeclRefExpr 0x7f944684b1c8 <col:16> 'double' lvalue ParmVar 0x7f9446848ff0 'x' 'double'
|       |   `-ImplicitCastExpr 0x7f944684b378 <col:18, col:24> 'double' <LValueToRValue>
|       |     `-ArraySubscriptExpr 0x7f944684b2c8 <col:18, col:24> 'double' lvalue
|       |       |-ImplicitCastExpr 0x7f944684b298 <col:18, col:21> 'double *' <ArrayToPointerDecay>
|       |       | `-ArraySubscriptExpr 0x7f944684b258 <col:18, col:21> 'double [m]' lvalue
|       |       |   |-ImplicitCastExpr 0x7f944684b228 <col:18> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
|       |       |   | `-DeclRefExpr 0x7f944684b1e8 <col:18> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f94468493f0 'y' 'double (*)[m]':'double (*)[m]'
|       |       |   `-ImplicitCastExpr 0x7f944684b240 <col:20> 'int' <LValueToRValue>
|       |       |     `-DeclRefExpr 0x7f944684b208 <col:20> 'int' lvalue Var 0x7f9446849bb8 'i' 'int'
|       |       `-ImplicitCastExpr 0x7f944684b2b0 <col:23> 'int' <LValueToRValue>
|       |         `-DeclRefExpr 0x7f944684b278 <col:23> 'int' lvalue ParmVar 0x7f9446848f70 'p' 'int'
|       `-CompoundAssignOperator 0x7f944684b408 <line:14:9, col:13> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|         |-DeclRefExpr 0x7f944684b3b0 <col:9> 'int' lvalue Var 0x7f9446849b38 'j' 'int'
|         `-ImplicitCastExpr 0x7f944684b3f0 <col:13> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x7f944684b3d0 <col:13> 'int' lvalue ParmVar 0x7f9446849470 'sz1' 'int'
`-FunctionDecl 0x7f944684afd8 <line:13:11> col:11 implicit used fmod 'double (double, double)' extern
  |-ParmVarDecl 0x7f944684b078 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x7f944684b0e0 <<invalid sloc>> <invalid sloc> 'double'
  |-ConstAttr 0x7f944684b158 <col:11> Implicit
  `-NoThrowAttr 0x7f944684b198 <col:11> Implicit
