TranslationUnitDecl 0x7fc7a3838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fc7a38394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fc7a38391a0 '__int128'
|-TypedefDecl 0x7fc7a3839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fc7a38391c0 'unsigned __int128'
|-TypedefDecl 0x7fc7a38397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fc7a38395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fc7a3839568 '__NSConstantString_tag'
|-TypedefDecl 0x7fc7a3839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fc7a3839850 'char *'
|   `-BuiltinType 0x7fc7a3838ca0 'char'
|-TypedefDecl 0x7fc7a3839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fc7a3839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fc7a3839970 'struct __va_list_tag'
|     `-Record 0x7fc7a38398e8 '__va_list_tag'
`-FunctionDecl 0x7fc7a402e768 <./tree_src/recurWholeVector_Order1VectorVec.c:3:1, line:10:1> line:3:6 Order1VectorVec 'void (int, double *, double *, double *)'
  |-ParmVarDecl 0x7fc7a402e200 <line:4:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7fc7a402e380 <col:12, col:22> col:19 used x 'double *':'double *'
  |-ParmVarDecl 0x7fc7a402e4d0 <col:25, col:35> col:32 used b 'double *':'double *'
  |-ParmVarDecl 0x7fc7a402e620 <col:38, col:48> col:45 used a 'double *':'double *'
  `-CompoundStmt 0x7fc7a402eda8 <col:52, line:10:1>
    |-DeclStmt 0x7fc7a402e8f0 <line:6:5, col:10>
    | `-VarDecl 0x7fc7a402e888 <col:5, col:9> col:9 used i 'int'
    `-ForStmt 0x7fc7a402ed70 <line:7:5, line:9:5>
      |-BinaryOperator 0x7fc7a402e948 <line:7:10, col:13> 'int' '='
      | |-DeclRefExpr 0x7fc7a402e908 <col:10> 'int' lvalue Var 0x7fc7a402e888 'i' 'int'
      | `-IntegerLiteral 0x7fc7a402e928 <col:13> 'int' 1
      |-<<<NULL>>>
      |-BinaryOperator 0x7fc7a402e9d8 <col:16, col:18> 'int' '<'
      | |-ImplicitCastExpr 0x7fc7a402e9a8 <col:16> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fc7a402e968 <col:16> 'int' lvalue Var 0x7fc7a402e888 'i' 'int'
      | `-ImplicitCastExpr 0x7fc7a402e9c0 <col:18> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fc7a402e988 <col:18> 'int' lvalue ParmVar 0x7fc7a402e200 'n' 'int'
      |-UnaryOperator 0x7fc7a402ea18 <col:21, col:22> 'int' postfix '++'
      | `-DeclRefExpr 0x7fc7a402e9f8 <col:21> 'int' lvalue Var 0x7fc7a402e888 'i' 'int'
      `-CompoundStmt 0x7fc7a402ed58 <col:27, line:9:5>
        `-BinaryOperator 0x7fc7a402ed38 <line:8:9, col:35> 'double' '='
          |-ArraySubscriptExpr 0x7fc7a402eaa0 <col:9, col:12> 'double' lvalue
          | |-ImplicitCastExpr 0x7fc7a402ea70 <col:9> 'double *':'double *' <LValueToRValue>
          | | `-DeclRefExpr 0x7fc7a402ea30 <col:9> 'double *':'double *' lvalue ParmVar 0x7fc7a402e380 'x' 'double *':'double *'
          | `-ImplicitCastExpr 0x7fc7a402ea88 <col:11> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x7fc7a402ea50 <col:11> 'int' lvalue Var 0x7fc7a402e888 'i' 'int'
          `-BinaryOperator 0x7fc7a402ed18 <col:16, col:35> 'double' '+'
            |-BinaryOperator 0x7fc7a402ec50 <col:16, col:28> 'double' '*'
            | |-ImplicitCastExpr 0x7fc7a402ec20 <col:16, col:21> 'double' <LValueToRValue>
            | | `-ArraySubscriptExpr 0x7fc7a402eb70 <col:16, col:21> 'double' lvalue
            | |   |-ImplicitCastExpr 0x7fc7a402eb58 <col:16> 'double *':'double *' <LValueToRValue>
            | |   | `-DeclRefExpr 0x7fc7a402eac0 <col:16> 'double *':'double *' lvalue ParmVar 0x7fc7a402e380 'x' 'double *':'double *'
            | |   `-BinaryOperator 0x7fc7a402eb38 <col:18, col:20> 'int' '-'
            | |     |-ImplicitCastExpr 0x7fc7a402eb20 <col:18> 'int' <LValueToRValue>
            | |     | `-DeclRefExpr 0x7fc7a402eae0 <col:18> 'int' lvalue Var 0x7fc7a402e888 'i' 'int'
            | |     `-IntegerLiteral 0x7fc7a402eb00 <col:20> 'int' 1
            | `-ImplicitCastExpr 0x7fc7a402ec38 <col:25, col:28> 'double' <LValueToRValue>
            |   `-ArraySubscriptExpr 0x7fc7a402ec00 <col:25, col:28> 'double' lvalue
            |     |-ImplicitCastExpr 0x7fc7a402ebd0 <col:25> 'double *':'double *' <LValueToRValue>
            |     | `-DeclRefExpr 0x7fc7a402eb90 <col:25> 'double *':'double *' lvalue ParmVar 0x7fc7a402e620 'a' 'double *':'double *'
            |     `-ImplicitCastExpr 0x7fc7a402ebe8 <col:27> 'int' <LValueToRValue>
            |       `-DeclRefExpr 0x7fc7a402ebb0 <col:27> 'int' lvalue Var 0x7fc7a402e888 'i' 'int'
            `-ImplicitCastExpr 0x7fc7a402ed00 <col:32, col:35> 'double' <LValueToRValue>
              `-ArraySubscriptExpr 0x7fc7a402ece0 <col:32, col:35> 'double' lvalue
                |-ImplicitCastExpr 0x7fc7a402ecb0 <col:32> 'double *':'double *' <LValueToRValue>
                | `-DeclRefExpr 0x7fc7a402ec70 <col:32> 'double *':'double *' lvalue ParmVar 0x7fc7a402e4d0 'b' 'double *':'double *'
                `-ImplicitCastExpr 0x7fc7a402ecc8 <col:34> 'int' <LValueToRValue>
                  `-DeclRefExpr 0x7fc7a402ec90 <col:34> 'int' lvalue Var 0x7fc7a402e888 'i' 'int'
