TranslationUnitDecl 0x7fac6c038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fac6c0394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fac6c0391a0 '__int128'
|-TypedefDecl 0x7fac6c039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fac6c0391c0 'unsigned __int128'
|-TypedefDecl 0x7fac6c0397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fac6c0395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fac6c039568 '__NSConstantString_tag'
|-TypedefDecl 0x7fac6c039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fac6c039850 'char *'
|   `-BuiltinType 0x7fac6c038ca0 'char'
|-TypedefDecl 0x7fac6c039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fac6c039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fac6c039970 'struct __va_list_tag'
|     `-Record 0x7fac6c0398e8 '__va_list_tag'
|-TypedefDecl 0x7fac6c82f200 <./tree_src/unaryWholeMatrix_MinMagWholeFirstMat.c:4:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fac6c038d60 'unsigned char'
|-FunctionDecl 0x7fac6c82f828 <line:12:1, line:24:1> line:12:6 MinMagWholeFirstMat 'void (int, int, double (*)[m], double *)'
| |-ParmVarDecl 0x7fac6c82f270 <line:13:5, col:9> col:9 used n 'int'
| |-ParmVarDecl 0x7fac6c82f2f0 <col:12, col:16> col:16 used m 'int'
| |-ParmVarDecl 0x7fac6c82f4f0 <col:19, col:32> col:26 used x 'double (*)[m]':'double (*)[m]'
| |-ParmVarDecl 0x7fac6c82f670 <col:35, col:45> col:42 used z 'double *':'double *'
| `-CompoundStmt 0x7fac6c832610 <col:49, line:24:1>
|   |-DeclStmt 0x7fac6c82fa48 <line:15:5, col:13>
|   | |-VarDecl 0x7fac6c82f948 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x7fac6c82f9c8 <col:5, col:12> col:12 used j 'int'
|   |-DeclStmt 0x7fac6c82fae0 <line:16:5, col:15>
|   | `-VarDecl 0x7fac6c82fa78 <col:5, col:12> col:12 used val 'double'
|   `-ForStmt 0x7fac6c8325d8 <line:17:5, line:23:5>
|     |-BinaryOperator 0x7fac6c82fb38 <line:17:10, col:13> 'int' '='
|     | |-DeclRefExpr 0x7fac6c82faf8 <col:10> 'int' lvalue Var 0x7fac6c82f948 'i' 'int'
|     | `-IntegerLiteral 0x7fac6c82fb18 <col:13> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fac6c82fbc8 <col:16, col:18> 'int' '<'
|     | |-ImplicitCastExpr 0x7fac6c82fb98 <col:16> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fac6c82fb58 <col:16> 'int' lvalue Var 0x7fac6c82f948 'i' 'int'
|     | `-ImplicitCastExpr 0x7fac6c82fbb0 <col:18> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fac6c82fb78 <col:18> 'int' lvalue ParmVar 0x7fac6c82f270 'n' 'int'
|     |-UnaryOperator 0x7fac6c82fc08 <col:21, col:22> 'int' postfix '++'
|     | `-DeclRefExpr 0x7fac6c82fbe8 <col:21> 'int' lvalue Var 0x7fac6c82f948 'i' 'int'
|     `-CompoundStmt 0x7fac6c8325b8 <col:27, line:23:5>
|       |-ForStmt 0x7fac6c832498 <line:19:9, line:21:9>
|       | |-BinaryOperator 0x7fac6c82fc80 <line:19:14, col:17> 'int' '='
|       | | |-DeclRefExpr 0x7fac6c82fc40 <col:14> 'int' lvalue Var 0x7fac6c82f9c8 'j' 'int'
|       | | `-IntegerLiteral 0x7fac6c82fc60 <col:17> 'int' 0
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x7fac6c82fd10 <col:20, col:22> 'int' '<'
|       | | |-ImplicitCastExpr 0x7fac6c82fce0 <col:20> 'int' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7fac6c82fca0 <col:20> 'int' lvalue Var 0x7fac6c82f9c8 'j' 'int'
|       | | `-ImplicitCastExpr 0x7fac6c82fcf8 <col:22> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fac6c82fcc0 <col:22> 'int' lvalue ParmVar 0x7fac6c82f2f0 'm' 'int'
|       | |-UnaryOperator 0x7fac6c82fd50 <col:25, col:26> 'int' postfix '++'
|       | | `-DeclRefExpr 0x7fac6c82fd30 <col:25> 'int' lvalue Var 0x7fac6c82f9c8 'j' 'int'
|       | `-CompoundStmt 0x7fac6c832480 <col:31, line:21:9>
|       |   `-BinaryOperator 0x7fac6c832460 <line:20:6, col:35> 'double' '='
|       |     |-DeclRefExpr 0x7fac6c82fd68 <col:6> 'double' lvalue Var 0x7fac6c82fa78 'val' 'double'
|       |     `-CallExpr 0x7fac6c832400 <col:12, col:35> 'double'
|       |       |-ImplicitCastExpr 0x7fac6c8323e8 <col:12> 'double (*)(double, double)' <FunctionToPointerDecay>
|       |       | `-DeclRefExpr 0x7fac6c82ff98 <col:12> 'double (double, double)' Function 0x7fac6c82fdc8 'fmin' 'double (double, double)'
|       |       |-ImplicitCastExpr 0x7fac6c832430 <col:18> 'double' <LValueToRValue>
|       |       | `-DeclRefExpr 0x7fac6c82ffb8 <col:18> 'double' lvalue Var 0x7fac6c82fa78 'val' 'double'
|       |       `-ImplicitCastExpr 0x7fac6c832448 <col:23, col:34> 'double' <IntegralToFloating>
|       |         `-CallExpr 0x7fac6c8322d0 <col:23, col:34> 'int'
|       |           |-ImplicitCastExpr 0x7fac6c8322b8 <col:23> 'int (*)(int)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x7fac6c830170 <col:23> 'int (int)' Function 0x7fac6c830010 'abs' 'int (int)'
|       |           `-ImplicitCastExpr 0x7fac6c832310 <col:27, col:33> 'int' <FloatingToIntegral>
|       |             `-ImplicitCastExpr 0x7fac6c8322f8 <col:27, col:33> 'double' <LValueToRValue>
|       |               `-ArraySubscriptExpr 0x7fac6c832270 <col:27, col:33> 'double' lvalue
|       |                 |-ImplicitCastExpr 0x7fac6c832240 <col:27, col:30> 'double *' <ArrayToPointerDecay>
|       |                 | `-ArraySubscriptExpr 0x7fac6c832200 <col:27, col:30> 'double [m]' lvalue
|       |                 |   |-ImplicitCastExpr 0x7fac6c8301d0 <col:27> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
|       |                 |   | `-DeclRefExpr 0x7fac6c830190 <col:27> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fac6c82f4f0 'x' 'double (*)[m]':'double (*)[m]'
|       |                 |   `-ImplicitCastExpr 0x7fac6c8301e8 <col:29> 'int' <LValueToRValue>
|       |                 |     `-DeclRefExpr 0x7fac6c8301b0 <col:29> 'int' lvalue Var 0x7fac6c82f9c8 'j' 'int'
|       |                 `-ImplicitCastExpr 0x7fac6c832258 <col:32> 'int' <LValueToRValue>
|       |                   `-DeclRefExpr 0x7fac6c832220 <col:32> 'int' lvalue Var 0x7fac6c82f948 'i' 'int'
|       `-BinaryOperator 0x7fac6c832598 <line:22:9, col:16> 'double' '='
|         |-ArraySubscriptExpr 0x7fac6c832540 <col:9, col:12> 'double' lvalue
|         | |-ImplicitCastExpr 0x7fac6c832510 <col:9> 'double *':'double *' <LValueToRValue>
|         | | `-DeclRefExpr 0x7fac6c8324d0 <col:9> 'double *':'double *' lvalue ParmVar 0x7fac6c82f670 'z' 'double *':'double *'
|         | `-ImplicitCastExpr 0x7fac6c832528 <col:11> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x7fac6c8324f0 <col:11> 'int' lvalue Var 0x7fac6c82f948 'i' 'int'
|         `-ImplicitCastExpr 0x7fac6c832580 <col:16> 'double' <LValueToRValue>
|           `-DeclRefExpr 0x7fac6c832560 <col:16> 'double' lvalue Var 0x7fac6c82fa78 'val' 'double'
|-FunctionDecl 0x7fac6c82fdc8 <line:20:12> col:12 implicit used fmin 'double (double, double)' extern
| |-ParmVarDecl 0x7fac6c82fe68 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x7fac6c82fed0 <<invalid sloc>> <invalid sloc> 'double'
| |-NoThrowAttr 0x7fac6c82ff48 <col:12> Implicit
| `-ConstAttr 0x7fac6c82ff88 <col:12> Implicit
`-FunctionDecl 0x7fac6c830010 <col:23> col:23 implicit used abs 'int (int)' extern
  |-ParmVarDecl 0x7fac6c8300b0 <<invalid sloc>> <invalid sloc> 'int'
  |-NoThrowAttr 0x7fac6c830120 <col:23> Implicit
  `-ConstAttr 0x7fac6c830160 <col:23> Implicit
