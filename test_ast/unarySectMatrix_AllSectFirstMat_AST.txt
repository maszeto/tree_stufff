TranslationUnitDecl 0x7f968b81f808 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f968b8200a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f968b81fda0 '__int128'
|-TypedefDecl 0x7f968b820110 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f968b81fdc0 'unsigned __int128'
|-TypedefDecl 0x7f968b8203f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f968b8201f0 'struct __NSConstantString_tag'
|   `-Record 0x7f968b820168 '__NSConstantString_tag'
|-TypedefDecl 0x7f968b820490 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f968b820450 'char *'
|   `-BuiltinType 0x7f968b81f8a0 'char'
|-TypedefDecl 0x7f968b820768 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f968b820710 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f968b820570 'struct __va_list_tag'
|     `-Record 0x7f968b8204e8 '__va_list_tag'
|-TypedefDecl 0x7f968b048e00 <./tree_src/unarySectMatrix_AllSectFirstMat.c:4:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x7f968b81f960 'unsigned char'
`-FunctionDecl 0x7f968b049b58 <line:11:1, line:27:1> line:11:6 AllSectFirstMat 'void (int, int, int, BOOL (*)[mx], BOOL *, int, int, int, int, int, int, int, int, int)'
  |-ParmVarDecl 0x7f968b048e70 <line:12:5, col:9> col:9 used nx 'int'
  |-ParmVarDecl 0x7f968b048ef0 <col:13, col:17> col:17 used mx 'int'
  |-ParmVarDecl 0x7f968b048f70 <col:21, col:25> col:25 used nz 'int'
  |-ParmVarDecl 0x7f968b049240 <col:29, col:42> col:34 used x 'BOOL (*)[mx]':'BOOL (*)[mx]'
  |-ParmVarDecl 0x7f968b049430 <col:45, col:54> col:50 used z 'BOOL *':'BOOL *'
  |-ParmVarDecl 0x7f968b0494b0 <line:13:5, col:9> col:9 used startx1 'int'
  |-ParmVarDecl 0x7f968b049530 <col:18, col:22> col:22 used stopx1 'int'
  |-ParmVarDecl 0x7f968b0495b0 <col:30, col:34> col:34 used stepx1 'int'
  |-ParmVarDecl 0x7f968b049630 <col:42, col:46> col:46 used startx2 'int'
  |-ParmVarDecl 0x7f968b0496b0 <col:55, col:59> col:59 used stopx2 'int'
  |-ParmVarDecl 0x7f968b049730 <col:67, col:71> col:71 used stepx2 'int'
  |-ParmVarDecl 0x7f968b0497b0 <line:14:5, col:9> col:9 used startz 'int'
  |-ParmVarDecl 0x7f968b049830 <col:17, col:21> col:21 stopz 'int'
  |-ParmVarDecl 0x7f968b0498b0 <col:28, col:32> col:32 used stepz 'int'
  `-CompoundStmt 0x7f968b04c760 <col:40, line:27:1>
    |-DeclStmt 0x7f968b04be88 <line:16:5, col:19>
    | |-VarDecl 0x7f968b049cc8 <col:5, col:9> col:9 used ix 'int'
    | |-VarDecl 0x7f968b049d48 <col:5, col:13> col:13 used jx 'int'
    | `-VarDecl 0x7f968b04be00 <col:5, col:17> col:17 used iz 'int'
    |-DeclStmt 0x7f968b04bf18 <line:17:5, col:13>
    | `-VarDecl 0x7f968b04beb0 <col:5, col:10> col:10 used val 'BOOL':'unsigned char'
    |-BinaryOperator 0x7f968b04bf88 <line:18:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7f968b04bf30 <col:5> 'int' lvalue Var 0x7f968b04be00 'iz' 'int'
    | `-ImplicitCastExpr 0x7f968b04bf70 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7f968b04bf50 <col:10> 'int' lvalue ParmVar 0x7f968b0497b0 'startz' 'int'
    `-ForStmt 0x7f968b04c728 <line:19:5, line:26:5>
      |-BinaryOperator 0x7f968b04c000 <line:19:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7f968b04bfa8 <col:10> 'int' lvalue Var 0x7f968b049cc8 'ix' 'int'
      | `-ImplicitCastExpr 0x7f968b04bfe8 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f968b04bfc8 <col:14> 'int' lvalue ParmVar 0x7f968b0494b0 'startx1' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7f968b04c090 <col:23, col:26> 'int' '<'
      | |-ImplicitCastExpr 0x7f968b04c060 <col:23> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7f968b04c020 <col:23> 'int' lvalue Var 0x7f968b049cc8 'ix' 'int'
      | `-ImplicitCastExpr 0x7f968b04c078 <col:26> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f968b04c040 <col:26> 'int' lvalue ParmVar 0x7f968b049530 'stopx1' 'int'
      |-CompoundAssignOperator 0x7f968b04c108 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7f968b04c0b0 <col:34> 'int' lvalue Var 0x7f968b049cc8 'ix' 'int'
      | `-ImplicitCastExpr 0x7f968b04c0f0 <col:39> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f968b04c0d0 <col:39> 'int' lvalue ParmVar 0x7f968b0495b0 'stepx1' 'int'
      `-CompoundStmt 0x7f968b04c6f8 <col:48, line:26:5>
        |-BinaryOperator 0x7f968b04c190 <line:20:9, line:5:14> 'BOOL':'unsigned char' '='
        | |-DeclRefExpr 0x7f968b04c138 <line:20:9> 'BOOL':'unsigned char' lvalue Var 0x7f968b04beb0 'val' 'BOOL':'unsigned char'
        | `-ImplicitCastExpr 0x7f968b04c178 <line:5:14> 'BOOL':'unsigned char' <IntegralCast>
        |   `-IntegerLiteral 0x7f968b04c158 <col:14> 'int' 1
        |-ForStmt 0x7f968b04c550 <line:21:9, line:23:9>
        | |-BinaryOperator 0x7f968b04c208 <line:21:14, col:18> 'int' '='
        | | |-DeclRefExpr 0x7f968b04c1b0 <col:14> 'int' lvalue Var 0x7f968b049d48 'jx' 'int'
        | | `-ImplicitCastExpr 0x7f968b04c1f0 <col:18> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7f968b04c1d0 <col:18> 'int' lvalue ParmVar 0x7f968b049630 'startx2' 'int'
        | |-<<<NULL>>>
        | |-BinaryOperator 0x7f968b04c298 <col:27, col:30> 'int' '<'
        | | |-ImplicitCastExpr 0x7f968b04c268 <col:27> 'int' <LValueToRValue>
        | | | `-DeclRefExpr 0x7f968b04c228 <col:27> 'int' lvalue Var 0x7f968b049d48 'jx' 'int'
        | | `-ImplicitCastExpr 0x7f968b04c280 <col:30> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7f968b04c248 <col:30> 'int' lvalue ParmVar 0x7f968b0496b0 'stopx2' 'int'
        | |-CompoundAssignOperator 0x7f968b04c310 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
        | | |-DeclRefExpr 0x7f968b04c2b8 <col:38> 'int' lvalue Var 0x7f968b049d48 'jx' 'int'
        | | `-ImplicitCastExpr 0x7f968b04c2f8 <col:43> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7f968b04c2d8 <col:43> 'int' lvalue ParmVar 0x7f968b049730 'stepx2' 'int'
        | `-CompoundStmt 0x7f968b04c538 <col:52, line:23:9>
        |   `-BinaryOperator 0x7f968b04c518 <line:22:13, col:33> 'BOOL':'unsigned char' '='
        |     |-DeclRefExpr 0x7f968b04c340 <col:13> 'BOOL':'unsigned char' lvalue Var 0x7f968b04beb0 'val' 'BOOL':'unsigned char'
        |     `-ImplicitCastExpr 0x7f968b04c500 <col:19, col:33> 'BOOL':'unsigned char' <IntegralCast>
        |       `-BinaryOperator 0x7f968b04c4e0 <col:19, col:33> 'int' '&'
        |         |-ImplicitCastExpr 0x7f968b04c498 <col:19> 'int' <IntegralCast>
        |         | `-ImplicitCastExpr 0x7f968b04c480 <col:19> 'BOOL':'unsigned char' <LValueToRValue>
        |         |   `-DeclRefExpr 0x7f968b04c360 <col:19> 'BOOL':'unsigned char' lvalue Var 0x7f968b04beb0 'val' 'BOOL':'unsigned char'
        |         `-ImplicitCastExpr 0x7f968b04c4c8 <col:25, col:33> 'int' <IntegralCast>
        |           `-ImplicitCastExpr 0x7f968b04c4b0 <col:25, col:33> 'BOOL':'unsigned char' <LValueToRValue>
        |             `-ArraySubscriptExpr 0x7f968b04c460 <col:25, col:33> 'BOOL':'unsigned char' lvalue
        |               |-ImplicitCastExpr 0x7f968b04c430 <col:25, col:29> 'BOOL *' <ArrayToPointerDecay>
        |               | `-ArraySubscriptExpr 0x7f968b04c3f0 <col:25, col:29> 'BOOL [mx]' lvalue
        |               |   |-ImplicitCastExpr 0x7f968b04c3c0 <col:25> 'BOOL (*)[mx]':'BOOL (*)[mx]' <LValueToRValue>
        |               |   | `-DeclRefExpr 0x7f968b04c380 <col:25> 'BOOL (*)[mx]':'BOOL (*)[mx]' lvalue ParmVar 0x7f968b049240 'x' 'BOOL (*)[mx]':'BOOL (*)[mx]'
        |               |   `-ImplicitCastExpr 0x7f968b04c3d8 <col:27> 'int' <LValueToRValue>
        |               |     `-DeclRefExpr 0x7f968b04c3a0 <col:27> 'int' lvalue Var 0x7f968b049d48 'jx' 'int'
        |               `-ImplicitCastExpr 0x7f968b04c448 <col:31> 'int' <LValueToRValue>
        |                 `-DeclRefExpr 0x7f968b04c410 <col:31> 'int' lvalue Var 0x7f968b049cc8 'ix' 'int'
        |-BinaryOperator 0x7f968b04c650 <line:24:9, col:17> 'BOOL':'unsigned char' '='
        | |-ArraySubscriptExpr 0x7f968b04c5f8 <col:9, col:13> 'BOOL':'unsigned char' lvalue
        | | |-ImplicitCastExpr 0x7f968b04c5c8 <col:9> 'BOOL *':'BOOL *' <LValueToRValue>
        | | | `-DeclRefExpr 0x7f968b04c588 <col:9> 'BOOL *':'BOOL *' lvalue ParmVar 0x7f968b049430 'z' 'BOOL *':'BOOL *'
        | | `-ImplicitCastExpr 0x7f968b04c5e0 <col:11> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7f968b04c5a8 <col:11> 'int' lvalue Var 0x7f968b04be00 'iz' 'int'
        | `-ImplicitCastExpr 0x7f968b04c638 <col:17> 'BOOL':'unsigned char' <LValueToRValue>
        |   `-DeclRefExpr 0x7f968b04c618 <col:17> 'BOOL':'unsigned char' lvalue Var 0x7f968b04beb0 'val' 'BOOL':'unsigned char'
        `-CompoundAssignOperator 0x7f968b04c6c8 <line:25:9, col:15> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
          |-DeclRefExpr 0x7f968b04c670 <col:9> 'int' lvalue Var 0x7f968b04be00 'iz' 'int'
          `-ImplicitCastExpr 0x7f968b04c6b0 <col:15> 'int' <LValueToRValue>
            `-DeclRefExpr 0x7f968b04c690 <col:15> 'int' lvalue ParmVar 0x7f968b0498b0 'stepz' 'int'
