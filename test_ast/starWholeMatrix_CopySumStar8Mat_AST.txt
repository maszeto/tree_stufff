TranslationUnitDecl 0x7f8287019608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f8287019ea0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f8287019ba0 '__int128'
|-TypedefDecl 0x7f8287019f10 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f8287019bc0 'unsigned __int128'
|-TypedefDecl 0x7f828701a1f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f8287019ff0 'struct __NSConstantString_tag'
|   `-Record 0x7f8287019f68 '__NSConstantString_tag'
|-TypedefDecl 0x7f828701a290 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f828701a250 'char *'
|   `-BuiltinType 0x7f82870196a0 'char'
|-TypedefDecl 0x7f828701a568 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f828701a510 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f828701a370 'struct __va_list_tag'
|     `-Record 0x7f828701a2e8 '__va_list_tag'
`-FunctionDecl 0x7f828782e618 <./tree_src/starWholeMatrix_CopySumStar8Mat.c:1:1, line:13:1> line:1:6 CopySumStar8Mat 'void (int, int, double (*)[m])'
  |-ParmVarDecl 0x7f828782e200 <line:2:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7f828782e280 <col:12, col:16> col:16 used m 'int'
  |-ParmVarDecl 0x7f828782e480 <col:19, col:32> col:26 used x 'double (*)[m]':'double (*)[m]'
  `-CompoundStmt 0x7f828782f900 <col:36, line:13:1>
    |-DeclStmt 0x7f828782e830 <line:4:5, col:13>
    | |-VarDecl 0x7f828782e730 <col:5, col:9> col:9 used i 'int'
    | `-VarDecl 0x7f828782e7b0 <col:5, col:12> col:12 used j 'int'
    `-ForStmt 0x7f828782f8c8 <line:5:5, line:12:5>
      |-BinaryOperator 0x7f828782e888 <line:5:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7f828782e848 <col:10> 'int' lvalue Var 0x7f828782e730 'i' 'int'
      | `-IntegerLiteral 0x7f828782e868 <col:14> 'int' 1
      |-<<<NULL>>>
      |-BinaryOperator 0x7f828782e900 <col:17, col:19> 'int' '-'
      | |-ImplicitCastExpr 0x7f828782e8e8 <col:17> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7f828782e8a8 <col:17> 'int' lvalue ParmVar 0x7f828782e200 'n' 'int'
      | `-IntegerLiteral 0x7f828782e8c8 <col:19> 'int' 1
      |-UnaryOperator 0x7f828782e940 <col:22, col:23> 'int' postfix '++'
      | `-DeclRefExpr 0x7f828782e920 <col:22> 'int' lvalue Var 0x7f828782e730 'i' 'int'
      `-CompoundStmt 0x7f828782f8b0 <col:28, line:12:5>
        `-ForStmt 0x7f828782f878 <line:6:9, line:11:9>
          |-BinaryOperator 0x7f828782e998 <line:6:14, col:18> 'int' '='
          | |-DeclRefExpr 0x7f828782e958 <col:14> 'int' lvalue Var 0x7f828782e7b0 'j' 'int'
          | `-IntegerLiteral 0x7f828782e978 <col:18> 'int' 1
          |-<<<NULL>>>
          |-BinaryOperator 0x7f828782ea10 <col:21, col:23> 'int' '-'
          | |-ImplicitCastExpr 0x7f828782e9f8 <col:21> 'int' <LValueToRValue>
          | | `-DeclRefExpr 0x7f828782e9b8 <col:21> 'int' lvalue ParmVar 0x7f828782e280 'm' 'int'
          | `-IntegerLiteral 0x7f828782e9d8 <col:23> 'int' 1
          |-UnaryOperator 0x7f828782ea50 <col:26, col:27> 'int' postfix '++'
          | `-DeclRefExpr 0x7f828782ea30 <col:26> 'int' lvalue Var 0x7f828782e7b0 'j' 'int'
          `-CompoundStmt 0x7f828782f860 <col:32, line:11:9>
            `-BinaryOperator 0x7f828782f840 <line:7:13, line:10:50> 'double' '='
              |-ArraySubscriptExpr 0x7f828782eb78 <line:7:13, col:19> 'double' lvalue
              | |-ImplicitCastExpr 0x7f828782eb48 <col:13, col:16> 'double *' <ArrayToPointerDecay>
              | | `-ArraySubscriptExpr 0x7f828782ead8 <col:13, col:16> 'double [m]' lvalue
              | |   |-ImplicitCastExpr 0x7f828782eaa8 <col:13> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
              | |   | `-DeclRefExpr 0x7f828782ea68 <col:13> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f828782e480 'x' 'double (*)[m]':'double (*)[m]'
              | |   `-ImplicitCastExpr 0x7f828782eac0 <col:15> 'int' <LValueToRValue>
              | |     `-DeclRefExpr 0x7f828782ea88 <col:15> 'int' lvalue Var 0x7f828782e730 'i' 'int'
              | `-ImplicitCastExpr 0x7f828782eb60 <col:18> 'int' <LValueToRValue>
              |   `-DeclRefExpr 0x7f828782eaf8 <col:18> 'int' lvalue Var 0x7f828782e7b0 'j' 'int'
              `-BinaryOperator 0x7f828782f820 <line:8:14, line:10:50> 'double' '+'
                |-BinaryOperator 0x7f828782f668 <line:8:14, line:10:36> 'double' '+'
                | |-BinaryOperator 0x7f828782f4f0 <line:8:14, line:10:24> 'double' '+'
                | | |-BinaryOperator 0x7f828782f338 <line:8:14, line:9:47> 'double' '+'
                | | | |-BinaryOperator 0x7f828782f1b8 <line:8:14, line:9:22> 'double' '+'
                | | | | |-BinaryOperator 0x7f828782f040 <line:8:14, col:50> 'double' '+'
                | | | | | |-BinaryOperator 0x7f828782ee88 <col:14, col:36> 'double' '+'
                | | | | | | |-ImplicitCastExpr 0x7f828782ee58 <col:14, col:24> 'double' <LValueToRValue>
                | | | | | | | `-ArraySubscriptExpr 0x7f828782ecf8 <col:14, col:24> 'double' lvalue
                | | | | | | |   |-ImplicitCastExpr 0x7f828782ece0 <col:14, col:19> 'double *' <ArrayToPointerDecay>
                | | | | | | |   | `-ArraySubscriptExpr 0x7f828782ec48 <col:14, col:19> 'double [m]' lvalue
                | | | | | | |   |   |-ImplicitCastExpr 0x7f828782ec30 <col:14> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
                | | | | | | |   |   | `-DeclRefExpr 0x7f828782eb98 <col:14> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f828782e480 'x' 'double (*)[m]':'double (*)[m]'
                | | | | | | |   |   `-BinaryOperator 0x7f828782ec10 <col:16, col:18> 'int' '-'
                | | | | | | |   |     |-ImplicitCastExpr 0x7f828782ebf8 <col:16> 'int' <LValueToRValue>
                | | | | | | |   |     | `-DeclRefExpr 0x7f828782ebb8 <col:16> 'int' lvalue Var 0x7f828782e730 'i' 'int'
                | | | | | | |   |     `-IntegerLiteral 0x7f828782ebd8 <col:18> 'int' 1
                | | | | | | |   `-BinaryOperator 0x7f828782ecc0 <col:21, col:23> 'int' '-'
                | | | | | | |     |-ImplicitCastExpr 0x7f828782eca8 <col:21> 'int' <LValueToRValue>
                | | | | | | |     | `-DeclRefExpr 0x7f828782ec68 <col:21> 'int' lvalue Var 0x7f828782e7b0 'j' 'int'
                | | | | | | |     `-IntegerLiteral 0x7f828782ec88 <col:23> 'int' 1
                | | | | | | `-ImplicitCastExpr 0x7f828782ee70 <col:28, col:36> 'double' <LValueToRValue>
                | | | | | |   `-ArraySubscriptExpr 0x7f828782ee38 <col:28, col:36> 'double' lvalue
                | | | | | |     |-ImplicitCastExpr 0x7f828782ee08 <col:28, col:33> 'double *' <ArrayToPointerDecay>
                | | | | | |     | `-ArraySubscriptExpr 0x7f828782edc8 <col:28, col:33> 'double [m]' lvalue
                | | | | | |     |   |-ImplicitCastExpr 0x7f828782edb0 <col:28> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
                | | | | | |     |   | `-DeclRefExpr 0x7f828782ed18 <col:28> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f828782e480 'x' 'double (*)[m]':'double (*)[m]'
                | | | | | |     |   `-BinaryOperator 0x7f828782ed90 <col:30, col:32> 'int' '-'
                | | | | | |     |     |-ImplicitCastExpr 0x7f828782ed78 <col:30> 'int' <LValueToRValue>
                | | | | | |     |     | `-DeclRefExpr 0x7f828782ed38 <col:30> 'int' lvalue Var 0x7f828782e730 'i' 'int'
                | | | | | |     |     `-IntegerLiteral 0x7f828782ed58 <col:32> 'int' 1
                | | | | | |     `-ImplicitCastExpr 0x7f828782ee20 <col:35> 'int' <LValueToRValue>
                | | | | | |       `-DeclRefExpr 0x7f828782ede8 <col:35> 'int' lvalue Var 0x7f828782e7b0 'j' 'int'
                | | | | | `-ImplicitCastExpr 0x7f828782f028 <col:40, col:50> 'double' <LValueToRValue>
                | | | | |   `-ArraySubscriptExpr 0x7f828782f008 <col:40, col:50> 'double' lvalue
                | | | | |     |-ImplicitCastExpr 0x7f828782eff0 <col:40, col:45> 'double *' <ArrayToPointerDecay>
                | | | | |     | `-ArraySubscriptExpr 0x7f828782ef58 <col:40, col:45> 'double [m]' lvalue
                | | | | |     |   |-ImplicitCastExpr 0x7f828782ef40 <col:40> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
                | | | | |     |   | `-DeclRefExpr 0x7f828782eea8 <col:40> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f828782e480 'x' 'double (*)[m]':'double (*)[m]'
                | | | | |     |   `-BinaryOperator 0x7f828782ef20 <col:42, col:44> 'int' '-'
                | | | | |     |     |-ImplicitCastExpr 0x7f828782ef08 <col:42> 'int' <LValueToRValue>
                | | | | |     |     | `-DeclRefExpr 0x7f828782eec8 <col:42> 'int' lvalue Var 0x7f828782e730 'i' 'int'
                | | | | |     |     `-IntegerLiteral 0x7f828782eee8 <col:44> 'int' 1
                | | | | |     `-BinaryOperator 0x7f828782efd0 <col:47, col:49> 'int' '+'
                | | | | |       |-ImplicitCastExpr 0x7f828782efb8 <col:47> 'int' <LValueToRValue>
                | | | | |       | `-DeclRefExpr 0x7f828782ef78 <col:47> 'int' lvalue Var 0x7f828782e7b0 'j' 'int'
                | | | | |       `-IntegerLiteral 0x7f828782ef98 <col:49> 'int' 1
                | | | | `-ImplicitCastExpr 0x7f828782f1a0 <line:9:14, col:22> 'double' <LValueToRValue>
                | | | |   `-ArraySubscriptExpr 0x7f828782f180 <col:14, col:22> 'double' lvalue
                | | | |     |-ImplicitCastExpr 0x7f828782f168 <col:14, col:17> 'double *' <ArrayToPointerDecay>
                | | | |     | `-ArraySubscriptExpr 0x7f828782f0d0 <col:14, col:17> 'double [m]' lvalue
                | | | |     |   |-ImplicitCastExpr 0x7f828782f0a0 <col:14> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
                | | | |     |   | `-DeclRefExpr 0x7f828782f060 <col:14> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f828782e480 'x' 'double (*)[m]':'double (*)[m]'
                | | | |     |   `-ImplicitCastExpr 0x7f828782f0b8 <col:16> 'int' <LValueToRValue>
                | | | |     |     `-DeclRefExpr 0x7f828782f080 <col:16> 'int' lvalue Var 0x7f828782e730 'i' 'int'
                | | | |     `-BinaryOperator 0x7f828782f148 <col:19, col:21> 'int' '-'
                | | | |       |-ImplicitCastExpr 0x7f828782f130 <col:19> 'int' <LValueToRValue>
                | | | |       | `-DeclRefExpr 0x7f828782f0f0 <col:19> 'int' lvalue Var 0x7f828782e7b0 'j' 'int'
                | | | |       `-IntegerLiteral 0x7f828782f110 <col:21> 'int' 1
                | | | `-ImplicitCastExpr 0x7f828782f320 <col:39, col:47> 'double' <LValueToRValue>
                | | |   `-ArraySubscriptExpr 0x7f828782f300 <col:39, col:47> 'double' lvalue
                | | |     |-ImplicitCastExpr 0x7f828782f2e8 <col:39, col:42> 'double *' <ArrayToPointerDecay>
                | | |     | `-ArraySubscriptExpr 0x7f828782f250 <col:39, col:42> 'double [m]' lvalue
                | | |     |   |-ImplicitCastExpr 0x7f828782f220 <col:39> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
                | | |     |   | `-DeclRefExpr 0x7f828782f1d8 <col:39> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f828782e480 'x' 'double (*)[m]':'double (*)[m]'
                | | |     |   `-ImplicitCastExpr 0x7f828782f238 <col:41> 'int' <LValueToRValue>
                | | |     |     `-DeclRefExpr 0x7f828782f200 <col:41> 'int' lvalue Var 0x7f828782e730 'i' 'int'
                | | |     `-BinaryOperator 0x7f828782f2c8 <col:44, col:46> 'int' '+'
                | | |       |-ImplicitCastExpr 0x7f828782f2b0 <col:44> 'int' <LValueToRValue>
                | | |       | `-DeclRefExpr 0x7f828782f270 <col:44> 'int' lvalue Var 0x7f828782e7b0 'j' 'int'
                | | |       `-IntegerLiteral 0x7f828782f290 <col:46> 'int' 1
                | | `-ImplicitCastExpr 0x7f828782f4d8 <line:10:14, col:24> 'double' <LValueToRValue>
                | |   `-ArraySubscriptExpr 0x7f828782f4b8 <col:14, col:24> 'double' lvalue
                | |     |-ImplicitCastExpr 0x7f828782f4a0 <col:14, col:19> 'double *' <ArrayToPointerDecay>
                | |     | `-ArraySubscriptExpr 0x7f828782f408 <col:14, col:19> 'double [m]' lvalue
                | |     |   |-ImplicitCastExpr 0x7f828782f3f0 <col:14> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
                | |     |   | `-DeclRefExpr 0x7f828782f358 <col:14> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f828782e480 'x' 'double (*)[m]':'double (*)[m]'
                | |     |   `-BinaryOperator 0x7f828782f3d0 <col:16, col:18> 'int' '+'
                | |     |     |-ImplicitCastExpr 0x7f828782f3b8 <col:16> 'int' <LValueToRValue>
                | |     |     | `-DeclRefExpr 0x7f828782f378 <col:16> 'int' lvalue Var 0x7f828782e730 'i' 'int'
                | |     |     `-IntegerLiteral 0x7f828782f398 <col:18> 'int' 1
                | |     `-BinaryOperator 0x7f828782f480 <col:21, col:23> 'int' '-'
                | |       |-ImplicitCastExpr 0x7f828782f468 <col:21> 'int' <LValueToRValue>
                | |       | `-DeclRefExpr 0x7f828782f428 <col:21> 'int' lvalue Var 0x7f828782e7b0 'j' 'int'
                | |       `-IntegerLiteral 0x7f828782f448 <col:23> 'int' 1
                | `-ImplicitCastExpr 0x7f828782f650 <col:28, col:36> 'double' <LValueToRValue>
                |   `-ArraySubscriptExpr 0x7f828782f630 <col:28, col:36> 'double' lvalue
                |     |-ImplicitCastExpr 0x7f828782f600 <col:28, col:33> 'double *' <ArrayToPointerDecay>
                |     | `-ArraySubscriptExpr 0x7f828782f5c0 <col:28, col:33> 'double [m]' lvalue
                |     |   |-ImplicitCastExpr 0x7f828782f5a8 <col:28> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
                |     |   | `-DeclRefExpr 0x7f828782f510 <col:28> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f828782e480 'x' 'double (*)[m]':'double (*)[m]'
                |     |   `-BinaryOperator 0x7f828782f588 <col:30, col:32> 'int' '+'
                |     |     |-ImplicitCastExpr 0x7f828782f570 <col:30> 'int' <LValueToRValue>
                |     |     | `-DeclRefExpr 0x7f828782f530 <col:30> 'int' lvalue Var 0x7f828782e730 'i' 'int'
                |     |     `-IntegerLiteral 0x7f828782f550 <col:32> 'int' 1
                |     `-ImplicitCastExpr 0x7f828782f618 <col:35> 'int' <LValueToRValue>
                |       `-DeclRefExpr 0x7f828782f5e0 <col:35> 'int' lvalue Var 0x7f828782e7b0 'j' 'int'
                `-ImplicitCastExpr 0x7f828782f808 <col:40, col:50> 'double' <LValueToRValue>
                  `-ArraySubscriptExpr 0x7f828782f7e8 <col:40, col:50> 'double' lvalue
                    |-ImplicitCastExpr 0x7f828782f7d0 <col:40, col:45> 'double *' <ArrayToPointerDecay>
                    | `-ArraySubscriptExpr 0x7f828782f738 <col:40, col:45> 'double [m]' lvalue
                    |   |-ImplicitCastExpr 0x7f828782f720 <col:40> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
                    |   | `-DeclRefExpr 0x7f828782f688 <col:40> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f828782e480 'x' 'double (*)[m]':'double (*)[m]'
                    |   `-BinaryOperator 0x7f828782f700 <col:42, col:44> 'int' '+'
                    |     |-ImplicitCastExpr 0x7f828782f6e8 <col:42> 'int' <LValueToRValue>
                    |     | `-DeclRefExpr 0x7f828782f6a8 <col:42> 'int' lvalue Var 0x7f828782e730 'i' 'int'
                    |     `-IntegerLiteral 0x7f828782f6c8 <col:44> 'int' 1
                    `-BinaryOperator 0x7f828782f7b0 <col:47, col:49> 'int' '+'
                      |-ImplicitCastExpr 0x7f828782f798 <col:47> 'int' <LValueToRValue>
                      | `-DeclRefExpr 0x7f828782f758 <col:47> 'int' lvalue Var 0x7f828782e7b0 'j' 'int'
                      `-IntegerLiteral 0x7f828782f778 <col:49> 'int' 1
