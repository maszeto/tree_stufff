TranslationUnitDecl 0x7fac3c01f808 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fac3c0200a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fac3c01fda0 '__int128'
|-TypedefDecl 0x7fac3c020110 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fac3c01fdc0 'unsigned __int128'
|-TypedefDecl 0x7fac3c0203f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fac3c0201f0 'struct __NSConstantString_tag'
|   `-Record 0x7fac3c020168 '__NSConstantString_tag'
|-TypedefDecl 0x7fac3c020490 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fac3c020450 'char *'
|   `-BuiltinType 0x7fac3c01f8a0 'char'
|-TypedefDecl 0x7fac3c020768 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fac3c020710 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fac3c020570 'struct __va_list_tag'
|     `-Record 0x7fac3c0204e8 '__va_list_tag'
`-FunctionDecl 0x7fac3c0776c8 <./tree_src/storeIndexVector_SetIndexVecSca.c:1:1, line:8:1> line:1:6 SetIndexVecSca 'void (int, double, double *, int *)'
  |-ParmVarDecl 0x7fac3c077200 <line:2:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7fac3c077280 <col:12, col:19> col:19 used x 'double'
  |-ParmVarDecl 0x7fac3c077400 <col:22, col:32> col:29 used z 'double *':'double *'
  |-ParmVarDecl 0x7fac3c077580 <col:35, col:43> col:39 used iz 'int *':'int *'
  `-CompoundStmt 0x7fac3c077b38 <col:47, line:8:1>
    |-DeclStmt 0x7fac3c077850 <line:4:5, col:10>
    | `-VarDecl 0x7fac3c0777e8 <col:5, col:9> col:9 used i 'int'
    `-ForStmt 0x7fac3c077b00 <line:5:5, line:7:5>
      |-BinaryOperator 0x7fac3c0778a8 <line:5:10, col:13> 'int' '='
      | |-DeclRefExpr 0x7fac3c077868 <col:10> 'int' lvalue Var 0x7fac3c0777e8 'i' 'int'
      | `-IntegerLiteral 0x7fac3c077888 <col:13> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x7fac3c077938 <col:16, col:18> 'int' '<'
      | |-ImplicitCastExpr 0x7fac3c077908 <col:16> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fac3c0778c8 <col:16> 'int' lvalue Var 0x7fac3c0777e8 'i' 'int'
      | `-ImplicitCastExpr 0x7fac3c077920 <col:18> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fac3c0778e8 <col:18> 'int' lvalue ParmVar 0x7fac3c077200 'n' 'int'
      |-UnaryOperator 0x7fac3c077978 <col:21, col:23> 'int' prefix '++'
      | `-DeclRefExpr 0x7fac3c077958 <col:23> 'int' lvalue Var 0x7fac3c0777e8 'i' 'int'
      `-CompoundStmt 0x7fac3c077ae8 <col:27, line:7:5>
        `-BinaryOperator 0x7fac3c077ac8 <line:6:9, col:19> 'double' '='
          |-ArraySubscriptExpr 0x7fac3c077a70 <col:9, col:16> 'double' lvalue
          | |-ImplicitCastExpr 0x7fac3c077a40 <col:9> 'double *':'double *' <LValueToRValue>
          | | `-DeclRefExpr 0x7fac3c077990 <col:9> 'double *':'double *' lvalue ParmVar 0x7fac3c077400 'z' 'double *':'double *'
          | `-ImplicitCastExpr 0x7fac3c077a58 <col:11, col:15> 'int' <LValueToRValue>
          |   `-ArraySubscriptExpr 0x7fac3c077a20 <col:11, col:15> 'int' lvalue
          |     |-ImplicitCastExpr 0x7fac3c0779f0 <col:11> 'int *':'int *' <LValueToRValue>
          |     | `-DeclRefExpr 0x7fac3c0779b0 <col:11> 'int *':'int *' lvalue ParmVar 0x7fac3c077580 'iz' 'int *':'int *'
          |     `-ImplicitCastExpr 0x7fac3c077a08 <col:14> 'int' <LValueToRValue>
          |       `-DeclRefExpr 0x7fac3c0779d0 <col:14> 'int' lvalue Var 0x7fac3c0777e8 'i' 'int'
          `-ImplicitCastExpr 0x7fac3c077ab0 <col:19> 'double' <LValueToRValue>
            `-DeclRefExpr 0x7fac3c077a90 <col:19> 'double' lvalue ParmVar 0x7fac3c077280 'x' 'double'
