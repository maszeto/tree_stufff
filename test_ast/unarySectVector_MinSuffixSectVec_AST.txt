TranslationUnitDecl 0x7fd895038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fd8950394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fd8950391a0 '__int128'
|-TypedefDecl 0x7fd895039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fd8950391c0 'unsigned __int128'
|-TypedefDecl 0x7fd8950397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fd8950395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fd895039568 '__NSConstantString_tag'
|-TypedefDecl 0x7fd895039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fd895039850 'char *'
|   `-BuiltinType 0x7fd895038ca0 'char'
|-TypedefDecl 0x7fd895039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fd895039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fd895039970 'struct __va_list_tag'
|     `-Record 0x7fd8950398e8 '__va_list_tag'
|-TypedefDecl 0x7fd89582f200 <./tree_src/unarySectVector_MinSuffixSectVec.c:4:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fd895038d60 'unsigned char'
|-FunctionDecl 0x7fd89582f9f8 <line:12:1, line:26:1> line:12:6 MinSuffixSectVec 'void (int, double *, double *, int, int, int, int, int, int)'
| |-ParmVarDecl 0x7fd89582f270 <line:13:5, col:9> col:9 used n 'int'
| |-ParmVarDecl 0x7fd89582f3f0 <col:12, col:22> col:19 used x 'double *':'double *'
| |-ParmVarDecl 0x7fd89582f540 <col:25, col:35> col:32 used y 'double *':'double *'
| |-ParmVarDecl 0x7fd89582f5c0 <line:14:5, col:9> col:9 used startx 'int'
| |-ParmVarDecl 0x7fd89582f640 <col:17, col:21> col:21 used stopx 'int'
| |-ParmVarDecl 0x7fd89582f6c0 <col:28, col:32> col:32 used stepx 'int'
| |-ParmVarDecl 0x7fd89582f740 <line:15:5, col:9> col:9 starty 'int'
| |-ParmVarDecl 0x7fd89582f7c0 <col:17, col:21> col:21 used stopy 'int'
| |-ParmVarDecl 0x7fd89582f840 <col:28, col:32> col:32 used stepy 'int'
| `-CompoundStmt 0x7fd89502fa38 <col:40, line:26:1>
|   |-DeclStmt 0x7fd89582fc40 <line:17:5, col:15>
|   | |-VarDecl 0x7fd89582fb40 <col:5, col:9> col:9 used ix 'int'
|   | `-VarDecl 0x7fd89582fbc0 <col:5, col:13> col:13 used iy 'int'
|   |-BinaryOperator 0x7fd89582fee8 <line:18:5, col:23> 'int' '='
|   | |-DeclRefExpr 0x7fd89582fc58 <col:5> 'int' lvalue ParmVar 0x7fd89582f6c0 'stepx' 'int'
|   | `-UnaryOperator 0x7fd89582fed0 <col:13, col:23> 'int' prefix '-'
|   |   `-CallExpr 0x7fd89582fe90 <col:14, col:23> 'int'
|   |     |-ImplicitCastExpr 0x7fd89582fe78 <col:14> 'int (*)(int)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fd89582fe10 <col:14> 'int (int)' Function 0x7fd89582fcb0 'abs' 'int (int)'
|   |     `-ImplicitCastExpr 0x7fd89582feb8 <col:18> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fd89582fe30 <col:18> 'int' lvalue ParmVar 0x7fd89582f6c0 'stepx' 'int'
|   |-BinaryOperator 0x7fd89582ffd8 <line:19:5, col:23> 'int' '='
|   | |-DeclRefExpr 0x7fd89582ff08 <col:5> 'int' lvalue ParmVar 0x7fd89582f840 'stepy' 'int'
|   | `-UnaryOperator 0x7fd89582ffc0 <col:13, col:23> 'int' prefix '-'
|   |   `-CallExpr 0x7fd89582ff80 <col:14, col:23> 'int'
|   |     |-ImplicitCastExpr 0x7fd89582ff68 <col:14> 'int (*)(int)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fd89582ff28 <col:14> 'int (int)' Function 0x7fd89582fcb0 'abs' 'int (int)'
|   |     `-ImplicitCastExpr 0x7fd89582ffa8 <col:18> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fd89582ff48 <col:18> 'int' lvalue ParmVar 0x7fd89582f840 'stepy' 'int'
|   |-BinaryOperator 0x7fd895830130 <line:20:5, col:23> 'double' '='
|   | |-ArraySubscriptExpr 0x7fd895830068 <col:5, col:12> 'double' lvalue
|   | | |-ImplicitCastExpr 0x7fd895830038 <col:5> 'double *':'double *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fd89582fff8 <col:5> 'double *':'double *' lvalue ParmVar 0x7fd89582f540 'y' 'double *':'double *'
|   | | `-ImplicitCastExpr 0x7fd895830050 <col:7> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fd895830018 <col:7> 'int' lvalue ParmVar 0x7fd89582f7c0 'stopy' 'int'
|   | `-ImplicitCastExpr 0x7fd895830118 <col:16, col:23> 'double' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x7fd8958300f8 <col:16, col:23> 'double' lvalue
|   |     |-ImplicitCastExpr 0x7fd8958300c8 <col:16> 'double *':'double *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fd895830088 <col:16> 'double *':'double *' lvalue ParmVar 0x7fd89582f3f0 'x' 'double *':'double *'
|   |     `-ImplicitCastExpr 0x7fd8958300e0 <col:18> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fd8958300a8 <col:18> 'int' lvalue ParmVar 0x7fd89582f640 'stopx' 'int'
|   |-BinaryOperator 0x7fd89502f200 <line:21:5, col:19> 'int' '='
|   | |-DeclRefExpr 0x7fd895830150 <col:5> 'int' lvalue Var 0x7fd89582fbc0 'iy' 'int'
|   | `-BinaryOperator 0x7fd8958301c8 <col:13, col:19> 'int' '-'
|   |   |-ImplicitCastExpr 0x7fd8958301b0 <col:13> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x7fd895830170 <col:13> 'int' lvalue ParmVar 0x7fd89582f7c0 'stopy' 'int'
|   |   `-IntegerLiteral 0x7fd895830190 <col:19> 'int' 1
|   `-ForStmt 0x7fd89502fa00 <line:22:5, line:25:5>
|     |-BinaryOperator 0x7fd89502f2b8 <line:22:10, col:20> 'int' '='
|     | |-DeclRefExpr 0x7fd89502f220 <col:10> 'int' lvalue Var 0x7fd89582fb40 'ix' 'int'
|     | `-BinaryOperator 0x7fd89502f298 <col:14, col:20> 'int' '-'
|     |   |-ImplicitCastExpr 0x7fd89502f280 <col:14> 'int' <LValueToRValue>
|     |   | `-DeclRefExpr 0x7fd89502f240 <col:14> 'int' lvalue ParmVar 0x7fd89582f640 'stopx' 'int'
|     |   `-IntegerLiteral 0x7fd89502f260 <col:20> 'int' 2
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fd89502f388 <col:23, col:33> 'int' '>'
|     | |-ImplicitCastExpr 0x7fd89502f370 <col:23> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fd89502f2d8 <col:23> 'int' lvalue Var 0x7fd89582fb40 'ix' 'int'
|     | `-BinaryOperator 0x7fd89502f350 <col:26, col:33> 'int' '-'
|     |   |-ImplicitCastExpr 0x7fd89502f338 <col:26> 'int' <LValueToRValue>
|     |   | `-DeclRefExpr 0x7fd89502f2f8 <col:26> 'int' lvalue ParmVar 0x7fd89582f5c0 'startx' 'int'
|     |   `-IntegerLiteral 0x7fd89502f318 <col:33> 'int' 1
|     |-CompoundAssignOperator 0x7fd89502f400 <col:36, col:41> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|     | |-DeclRefExpr 0x7fd89502f3a8 <col:36> 'int' lvalue Var 0x7fd89582fb40 'ix' 'int'
|     | `-ImplicitCastExpr 0x7fd89502f3e8 <col:41> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fd89502f3c8 <col:41> 'int' lvalue ParmVar 0x7fd89582f6c0 'stepx' 'int'
|     `-CompoundStmt 0x7fd89502f9e0 <col:49, line:25:5>
|       |-BinaryOperator 0x7fd89502f8f0 <line:23:9, col:36> 'double' '='
|       | |-ArraySubscriptExpr 0x7fd89502f4a0 <col:9, col:13> 'double' lvalue
|       | | |-ImplicitCastExpr 0x7fd89502f470 <col:9> 'double *':'double *' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7fd89502f430 <col:9> 'double *':'double *' lvalue ParmVar 0x7fd89582f540 'y' 'double *':'double *'
|       | | `-ImplicitCastExpr 0x7fd89502f488 <col:11> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fd89502f450 <col:11> 'int' lvalue Var 0x7fd89582fbc0 'iy' 'int'
|       | `-CallExpr 0x7fd89502f890 <col:17, col:36> 'double'
|       |   |-ImplicitCastExpr 0x7fd89502f878 <col:17> 'double (*)(double, double)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x7fd89502f6c8 <col:17> 'double (double, double)' Function 0x7fd89502f4f8 'fmin' 'double (double, double)'
|       |   |-ImplicitCastExpr 0x7fd89502f8c0 <col:22, col:28> 'double' <LValueToRValue>
|       |   | `-ArraySubscriptExpr 0x7fd89502f798 <col:22, col:28> 'double' lvalue
|       |   |   |-ImplicitCastExpr 0x7fd89502f780 <col:22> 'double *':'double *' <LValueToRValue>
|       |   |   | `-DeclRefExpr 0x7fd89502f6e8 <col:22> 'double *':'double *' lvalue ParmVar 0x7fd89582f540 'y' 'double *':'double *'
|       |   |   `-BinaryOperator 0x7fd89502f760 <col:24, col:27> 'int' '+'
|       |   |     |-ImplicitCastExpr 0x7fd89502f748 <col:24> 'int' <LValueToRValue>
|       |   |     | `-DeclRefExpr 0x7fd89502f708 <col:24> 'int' lvalue Var 0x7fd89582fbc0 'iy' 'int'
|       |   |     `-IntegerLiteral 0x7fd89502f728 <col:27> 'int' 1
|       |   `-ImplicitCastExpr 0x7fd89502f8d8 <col:31, col:35> 'double' <LValueToRValue>
|       |     `-ArraySubscriptExpr 0x7fd89502f828 <col:31, col:35> 'double' lvalue
|       |       |-ImplicitCastExpr 0x7fd89502f7f8 <col:31> 'double *':'double *' <LValueToRValue>
|       |       | `-DeclRefExpr 0x7fd89502f7b8 <col:31> 'double *':'double *' lvalue ParmVar 0x7fd89582f3f0 'x' 'double *':'double *'
|       |       `-ImplicitCastExpr 0x7fd89502f810 <col:33> 'int' <LValueToRValue>
|       |         `-DeclRefExpr 0x7fd89502f7d8 <col:33> 'int' lvalue Var 0x7fd89582fb40 'ix' 'int'
|       `-BinaryOperator 0x7fd89502f9c0 <line:24:9, col:21> 'int' '='
|         |-DeclRefExpr 0x7fd89502f910 <col:9> 'int' lvalue Var 0x7fd89582fbc0 'iy' 'int'
|         `-BinaryOperator 0x7fd89502f9a0 <col:16, col:21> 'int' '+'
|           |-ImplicitCastExpr 0x7fd89502f970 <col:16> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x7fd89502f930 <col:16> 'int' lvalue Var 0x7fd89582fbc0 'iy' 'int'
|           `-ImplicitCastExpr 0x7fd89502f988 <col:21> 'int' <LValueToRValue>
|             `-DeclRefExpr 0x7fd89502f950 <col:21> 'int' lvalue ParmVar 0x7fd89582f840 'stepy' 'int'
|-FunctionDecl 0x7fd89582fcb0 <line:18:14> col:14 implicit used abs 'int (int)' extern
| |-ParmVarDecl 0x7fd89582fd50 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x7fd89582fdc0 <col:14> Implicit
| `-ConstAttr 0x7fd89582fe00 <col:14> Implicit
`-FunctionDecl 0x7fd89502f4f8 <line:23:17> col:17 implicit used fmin 'double (double, double)' extern
  |-ParmVarDecl 0x7fd89502f598 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x7fd89502f600 <<invalid sloc>> <invalid sloc> 'double'
  |-NoThrowAttr 0x7fd89502f678 <col:17> Implicit
  `-ConstAttr 0x7fd89502f6b8 <col:17> Implicit
