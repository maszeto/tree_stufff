TranslationUnitDecl 0x7fc74b819608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fc74b819ea0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fc74b819ba0 '__int128'
|-TypedefDecl 0x7fc74b819f10 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fc74b819bc0 'unsigned __int128'
|-TypedefDecl 0x7fc74b81a1f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fc74b819ff0 'struct __NSConstantString_tag'
|   `-Record 0x7fc74b819f68 '__NSConstantString_tag'
|-TypedefDecl 0x7fc74b81a290 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fc74b81a250 'char *'
|   `-BuiltinType 0x7fc74b8196a0 'char'
|-TypedefDecl 0x7fc74b81a568 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fc74b81a510 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fc74b81a370 'struct __va_list_tag'
|     `-Record 0x7fc74b81a2e8 '__va_list_tag'
|-TypedefDecl 0x7fc74b845e00 <./tree_src/extendSectMatrix_OrSectMatSca.c:3:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x7fc74b819760 'unsigned char'
`-FunctionDecl 0x7fc74b847f78 <line:6:1, line:22:1> line:6:6 OrSectMatSca 'void (int, int, int, int, BOOL (*)[mx], BOOL, BOOL (*)[mz], int, int, int, int, int, int, int, int, int, int, int, int)'
  |-ParmVarDecl 0x7fc74b845e70 <line:7:5, col:9> col:9 used nx 'int'
  |-ParmVarDecl 0x7fc74b845ef0 <col:13, col:17> col:17 used mx 'int'
  |-ParmVarDecl 0x7fc74b845f70 <col:21, col:25> col:25 used nz 'int'
  |-ParmVarDecl 0x7fc74b845ff0 <col:29, col:33> col:33 used mz 'int'
  |-ParmVarDecl 0x7fc74b8462c0 <line:8:5, col:18> col:10 used x 'BOOL (*)[mx]':'BOOL (*)[mx]'
  |-ParmVarDecl 0x7fc74b846338 <col:21, col:26> col:26 used y 'BOOL':'unsigned char'
  |-ParmVarDecl 0x7fc74b8465e0 <col:29, col:42> col:34 used z 'BOOL (*)[mz]':'BOOL (*)[mz]'
  |-ParmVarDecl 0x7fc74b846660 <line:9:5, col:9> col:9 used startx1 'int'
  |-ParmVarDecl 0x7fc74b8466e0 <col:18, col:22> col:22 used stopx1 'int'
  |-ParmVarDecl 0x7fc74b846760 <col:30, col:34> col:34 used stepx1 'int'
  |-ParmVarDecl 0x7fc74b8467e0 <col:42, col:46> col:46 used startx2 'int'
  |-ParmVarDecl 0x7fc74b846860 <col:55, col:59> col:59 used stopx2 'int'
  |-ParmVarDecl 0x7fc74b8468e0 <col:67, col:71> col:71 used stepx2 'int'
  |-ParmVarDecl 0x7fc74b846960 <line:10:5, col:9> col:9 used startz1 'int'
  |-ParmVarDecl 0x7fc74b8469e0 <col:18, col:22> col:22 stopz1 'int'
  |-ParmVarDecl 0x7fc74b846a60 <col:30, col:34> col:34 used stepz1 'int'
  |-ParmVarDecl 0x7fc74b846ae0 <col:42, col:46> col:46 used startz2 'int'
  |-ParmVarDecl 0x7fc74b846b60 <col:55, col:59> col:59 stopz2 'int'
  |-ParmVarDecl 0x7fc74b846be0 <col:67, col:71> col:71 used stepz2 'int'
  `-CompoundStmt 0x7fc74b848cd8 <col:80, line:22:1>
    |-DeclStmt 0x7fc74b848320 <line:12:5, col:23>
    | |-VarDecl 0x7fc74b848110 <col:5, col:9> col:9 used ix 'int'
    | |-VarDecl 0x7fc74b848190 <col:5, col:13> col:13 used jx 'int'
    | |-VarDecl 0x7fc74b848210 <col:5, col:17> col:17 used iz 'int'
    | `-VarDecl 0x7fc74b848290 <col:5, col:21> col:21 used jz 'int'
    |-BinaryOperator 0x7fc74b848390 <line:13:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7fc74b848338 <col:5> 'int' lvalue Var 0x7fc74b848210 'iz' 'int'
    | `-ImplicitCastExpr 0x7fc74b848378 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7fc74b848358 <col:10> 'int' lvalue ParmVar 0x7fc74b846960 'startz1' 'int'
    `-ForStmt 0x7fc74b848ca0 <line:14:5, line:21:5>
      |-BinaryOperator 0x7fc74b848408 <line:14:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7fc74b8483b0 <col:10> 'int' lvalue Var 0x7fc74b848110 'ix' 'int'
      | `-ImplicitCastExpr 0x7fc74b8483f0 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fc74b8483d0 <col:14> 'int' lvalue ParmVar 0x7fc74b846660 'startx1' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7fc74b848498 <col:23, col:26> 'int' '<'
      | |-ImplicitCastExpr 0x7fc74b848468 <col:23> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fc74b848428 <col:23> 'int' lvalue Var 0x7fc74b848110 'ix' 'int'
      | `-ImplicitCastExpr 0x7fc74b848480 <col:26> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fc74b848448 <col:26> 'int' lvalue ParmVar 0x7fc74b8466e0 'stopx1' 'int'
      |-CompoundAssignOperator 0x7fc74b848510 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7fc74b8484b8 <col:34> 'int' lvalue Var 0x7fc74b848110 'ix' 'int'
      | `-ImplicitCastExpr 0x7fc74b8484f8 <col:39> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fc74b8484d8 <col:39> 'int' lvalue ParmVar 0x7fc74b846760 'stepx1' 'int'
      `-CompoundStmt 0x7fc74b848c78 <col:48, line:21:5>
        |-BinaryOperator 0x7fc74b848598 <line:15:9, col:14> 'int' '='
        | |-DeclRefExpr 0x7fc74b848540 <col:9> 'int' lvalue Var 0x7fc74b848290 'jz' 'int'
        | `-ImplicitCastExpr 0x7fc74b848580 <col:14> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x7fc74b848560 <col:14> 'int' lvalue ParmVar 0x7fc74b846ae0 'startz2' 'int'
        |-ForStmt 0x7fc74b848b70 <line:16:9, line:19:9>
        | |-BinaryOperator 0x7fc74b848610 <line:16:14, col:18> 'int' '='
        | | |-DeclRefExpr 0x7fc74b8485b8 <col:14> 'int' lvalue Var 0x7fc74b848190 'jx' 'int'
        | | `-ImplicitCastExpr 0x7fc74b8485f8 <col:18> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fc74b8485d8 <col:18> 'int' lvalue ParmVar 0x7fc74b8467e0 'startx2' 'int'
        | |-<<<NULL>>>
        | |-BinaryOperator 0x7fc74b8486a0 <col:27, col:30> 'int' '<'
        | | |-ImplicitCastExpr 0x7fc74b848670 <col:27> 'int' <LValueToRValue>
        | | | `-DeclRefExpr 0x7fc74b848630 <col:27> 'int' lvalue Var 0x7fc74b848190 'jx' 'int'
        | | `-ImplicitCastExpr 0x7fc74b848688 <col:30> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fc74b848650 <col:30> 'int' lvalue ParmVar 0x7fc74b846860 'stopx2' 'int'
        | |-CompoundAssignOperator 0x7fc74b848718 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
        | | |-DeclRefExpr 0x7fc74b8486c0 <col:38> 'int' lvalue Var 0x7fc74b848190 'jx' 'int'
        | | `-ImplicitCastExpr 0x7fc74b848700 <col:43> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fc74b8486e0 <col:43> 'int' lvalue ParmVar 0x7fc74b8468e0 'stepx2' 'int'
        | `-CompoundStmt 0x7fc74b848b50 <col:52, line:19:9>
        |   |-BinaryOperator 0x7fc74b848a60 <line:17:6, col:30> 'BOOL':'unsigned char' '='
        |   | |-ArraySubscriptExpr 0x7fc74b848888 <col:6, col:14> 'BOOL':'unsigned char' lvalue
        |   | | |-ImplicitCastExpr 0x7fc74b848858 <col:6, col:10> 'BOOL *' <ArrayToPointerDecay>
        |   | | | `-ArraySubscriptExpr 0x7fc74b8487b8 <col:6, col:10> 'BOOL [mz]' lvalue
        |   | | |   |-ImplicitCastExpr 0x7fc74b848788 <col:6> 'BOOL (*)[mz]':'BOOL (*)[mz]' <LValueToRValue>
        |   | | |   | `-DeclRefExpr 0x7fc74b848748 <col:6> 'BOOL (*)[mz]':'BOOL (*)[mz]' lvalue ParmVar 0x7fc74b8465e0 'z' 'BOOL (*)[mz]':'BOOL (*)[mz]'
        |   | | |   `-ImplicitCastExpr 0x7fc74b8487a0 <col:8> 'int' <LValueToRValue>
        |   | | |     `-DeclRefExpr 0x7fc74b848768 <col:8> 'int' lvalue Var 0x7fc74b848210 'iz' 'int'
        |   | | `-ImplicitCastExpr 0x7fc74b848870 <col:12> 'int' <LValueToRValue>
        |   | |   `-DeclRefExpr 0x7fc74b8487d8 <col:12> 'int' lvalue Var 0x7fc74b848290 'jz' 'int'
        |   | `-ImplicitCastExpr 0x7fc74b848a48 <col:18, col:30> 'BOOL':'unsigned char' <IntegralCast>
        |   |   `-BinaryOperator 0x7fc74b848a28 <col:18, col:30> 'int' '|'
        |   |     |-ImplicitCastExpr 0x7fc74b8489e0 <col:18, col:26> 'int' <IntegralCast>
        |   |     | `-ImplicitCastExpr 0x7fc74b8489c8 <col:18, col:26> 'BOOL':'unsigned char' <LValueToRValue>
        |   |     |   `-ArraySubscriptExpr 0x7fc74b848988 <col:18, col:26> 'BOOL':'unsigned char' lvalue
        |   |     |     |-ImplicitCastExpr 0x7fc74b848958 <col:18, col:22> 'BOOL *' <ArrayToPointerDecay>
        |   |     |     | `-ArraySubscriptExpr 0x7fc74b848918 <col:18, col:22> 'BOOL [mx]' lvalue
        |   |     |     |   |-ImplicitCastExpr 0x7fc74b8488e8 <col:18> 'BOOL (*)[mx]':'BOOL (*)[mx]' <LValueToRValue>
        |   |     |     |   | `-DeclRefExpr 0x7fc74b8488a8 <col:18> 'BOOL (*)[mx]':'BOOL (*)[mx]' lvalue ParmVar 0x7fc74b8462c0 'x' 'BOOL (*)[mx]':'BOOL (*)[mx]'
        |   |     |     |   `-ImplicitCastExpr 0x7fc74b848900 <col:20> 'int' <LValueToRValue>
        |   |     |     |     `-DeclRefExpr 0x7fc74b8488c8 <col:20> 'int' lvalue Var 0x7fc74b848110 'ix' 'int'
        |   |     |     `-ImplicitCastExpr 0x7fc74b848970 <col:24> 'int' <LValueToRValue>
        |   |     |       `-DeclRefExpr 0x7fc74b848938 <col:24> 'int' lvalue Var 0x7fc74b848190 'jx' 'int'
        |   |     `-ImplicitCastExpr 0x7fc74b848a10 <col:30> 'int' <IntegralCast>
        |   |       `-ImplicitCastExpr 0x7fc74b8489f8 <col:30> 'BOOL':'unsigned char' <LValueToRValue>
        |   |         `-DeclRefExpr 0x7fc74b8489a8 <col:30> 'BOOL':'unsigned char' lvalue ParmVar 0x7fc74b846338 'y' 'BOOL':'unsigned char'
        |   `-BinaryOperator 0x7fc74b848b30 <line:18:6, col:16> 'int' '='
        |     |-DeclRefExpr 0x7fc74b848a80 <col:6> 'int' lvalue Var 0x7fc74b848290 'jz' 'int'
        |     `-BinaryOperator 0x7fc74b848b10 <col:11, col:16> 'int' '+'
        |       |-ImplicitCastExpr 0x7fc74b848ae0 <col:11> 'int' <LValueToRValue>
        |       | `-DeclRefExpr 0x7fc74b848aa0 <col:11> 'int' lvalue Var 0x7fc74b848290 'jz' 'int'
        |       `-ImplicitCastExpr 0x7fc74b848af8 <col:16> 'int' <LValueToRValue>
        |         `-DeclRefExpr 0x7fc74b848ac0 <col:16> 'int' lvalue ParmVar 0x7fc74b846be0 'stepz2' 'int'
        `-BinaryOperator 0x7fc74b848c58 <line:20:9, col:19> 'int' '='
          |-DeclRefExpr 0x7fc74b848ba8 <col:9> 'int' lvalue Var 0x7fc74b848210 'iz' 'int'
          `-BinaryOperator 0x7fc74b848c38 <col:14, col:19> 'int' '+'
            |-ImplicitCastExpr 0x7fc74b848c08 <col:14> 'int' <LValueToRValue>
            | `-DeclRefExpr 0x7fc74b848bc8 <col:14> 'int' lvalue Var 0x7fc74b848210 'iz' 'int'
            `-ImplicitCastExpr 0x7fc74b848c20 <col:19> 'int' <LValueToRValue>
              `-DeclRefExpr 0x7fc74b848be8 <col:19> 'int' lvalue ParmVar 0x7fc74b846a60 'stepz1' 'int'
