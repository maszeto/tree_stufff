TranslationUnitDecl 0x7f85b8038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f85b80394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f85b80391a0 '__int128'
|-TypedefDecl 0x7f85b8039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f85b80391c0 'unsigned __int128'
|-TypedefDecl 0x7f85b80397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f85b80395f0 'struct __NSConstantString_tag'
|   `-Record 0x7f85b8039568 '__NSConstantString_tag'
|-TypedefDecl 0x7f85b8039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f85b8039850 'char *'
|   `-BuiltinType 0x7f85b8038ca0 'char'
|-TypedefDecl 0x7f85b8039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f85b8039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f85b8039970 'struct __va_list_tag'
|     `-Record 0x7f85b80398e8 '__va_list_tag'
|-TypedefDecl 0x7f85b882f200 <./tree_src/extendSectMatrix_AndSectVecMatCol.c:3:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x7f85b8038d60 'unsigned char'
`-FunctionDecl 0x7f85b8831768 <line:6:1, line:25:1> line:6:6 AndSectVecMatCol 'void (int, int, int, int, int, BOOL *, BOOL (*)[my], BOOL (*)[mz], int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)'
  |-ParmVarDecl 0x7f85b882f270 <line:7:5, col:9> col:9 used mx 'int'
  |-ParmVarDecl 0x7f85b882f2f0 <col:13, col:17> col:17 used ny 'int'
  |-ParmVarDecl 0x7f85b882f370 <col:21, col:25> col:25 used my 'int'
  |-ParmVarDecl 0x7f85b882f3f0 <col:29, col:33> col:33 used nz 'int'
  |-ParmVarDecl 0x7f85b882f470 <col:37, col:41> col:41 used mz 'int'
  |-ParmVarDecl 0x7f85b882f680 <line:8:5, col:14> col:10 used x 'BOOL *':'BOOL *'
  |-ParmVarDecl 0x7f85b882f930 <col:17, col:30> col:22 used y 'BOOL (*)[my]':'BOOL (*)[my]'
  |-ParmVarDecl 0x7f85b882fbe0 <col:33, col:46> col:38 used z 'BOOL (*)[mz]':'BOOL (*)[mz]'
  |-ParmVarDecl 0x7f85b882fc60 <line:9:5, col:9> col:9 used startx 'int'
  |-ParmVarDecl 0x7f85b882fce0 <col:17, col:21> col:21 stopx 'int'
  |-ParmVarDecl 0x7f85b882fd60 <col:28, col:32> col:32 used stepx 'int'
  |-ParmVarDecl 0x7f85b882fde0 <line:10:5, col:9> col:9 used starty1 'int'
  |-ParmVarDecl 0x7f85b882fe60 <col:18, col:22> col:22 used stopy1 'int'
  |-ParmVarDecl 0x7f85b882fee0 <col:30, col:34> col:34 used stepy1 'int'
  |-ParmVarDecl 0x7f85b882ff60 <col:42, col:46> col:46 used starty2 'int'
  |-ParmVarDecl 0x7f85b882ffe0 <col:55, col:59> col:59 used stopy2 'int'
  |-ParmVarDecl 0x7f85b8830060 <col:67, col:71> col:71 used stepy2 'int'
  |-ParmVarDecl 0x7f85b88300e0 <line:11:5, col:9> col:9 used startz1 'int'
  |-ParmVarDecl 0x7f85b8830160 <col:18, col:22> col:22 stopz1 'int'
  |-ParmVarDecl 0x7f85b8831200 <col:30, col:34> col:34 used stepz1 'int'
  |-ParmVarDecl 0x7f85b8831280 <col:42, col:46> col:46 used startz2 'int'
  |-ParmVarDecl 0x7f85b8831300 <col:55, col:59> col:59 stopz2 'int'
  |-ParmVarDecl 0x7f85b8831380 <col:67, col:71> col:71 used stepz2 'int'
  `-CompoundStmt 0x7f85b8832760 <col:79, line:25:1>
    |-DeclStmt 0x7f85b8831c40 <line:13:5, col:31>
    | |-VarDecl 0x7f85b8831920 <col:5, col:9> col:9 ix 'int'
    | |-VarDecl 0x7f85b88319a0 <col:5, col:13> col:13 used jx 'int'
    | |-VarDecl 0x7f85b8831a20 <col:5, col:17> col:17 used iy 'int'
    | |-VarDecl 0x7f85b8831aa0 <col:5, col:21> col:21 used jy 'int'
    | |-VarDecl 0x7f85b8831b20 <col:5, col:25> col:25 used iz 'int'
    | `-VarDecl 0x7f85b8831ba0 <col:5, col:29> col:29 used jz 'int'
    |-BinaryOperator 0x7f85b8831cb0 <line:14:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7f85b8831c58 <col:5> 'int' lvalue Var 0x7f85b8831b20 'iz' 'int'
    | `-ImplicitCastExpr 0x7f85b8831c98 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7f85b8831c78 <col:10> 'int' lvalue ParmVar 0x7f85b88300e0 'startz1' 'int'
    `-ForStmt 0x7f85b8832728 <line:15:5, line:24:5>
      |-BinaryOperator 0x7f85b8831d28 <line:15:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7f85b8831cd0 <col:10> 'int' lvalue Var 0x7f85b8831a20 'iy' 'int'
      | `-ImplicitCastExpr 0x7f85b8831d10 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f85b8831cf0 <col:14> 'int' lvalue ParmVar 0x7f85b882fde0 'starty1' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7f85b8831db8 <col:23, col:26> 'int' '<'
      | |-ImplicitCastExpr 0x7f85b8831d88 <col:23> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7f85b8831d48 <col:23> 'int' lvalue Var 0x7f85b8831a20 'iy' 'int'
      | `-ImplicitCastExpr 0x7f85b8831da0 <col:26> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f85b8831d68 <col:26> 'int' lvalue ParmVar 0x7f85b882fe60 'stopy1' 'int'
      |-CompoundAssignOperator 0x7f85b8831e30 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7f85b8831dd8 <col:34> 'int' lvalue Var 0x7f85b8831a20 'iy' 'int'
      | `-ImplicitCastExpr 0x7f85b8831e18 <col:39> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f85b8831df8 <col:39> 'int' lvalue ParmVar 0x7f85b882fee0 'stepy1' 'int'
      `-CompoundStmt 0x7f85b88326f8 <col:48, line:24:5>
        |-BinaryOperator 0x7f85b8831eb8 <line:16:9, col:14> 'int' '='
        | |-DeclRefExpr 0x7f85b8831e60 <col:9> 'int' lvalue Var 0x7f85b88319a0 'jx' 'int'
        | `-ImplicitCastExpr 0x7f85b8831ea0 <col:14> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x7f85b8831e80 <col:14> 'int' lvalue ParmVar 0x7f85b882fc60 'startx' 'int'
        |-BinaryOperator 0x7f85b8831f30 <line:17:9, col:14> 'int' '='
        | |-DeclRefExpr 0x7f85b8831ed8 <col:9> 'int' lvalue Var 0x7f85b8831ba0 'jz' 'int'
        | `-ImplicitCastExpr 0x7f85b8831f18 <col:14> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x7f85b8831ef8 <col:14> 'int' lvalue ParmVar 0x7f85b8831280 'startz2' 'int'
        |-ForStmt 0x7f85b88325f0 <line:18:9, line:22:9>
        | |-BinaryOperator 0x7f85b8831fa8 <line:18:14, col:18> 'int' '='
        | | |-DeclRefExpr 0x7f85b8831f50 <col:14> 'int' lvalue Var 0x7f85b8831aa0 'jy' 'int'
        | | `-ImplicitCastExpr 0x7f85b8831f90 <col:18> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7f85b8831f70 <col:18> 'int' lvalue ParmVar 0x7f85b882ff60 'starty2' 'int'
        | |-<<<NULL>>>
        | |-BinaryOperator 0x7f85b8832038 <col:27, col:30> 'int' '<'
        | | |-ImplicitCastExpr 0x7f85b8832008 <col:27> 'int' <LValueToRValue>
        | | | `-DeclRefExpr 0x7f85b8831fc8 <col:27> 'int' lvalue Var 0x7f85b8831aa0 'jy' 'int'
        | | `-ImplicitCastExpr 0x7f85b8832020 <col:30> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7f85b8831fe8 <col:30> 'int' lvalue ParmVar 0x7f85b882ffe0 'stopy2' 'int'
        | |-CompoundAssignOperator 0x7f85b88320b0 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
        | | |-DeclRefExpr 0x7f85b8832058 <col:38> 'int' lvalue Var 0x7f85b8831aa0 'jy' 'int'
        | | `-ImplicitCastExpr 0x7f85b8832098 <col:43> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7f85b8832078 <col:43> 'int' lvalue ParmVar 0x7f85b8830060 'stepy2' 'int'
        | `-CompoundStmt 0x7f85b88325c8 <col:52, line:22:9>
        |   |-BinaryOperator 0x7f85b8832408 <line:19:6, col:34> 'BOOL':'unsigned char' '='
        |   | |-ArraySubscriptExpr 0x7f85b88321c0 <col:6, col:14> 'BOOL':'unsigned char' lvalue
        |   | | |-ImplicitCastExpr 0x7f85b8832190 <col:6, col:10> 'BOOL *' <ArrayToPointerDecay>
        |   | | | `-ArraySubscriptExpr 0x7f85b8832150 <col:6, col:10> 'BOOL [mz]' lvalue
        |   | | |   |-ImplicitCastExpr 0x7f85b8832120 <col:6> 'BOOL (*)[mz]':'BOOL (*)[mz]' <LValueToRValue>
        |   | | |   | `-DeclRefExpr 0x7f85b88320e0 <col:6> 'BOOL (*)[mz]':'BOOL (*)[mz]' lvalue ParmVar 0x7f85b882fbe0 'z' 'BOOL (*)[mz]':'BOOL (*)[mz]'
        |   | | |   `-ImplicitCastExpr 0x7f85b8832138 <col:8> 'int' <LValueToRValue>
        |   | | |     `-DeclRefExpr 0x7f85b8832100 <col:8> 'int' lvalue Var 0x7f85b8831ba0 'jz' 'int'
        |   | | `-ImplicitCastExpr 0x7f85b88321a8 <col:12> 'int' <LValueToRValue>
        |   | |   `-DeclRefExpr 0x7f85b8832170 <col:12> 'int' lvalue Var 0x7f85b8831b20 'iz' 'int'
        |   | `-ImplicitCastExpr 0x7f85b88323f0 <col:18, col:34> 'BOOL':'unsigned char' <IntegralCast>
        |   |   `-BinaryOperator 0x7f85b88323d0 <col:18, col:34> 'int' '&'
        |   |     |-ImplicitCastExpr 0x7f85b8832388 <col:18, col:22> 'int' <IntegralCast>
        |   |     | `-ImplicitCastExpr 0x7f85b8832370 <col:18, col:22> 'BOOL':'unsigned char' <LValueToRValue>
        |   |     |   `-ArraySubscriptExpr 0x7f85b8832250 <col:18, col:22> 'BOOL':'unsigned char' lvalue
        |   |     |     |-ImplicitCastExpr 0x7f85b8832220 <col:18> 'BOOL *':'BOOL *' <LValueToRValue>
        |   |     |     | `-DeclRefExpr 0x7f85b88321e0 <col:18> 'BOOL *':'BOOL *' lvalue ParmVar 0x7f85b882f680 'x' 'BOOL *':'BOOL *'
        |   |     |     `-ImplicitCastExpr 0x7f85b8832238 <col:20> 'int' <LValueToRValue>
        |   |     |       `-DeclRefExpr 0x7f85b8832200 <col:20> 'int' lvalue Var 0x7f85b88319a0 'jx' 'int'
        |   |     `-ImplicitCastExpr 0x7f85b88323b8 <col:26, col:34> 'int' <IntegralCast>
        |   |       `-ImplicitCastExpr 0x7f85b88323a0 <col:26, col:34> 'BOOL':'unsigned char' <LValueToRValue>
        |   |         `-ArraySubscriptExpr 0x7f85b8832350 <col:26, col:34> 'BOOL':'unsigned char' lvalue
        |   |           |-ImplicitCastExpr 0x7f85b8832320 <col:26, col:30> 'BOOL *' <ArrayToPointerDecay>
        |   |           | `-ArraySubscriptExpr 0x7f85b88322e0 <col:26, col:30> 'BOOL [my]' lvalue
        |   |           |   |-ImplicitCastExpr 0x7f85b88322b0 <col:26> 'BOOL (*)[my]':'BOOL (*)[my]' <LValueToRValue>
        |   |           |   | `-DeclRefExpr 0x7f85b8832270 <col:26> 'BOOL (*)[my]':'BOOL (*)[my]' lvalue ParmVar 0x7f85b882f930 'y' 'BOOL (*)[my]':'BOOL (*)[my]'
        |   |           |   `-ImplicitCastExpr 0x7f85b88322c8 <col:28> 'int' <LValueToRValue>
        |   |           |     `-DeclRefExpr 0x7f85b8832290 <col:28> 'int' lvalue Var 0x7f85b8831aa0 'jy' 'int'
        |   |           `-ImplicitCastExpr 0x7f85b8832338 <col:32> 'int' <LValueToRValue>
        |   |             `-DeclRefExpr 0x7f85b8832300 <col:32> 'int' lvalue Var 0x7f85b8831a20 'iy' 'int'
        |   |-BinaryOperator 0x7f85b88324d8 <line:20:6, col:16> 'int' '='
        |   | |-DeclRefExpr 0x7f85b8832428 <col:6> 'int' lvalue Var 0x7f85b88319a0 'jx' 'int'
        |   | `-BinaryOperator 0x7f85b88324b8 <col:11, col:16> 'int' '+'
        |   |   |-ImplicitCastExpr 0x7f85b8832488 <col:11> 'int' <LValueToRValue>
        |   |   | `-DeclRefExpr 0x7f85b8832448 <col:11> 'int' lvalue Var 0x7f85b88319a0 'jx' 'int'
        |   |   `-ImplicitCastExpr 0x7f85b88324a0 <col:16> 'int' <LValueToRValue>
        |   |     `-DeclRefExpr 0x7f85b8832468 <col:16> 'int' lvalue ParmVar 0x7f85b882fd60 'stepx' 'int'
        |   `-BinaryOperator 0x7f85b88325a8 <line:21:6, col:16> 'int' '='
        |     |-DeclRefExpr 0x7f85b88324f8 <col:6> 'int' lvalue Var 0x7f85b8831ba0 'jz' 'int'
        |     `-BinaryOperator 0x7f85b8832588 <col:11, col:16> 'int' '+'
        |       |-ImplicitCastExpr 0x7f85b8832558 <col:11> 'int' <LValueToRValue>
        |       | `-DeclRefExpr 0x7f85b8832518 <col:11> 'int' lvalue Var 0x7f85b8831ba0 'jz' 'int'
        |       `-ImplicitCastExpr 0x7f85b8832570 <col:16> 'int' <LValueToRValue>
        |         `-DeclRefExpr 0x7f85b8832538 <col:16> 'int' lvalue ParmVar 0x7f85b8831380 'stepz2' 'int'
        `-BinaryOperator 0x7f85b88326d8 <line:23:9, col:19> 'int' '='
          |-DeclRefExpr 0x7f85b8832628 <col:9> 'int' lvalue Var 0x7f85b8831b20 'iz' 'int'
          `-BinaryOperator 0x7f85b88326b8 <col:14, col:19> 'int' '+'
            |-ImplicitCastExpr 0x7f85b8832688 <col:14> 'int' <LValueToRValue>
            | `-DeclRefExpr 0x7f85b8832648 <col:14> 'int' lvalue Var 0x7f85b8831b20 'iz' 'int'
            `-ImplicitCastExpr 0x7f85b88326a0 <col:19> 'int' <LValueToRValue>
              `-DeclRefExpr 0x7f85b8832668 <col:19> 'int' lvalue ParmVar 0x7f85b8831200 'stepz1' 'int'
