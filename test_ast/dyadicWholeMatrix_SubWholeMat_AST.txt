TranslationUnitDecl 0x7f9295024e08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f92950256a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f92950253a0 '__int128'
|-TypedefDecl 0x7f9295025710 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f92950253c0 'unsigned __int128'
|-TypedefDecl 0x7f92950259f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f92950257f0 'struct __NSConstantString_tag'
|   `-Record 0x7f9295025768 '__NSConstantString_tag'
|-TypedefDecl 0x7f9295025a90 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f9295025a50 'char *'
|   `-BuiltinType 0x7f9295024ea0 'char'
|-TypedefDecl 0x7f9295025d68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f9295025d10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f9295025b70 'struct __va_list_tag'
|     `-Record 0x7f9295025ae8 '__va_list_tag'
|-TypedefDecl 0x7f929507d800 <./tree_src/dyadicWholeMatrix_SubWholeMat.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7f9295024f60 'unsigned char'
`-FunctionDecl 0x7f929507e198 <line:6:1, line:15:1> line:6:6 SubWholeMat 'void (int, int, double (*)[m], double (*)[m], double (*)[m])'
  |-ParmVarDecl 0x7f929507d870 <line:7:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7f929507d8f0 <col:12, col:16> col:16 used m 'int'
  |-ParmVarDecl 0x7f929507daf0 <col:19, col:32> col:26 used x 'double (*)[m]':'double (*)[m]'
  |-ParmVarDecl 0x7f929507dcf0 <col:35, col:48> col:42 used y 'double (*)[m]':'double (*)[m]'
  |-ParmVarDecl 0x7f929507def0 <col:51, col:64> col:58 used z 'double (*)[m]':'double (*)[m]'
  `-CompoundStmt 0x7f929507fa80 <col:68, line:15:1>
    |-DeclStmt 0x7f929507e3c0 <line:9:5, col:13>
    | |-VarDecl 0x7f929507e2c0 <col:5, col:9> col:9 used i 'int'
    | `-VarDecl 0x7f929507e340 <col:5, col:12> col:12 used j 'int'
    `-ForStmt 0x7f929507fa48 <line:10:5, line:14:5>
      |-BinaryOperator 0x7f929507e418 <line:10:10, col:12> 'int' '='
      | |-DeclRefExpr 0x7f929507e3d8 <col:10> 'int' lvalue Var 0x7f929507e2c0 'i' 'int'
      | `-IntegerLiteral 0x7f929507e3f8 <col:12> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x7f929507e4a8 <col:15, col:17> 'int' '<'
      | |-ImplicitCastExpr 0x7f929507e478 <col:15> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7f929507e438 <col:15> 'int' lvalue Var 0x7f929507e2c0 'i' 'int'
      | `-ImplicitCastExpr 0x7f929507e490 <col:17> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f929507e458 <col:17> 'int' lvalue ParmVar 0x7f929507d870 'n' 'int'
      |-UnaryOperator 0x7f929507e4e8 <col:20, col:21> 'int' postfix '++'
      | `-DeclRefExpr 0x7f929507e4c8 <col:20> 'int' lvalue Var 0x7f929507e2c0 'i' 'int'
      `-CompoundStmt 0x7f929507fa30 <col:26, line:14:5>
        `-ForStmt 0x7f929507f9f8 <line:11:9, line:13:9>
          |-BinaryOperator 0x7f929507e540 <line:11:14, col:16> 'int' '='
          | |-DeclRefExpr 0x7f929507e500 <col:14> 'int' lvalue Var 0x7f929507e340 'j' 'int'
          | `-IntegerLiteral 0x7f929507e520 <col:16> 'int' 0
          |-<<<NULL>>>
          |-BinaryOperator 0x7f929507e5d0 <col:19, col:21> 'int' '<'
          | |-ImplicitCastExpr 0x7f929507e5a0 <col:19> 'int' <LValueToRValue>
          | | `-DeclRefExpr 0x7f929507e560 <col:19> 'int' lvalue Var 0x7f929507e340 'j' 'int'
          | `-ImplicitCastExpr 0x7f929507e5b8 <col:21> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x7f929507e580 <col:21> 'int' lvalue ParmVar 0x7f929507d8f0 'm' 'int'
          |-UnaryOperator 0x7f929507e610 <col:24, col:25> 'int' postfix '++'
          | `-DeclRefExpr 0x7f929507e5f0 <col:24> 'int' lvalue Var 0x7f929507e340 'j' 'int'
          `-CompoundStmt 0x7f929507f9e0 <col:30, line:13:9>
            `-BinaryOperator 0x7f929507f9c0 <line:12:6, col:32> 'double' '='
              |-ArraySubscriptExpr 0x7f929507e738 <col:6, col:12> 'double' lvalue
              | |-ImplicitCastExpr 0x7f929507e708 <col:6, col:9> 'double *' <ArrayToPointerDecay>
              | | `-ArraySubscriptExpr 0x7f929507e698 <col:6, col:9> 'double [m]' lvalue
              | |   |-ImplicitCastExpr 0x7f929507e668 <col:6> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
              | |   | `-DeclRefExpr 0x7f929507e628 <col:6> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f929507def0 'z' 'double (*)[m]':'double (*)[m]'
              | |   `-ImplicitCastExpr 0x7f929507e680 <col:8> 'int' <LValueToRValue>
              | |     `-DeclRefExpr 0x7f929507e648 <col:8> 'int' lvalue Var 0x7f929507e2c0 'i' 'int'
              | `-ImplicitCastExpr 0x7f929507e720 <col:11> 'int' <LValueToRValue>
              |   `-DeclRefExpr 0x7f929507e6b8 <col:11> 'int' lvalue Var 0x7f929507e340 'j' 'int'
              `-BinaryOperator 0x7f929507f9a0 <col:16, col:32> 'double' '-'
                |-ImplicitCastExpr 0x7f929507f970 <col:16, col:22> 'double' <LValueToRValue>
                | `-ArraySubscriptExpr 0x7f929507f850 <col:16, col:22> 'double' lvalue
                |   |-ImplicitCastExpr 0x7f929507f820 <col:16, col:19> 'double *' <ArrayToPointerDecay>
                |   | `-ArraySubscriptExpr 0x7f929507e7c8 <col:16, col:19> 'double [m]' lvalue
                |   |   |-ImplicitCastExpr 0x7f929507e798 <col:16> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
                |   |   | `-DeclRefExpr 0x7f929507e758 <col:16> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f929507daf0 'x' 'double (*)[m]':'double (*)[m]'
                |   |   `-ImplicitCastExpr 0x7f929507e7b0 <col:18> 'int' <LValueToRValue>
                |   |     `-DeclRefExpr 0x7f929507e778 <col:18> 'int' lvalue Var 0x7f929507e2c0 'i' 'int'
                |   `-ImplicitCastExpr 0x7f929507f838 <col:21> 'int' <LValueToRValue>
                |     `-DeclRefExpr 0x7f929507f800 <col:21> 'int' lvalue Var 0x7f929507e340 'j' 'int'
                `-ImplicitCastExpr 0x7f929507f988 <col:26, col:32> 'double' <LValueToRValue>
                  `-ArraySubscriptExpr 0x7f929507f950 <col:26, col:32> 'double' lvalue
                    |-ImplicitCastExpr 0x7f929507f920 <col:26, col:29> 'double *' <ArrayToPointerDecay>
                    | `-ArraySubscriptExpr 0x7f929507f8e0 <col:26, col:29> 'double [m]' lvalue
                    |   |-ImplicitCastExpr 0x7f929507f8b0 <col:26> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
                    |   | `-DeclRefExpr 0x7f929507f870 <col:26> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f929507dcf0 'y' 'double (*)[m]':'double (*)[m]'
                    |   `-ImplicitCastExpr 0x7f929507f8c8 <col:28> 'int' <LValueToRValue>
                    |     `-DeclRefExpr 0x7f929507f890 <col:28> 'int' lvalue Var 0x7f929507e2c0 'i' 'int'
                    `-ImplicitCastExpr 0x7f929507f938 <col:31> 'int' <LValueToRValue>
                      `-DeclRefExpr 0x7f929507f900 <col:31> 'int' lvalue Var 0x7f929507e340 'j' 'int'
