TranslationUnitDecl 0x7f905d038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f905d0394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f905d0391a0 '__int128'
|-TypedefDecl 0x7f905d039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f905d0391c0 'unsigned __int128'
|-TypedefDecl 0x7f905d0397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f905d0395f0 'struct __NSConstantString_tag'
|   `-Record 0x7f905d039568 '__NSConstantString_tag'
|-TypedefDecl 0x7f905d039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f905d039850 'char *'
|   `-BuiltinType 0x7f905d038ca0 'char'
|-TypedefDecl 0x7f905d039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f905d039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f905d039970 'struct __va_list_tag'
|     `-Record 0x7f905d0398e8 '__va_list_tag'
|-TypedefDecl 0x7f905d82f200 <./tree_src/unaryWholeVector_MaxWholeVec.c:4:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7f905d038d60 'unsigned char'
|-FunctionDecl 0x7f905d82f598 <line:11:1, line:20:1> line:11:6 MaxWholeVec 'void (int, double *, double *)'
| |-ParmVarDecl 0x7f905d82f270 <line:12:5, col:9> col:9 used n 'int'
| |-ParmVarDecl 0x7f905d82f3f0 <col:12, col:22> col:19 used x 'double *':'double *'
| |-ParmVarDecl 0x7f905d82f470 <col:25, col:33> col:33 used z 'double *'
| `-CompoundStmt 0x7f905d82fda8 <col:37, line:20:1>
|   |-DeclStmt 0x7f905d82f718 <line:14:5, col:10>
|   | `-VarDecl 0x7f905d82f6b0 <col:5, col:9> col:9 used i 'int'
|   |-DeclStmt 0x7f905d82f7b0 <line:15:5, col:26>
|   | `-VarDecl 0x7f905d82f748 <col:5, col:12> col:12 used val 'double'
|   |-ForStmt 0x7f905d82fcc8 <line:16:5, line:18:5>
|   | |-BinaryOperator 0x7f905d82f808 <line:16:10, col:13> 'int' '='
|   | | |-DeclRefExpr 0x7f905d82f7c8 <col:10> 'int' lvalue Var 0x7f905d82f6b0 'i' 'int'
|   | | `-IntegerLiteral 0x7f905d82f7e8 <col:13> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7f905d82f898 <col:16, col:18> 'int' '<'
|   | | |-ImplicitCastExpr 0x7f905d82f868 <col:16> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7f905d82f828 <col:16> 'int' lvalue Var 0x7f905d82f6b0 'i' 'int'
|   | | `-ImplicitCastExpr 0x7f905d82f880 <col:18> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7f905d82f848 <col:18> 'int' lvalue ParmVar 0x7f905d82f270 'n' 'int'
|   | |-UnaryOperator 0x7f905d82f8d8 <col:21, col:22> 'int' postfix '++'
|   | | `-DeclRefExpr 0x7f905d82f8b8 <col:21> 'int' lvalue Var 0x7f905d82f6b0 'i' 'int'
|   | `-CompoundStmt 0x7f905d82fcb0 <col:27, line:18:5>
|   |   `-BinaryOperator 0x7f905d82fc90 <line:17:9, col:29> 'double' '='
|   |     |-DeclRefExpr 0x7f905d82f8f0 <col:9> 'double' lvalue Var 0x7f905d82f748 'val' 'double'
|   |     `-CallExpr 0x7f905d82fc30 <col:15, col:29> 'double'
|   |       |-ImplicitCastExpr 0x7f905d82fc18 <col:15> 'double (*)(double, double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x7f905d82fb18 <col:15> 'double (double, double)' Function 0x7f905d82f948 'fmax' 'double (double, double)'
|   |       |-ImplicitCastExpr 0x7f905d82fc60 <col:20> 'double' <LValueToRValue>
|   |       | `-DeclRefExpr 0x7f905d82fb38 <col:20> 'double' lvalue Var 0x7f905d82f748 'val' 'double'
|   |       `-ImplicitCastExpr 0x7f905d82fc78 <col:25, col:28> 'double' <LValueToRValue>
|   |         `-ArraySubscriptExpr 0x7f905d82fbc8 <col:25, col:28> 'double' lvalue
|   |           |-ImplicitCastExpr 0x7f905d82fb98 <col:25> 'double *':'double *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x7f905d82fb58 <col:25> 'double *':'double *' lvalue ParmVar 0x7f905d82f3f0 'x' 'double *':'double *'
|   |           `-ImplicitCastExpr 0x7f905d82fbb0 <col:27> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x7f905d82fb78 <col:27> 'int' lvalue Var 0x7f905d82f6b0 'i' 'int'
|   `-BinaryOperator 0x7f905d82fd88 <line:19:5, col:10> 'double' '='
|     |-UnaryOperator 0x7f905d82fd38 <col:5, col:6> 'double' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x7f905d82fd20 <col:6> 'double *' <LValueToRValue>
|     |   `-DeclRefExpr 0x7f905d82fd00 <col:6> 'double *' lvalue ParmVar 0x7f905d82f470 'z' 'double *'
|     `-ImplicitCastExpr 0x7f905d82fd70 <col:10> 'double' <LValueToRValue>
|       `-DeclRefExpr 0x7f905d82fd50 <col:10> 'double' lvalue Var 0x7f905d82f748 'val' 'double'
`-FunctionDecl 0x7f905d82f948 <line:17:15> col:15 implicit used fmax 'double (double, double)' extern
  |-ParmVarDecl 0x7f905d82f9e8 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x7f905d82fa50 <<invalid sloc>> <invalid sloc> 'double'
  |-NoThrowAttr 0x7f905d82fac8 <col:15> Implicit
  `-ConstAttr 0x7f905d82fb08 <col:15> Implicit
