TranslationUnitDecl 0x7fe5ca038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fe5ca0394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fe5ca0391a0 '__int128'
|-TypedefDecl 0x7fe5ca039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fe5ca0391c0 'unsigned __int128'
|-TypedefDecl 0x7fe5ca0397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fe5ca0395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fe5ca039568 '__NSConstantString_tag'
|-TypedefDecl 0x7fe5ca039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fe5ca039850 'char *'
|   `-BuiltinType 0x7fe5ca038ca0 'char'
|-TypedefDecl 0x7fe5ca039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fe5ca039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fe5ca039970 'struct __va_list_tag'
|     `-Record 0x7fe5ca0398e8 '__va_list_tag'
|-TypedefDecl 0x7fe5ca091600 <./tree_src/unarySectMatrix_ProdPrefixSectLastMat.c:4:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fe5ca038d60 'unsigned char'
`-FunctionDecl 0x7fe5ca094600 <line:11:1, line:25:1> line:11:6 ProdPrefixSectLastMat 'void (int, int, int, int, double (*)[mx], double (*)[my], int, int, int, int, int, int, int, int, int, int, int, int)'
  |-ParmVarDecl 0x7fe5ca091670 <line:12:5, col:9> col:9 used nx 'int'
  |-ParmVarDecl 0x7fe5ca0916f0 <col:13, col:17> col:17 used mx 'int'
  |-ParmVarDecl 0x7fe5ca091770 <col:21, col:25> col:25 used ny 'int'
  |-ParmVarDecl 0x7fe5ca0917f0 <col:29, col:33> col:33 used my 'int'
  |-ParmVarDecl 0x7fe5ca0919f0 <col:37, col:52> col:44 used x 'double (*)[mx]':'double (*)[mx]'
  |-ParmVarDecl 0x7fe5ca091bf0 <col:55, col:70> col:62 used y 'double (*)[my]':'double (*)[my]'
  |-ParmVarDecl 0x7fe5ca091c70 <line:13:5, col:9> col:9 used startx1 'int'
  |-ParmVarDecl 0x7fe5ca091cf0 <col:18, col:22> col:22 used stopx1 'int'
  |-ParmVarDecl 0x7fe5ca091d70 <col:30, col:34> col:34 used stepx1 'int'
  |-ParmVarDecl 0x7fe5ca091df0 <col:42, col:46> col:46 used startx2 'int'
  |-ParmVarDecl 0x7fe5ca091e70 <col:55, col:59> col:59 used stopx2 'int'
  |-ParmVarDecl 0x7fe5ca091ef0 <col:67, col:71> col:71 used stepx2 'int'
  |-ParmVarDecl 0x7fe5ca091f70 <line:14:5, col:9> col:9 used starty1 'int'
  |-ParmVarDecl 0x7fe5ca091ff0 <col:18, col:22> col:22 stopy1 'int'
  |-ParmVarDecl 0x7fe5ca092070 <col:30, col:34> col:34 stepy1 'int'
  |-ParmVarDecl 0x7fe5ca0920f0 <col:42, col:46> col:46 used starty2 'int'
  |-ParmVarDecl 0x7fe5ca092170 <col:55, col:59> col:59 stopy2 'int'
  |-ParmVarDecl 0x7fe5ca0921f0 <col:67, col:71> col:71 stepy2 'int'
  `-CompoundStmt 0x7fe5ca095508 <col:79, line:25:1>
    |-DeclStmt 0x7fe5ca0949a0 <line:16:5, col:23>
    | |-VarDecl 0x7fe5ca094790 <col:5, col:9> col:9 used ix 'int'
    | |-VarDecl 0x7fe5ca094810 <col:5, col:13> col:13 used jx 'int'
    | |-VarDecl 0x7fe5ca094890 <col:5, col:17> col:17 used iy 'int'
    | `-VarDecl 0x7fe5ca094910 <col:5, col:21> col:21 used jy 'int'
    |-BinaryOperator 0x7fe5ca094a10 <line:17:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7fe5ca0949b8 <col:5> 'int' lvalue Var 0x7fe5ca094890 'iy' 'int'
    | `-ImplicitCastExpr 0x7fe5ca0949f8 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7fe5ca0949d8 <col:10> 'int' lvalue ParmVar 0x7fe5ca091f70 'starty1' 'int'
    `-ForStmt 0x7fe5ca0954d0 <line:18:5, line:24:5>
      |-BinaryOperator 0x7fe5ca094a88 <line:18:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7fe5ca094a30 <col:10> 'int' lvalue Var 0x7fe5ca094790 'ix' 'int'
      | `-ImplicitCastExpr 0x7fe5ca094a70 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fe5ca094a50 <col:14> 'int' lvalue ParmVar 0x7fe5ca091c70 'startx1' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7fe5ca094b18 <col:23, col:26> 'int' '<'
      | |-ImplicitCastExpr 0x7fe5ca094ae8 <col:23> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fe5ca094aa8 <col:23> 'int' lvalue Var 0x7fe5ca094790 'ix' 'int'
      | `-ImplicitCastExpr 0x7fe5ca094b00 <col:26> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fe5ca094ac8 <col:26> 'int' lvalue ParmVar 0x7fe5ca091cf0 'stopx1' 'int'
      |-CompoundAssignOperator 0x7fe5ca094b90 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7fe5ca094b38 <col:34> 'int' lvalue Var 0x7fe5ca094790 'ix' 'int'
      | `-ImplicitCastExpr 0x7fe5ca094b78 <col:39> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fe5ca094b58 <col:39> 'int' lvalue ParmVar 0x7fe5ca091d70 'stepx1' 'int'
      `-CompoundStmt 0x7fe5ca0954a8 <col:48, line:24:5>
        |-BinaryOperator 0x7fe5ca094e00 <line:19:9, col:39> 'double' '='
        | |-ArraySubscriptExpr 0x7fe5ca094cc8 <col:9, col:22> 'double' lvalue
        | | |-ImplicitCastExpr 0x7fe5ca094c98 <col:9, col:13> 'double *' <ArrayToPointerDecay>
        | | | `-ArraySubscriptExpr 0x7fe5ca094c30 <col:9, col:13> 'double [my]' lvalue
        | | |   |-ImplicitCastExpr 0x7fe5ca094c00 <col:9> 'double (*)[my]':'double (*)[my]' <LValueToRValue>
        | | |   | `-DeclRefExpr 0x7fe5ca094bc0 <col:9> 'double (*)[my]':'double (*)[my]' lvalue ParmVar 0x7fe5ca091bf0 'y' 'double (*)[my]':'double (*)[my]'
        | | |   `-ImplicitCastExpr 0x7fe5ca094c18 <col:11> 'int' <LValueToRValue>
        | | |     `-DeclRefExpr 0x7fe5ca094be0 <col:11> 'int' lvalue Var 0x7fe5ca094890 'iy' 'int'
        | | `-ImplicitCastExpr 0x7fe5ca094cb0 <col:15> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fe5ca094c50 <col:15> 'int' lvalue ParmVar 0x7fe5ca091f70 'starty1' 'int'
        | `-ImplicitCastExpr 0x7fe5ca094de8 <col:26, col:39> 'double' <LValueToRValue>
        |   `-ArraySubscriptExpr 0x7fe5ca094dc8 <col:26, col:39> 'double' lvalue
        |     |-ImplicitCastExpr 0x7fe5ca094d98 <col:26, col:30> 'double *' <ArrayToPointerDecay>
        |     | `-ArraySubscriptExpr 0x7fe5ca094d58 <col:26, col:30> 'double [mx]' lvalue
        |     |   |-ImplicitCastExpr 0x7fe5ca094d28 <col:26> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
        |     |   | `-DeclRefExpr 0x7fe5ca094ce8 <col:26> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7fe5ca0919f0 'x' 'double (*)[mx]':'double (*)[mx]'
        |     |   `-ImplicitCastExpr 0x7fe5ca094d40 <col:28> 'int' <LValueToRValue>
        |     |     `-DeclRefExpr 0x7fe5ca094d08 <col:28> 'int' lvalue Var 0x7fe5ca094790 'ix' 'int'
        |     `-ImplicitCastExpr 0x7fe5ca094db0 <col:32> 'int' <LValueToRValue>
        |       `-DeclRefExpr 0x7fe5ca094d78 <col:32> 'int' lvalue ParmVar 0x7fe5ca091c70 'startx1' 'int'
        |-BinaryOperator 0x7fe5ca094eb8 <line:20:9, col:22> 'int' '='
        | |-DeclRefExpr 0x7fe5ca094e20 <col:9> 'int' lvalue Var 0x7fe5ca094910 'jy' 'int'
        | `-BinaryOperator 0x7fe5ca094e98 <col:14, col:22> 'int' '+'
        |   |-ImplicitCastExpr 0x7fe5ca094e80 <col:14> 'int' <LValueToRValue>
        |   | `-DeclRefExpr 0x7fe5ca094e40 <col:14> 'int' lvalue ParmVar 0x7fe5ca0920f0 'starty2' 'int'
        |   `-IntegerLiteral 0x7fe5ca094e60 <col:22> 'int' 1
        `-ForStmt 0x7fe5ca095470 <line:21:9, line:23:9>
          |-BinaryOperator 0x7fe5ca094f70 <line:21:14, col:26> 'int' '='
          | |-DeclRefExpr 0x7fe5ca094ed8 <col:14> 'int' lvalue Var 0x7fe5ca094810 'jx' 'int'
          | `-BinaryOperator 0x7fe5ca094f50 <col:18, col:26> 'int' '+'
          |   |-ImplicitCastExpr 0x7fe5ca094f38 <col:18> 'int' <LValueToRValue>
          |   | `-DeclRefExpr 0x7fe5ca094ef8 <col:18> 'int' lvalue ParmVar 0x7fe5ca091df0 'startx2' 'int'
          |   `-IntegerLiteral 0x7fe5ca094f18 <col:26> 'int' 1
          |-<<<NULL>>>
          |-BinaryOperator 0x7fe5ca095000 <col:29, col:32> 'int' '<'
          | |-ImplicitCastExpr 0x7fe5ca094fd0 <col:29> 'int' <LValueToRValue>
          | | `-DeclRefExpr 0x7fe5ca094f90 <col:29> 'int' lvalue Var 0x7fe5ca094810 'jx' 'int'
          | `-ImplicitCastExpr 0x7fe5ca094fe8 <col:32> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x7fe5ca094fb0 <col:32> 'int' lvalue ParmVar 0x7fe5ca091e70 'stopx2' 'int'
          |-CompoundAssignOperator 0x7fe5ca095078 <col:40, col:45> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
          | |-DeclRefExpr 0x7fe5ca095020 <col:40> 'int' lvalue Var 0x7fe5ca094810 'jx' 'int'
          | `-ImplicitCastExpr 0x7fe5ca095060 <col:45> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x7fe5ca095040 <col:45> 'int' lvalue ParmVar 0x7fe5ca091ef0 'stepx2' 'int'
          `-CompoundStmt 0x7fe5ca095458 <col:54, line:23:9>
            `-BinaryOperator 0x7fe5ca095438 <line:22:13, col:47> 'double' '='
              |-ArraySubscriptExpr 0x7fe5ca095188 <col:13, col:21> 'double' lvalue
              | |-ImplicitCastExpr 0x7fe5ca095158 <col:13, col:17> 'double *' <ArrayToPointerDecay>
              | | `-ArraySubscriptExpr 0x7fe5ca095118 <col:13, col:17> 'double [my]' lvalue
              | |   |-ImplicitCastExpr 0x7fe5ca0950e8 <col:13> 'double (*)[my]':'double (*)[my]' <LValueToRValue>
              | |   | `-DeclRefExpr 0x7fe5ca0950a8 <col:13> 'double (*)[my]':'double (*)[my]' lvalue ParmVar 0x7fe5ca091bf0 'y' 'double (*)[my]':'double (*)[my]'
              | |   `-ImplicitCastExpr 0x7fe5ca095100 <col:15> 'int' <LValueToRValue>
              | |     `-DeclRefExpr 0x7fe5ca0950c8 <col:15> 'int' lvalue Var 0x7fe5ca094890 'iy' 'int'
              | `-ImplicitCastExpr 0x7fe5ca095170 <col:19> 'int' <LValueToRValue>
              |   `-DeclRefExpr 0x7fe5ca095138 <col:19> 'int' lvalue Var 0x7fe5ca094910 'jy' 'int'
              `-BinaryOperator 0x7fe5ca095418 <col:25, col:47> 'double' '*'
                |-ImplicitCastExpr 0x7fe5ca0953e8 <col:25, col:35> 'double' <LValueToRValue>
                | `-ArraySubscriptExpr 0x7fe5ca0952c8 <col:25, col:35> 'double' lvalue
                |   |-ImplicitCastExpr 0x7fe5ca0952b0 <col:25, col:29> 'double *' <ArrayToPointerDecay>
                |   | `-ArraySubscriptExpr 0x7fe5ca095218 <col:25, col:29> 'double [my]' lvalue
                |   |   |-ImplicitCastExpr 0x7fe5ca0951e8 <col:25> 'double (*)[my]':'double (*)[my]' <LValueToRValue>
                |   |   | `-DeclRefExpr 0x7fe5ca0951a8 <col:25> 'double (*)[my]':'double (*)[my]' lvalue ParmVar 0x7fe5ca091bf0 'y' 'double (*)[my]':'double (*)[my]'
                |   |   `-ImplicitCastExpr 0x7fe5ca095200 <col:27> 'int' <LValueToRValue>
                |   |     `-DeclRefExpr 0x7fe5ca0951c8 <col:27> 'int' lvalue Var 0x7fe5ca094890 'iy' 'int'
                |   `-BinaryOperator 0x7fe5ca095290 <col:31, col:34> 'int' '-'
                |     |-ImplicitCastExpr 0x7fe5ca095278 <col:31> 'int' <LValueToRValue>
                |     | `-DeclRefExpr 0x7fe5ca095238 <col:31> 'int' lvalue Var 0x7fe5ca094910 'jy' 'int'
                |     `-IntegerLiteral 0x7fe5ca095258 <col:34> 'int' 1
                `-ImplicitCastExpr 0x7fe5ca095400 <col:39, col:47> 'double' <LValueToRValue>
                  `-ArraySubscriptExpr 0x7fe5ca0953c8 <col:39, col:47> 'double' lvalue
                    |-ImplicitCastExpr 0x7fe5ca095398 <col:39, col:43> 'double *' <ArrayToPointerDecay>
                    | `-ArraySubscriptExpr 0x7fe5ca095358 <col:39, col:43> 'double [mx]' lvalue
                    |   |-ImplicitCastExpr 0x7fe5ca095328 <col:39> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
                    |   | `-DeclRefExpr 0x7fe5ca0952e8 <col:39> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7fe5ca0919f0 'x' 'double (*)[mx]':'double (*)[mx]'
                    |   `-ImplicitCastExpr 0x7fe5ca095340 <col:41> 'int' <LValueToRValue>
                    |     `-DeclRefExpr 0x7fe5ca095308 <col:41> 'int' lvalue Var 0x7fe5ca094790 'ix' 'int'
                    `-ImplicitCastExpr 0x7fe5ca0953b0 <col:45> 'int' <LValueToRValue>
                      `-DeclRefExpr 0x7fe5ca095378 <col:45> 'int' lvalue Var 0x7fe5ca094810 'jx' 'int'
