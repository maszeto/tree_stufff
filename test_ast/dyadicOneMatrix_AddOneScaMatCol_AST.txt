TranslationUnitDecl 0x7fb0d0038608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fb0d0038ea0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fb0d0038ba0 '__int128'
|-TypedefDecl 0x7fb0d0038f10 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fb0d0038bc0 'unsigned __int128'
|-TypedefDecl 0x7fb0d00391f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fb0d0038ff0 'struct __NSConstantString_tag'
|   `-Record 0x7fb0d0038f68 '__NSConstantString_tag'
|-TypedefDecl 0x7fb0d0039290 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fb0d0039250 'char *'
|   `-BuiltinType 0x7fb0d00386a0 'char'
|-TypedefDecl 0x7fb0d0039568 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fb0d0039510 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fb0d0039370 'struct __va_list_tag'
|     `-Record 0x7fb0d00392e8 '__va_list_tag'
|-TypedefDecl 0x7fb0d0808200 <./tree_src/dyadicOneMatrix_AddOneScaMatCol.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fb0d0038760 'unsigned char'
`-FunctionDecl 0x7fb0d0808a48 <line:6:1, line:13:1> line:6:6 AddOneScaMatCol 'void (int, int, int, double, double (*)[m], double (*)[m])'
  |-ParmVarDecl 0x7fb0d0808270 <line:7:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7fb0d08082f0 <col:12, col:16> col:16 used m 'int'
  |-ParmVarDecl 0x7fb0d0808370 <col:19, col:23> col:23 used p 'int'
  |-ParmVarDecl 0x7fb0d08083f0 <col:26, col:33> col:33 used x 'double'
  |-ParmVarDecl 0x7fb0d08085f0 <col:36, col:49> col:43 used y 'double (*)[m]':'double (*)[m]'
  |-ParmVarDecl 0x7fb0d08087f0 <col:52, col:65> col:59 used z 'double (*)[m]':'double (*)[m]'
  `-CompoundStmt 0x7fb0d08090c8 <col:69, line:13:1>
    |-DeclStmt 0x7fb0d0808c78 <line:9:5, col:13>
    | |-VarDecl 0x7fb0d0808b78 <col:5, col:9> col:9 used i 'int'
    | `-VarDecl 0x7fb0d0808bf8 <col:5, col:12> col:12 j 'int'
    `-ForStmt 0x7fb0d0809090 <line:10:5, line:12:5>
      |-BinaryOperator 0x7fb0d0808cd0 <line:10:10, col:13> 'int' '='
      | |-DeclRefExpr 0x7fb0d0808c90 <col:10> 'int' lvalue Var 0x7fb0d0808b78 'i' 'int'
      | `-IntegerLiteral 0x7fb0d0808cb0 <col:13> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x7fb0d0808d60 <col:16, col:18> 'int' '<'
      | |-ImplicitCastExpr 0x7fb0d0808d30 <col:16> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fb0d0808cf0 <col:16> 'int' lvalue Var 0x7fb0d0808b78 'i' 'int'
      | `-ImplicitCastExpr 0x7fb0d0808d48 <col:18> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fb0d0808d10 <col:18> 'int' lvalue ParmVar 0x7fb0d0808270 'n' 'int'
      |-UnaryOperator 0x7fb0d0808da0 <col:21, col:22> 'int' postfix '++'
      | `-DeclRefExpr 0x7fb0d0808d80 <col:21> 'int' lvalue Var 0x7fb0d0808b78 'i' 'int'
      `-CompoundStmt 0x7fb0d0809078 <col:27, line:12:5>
        `-BinaryOperator 0x7fb0d0809058 <line:11:9, col:29> 'double' '='
          |-ArraySubscriptExpr 0x7fb0d0808ec8 <col:9, col:15> 'double' lvalue
          | |-ImplicitCastExpr 0x7fb0d0808e98 <col:9, col:12> 'double *' <ArrayToPointerDecay>
          | | `-ArraySubscriptExpr 0x7fb0d0808e28 <col:9, col:12> 'double [m]' lvalue
          | |   |-ImplicitCastExpr 0x7fb0d0808df8 <col:9> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
          | |   | `-DeclRefExpr 0x7fb0d0808db8 <col:9> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fb0d08087f0 'z' 'double (*)[m]':'double (*)[m]'
          | |   `-ImplicitCastExpr 0x7fb0d0808e10 <col:11> 'int' <LValueToRValue>
          | |     `-DeclRefExpr 0x7fb0d0808dd8 <col:11> 'int' lvalue Var 0x7fb0d0808b78 'i' 'int'
          | `-ImplicitCastExpr 0x7fb0d0808eb0 <col:14> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x7fb0d0808e48 <col:14> 'int' lvalue ParmVar 0x7fb0d0808370 'p' 'int'
          `-BinaryOperator 0x7fb0d0809038 <col:19, col:29> 'double' '+'
            |-ImplicitCastExpr 0x7fb0d0809008 <col:19> 'double' <LValueToRValue>
            | `-DeclRefExpr 0x7fb0d0808ee8 <col:19> 'double' lvalue ParmVar 0x7fb0d08083f0 'x' 'double'
            `-ImplicitCastExpr 0x7fb0d0809020 <col:23, col:29> 'double' <LValueToRValue>
              `-ArraySubscriptExpr 0x7fb0d0808fe8 <col:23, col:29> 'double' lvalue
                |-ImplicitCastExpr 0x7fb0d0808fb8 <col:23, col:26> 'double *' <ArrayToPointerDecay>
                | `-ArraySubscriptExpr 0x7fb0d0808f78 <col:23, col:26> 'double [m]' lvalue
                |   |-ImplicitCastExpr 0x7fb0d0808f48 <col:23> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
                |   | `-DeclRefExpr 0x7fb0d0808f08 <col:23> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fb0d08085f0 'y' 'double (*)[m]':'double (*)[m]'
                |   `-ImplicitCastExpr 0x7fb0d0808f60 <col:25> 'int' <LValueToRValue>
                |     `-DeclRefExpr 0x7fb0d0808f28 <col:25> 'int' lvalue Var 0x7fb0d0808b78 'i' 'int'
                `-ImplicitCastExpr 0x7fb0d0808fd0 <col:28> 'int' <LValueToRValue>
                  `-DeclRefExpr 0x7fb0d0808f98 <col:28> 'int' lvalue ParmVar 0x7fb0d0808370 'p' 'int'
