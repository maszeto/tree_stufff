TranslationUnitDecl 0x7fd08d838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fd08d8394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fd08d8391a0 '__int128'
|-TypedefDecl 0x7fd08d839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fd08d8391c0 'unsigned __int128'
|-TypedefDecl 0x7fd08d8397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fd08d8395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fd08d839568 '__NSConstantString_tag'
|-TypedefDecl 0x7fd08d839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fd08d839850 'char *'
|   `-BuiltinType 0x7fd08d838ca0 'char'
|-TypedefDecl 0x7fd08d839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fd08d839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fd08d839970 'struct __va_list_tag'
|     `-Record 0x7fd08d8398e8 '__va_list_tag'
|-TypedefDecl 0x7fd08e02f200 <./tree_src/dyadicSectOneMatrix_OrSectOneMatColSca.c:3:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x7fd08d838d60 'unsigned char'
`-FunctionDecl 0x7fd08e02ff58 <line:5:1, line:15:1> line:5:6 OrSectOneMatColSca 'void (int, int, int, BOOL, BOOL (*)[m], BOOL (*)[m], int, int, int, int, int, int)'
  |-ParmVarDecl 0x7fd08e02f270 <line:6:5, col:9> col:9 used m 'int'
  |-ParmVarDecl 0x7fd08e02f2f0 <col:12, col:16> col:16 used n 'int'
  |-ParmVarDecl 0x7fd08e02f370 <col:19, col:23> col:23 used p 'int'
  |-ParmVarDecl 0x7fd08e02f410 <col:26, col:31> col:31 used y 'BOOL':'unsigned char'
  |-ParmVarDecl 0x7fd08e02f6c0 <col:34, col:45> col:39 used z 'BOOL (*)[m]':'BOOL (*)[m]'
  |-ParmVarDecl 0x7fd08e02f970 <col:48, col:59> col:53 used x 'BOOL (*)[m]':'BOOL (*)[m]'
  |-ParmVarDecl 0x7fd08e02f9f0 <line:7:5, col:9> col:9 used sz1 'int'
  |-ParmVarDecl 0x7fd08e02fa70 <col:14, col:18> col:18 ez1 'int'
  |-ParmVarDecl 0x7fd08e02faf0 <col:23, col:27> col:27 used bz1 'int'
  |-ParmVarDecl 0x7fd08e02fb70 <col:32, col:36> col:36 used sx1 'int'
  |-ParmVarDecl 0x7fd08e02fbf0 <col:41, col:45> col:45 used ex1 'int'
  |-ParmVarDecl 0x7fd08e02fc70 <col:50, col:54> col:54 used bx1 'int'
  `-CompoundStmt 0x7fd08e031800 <col:60, line:15:1>
    |-DeclStmt 0x7fd08e0301b8 <line:9:5, col:12>
    | |-VarDecl 0x7fd08e0300b8 <col:5, col:9> col:9 used j 'int'
    | `-VarDecl 0x7fd08e030138 <col:5, col:11> col:11 used i 'int'
    |-BinaryOperator 0x7fd08e031238 <line:10:5, col:8> 'int' '='
    | |-DeclRefExpr 0x7fd08e0301d0 <col:5> 'int' lvalue Var 0x7fd08e0300b8 'j' 'int'
    | `-ImplicitCastExpr 0x7fd08e031220 <col:8> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7fd08e031200 <col:8> 'int' lvalue ParmVar 0x7fd08e02faf0 'bz1' 'int'
    `-ForStmt 0x7fd08e0317c8 <line:11:5, line:14:5>
      |-BinaryOperator 0x7fd08e0312b0 <line:11:9, col:12> 'int' '='
      | |-DeclRefExpr 0x7fd08e031258 <col:9> 'int' lvalue Var 0x7fd08e030138 'i' 'int'
      | `-ImplicitCastExpr 0x7fd08e031298 <col:12> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fd08e031278 <col:12> 'int' lvalue ParmVar 0x7fd08e02fc70 'bx1' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7fd08e031340 <col:17, col:19> 'int' '<'
      | |-ImplicitCastExpr 0x7fd08e031310 <col:17> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fd08e0312d0 <col:17> 'int' lvalue Var 0x7fd08e030138 'i' 'int'
      | `-ImplicitCastExpr 0x7fd08e031328 <col:19> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fd08e0312f0 <col:19> 'int' lvalue ParmVar 0x7fd08e02fbf0 'ex1' 'int'
      |-CompoundAssignOperator 0x7fd08e0313b8 <col:24, col:28> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7fd08e031360 <col:24> 'int' lvalue Var 0x7fd08e030138 'i' 'int'
      | `-ImplicitCastExpr 0x7fd08e0313a0 <col:28> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fd08e031380 <col:28> 'int' lvalue ParmVar 0x7fd08e02fb70 'sx1' 'int'
      `-CompoundStmt 0x7fd08e0317a8 <col:34, line:14:5>
        |-BinaryOperator 0x7fd08e031700 <line:12:2, col:21> 'BOOL':'unsigned char' '='
        | |-ArraySubscriptExpr 0x7fd08e031528 <col:2, col:8> 'BOOL':'unsigned char' lvalue
        | | |-ImplicitCastExpr 0x7fd08e0314f8 <col:2, col:5> 'BOOL *' <ArrayToPointerDecay>
        | | | `-ArraySubscriptExpr 0x7fd08e031458 <col:2, col:5> 'BOOL [m]' lvalue
        | | |   |-ImplicitCastExpr 0x7fd08e031428 <col:2> 'BOOL (*)[m]':'BOOL (*)[m]' <LValueToRValue>
        | | |   | `-DeclRefExpr 0x7fd08e0313e8 <col:2> 'BOOL (*)[m]':'BOOL (*)[m]' lvalue ParmVar 0x7fd08e02f6c0 'z' 'BOOL (*)[m]':'BOOL (*)[m]'
        | | |   `-ImplicitCastExpr 0x7fd08e031440 <col:4> 'int' <LValueToRValue>
        | | |     `-DeclRefExpr 0x7fd08e031408 <col:4> 'int' lvalue Var 0x7fd08e0300b8 'j' 'int'
        | | `-ImplicitCastExpr 0x7fd08e031510 <col:7> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fd08e031478 <col:7> 'int' lvalue ParmVar 0x7fd08e02f370 'p' 'int'
        | `-ImplicitCastExpr 0x7fd08e0316e8 <col:11, col:21> 'BOOL':'unsigned char' <IntegralCast>
        |   `-BinaryOperator 0x7fd08e0316c8 <col:11, col:21> 'int' '|'
        |     |-ImplicitCastExpr 0x7fd08e031680 <col:11, col:17> 'int' <IntegralCast>
        |     | `-ImplicitCastExpr 0x7fd08e031668 <col:11, col:17> 'BOOL':'unsigned char' <LValueToRValue>
        |     |   `-ArraySubscriptExpr 0x7fd08e031628 <col:11, col:17> 'BOOL':'unsigned char' lvalue
        |     |     |-ImplicitCastExpr 0x7fd08e0315f8 <col:11, col:14> 'BOOL *' <ArrayToPointerDecay>
        |     |     | `-ArraySubscriptExpr 0x7fd08e0315b8 <col:11, col:14> 'BOOL [m]' lvalue
        |     |     |   |-ImplicitCastExpr 0x7fd08e031588 <col:11> 'BOOL (*)[m]':'BOOL (*)[m]' <LValueToRValue>
        |     |     |   | `-DeclRefExpr 0x7fd08e031548 <col:11> 'BOOL (*)[m]':'BOOL (*)[m]' lvalue ParmVar 0x7fd08e02f970 'x' 'BOOL (*)[m]':'BOOL (*)[m]'
        |     |     |   `-ImplicitCastExpr 0x7fd08e0315a0 <col:13> 'int' <LValueToRValue>
        |     |     |     `-DeclRefExpr 0x7fd08e031568 <col:13> 'int' lvalue Var 0x7fd08e030138 'i' 'int'
        |     |     `-ImplicitCastExpr 0x7fd08e031610 <col:16> 'int' <LValueToRValue>
        |     |       `-DeclRefExpr 0x7fd08e0315d8 <col:16> 'int' lvalue ParmVar 0x7fd08e02f370 'p' 'int'
        |     `-ImplicitCastExpr 0x7fd08e0316b0 <col:21> 'int' <IntegralCast>
        |       `-ImplicitCastExpr 0x7fd08e031698 <col:21> 'BOOL':'unsigned char' <LValueToRValue>
        |         `-DeclRefExpr 0x7fd08e031648 <col:21> 'BOOL':'unsigned char' lvalue ParmVar 0x7fd08e02f410 'y' 'BOOL':'unsigned char'
        `-CompoundAssignOperator 0x7fd08e031778 <line:13:9, col:13> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
          |-DeclRefExpr 0x7fd08e031720 <col:9> 'int' lvalue Var 0x7fd08e0300b8 'j' 'int'
          `-ImplicitCastExpr 0x7fd08e031760 <col:13> 'int' <LValueToRValue>
            `-DeclRefExpr 0x7fd08e031740 <col:13> 'int' lvalue ParmVar 0x7fd08e02f9f0 'sz1' 'int'
