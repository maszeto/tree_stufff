TranslationUnitDecl 0x7fa5a4834608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fa5a4834ea0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fa5a4834ba0 '__int128'
|-TypedefDecl 0x7fa5a4834f10 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fa5a4834bc0 'unsigned __int128'
|-TypedefDecl 0x7fa5a48351f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fa5a4834ff0 'struct __NSConstantString_tag'
|   `-Record 0x7fa5a4834f68 '__NSConstantString_tag'
|-TypedefDecl 0x7fa5a4835290 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fa5a4835250 'char *'
|   `-BuiltinType 0x7fa5a48346a0 'char'
|-TypedefDecl 0x7fa5a4835568 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fa5a4835510 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fa5a4835370 'struct __va_list_tag'
|     `-Record 0x7fa5a48352e8 '__va_list_tag'
|-TypedefDecl 0x7fa5a502f200 <./tree_src/dyadicIndexVector_LoIndexVec.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fa5a4834760 'unsigned char'
|-FunctionDecl 0x7fa5a502fc38 <line:5:1, line:13:1> line:5:6 LoIndexVec 'void (int, double *, double *, double *, int *, int *, int *)'
| |-ParmVarDecl 0x7fa5a502f270 <line:6:5, col:9> col:9 used n 'int'
| |-ParmVarDecl 0x7fa5a502f3f0 <col:12, col:22> col:19 used z 'double *':'double *'
| |-ParmVarDecl 0x7fa5a502f540 <col:25, col:35> col:32 used x 'double *':'double *'
| |-ParmVarDecl 0x7fa5a502f690 <col:38, col:48> col:45 used y 'double *':'double *'
| |-ParmVarDecl 0x7fa5a502f810 <line:7:5, col:13> col:9 used ix 'int *':'int *'
| |-ParmVarDecl 0x7fa5a502f960 <col:16, col:24> col:20 used iy 'int *':'int *'
| |-ParmVarDecl 0x7fa5a502fab0 <col:27, col:35> col:31 used iz 'int *':'int *'
| `-CompoundStmt 0x7fa5a5031510 <col:39, line:13:1>
|   |-DeclStmt 0x7fa5a502fdd8 <line:9:5, col:10>
|   | `-VarDecl 0x7fa5a502fd70 <col:5, col:9> col:9 used i 'int'
|   `-ForStmt 0x7fa5a50314d8 <line:10:5, line:12:5>
|     |-BinaryOperator 0x7fa5a502fe30 <line:10:10, col:13> 'int' '='
|     | |-DeclRefExpr 0x7fa5a502fdf0 <col:10> 'int' lvalue Var 0x7fa5a502fd70 'i' 'int'
|     | `-IntegerLiteral 0x7fa5a502fe10 <col:13> 'int' 0
|     |-<<<NULL>>>
|     |-ImplicitCastExpr 0x7fa5a502fe70 <col:16> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x7fa5a502fe50 <col:16> 'int' lvalue ParmVar 0x7fa5a502f270 'n' 'int'
|     |-UnaryOperator 0x7fa5a502fea8 <col:19, col:20> 'int' postfix '++'
|     | `-DeclRefExpr 0x7fa5a502fe88 <col:19> 'int' lvalue Var 0x7fa5a502fd70 'i' 'int'
|     `-CompoundStmt 0x7fa5a50314c0 <col:25, line:12:5>
|       `-BinaryOperator 0x7fa5a50314a0 <line:11:2, col:34> 'double' '='
|         |-ArraySubscriptExpr 0x7fa5a502ffa0 <col:2, col:9> 'double' lvalue
|         | |-ImplicitCastExpr 0x7fa5a502ff70 <col:2> 'double *':'double *' <LValueToRValue>
|         | | `-DeclRefExpr 0x7fa5a502fec0 <col:2> 'double *':'double *' lvalue ParmVar 0x7fa5a502f3f0 'z' 'double *':'double *'
|         | `-ImplicitCastExpr 0x7fa5a502ff88 <col:4, col:8> 'int' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x7fa5a502ff50 <col:4, col:8> 'int' lvalue
|         |     |-ImplicitCastExpr 0x7fa5a502ff20 <col:4> 'int *':'int *' <LValueToRValue>
|         |     | `-DeclRefExpr 0x7fa5a502fee0 <col:4> 'int *':'int *' lvalue ParmVar 0x7fa5a502fab0 'iz' 'int *':'int *'
|         |     `-ImplicitCastExpr 0x7fa5a502ff38 <col:7> 'int' <LValueToRValue>
|         |       `-DeclRefExpr 0x7fa5a502ff00 <col:7> 'int' lvalue Var 0x7fa5a502fd70 'i' 'int'
|         `-CallExpr 0x7fa5a5031440 <col:12, col:34> 'double'
|           |-ImplicitCastExpr 0x7fa5a5031428 <col:12> 'double (*)(double, double)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x7fa5a50301c8 <col:12> 'double (double, double)' Function 0x7fa5a502fff8 'fmin' 'double (double, double)'
|           |-ImplicitCastExpr 0x7fa5a5031470 <col:17, col:24> 'double' <LValueToRValue>
|           | `-ArraySubscriptExpr 0x7fa5a50312e0 <col:17, col:24> 'double' lvalue
|           |   |-ImplicitCastExpr 0x7fa5a50312b0 <col:17> 'double *':'double *' <LValueToRValue>
|           |   | `-DeclRefExpr 0x7fa5a5031200 <col:17> 'double *':'double *' lvalue ParmVar 0x7fa5a502f540 'x' 'double *':'double *'
|           |   `-ImplicitCastExpr 0x7fa5a50312c8 <col:19, col:23> 'int' <LValueToRValue>
|           |     `-ArraySubscriptExpr 0x7fa5a5031290 <col:19, col:23> 'int' lvalue
|           |       |-ImplicitCastExpr 0x7fa5a5031260 <col:19> 'int *':'int *' <LValueToRValue>
|           |       | `-DeclRefExpr 0x7fa5a5031220 <col:19> 'int *':'int *' lvalue ParmVar 0x7fa5a502f810 'ix' 'int *':'int *'
|           |       `-ImplicitCastExpr 0x7fa5a5031278 <col:22> 'int' <LValueToRValue>
|           |         `-DeclRefExpr 0x7fa5a5031240 <col:22> 'int' lvalue Var 0x7fa5a502fd70 'i' 'int'
|           `-ImplicitCastExpr 0x7fa5a5031488 <col:26, col:33> 'double' <LValueToRValue>
|             `-ArraySubscriptExpr 0x7fa5a50313e0 <col:26, col:33> 'double' lvalue
|               |-ImplicitCastExpr 0x7fa5a50313b0 <col:26> 'double *':'double *' <LValueToRValue>
|               | `-DeclRefExpr 0x7fa5a5031300 <col:26> 'double *':'double *' lvalue ParmVar 0x7fa5a502f690 'y' 'double *':'double *'
|               `-ImplicitCastExpr 0x7fa5a50313c8 <col:28, col:32> 'int' <LValueToRValue>
|                 `-ArraySubscriptExpr 0x7fa5a5031390 <col:28, col:32> 'int' lvalue
|                   |-ImplicitCastExpr 0x7fa5a5031360 <col:28> 'int *':'int *' <LValueToRValue>
|                   | `-DeclRefExpr 0x7fa5a5031320 <col:28> 'int *':'int *' lvalue ParmVar 0x7fa5a502f960 'iy' 'int *':'int *'
|                   `-ImplicitCastExpr 0x7fa5a5031378 <col:31> 'int' <LValueToRValue>
|                     `-DeclRefExpr 0x7fa5a5031340 <col:31> 'int' lvalue Var 0x7fa5a502fd70 'i' 'int'
`-FunctionDecl 0x7fa5a502fff8 <col:12> col:12 implicit used fmin 'double (double, double)' extern
  |-ParmVarDecl 0x7fa5a5030098 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x7fa5a5030100 <<invalid sloc>> <invalid sloc> 'double'
  |-NoThrowAttr 0x7fa5a5030178 <col:12> Implicit
  `-ConstAttr 0x7fa5a50301b8 <col:12> Implicit
