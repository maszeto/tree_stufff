TranslationUnitDecl 0x7fbe7c038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fbe7c0394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fbe7c0391a0 '__int128'
|-TypedefDecl 0x7fbe7c039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fbe7c0391c0 'unsigned __int128'
|-TypedefDecl 0x7fbe7c0397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fbe7c0395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fbe7c039568 '__NSConstantString_tag'
|-TypedefDecl 0x7fbe7c039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fbe7c039850 'char *'
|   `-BuiltinType 0x7fbe7c038ca0 'char'
|-TypedefDecl 0x7fbe7c039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fbe7c039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fbe7c039970 'struct __va_list_tag'
|     `-Record 0x7fbe7c0398e8 '__va_list_tag'
|-TypedefDecl 0x7fbe7c82f200 <./tree_src/dyadicSectVector_AddSectVec.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fbe7c038d60 'unsigned char'
`-FunctionDecl 0x7fbe7c82fd28 <line:5:1, line:18:1> line:5:6 AddSectVec 'void (int, double *, double *, double *, int, int, int, int, int, int, int, int, int)'
  |-ParmVarDecl 0x7fbe7c82f270 <line:6:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7fbe7c82f3f0 <col:12, col:22> col:19 used x 'double *':'double *'
  |-ParmVarDecl 0x7fbe7c82f540 <col:25, col:35> col:32 used y 'double *':'double *'
  |-ParmVarDecl 0x7fbe7c82f690 <col:38, col:48> col:45 used z 'double *':'double *'
  |-ParmVarDecl 0x7fbe7c82f710 <line:7:5, col:9> col:9 used startx 'int'
  |-ParmVarDecl 0x7fbe7c82f790 <col:17, col:21> col:21 used stopx 'int'
  |-ParmVarDecl 0x7fbe7c82f810 <col:28, col:32> col:32 used stepx 'int'
  |-ParmVarDecl 0x7fbe7c82f890 <col:39, col:43> col:43 used starty 'int'
  |-ParmVarDecl 0x7fbe7c82f910 <col:51, col:55> col:55 stopy 'int'
  |-ParmVarDecl 0x7fbe7c82f990 <col:62, col:66> col:66 used stepy 'int'
  |-ParmVarDecl 0x7fbe7c82fa10 <line:8:5, col:9> col:9 used startz 'int'
  |-ParmVarDecl 0x7fbe7c82fa90 <col:17, col:21> col:21 stopz 'int'
  |-ParmVarDecl 0x7fbe7c82fb10 <col:28, col:32> col:32 used stepz 'int'
  `-CompoundStmt 0x7fbe7c8316e0 <col:40, line:18:1>
    |-DeclStmt 0x7fbe7c830018 <line:10:5, col:17>
    | |-VarDecl 0x7fbe7c82fe90 <col:5, col:9> col:9 used ix 'int'
    | |-VarDecl 0x7fbe7c82ff10 <col:5, col:12> col:12 used iy 'int'
    | `-VarDecl 0x7fbe7c82ff90 <col:5, col:15> col:15 used iz 'int'
    |-BinaryOperator 0x7fbe7c830088 <line:11:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7fbe7c830030 <col:5> 'int' lvalue Var 0x7fbe7c82ff10 'iy' 'int'
    | `-ImplicitCastExpr 0x7fbe7c830070 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7fbe7c830050 <col:10> 'int' lvalue ParmVar 0x7fbe7c82f890 'starty' 'int'
    |-BinaryOperator 0x7fbe7c830100 <line:12:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7fbe7c8300a8 <col:5> 'int' lvalue Var 0x7fbe7c82ff90 'iz' 'int'
    | `-ImplicitCastExpr 0x7fbe7c8300e8 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7fbe7c8300c8 <col:10> 'int' lvalue ParmVar 0x7fbe7c82fa10 'startz' 'int'
    `-ForStmt 0x7fbe7c8316a8 <line:13:5, line:17:5>
      |-BinaryOperator 0x7fbe7c830178 <line:13:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7fbe7c830120 <col:10> 'int' lvalue Var 0x7fbe7c82fe90 'ix' 'int'
      | `-ImplicitCastExpr 0x7fbe7c830160 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fbe7c830140 <col:14> 'int' lvalue ParmVar 0x7fbe7c82f710 'startx' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7fbe7c831218 <col:22, col:25> 'int' '<'
      | |-ImplicitCastExpr 0x7fbe7c8301d8 <col:22> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fbe7c830198 <col:22> 'int' lvalue Var 0x7fbe7c82fe90 'ix' 'int'
      | `-ImplicitCastExpr 0x7fbe7c831200 <col:25> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fbe7c8301b8 <col:25> 'int' lvalue ParmVar 0x7fbe7c82f790 'stopx' 'int'
      |-CompoundAssignOperator 0x7fbe7c831290 <col:32, col:37> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7fbe7c831238 <col:32> 'int' lvalue Var 0x7fbe7c82fe90 'ix' 'int'
      | `-ImplicitCastExpr 0x7fbe7c831278 <col:37> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fbe7c831258 <col:37> 'int' lvalue ParmVar 0x7fbe7c82f810 'stepx' 'int'
      `-CompoundStmt 0x7fbe7c831680 <col:45, line:17:5>
        |-BinaryOperator 0x7fbe7c8314c0 <line:14:4, col:24> 'double' '='
        | |-ArraySubscriptExpr 0x7fbe7c831330 <col:4, col:8> 'double' lvalue
        | | |-ImplicitCastExpr 0x7fbe7c831300 <col:4> 'double *':'double *' <LValueToRValue>
        | | | `-DeclRefExpr 0x7fbe7c8312c0 <col:4> 'double *':'double *' lvalue ParmVar 0x7fbe7c82f690 'z' 'double *':'double *'
        | | `-ImplicitCastExpr 0x7fbe7c831318 <col:6> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fbe7c8312e0 <col:6> 'int' lvalue Var 0x7fbe7c82ff90 'iz' 'int'
        | `-BinaryOperator 0x7fbe7c8314a0 <col:12, col:24> 'double' '+'
        |   |-ImplicitCastExpr 0x7fbe7c831470 <col:12, col:16> 'double' <LValueToRValue>
        |   | `-ArraySubscriptExpr 0x7fbe7c8313c0 <col:12, col:16> 'double' lvalue
        |   |   |-ImplicitCastExpr 0x7fbe7c831390 <col:12> 'double *':'double *' <LValueToRValue>
        |   |   | `-DeclRefExpr 0x7fbe7c831350 <col:12> 'double *':'double *' lvalue ParmVar 0x7fbe7c82f3f0 'x' 'double *':'double *'
        |   |   `-ImplicitCastExpr 0x7fbe7c8313a8 <col:14> 'int' <LValueToRValue>
        |   |     `-DeclRefExpr 0x7fbe7c831370 <col:14> 'int' lvalue Var 0x7fbe7c82fe90 'ix' 'int'
        |   `-ImplicitCastExpr 0x7fbe7c831488 <col:20, col:24> 'double' <LValueToRValue>
        |     `-ArraySubscriptExpr 0x7fbe7c831450 <col:20, col:24> 'double' lvalue
        |       |-ImplicitCastExpr 0x7fbe7c831420 <col:20> 'double *':'double *' <LValueToRValue>
        |       | `-DeclRefExpr 0x7fbe7c8313e0 <col:20> 'double *':'double *' lvalue ParmVar 0x7fbe7c82f540 'y' 'double *':'double *'
        |       `-ImplicitCastExpr 0x7fbe7c831438 <col:22> 'int' <LValueToRValue>
        |         `-DeclRefExpr 0x7fbe7c831400 <col:22> 'int' lvalue Var 0x7fbe7c82ff10 'iy' 'int'
        |-BinaryOperator 0x7fbe7c831590 <line:15:4, col:14> 'int' '='
        | |-DeclRefExpr 0x7fbe7c8314e0 <col:4> 'int' lvalue Var 0x7fbe7c82ff10 'iy' 'int'
        | `-BinaryOperator 0x7fbe7c831570 <col:9, col:14> 'int' '+'
        |   |-ImplicitCastExpr 0x7fbe7c831540 <col:9> 'int' <LValueToRValue>
        |   | `-DeclRefExpr 0x7fbe7c831500 <col:9> 'int' lvalue Var 0x7fbe7c82ff10 'iy' 'int'
        |   `-ImplicitCastExpr 0x7fbe7c831558 <col:14> 'int' <LValueToRValue>
        |     `-DeclRefExpr 0x7fbe7c831520 <col:14> 'int' lvalue ParmVar 0x7fbe7c82f990 'stepy' 'int'
        `-BinaryOperator 0x7fbe7c831660 <line:16:4, col:14> 'int' '='
          |-DeclRefExpr 0x7fbe7c8315b0 <col:4> 'int' lvalue Var 0x7fbe7c82ff90 'iz' 'int'
          `-BinaryOperator 0x7fbe7c831640 <col:9, col:14> 'int' '+'
            |-ImplicitCastExpr 0x7fbe7c831610 <col:9> 'int' <LValueToRValue>
            | `-DeclRefExpr 0x7fbe7c8315d0 <col:9> 'int' lvalue Var 0x7fbe7c82ff90 'iz' 'int'
            `-ImplicitCastExpr 0x7fbe7c831628 <col:14> 'int' <LValueToRValue>
              `-DeclRefExpr 0x7fbe7c8315f0 <col:14> 'int' lvalue ParmVar 0x7fbe7c82fb10 'stepz' 'int'
