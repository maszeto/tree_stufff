TranslationUnitDecl 0x7fe50f838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fe50f8394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fe50f8391a0 '__int128'
|-TypedefDecl 0x7fe50f839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fe50f8391c0 'unsigned __int128'
|-TypedefDecl 0x7fe50f8397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fe50f8395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fe50f839568 '__NSConstantString_tag'
|-TypedefDecl 0x7fe50f839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fe50f839850 'char *'
|   `-BuiltinType 0x7fe50f838ca0 'char'
|-TypedefDecl 0x7fe50f839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fe50f839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fe50f839970 'struct __va_list_tag'
|     `-Record 0x7fe50f8398e8 '__va_list_tag'
|-TypedefDecl 0x7fe50f891600 <./tree_src/extendSectVector_DivSectScaVec.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fe50f838d60 'unsigned char'
`-FunctionDecl 0x7fe50f891f28 <line:6:1, line:17:1> line:6:6 DivSectScaVec 'void (int, int, double, double *, double *, int, int, int, int, int, int)'
  |-ParmVarDecl 0x7fe50f891670 <line:7:5, col:9> col:9 used ny 'int'
  |-ParmVarDecl 0x7fe50f8916f0 <col:13, col:17> col:17 used nz 'int'
  |-ParmVarDecl 0x7fe50f891770 <line:8:5, col:12> col:12 used x 'double'
  |-ParmVarDecl 0x7fe50f8918f0 <col:15, col:26> col:22 used y 'double *':'double *'
  |-ParmVarDecl 0x7fe50f891a40 <col:29, col:40> col:36 used z 'double *':'double *'
  |-ParmVarDecl 0x7fe50f891ac0 <line:9:5, col:9> col:9 used starty 'int'
  |-ParmVarDecl 0x7fe50f891b40 <col:17, col:21> col:21 used stopy 'int'
  |-ParmVarDecl 0x7fe50f891bc0 <col:28, col:32> col:32 used stepy 'int'
  |-ParmVarDecl 0x7fe50f891c40 <col:39, col:43> col:43 used startz 'int'
  |-ParmVarDecl 0x7fe50f891cc0 <col:51, col:55> col:55 stopz 'int'
  |-ParmVarDecl 0x7fe50f891d40 <col:62, col:66> col:66 used stepz 'int'
  `-CompoundStmt 0x7fe50f893638 <col:74, line:17:1>
    |-DeclStmt 0x7fe50f892180 <line:11:5, col:15>
    | |-VarDecl 0x7fe50f892080 <col:5, col:9> col:9 used iy 'int'
    | `-VarDecl 0x7fe50f892100 <col:5, col:13> col:13 used iz 'int'
    |-BinaryOperator 0x7fe50f8921f0 <line:12:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7fe50f892198 <col:5> 'int' lvalue Var 0x7fe50f892100 'iz' 'int'
    | `-ImplicitCastExpr 0x7fe50f8921d8 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7fe50f8921b8 <col:10> 'int' lvalue ParmVar 0x7fe50f891c40 'startz' 'int'
    `-ForStmt 0x7fe50f893600 <line:13:5, line:16:5>
      |-BinaryOperator 0x7fe50f892268 <line:13:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7fe50f892210 <col:10> 'int' lvalue Var 0x7fe50f892080 'iy' 'int'
      | `-ImplicitCastExpr 0x7fe50f892250 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fe50f892230 <col:14> 'int' lvalue ParmVar 0x7fe50f891ac0 'starty' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7fe50f8922f8 <col:22, col:25> 'int' '<'
      | |-ImplicitCastExpr 0x7fe50f8922c8 <col:22> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fe50f892288 <col:22> 'int' lvalue Var 0x7fe50f892080 'iy' 'int'
      | `-ImplicitCastExpr 0x7fe50f8922e0 <col:25> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fe50f8922a8 <col:25> 'int' lvalue ParmVar 0x7fe50f891b40 'stopy' 'int'
      |-CompoundAssignOperator 0x7fe50f892370 <col:32, col:37> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7fe50f892318 <col:32> 'int' lvalue Var 0x7fe50f892080 'iy' 'int'
      | `-ImplicitCastExpr 0x7fe50f892358 <col:37> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fe50f892338 <col:37> 'int' lvalue ParmVar 0x7fe50f891bc0 'stepy' 'int'
      `-CompoundStmt 0x7fe50f8925d8 <col:45, line:16:5>
        |-BinaryOperator 0x7fe50f892530 <line:14:4, col:20> 'double' '='
        | |-ArraySubscriptExpr 0x7fe50f892410 <col:4, col:8> 'double' lvalue
        | | |-ImplicitCastExpr 0x7fe50f8923e0 <col:4> 'double *':'double *' <LValueToRValue>
        | | | `-DeclRefExpr 0x7fe50f8923a0 <col:4> 'double *':'double *' lvalue ParmVar 0x7fe50f891a40 'z' 'double *':'double *'
        | | `-ImplicitCastExpr 0x7fe50f8923f8 <col:6> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fe50f8923c0 <col:6> 'int' lvalue Var 0x7fe50f892100 'iz' 'int'
        | `-BinaryOperator 0x7fe50f892510 <col:12, col:20> 'double' '/'
        |   |-ImplicitCastExpr 0x7fe50f8924e0 <col:12> 'double' <LValueToRValue>
        |   | `-DeclRefExpr 0x7fe50f892430 <col:12> 'double' lvalue ParmVar 0x7fe50f891770 'x' 'double'
        |   `-ImplicitCastExpr 0x7fe50f8924f8 <col:16, col:20> 'double' <LValueToRValue>
        |     `-ArraySubscriptExpr 0x7fe50f8924c0 <col:16, col:20> 'double' lvalue
        |       |-ImplicitCastExpr 0x7fe50f892490 <col:16> 'double *':'double *' <LValueToRValue>
        |       | `-DeclRefExpr 0x7fe50f892450 <col:16> 'double *':'double *' lvalue ParmVar 0x7fe50f8918f0 'y' 'double *':'double *'
        |       `-ImplicitCastExpr 0x7fe50f8924a8 <col:18> 'int' <LValueToRValue>
        |         `-DeclRefExpr 0x7fe50f892470 <col:18> 'int' lvalue Var 0x7fe50f892080 'iy' 'int'
        `-CompoundAssignOperator 0x7fe50f8925a8 <line:15:4, col:10> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
          |-DeclRefExpr 0x7fe50f892550 <col:4> 'int' lvalue Var 0x7fe50f892100 'iz' 'int'
          `-ImplicitCastExpr 0x7fe50f892590 <col:10> 'int' <LValueToRValue>
            `-DeclRefExpr 0x7fe50f892570 <col:10> 'int' lvalue ParmVar 0x7fe50f891d40 'stepz' 'int'
