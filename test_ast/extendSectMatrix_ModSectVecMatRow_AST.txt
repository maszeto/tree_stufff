TranslationUnitDecl 0x7fc3c301f808 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fc3c30200a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fc3c301fda0 '__int128'
|-TypedefDecl 0x7fc3c3020110 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fc3c301fdc0 'unsigned __int128'
|-TypedefDecl 0x7fc3c30203f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fc3c30201f0 'struct __NSConstantString_tag'
|   `-Record 0x7fc3c3020168 '__NSConstantString_tag'
|-TypedefDecl 0x7fc3c3020490 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fc3c3020450 'char *'
|   `-BuiltinType 0x7fc3c301f8a0 'char'
|-TypedefDecl 0x7fc3c3020768 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fc3c3020710 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fc3c3020570 'struct __va_list_tag'
|     `-Record 0x7fc3c30204e8 '__va_list_tag'
|-TypedefDecl 0x7fc3c2848e00 <./tree_src/extendSectMatrix_ModSectVecMatRow.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fc3c301f960 'unsigned char'
|-FunctionDecl 0x7fc3c284b178 <line:6:1, line:25:1> line:6:6 ModSectVecMatRow 'void (int, int, int, int, int, double *, double (*)[my], double (*)[mz], int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)'
| |-ParmVarDecl 0x7fc3c2848e70 <line:7:5, col:9> col:9 used nx 'int'
| |-ParmVarDecl 0x7fc3c2848ef0 <col:13, col:17> col:17 used ny 'int'
| |-ParmVarDecl 0x7fc3c2848f70 <col:21, col:25> col:25 used my 'int'
| |-ParmVarDecl 0x7fc3c2848ff0 <col:29, col:33> col:33 used nz 'int'
| |-ParmVarDecl 0x7fc3c2849070 <col:37, col:41> col:41 used mz 'int'
| |-ParmVarDecl 0x7fc3c28491f0 <line:8:5, col:16> col:12 used x 'double *':'double *'
| |-ParmVarDecl 0x7fc3c28493f0 <col:19, col:34> col:26 used y 'double (*)[my]':'double (*)[my]'
| |-ParmVarDecl 0x7fc3c28495f0 <col:37, col:52> col:44 used z 'double (*)[mz]':'double (*)[mz]'
| |-ParmVarDecl 0x7fc3c2849670 <line:9:5, col:9> col:9 used startx 'int'
| |-ParmVarDecl 0x7fc3c28496f0 <col:17, col:21> col:21 stopx 'int'
| |-ParmVarDecl 0x7fc3c2849770 <col:28, col:32> col:32 used stepx 'int'
| |-ParmVarDecl 0x7fc3c28497f0 <line:10:5, col:9> col:9 used starty1 'int'
| |-ParmVarDecl 0x7fc3c2849870 <col:18, col:22> col:22 used stopy1 'int'
| |-ParmVarDecl 0x7fc3c28498f0 <col:30, col:34> col:34 used stepy1 'int'
| |-ParmVarDecl 0x7fc3c2849970 <col:42, col:46> col:46 used starty2 'int'
| |-ParmVarDecl 0x7fc3c28499f0 <col:55, col:59> col:59 used stopy2 'int'
| |-ParmVarDecl 0x7fc3c2849a70 <col:67, col:71> col:71 used stepy2 'int'
| |-ParmVarDecl 0x7fc3c2849af0 <line:11:5, col:9> col:9 used startz1 'int'
| |-ParmVarDecl 0x7fc3c2849b70 <col:18, col:22> col:22 stopz1 'int'
| |-ParmVarDecl 0x7fc3c2849bf0 <col:30, col:34> col:34 used stepz1 'int'
| |-ParmVarDecl 0x7fc3c2849c70 <col:42, col:46> col:46 used startz2 'int'
| |-ParmVarDecl 0x7fc3c2849cf0 <col:55, col:59> col:59 stopz2 'int'
| |-ParmVarDecl 0x7fc3c2849d70 <col:67, col:71> col:71 used stepz2 'int'
| `-CompoundStmt 0x7fc3c284c3a8 <col:80, line:25:1>
|   |-DeclStmt 0x7fc3c284b650 <line:13:5, col:31>
|   | |-VarDecl 0x7fc3c284b330 <col:5, col:9> col:9 ix 'int'
|   | |-VarDecl 0x7fc3c284b3b0 <col:5, col:13> col:13 used jx 'int'
|   | |-VarDecl 0x7fc3c284b430 <col:5, col:17> col:17 used iy 'int'
|   | |-VarDecl 0x7fc3c284b4b0 <col:5, col:21> col:21 used jy 'int'
|   | |-VarDecl 0x7fc3c284b530 <col:5, col:25> col:25 used iz 'int'
|   | `-VarDecl 0x7fc3c284b5b0 <col:5, col:29> col:29 used jz 'int'
|   |-BinaryOperator 0x7fc3c284b6c0 <line:14:5, col:10> 'int' '='
|   | |-DeclRefExpr 0x7fc3c284b668 <col:5> 'int' lvalue Var 0x7fc3c284b530 'iz' 'int'
|   | `-ImplicitCastExpr 0x7fc3c284b6a8 <col:10> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fc3c284b688 <col:10> 'int' lvalue ParmVar 0x7fc3c2849af0 'startz1' 'int'
|   `-ForStmt 0x7fc3c284c370 <line:15:5, line:24:5>
|     |-BinaryOperator 0x7fc3c284b738 <line:15:10, col:14> 'int' '='
|     | |-DeclRefExpr 0x7fc3c284b6e0 <col:10> 'int' lvalue Var 0x7fc3c284b430 'iy' 'int'
|     | `-ImplicitCastExpr 0x7fc3c284b720 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fc3c284b700 <col:14> 'int' lvalue ParmVar 0x7fc3c28497f0 'starty1' 'int'
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fc3c284b7c8 <col:23, col:26> 'int' '<'
|     | |-ImplicitCastExpr 0x7fc3c284b798 <col:23> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fc3c284b758 <col:23> 'int' lvalue Var 0x7fc3c284b430 'iy' 'int'
|     | `-ImplicitCastExpr 0x7fc3c284b7b0 <col:26> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fc3c284b778 <col:26> 'int' lvalue ParmVar 0x7fc3c2849870 'stopy1' 'int'
|     |-CompoundAssignOperator 0x7fc3c284b840 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     | |-DeclRefExpr 0x7fc3c284b7e8 <col:34> 'int' lvalue Var 0x7fc3c284b430 'iy' 'int'
|     | `-ImplicitCastExpr 0x7fc3c284b828 <col:39> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fc3c284b808 <col:39> 'int' lvalue ParmVar 0x7fc3c28498f0 'stepy1' 'int'
|     `-CompoundStmt 0x7fc3c284c340 <col:48, line:24:5>
|       |-BinaryOperator 0x7fc3c284b8c8 <line:16:9, col:14> 'int' '='
|       | |-DeclRefExpr 0x7fc3c284b870 <col:9> 'int' lvalue Var 0x7fc3c284b3b0 'jx' 'int'
|       | `-ImplicitCastExpr 0x7fc3c284b8b0 <col:14> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x7fc3c284b890 <col:14> 'int' lvalue ParmVar 0x7fc3c2849670 'startx' 'int'
|       |-BinaryOperator 0x7fc3c284b940 <line:17:9, col:14> 'int' '='
|       | |-DeclRefExpr 0x7fc3c284b8e8 <col:9> 'int' lvalue Var 0x7fc3c284b5b0 'jz' 'int'
|       | `-ImplicitCastExpr 0x7fc3c284b928 <col:14> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x7fc3c284b908 <col:14> 'int' lvalue ParmVar 0x7fc3c2849c70 'startz2' 'int'
|       |-ForStmt 0x7fc3c284c238 <line:18:9, line:22:9>
|       | |-BinaryOperator 0x7fc3c284b9b8 <line:18:14, col:18> 'int' '='
|       | | |-DeclRefExpr 0x7fc3c284b960 <col:14> 'int' lvalue Var 0x7fc3c284b4b0 'jy' 'int'
|       | | `-ImplicitCastExpr 0x7fc3c284b9a0 <col:18> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fc3c284b980 <col:18> 'int' lvalue ParmVar 0x7fc3c2849970 'starty2' 'int'
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x7fc3c284ba48 <col:27, col:30> 'int' '<'
|       | | |-ImplicitCastExpr 0x7fc3c284ba18 <col:27> 'int' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7fc3c284b9d8 <col:27> 'int' lvalue Var 0x7fc3c284b4b0 'jy' 'int'
|       | | `-ImplicitCastExpr 0x7fc3c284ba30 <col:30> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fc3c284b9f8 <col:30> 'int' lvalue ParmVar 0x7fc3c28499f0 'stopy2' 'int'
|       | |-CompoundAssignOperator 0x7fc3c284bac0 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|       | | |-DeclRefExpr 0x7fc3c284ba68 <col:38> 'int' lvalue Var 0x7fc3c284b4b0 'jy' 'int'
|       | | `-ImplicitCastExpr 0x7fc3c284baa8 <col:43> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fc3c284ba88 <col:43> 'int' lvalue ParmVar 0x7fc3c2849a70 'stepy2' 'int'
|       | `-CompoundStmt 0x7fc3c284c210 <col:52, line:22:9>
|       |   |-BinaryOperator 0x7fc3c284c050 <line:19:6, col:38> 'double' '='
|       |   | |-ArraySubscriptExpr 0x7fc3c284bbd0 <col:6, col:14> 'double' lvalue
|       |   | | |-ImplicitCastExpr 0x7fc3c284bba0 <col:6, col:10> 'double *' <ArrayToPointerDecay>
|       |   | | | `-ArraySubscriptExpr 0x7fc3c284bb60 <col:6, col:10> 'double [mz]' lvalue
|       |   | | |   |-ImplicitCastExpr 0x7fc3c284bb30 <col:6> 'double (*)[mz]':'double (*)[mz]' <LValueToRValue>
|       |   | | |   | `-DeclRefExpr 0x7fc3c284baf0 <col:6> 'double (*)[mz]':'double (*)[mz]' lvalue ParmVar 0x7fc3c28495f0 'z' 'double (*)[mz]':'double (*)[mz]'
|       |   | | |   `-ImplicitCastExpr 0x7fc3c284bb48 <col:8> 'int' <LValueToRValue>
|       |   | | |     `-DeclRefExpr 0x7fc3c284bb10 <col:8> 'int' lvalue Var 0x7fc3c284b530 'iz' 'int'
|       |   | | `-ImplicitCastExpr 0x7fc3c284bbb8 <col:12> 'int' <LValueToRValue>
|       |   | |   `-DeclRefExpr 0x7fc3c284bb80 <col:12> 'int' lvalue Var 0x7fc3c284b5b0 'jz' 'int'
|       |   | `-CallExpr 0x7fc3c284bff0 <col:18, col:38> 'double'
|       |   |   |-ImplicitCastExpr 0x7fc3c284bfd8 <col:18> 'double (*)(double, double)' <FunctionToPointerDecay>
|       |   |   | `-DeclRefExpr 0x7fc3c284be00 <col:18> 'double (double, double)' Function 0x7fc3c284bc28 'fmod' 'double (double, double)'
|       |   |   |-ImplicitCastExpr 0x7fc3c284c020 <col:23, col:27> 'double' <LValueToRValue>
|       |   |   | `-ArraySubscriptExpr 0x7fc3c284be90 <col:23, col:27> 'double' lvalue
|       |   |   |   |-ImplicitCastExpr 0x7fc3c284be60 <col:23> 'double *':'double *' <LValueToRValue>
|       |   |   |   | `-DeclRefExpr 0x7fc3c284be20 <col:23> 'double *':'double *' lvalue ParmVar 0x7fc3c28491f0 'x' 'double *':'double *'
|       |   |   |   `-ImplicitCastExpr 0x7fc3c284be78 <col:25> 'int' <LValueToRValue>
|       |   |   |     `-DeclRefExpr 0x7fc3c284be40 <col:25> 'int' lvalue Var 0x7fc3c284b3b0 'jx' 'int'
|       |   |   `-ImplicitCastExpr 0x7fc3c284c038 <col:29, col:37> 'double' <LValueToRValue>
|       |   |     `-ArraySubscriptExpr 0x7fc3c284bf90 <col:29, col:37> 'double' lvalue
|       |   |       |-ImplicitCastExpr 0x7fc3c284bf60 <col:29, col:33> 'double *' <ArrayToPointerDecay>
|       |   |       | `-ArraySubscriptExpr 0x7fc3c284bf20 <col:29, col:33> 'double [my]' lvalue
|       |   |       |   |-ImplicitCastExpr 0x7fc3c284bef0 <col:29> 'double (*)[my]':'double (*)[my]' <LValueToRValue>
|       |   |       |   | `-DeclRefExpr 0x7fc3c284beb0 <col:29> 'double (*)[my]':'double (*)[my]' lvalue ParmVar 0x7fc3c28493f0 'y' 'double (*)[my]':'double (*)[my]'
|       |   |       |   `-ImplicitCastExpr 0x7fc3c284bf08 <col:31> 'int' <LValueToRValue>
|       |   |       |     `-DeclRefExpr 0x7fc3c284bed0 <col:31> 'int' lvalue Var 0x7fc3c284b430 'iy' 'int'
|       |   |       `-ImplicitCastExpr 0x7fc3c284bf78 <col:35> 'int' <LValueToRValue>
|       |   |         `-DeclRefExpr 0x7fc3c284bf40 <col:35> 'int' lvalue Var 0x7fc3c284b4b0 'jy' 'int'
|       |   |-BinaryOperator 0x7fc3c284c120 <line:20:6, col:16> 'int' '='
|       |   | |-DeclRefExpr 0x7fc3c284c070 <col:6> 'int' lvalue Var 0x7fc3c284b3b0 'jx' 'int'
|       |   | `-BinaryOperator 0x7fc3c284c100 <col:11, col:16> 'int' '+'
|       |   |   |-ImplicitCastExpr 0x7fc3c284c0d0 <col:11> 'int' <LValueToRValue>
|       |   |   | `-DeclRefExpr 0x7fc3c284c090 <col:11> 'int' lvalue Var 0x7fc3c284b3b0 'jx' 'int'
|       |   |   `-ImplicitCastExpr 0x7fc3c284c0e8 <col:16> 'int' <LValueToRValue>
|       |   |     `-DeclRefExpr 0x7fc3c284c0b0 <col:16> 'int' lvalue ParmVar 0x7fc3c2849770 'stepx' 'int'
|       |   `-BinaryOperator 0x7fc3c284c1f0 <line:21:6, col:16> 'int' '='
|       |     |-DeclRefExpr 0x7fc3c284c140 <col:6> 'int' lvalue Var 0x7fc3c284b5b0 'jz' 'int'
|       |     `-BinaryOperator 0x7fc3c284c1d0 <col:11, col:16> 'int' '+'
|       |       |-ImplicitCastExpr 0x7fc3c284c1a0 <col:11> 'int' <LValueToRValue>
|       |       | `-DeclRefExpr 0x7fc3c284c160 <col:11> 'int' lvalue Var 0x7fc3c284b5b0 'jz' 'int'
|       |       `-ImplicitCastExpr 0x7fc3c284c1b8 <col:16> 'int' <LValueToRValue>
|       |         `-DeclRefExpr 0x7fc3c284c180 <col:16> 'int' lvalue ParmVar 0x7fc3c2849d70 'stepz2' 'int'
|       `-BinaryOperator 0x7fc3c284c320 <line:23:9, col:19> 'int' '='
|         |-DeclRefExpr 0x7fc3c284c270 <col:9> 'int' lvalue Var 0x7fc3c284b530 'iz' 'int'
|         `-BinaryOperator 0x7fc3c284c300 <col:14, col:19> 'int' '+'
|           |-ImplicitCastExpr 0x7fc3c284c2d0 <col:14> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x7fc3c284c290 <col:14> 'int' lvalue Var 0x7fc3c284b530 'iz' 'int'
|           `-ImplicitCastExpr 0x7fc3c284c2e8 <col:19> 'int' <LValueToRValue>
|             `-DeclRefExpr 0x7fc3c284c2b0 <col:19> 'int' lvalue ParmVar 0x7fc3c2849bf0 'stepz1' 'int'
`-FunctionDecl 0x7fc3c284bc28 <line:19:18> col:18 implicit used fmod 'double (double, double)' extern
  |-ParmVarDecl 0x7fc3c284bcc8 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x7fc3c284bd30 <<invalid sloc>> <invalid sloc> 'double'
  |-ConstAttr 0x7fc3c284bda8 <col:18> Implicit
  `-NoThrowAttr 0x7fc3c284bde8 <col:18> Implicit
