TranslationUnitDecl 0x7f9b3c838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f9b3c8394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f9b3c8391a0 '__int128'
|-TypedefDecl 0x7f9b3c839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f9b3c8391c0 'unsigned __int128'
|-TypedefDecl 0x7f9b3c8397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f9b3c8395f0 'struct __NSConstantString_tag'
|   `-Record 0x7f9b3c839568 '__NSConstantString_tag'
|-TypedefDecl 0x7f9b3c839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f9b3c839850 'char *'
|   `-BuiltinType 0x7f9b3c838ca0 'char'
|-TypedefDecl 0x7f9b3c839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f9b3c839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f9b3c839970 'struct __va_list_tag'
|     `-Record 0x7f9b3c8398e8 '__va_list_tag'
|-TypedefDecl 0x7f9b3c874400 <./tree_src/extendSectMatrix_SubSectVecMatRow.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7f9b3c838d60 'unsigned char'
`-FunctionDecl 0x7f9b3c876778 <line:5:1, line:24:1> line:5:6 SubSectVecMatRow 'void (int, int, int, int, int, double *, double (*)[my], double (*)[mz], int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)'
  |-ParmVarDecl 0x7f9b3c874470 <line:6:5, col:9> col:9 used nx 'int'
  |-ParmVarDecl 0x7f9b3c8744f0 <col:13, col:17> col:17 used ny 'int'
  |-ParmVarDecl 0x7f9b3c874570 <col:21, col:25> col:25 used my 'int'
  |-ParmVarDecl 0x7f9b3c8745f0 <col:29, col:33> col:33 used nz 'int'
  |-ParmVarDecl 0x7f9b3c874670 <col:37, col:41> col:41 used mz 'int'
  |-ParmVarDecl 0x7f9b3c8747f0 <line:7:5, col:16> col:12 used x 'double *':'double *'
  |-ParmVarDecl 0x7f9b3c8749f0 <col:19, col:34> col:26 used y 'double (*)[my]':'double (*)[my]'
  |-ParmVarDecl 0x7f9b3c874bf0 <col:37, col:52> col:44 used z 'double (*)[mz]':'double (*)[mz]'
  |-ParmVarDecl 0x7f9b3c874c70 <line:8:5, col:9> col:9 used startx 'int'
  |-ParmVarDecl 0x7f9b3c874cf0 <col:17, col:21> col:21 stopx 'int'
  |-ParmVarDecl 0x7f9b3c874d70 <col:28, col:32> col:32 used stepx 'int'
  |-ParmVarDecl 0x7f9b3c874df0 <line:9:5, col:9> col:9 used starty1 'int'
  |-ParmVarDecl 0x7f9b3c874e70 <col:18, col:22> col:22 used stopy1 'int'
  |-ParmVarDecl 0x7f9b3c874ef0 <col:30, col:34> col:34 used stepy1 'int'
  |-ParmVarDecl 0x7f9b3c874f70 <col:42, col:46> col:46 used starty2 'int'
  |-ParmVarDecl 0x7f9b3c874ff0 <col:55, col:59> col:59 used stopy2 'int'
  |-ParmVarDecl 0x7f9b3c875070 <col:67, col:71> col:71 used stepy2 'int'
  |-ParmVarDecl 0x7f9b3c8750f0 <line:10:5, col:9> col:9 used startz1 'int'
  |-ParmVarDecl 0x7f9b3c875170 <col:18, col:22> col:22 stopz1 'int'
  |-ParmVarDecl 0x7f9b3c8751f0 <col:30, col:34> col:34 used stepz1 'int'
  |-ParmVarDecl 0x7f9b3c875270 <col:42, col:46> col:46 used startz2 'int'
  |-ParmVarDecl 0x7f9b3c8752f0 <col:55, col:59> col:59 stopz2 'int'
  |-ParmVarDecl 0x7f9b3c875370 <col:67, col:71> col:71 used stepz2 'int'
  `-CompoundStmt 0x7f9b3c877738 <col:80, line:24:1>
    |-DeclStmt 0x7f9b3c876c50 <line:12:5, col:31>
    | |-VarDecl 0x7f9b3c876930 <col:5, col:9> col:9 ix 'int'
    | |-VarDecl 0x7f9b3c8769b0 <col:5, col:13> col:13 used jx 'int'
    | |-VarDecl 0x7f9b3c876a30 <col:5, col:17> col:17 used iy 'int'
    | |-VarDecl 0x7f9b3c876ab0 <col:5, col:21> col:21 used jy 'int'
    | |-VarDecl 0x7f9b3c876b30 <col:5, col:25> col:25 used iz 'int'
    | `-VarDecl 0x7f9b3c876bb0 <col:5, col:29> col:29 used jz 'int'
    |-BinaryOperator 0x7f9b3c876cc0 <line:13:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7f9b3c876c68 <col:5> 'int' lvalue Var 0x7f9b3c876b30 'iz' 'int'
    | `-ImplicitCastExpr 0x7f9b3c876ca8 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7f9b3c876c88 <col:10> 'int' lvalue ParmVar 0x7f9b3c8750f0 'startz1' 'int'
    `-ForStmt 0x7f9b3c877700 <line:14:5, line:23:5>
      |-BinaryOperator 0x7f9b3c876d38 <line:14:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7f9b3c876ce0 <col:10> 'int' lvalue Var 0x7f9b3c876a30 'iy' 'int'
      | `-ImplicitCastExpr 0x7f9b3c876d20 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f9b3c876d00 <col:14> 'int' lvalue ParmVar 0x7f9b3c874df0 'starty1' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7f9b3c876dc8 <col:23, col:26> 'int' '<'
      | |-ImplicitCastExpr 0x7f9b3c876d98 <col:23> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7f9b3c876d58 <col:23> 'int' lvalue Var 0x7f9b3c876a30 'iy' 'int'
      | `-ImplicitCastExpr 0x7f9b3c876db0 <col:26> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f9b3c876d78 <col:26> 'int' lvalue ParmVar 0x7f9b3c874e70 'stopy1' 'int'
      |-CompoundAssignOperator 0x7f9b3c876e40 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7f9b3c876de8 <col:34> 'int' lvalue Var 0x7f9b3c876a30 'iy' 'int'
      | `-ImplicitCastExpr 0x7f9b3c876e28 <col:39> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f9b3c876e08 <col:39> 'int' lvalue ParmVar 0x7f9b3c874ef0 'stepy1' 'int'
      `-CompoundStmt 0x7f9b3c8776d0 <col:48, line:23:5>
        |-BinaryOperator 0x7f9b3c876ec8 <line:15:9, col:14> 'int' '='
        | |-DeclRefExpr 0x7f9b3c876e70 <col:9> 'int' lvalue Var 0x7f9b3c8769b0 'jx' 'int'
        | `-ImplicitCastExpr 0x7f9b3c876eb0 <col:14> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x7f9b3c876e90 <col:14> 'int' lvalue ParmVar 0x7f9b3c874c70 'startx' 'int'
        |-BinaryOperator 0x7f9b3c876f40 <line:16:9, col:14> 'int' '='
        | |-DeclRefExpr 0x7f9b3c876ee8 <col:9> 'int' lvalue Var 0x7f9b3c876bb0 'jz' 'int'
        | `-ImplicitCastExpr 0x7f9b3c876f28 <col:14> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x7f9b3c876f08 <col:14> 'int' lvalue ParmVar 0x7f9b3c875270 'startz2' 'int'
        |-ForStmt 0x7f9b3c8775c8 <line:17:9, line:21:9>
        | |-BinaryOperator 0x7f9b3c876fb8 <line:17:14, col:18> 'int' '='
        | | |-DeclRefExpr 0x7f9b3c876f60 <col:14> 'int' lvalue Var 0x7f9b3c876ab0 'jy' 'int'
        | | `-ImplicitCastExpr 0x7f9b3c876fa0 <col:18> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7f9b3c876f80 <col:18> 'int' lvalue ParmVar 0x7f9b3c874f70 'starty2' 'int'
        | |-<<<NULL>>>
        | |-BinaryOperator 0x7f9b3c877048 <col:27, col:30> 'int' '<'
        | | |-ImplicitCastExpr 0x7f9b3c877018 <col:27> 'int' <LValueToRValue>
        | | | `-DeclRefExpr 0x7f9b3c876fd8 <col:27> 'int' lvalue Var 0x7f9b3c876ab0 'jy' 'int'
        | | `-ImplicitCastExpr 0x7f9b3c877030 <col:30> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7f9b3c876ff8 <col:30> 'int' lvalue ParmVar 0x7f9b3c874ff0 'stopy2' 'int'
        | |-CompoundAssignOperator 0x7f9b3c8770c0 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
        | | |-DeclRefExpr 0x7f9b3c877068 <col:38> 'int' lvalue Var 0x7f9b3c876ab0 'jy' 'int'
        | | `-ImplicitCastExpr 0x7f9b3c8770a8 <col:43> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7f9b3c877088 <col:43> 'int' lvalue ParmVar 0x7f9b3c875070 'stepy2' 'int'
        | `-CompoundStmt 0x7f9b3c8775a0 <col:52, line:21:9>
        |   |-BinaryOperator 0x7f9b3c8773d0 <line:18:6, col:34> 'double' '='
        |   | |-ArraySubscriptExpr 0x7f9b3c8771d0 <col:6, col:14> 'double' lvalue
        |   | | |-ImplicitCastExpr 0x7f9b3c8771a0 <col:6, col:10> 'double *' <ArrayToPointerDecay>
        |   | | | `-ArraySubscriptExpr 0x7f9b3c877160 <col:6, col:10> 'double [mz]' lvalue
        |   | | |   |-ImplicitCastExpr 0x7f9b3c877130 <col:6> 'double (*)[mz]':'double (*)[mz]' <LValueToRValue>
        |   | | |   | `-DeclRefExpr 0x7f9b3c8770f0 <col:6> 'double (*)[mz]':'double (*)[mz]' lvalue ParmVar 0x7f9b3c874bf0 'z' 'double (*)[mz]':'double (*)[mz]'
        |   | | |   `-ImplicitCastExpr 0x7f9b3c877148 <col:8> 'int' <LValueToRValue>
        |   | | |     `-DeclRefExpr 0x7f9b3c877110 <col:8> 'int' lvalue Var 0x7f9b3c876b30 'iz' 'int'
        |   | | `-ImplicitCastExpr 0x7f9b3c8771b8 <col:12> 'int' <LValueToRValue>
        |   | |   `-DeclRefExpr 0x7f9b3c877180 <col:12> 'int' lvalue Var 0x7f9b3c876bb0 'jz' 'int'
        |   | `-BinaryOperator 0x7f9b3c8773b0 <col:18, col:34> 'double' '-'
        |   |   |-ImplicitCastExpr 0x7f9b3c877380 <col:18, col:22> 'double' <LValueToRValue>
        |   |   | `-ArraySubscriptExpr 0x7f9b3c877260 <col:18, col:22> 'double' lvalue
        |   |   |   |-ImplicitCastExpr 0x7f9b3c877230 <col:18> 'double *':'double *' <LValueToRValue>
        |   |   |   | `-DeclRefExpr 0x7f9b3c8771f0 <col:18> 'double *':'double *' lvalue ParmVar 0x7f9b3c8747f0 'x' 'double *':'double *'
        |   |   |   `-ImplicitCastExpr 0x7f9b3c877248 <col:20> 'int' <LValueToRValue>
        |   |   |     `-DeclRefExpr 0x7f9b3c877210 <col:20> 'int' lvalue Var 0x7f9b3c8769b0 'jx' 'int'
        |   |   `-ImplicitCastExpr 0x7f9b3c877398 <col:26, col:34> 'double' <LValueToRValue>
        |   |     `-ArraySubscriptExpr 0x7f9b3c877360 <col:26, col:34> 'double' lvalue
        |   |       |-ImplicitCastExpr 0x7f9b3c877330 <col:26, col:30> 'double *' <ArrayToPointerDecay>
        |   |       | `-ArraySubscriptExpr 0x7f9b3c8772f0 <col:26, col:30> 'double [my]' lvalue
        |   |       |   |-ImplicitCastExpr 0x7f9b3c8772c0 <col:26> 'double (*)[my]':'double (*)[my]' <LValueToRValue>
        |   |       |   | `-DeclRefExpr 0x7f9b3c877280 <col:26> 'double (*)[my]':'double (*)[my]' lvalue ParmVar 0x7f9b3c8749f0 'y' 'double (*)[my]':'double (*)[my]'
        |   |       |   `-ImplicitCastExpr 0x7f9b3c8772d8 <col:28> 'int' <LValueToRValue>
        |   |       |     `-DeclRefExpr 0x7f9b3c8772a0 <col:28> 'int' lvalue Var 0x7f9b3c876a30 'iy' 'int'
        |   |       `-ImplicitCastExpr 0x7f9b3c877348 <col:32> 'int' <LValueToRValue>
        |   |         `-DeclRefExpr 0x7f9b3c877310 <col:32> 'int' lvalue Var 0x7f9b3c876ab0 'jy' 'int'
        |   |-BinaryOperator 0x7f9b3c8774b0 <line:19:6, col:16> 'int' '='
        |   | |-DeclRefExpr 0x7f9b3c877400 <col:6> 'int' lvalue Var 0x7f9b3c8769b0 'jx' 'int'
        |   | `-BinaryOperator 0x7f9b3c877490 <col:11, col:16> 'int' '+'
        |   |   |-ImplicitCastExpr 0x7f9b3c877460 <col:11> 'int' <LValueToRValue>
        |   |   | `-DeclRefExpr 0x7f9b3c877420 <col:11> 'int' lvalue Var 0x7f9b3c8769b0 'jx' 'int'
        |   |   `-ImplicitCastExpr 0x7f9b3c877478 <col:16> 'int' <LValueToRValue>
        |   |     `-DeclRefExpr 0x7f9b3c877440 <col:16> 'int' lvalue ParmVar 0x7f9b3c874d70 'stepx' 'int'
        |   `-BinaryOperator 0x7f9b3c877580 <line:20:6, col:16> 'int' '='
        |     |-DeclRefExpr 0x7f9b3c8774d0 <col:6> 'int' lvalue Var 0x7f9b3c876bb0 'jz' 'int'
        |     `-BinaryOperator 0x7f9b3c877560 <col:11, col:16> 'int' '+'
        |       |-ImplicitCastExpr 0x7f9b3c877530 <col:11> 'int' <LValueToRValue>
        |       | `-DeclRefExpr 0x7f9b3c8774f0 <col:11> 'int' lvalue Var 0x7f9b3c876bb0 'jz' 'int'
        |       `-ImplicitCastExpr 0x7f9b3c877548 <col:16> 'int' <LValueToRValue>
        |         `-DeclRefExpr 0x7f9b3c877510 <col:16> 'int' lvalue ParmVar 0x7f9b3c875370 'stepz2' 'int'
        `-BinaryOperator 0x7f9b3c8776b0 <line:22:9, col:19> 'int' '='
          |-DeclRefExpr 0x7f9b3c877600 <col:9> 'int' lvalue Var 0x7f9b3c876b30 'iz' 'int'
          `-BinaryOperator 0x7f9b3c877690 <col:14, col:19> 'int' '+'
            |-ImplicitCastExpr 0x7f9b3c877660 <col:14> 'int' <LValueToRValue>
            | `-DeclRefExpr 0x7f9b3c877620 <col:14> 'int' lvalue Var 0x7f9b3c876b30 'iz' 'int'
            `-ImplicitCastExpr 0x7f9b3c877678 <col:19> 'int' <LValueToRValue>
              `-DeclRefExpr 0x7f9b3c877640 <col:19> 'int' lvalue ParmVar 0x7f9b3c8751f0 'stepz1' 'int'
