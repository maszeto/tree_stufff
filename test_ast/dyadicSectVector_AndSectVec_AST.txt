TranslationUnitDecl 0x7fa0fc034c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fa0fc0354a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fa0fc0351a0 '__int128'
|-TypedefDecl 0x7fa0fc035510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fa0fc0351c0 'unsigned __int128'
|-TypedefDecl 0x7fa0fc0357f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fa0fc0355f0 'struct __NSConstantString_tag'
|   `-Record 0x7fa0fc035568 '__NSConstantString_tag'
|-TypedefDecl 0x7fa0fc035890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fa0fc035850 'char *'
|   `-BuiltinType 0x7fa0fc034ca0 'char'
|-TypedefDecl 0x7fa0fc035b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fa0fc035b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fa0fc035970 'struct __va_list_tag'
|     `-Record 0x7fa0fc0358e8 '__va_list_tag'
|-TypedefDecl 0x7fa0fb832c00 <./tree_src/dyadicSectVector_AndSectVec.c:3:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x7fa0fc034d60 'unsigned char'
`-FunctionDecl 0x7fa0fb833838 <line:6:1, line:19:1> line:6:6 AndSectVec 'void (int, BOOL *, BOOL *, BOOL *, int, int, int, int, int, int, int, int, int)'
  |-ParmVarDecl 0x7fa0fb832c70 <line:7:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7fa0fb832e80 <col:12, col:20> col:17 used x 'BOOL *':'BOOL *'
  |-ParmVarDecl 0x7fa0fb833010 <col:23, col:31> col:28 used y 'BOOL *':'BOOL *'
  |-ParmVarDecl 0x7fa0fb8331a0 <col:34, col:42> col:39 used z 'BOOL *':'BOOL *'
  |-ParmVarDecl 0x7fa0fb833220 <line:8:5, col:9> col:9 used startx 'int'
  |-ParmVarDecl 0x7fa0fb8332a0 <col:17, col:21> col:21 used stopx 'int'
  |-ParmVarDecl 0x7fa0fb833320 <col:28, col:32> col:32 used stepx 'int'
  |-ParmVarDecl 0x7fa0fb8333a0 <col:39, col:43> col:43 used starty 'int'
  |-ParmVarDecl 0x7fa0fb833420 <col:51, col:55> col:55 stopy 'int'
  |-ParmVarDecl 0x7fa0fb8334a0 <col:62, col:66> col:66 used stepy 'int'
  |-ParmVarDecl 0x7fa0fb833520 <line:9:5, col:9> col:9 used startz 'int'
  |-ParmVarDecl 0x7fa0fb8335a0 <col:17, col:21> col:21 stopz 'int'
  |-ParmVarDecl 0x7fa0fb833620 <col:28, col:32> col:32 used stepz 'int'
  `-CompoundStmt 0x7fa0fb835230 <col:40, line:19:1>
    |-DeclStmt 0x7fa0fb833b28 <line:11:5, col:17>
    | |-VarDecl 0x7fa0fb8339a0 <col:5, col:9> col:9 used ix 'int'
    | |-VarDecl 0x7fa0fb833a20 <col:5, col:12> col:12 used iy 'int'
    | `-VarDecl 0x7fa0fb833aa0 <col:5, col:15> col:15 used iz 'int'
    |-BinaryOperator 0x7fa0fb833b98 <line:12:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7fa0fb833b40 <col:5> 'int' lvalue Var 0x7fa0fb833a20 'iy' 'int'
    | `-ImplicitCastExpr 0x7fa0fb833b80 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7fa0fb833b60 <col:10> 'int' lvalue ParmVar 0x7fa0fb8333a0 'starty' 'int'
    |-BinaryOperator 0x7fa0fb834c18 <line:13:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7fa0fb833bb8 <col:5> 'int' lvalue Var 0x7fa0fb833aa0 'iz' 'int'
    | `-ImplicitCastExpr 0x7fa0fb834c00 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7fa0fb833bd8 <col:10> 'int' lvalue ParmVar 0x7fa0fb833520 'startz' 'int'
    `-ForStmt 0x7fa0fb8351f8 <line:14:5, line:18:5>
      |-BinaryOperator 0x7fa0fb834c90 <line:14:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7fa0fb834c38 <col:10> 'int' lvalue Var 0x7fa0fb8339a0 'ix' 'int'
      | `-ImplicitCastExpr 0x7fa0fb834c78 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fa0fb834c58 <col:14> 'int' lvalue ParmVar 0x7fa0fb833220 'startx' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7fa0fb834d20 <col:22, col:25> 'int' '<'
      | |-ImplicitCastExpr 0x7fa0fb834cf0 <col:22> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fa0fb834cb0 <col:22> 'int' lvalue Var 0x7fa0fb8339a0 'ix' 'int'
      | `-ImplicitCastExpr 0x7fa0fb834d08 <col:25> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fa0fb834cd0 <col:25> 'int' lvalue ParmVar 0x7fa0fb8332a0 'stopx' 'int'
      |-CompoundAssignOperator 0x7fa0fb834d98 <col:32, col:37> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7fa0fb834d40 <col:32> 'int' lvalue Var 0x7fa0fb8339a0 'ix' 'int'
      | `-ImplicitCastExpr 0x7fa0fb834d80 <col:37> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fa0fb834d60 <col:37> 'int' lvalue ParmVar 0x7fa0fb833320 'stepx' 'int'
      `-CompoundStmt 0x7fa0fb8351d0 <col:45, line:18:5>
        |-BinaryOperator 0x7fa0fb835010 <line:15:4, col:24> 'BOOL':'unsigned char' '='
        | |-ArraySubscriptExpr 0x7fa0fb834e38 <col:4, col:8> 'BOOL':'unsigned char' lvalue
        | | |-ImplicitCastExpr 0x7fa0fb834e08 <col:4> 'BOOL *':'BOOL *' <LValueToRValue>
        | | | `-DeclRefExpr 0x7fa0fb834dc8 <col:4> 'BOOL *':'BOOL *' lvalue ParmVar 0x7fa0fb8331a0 'z' 'BOOL *':'BOOL *'
        | | `-ImplicitCastExpr 0x7fa0fb834e20 <col:6> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fa0fb834de8 <col:6> 'int' lvalue Var 0x7fa0fb833aa0 'iz' 'int'
        | `-ImplicitCastExpr 0x7fa0fb834ff8 <col:12, col:24> 'BOOL':'unsigned char' <IntegralCast>
        |   `-BinaryOperator 0x7fa0fb834fd8 <col:12, col:24> 'int' '&'
        |     |-ImplicitCastExpr 0x7fa0fb834f90 <col:12, col:16> 'int' <IntegralCast>
        |     | `-ImplicitCastExpr 0x7fa0fb834f78 <col:12, col:16> 'BOOL':'unsigned char' <LValueToRValue>
        |     |   `-ArraySubscriptExpr 0x7fa0fb834ec8 <col:12, col:16> 'BOOL':'unsigned char' lvalue
        |     |     |-ImplicitCastExpr 0x7fa0fb834e98 <col:12> 'BOOL *':'BOOL *' <LValueToRValue>
        |     |     | `-DeclRefExpr 0x7fa0fb834e58 <col:12> 'BOOL *':'BOOL *' lvalue ParmVar 0x7fa0fb832e80 'x' 'BOOL *':'BOOL *'
        |     |     `-ImplicitCastExpr 0x7fa0fb834eb0 <col:14> 'int' <LValueToRValue>
        |     |       `-DeclRefExpr 0x7fa0fb834e78 <col:14> 'int' lvalue Var 0x7fa0fb8339a0 'ix' 'int'
        |     `-ImplicitCastExpr 0x7fa0fb834fc0 <col:20, col:24> 'int' <IntegralCast>
        |       `-ImplicitCastExpr 0x7fa0fb834fa8 <col:20, col:24> 'BOOL':'unsigned char' <LValueToRValue>
        |         `-ArraySubscriptExpr 0x7fa0fb834f58 <col:20, col:24> 'BOOL':'unsigned char' lvalue
        |           |-ImplicitCastExpr 0x7fa0fb834f28 <col:20> 'BOOL *':'BOOL *' <LValueToRValue>
        |           | `-DeclRefExpr 0x7fa0fb834ee8 <col:20> 'BOOL *':'BOOL *' lvalue ParmVar 0x7fa0fb833010 'y' 'BOOL *':'BOOL *'
        |           `-ImplicitCastExpr 0x7fa0fb834f40 <col:22> 'int' <LValueToRValue>
        |             `-DeclRefExpr 0x7fa0fb834f08 <col:22> 'int' lvalue Var 0x7fa0fb833a20 'iy' 'int'
        |-BinaryOperator 0x7fa0fb8350e0 <line:16:4, col:14> 'int' '='
        | |-DeclRefExpr 0x7fa0fb835030 <col:4> 'int' lvalue Var 0x7fa0fb833a20 'iy' 'int'
        | `-BinaryOperator 0x7fa0fb8350c0 <col:9, col:14> 'int' '+'
        |   |-ImplicitCastExpr 0x7fa0fb835090 <col:9> 'int' <LValueToRValue>
        |   | `-DeclRefExpr 0x7fa0fb835050 <col:9> 'int' lvalue Var 0x7fa0fb833a20 'iy' 'int'
        |   `-ImplicitCastExpr 0x7fa0fb8350a8 <col:14> 'int' <LValueToRValue>
        |     `-DeclRefExpr 0x7fa0fb835070 <col:14> 'int' lvalue ParmVar 0x7fa0fb8334a0 'stepy' 'int'
        `-BinaryOperator 0x7fa0fb8351b0 <line:17:4, col:14> 'int' '='
          |-DeclRefExpr 0x7fa0fb835100 <col:4> 'int' lvalue Var 0x7fa0fb833aa0 'iz' 'int'
          `-BinaryOperator 0x7fa0fb835190 <col:9, col:14> 'int' '+'
            |-ImplicitCastExpr 0x7fa0fb835160 <col:9> 'int' <LValueToRValue>
            | `-DeclRefExpr 0x7fa0fb835120 <col:9> 'int' lvalue Var 0x7fa0fb833aa0 'iz' 'int'
            `-ImplicitCastExpr 0x7fa0fb835178 <col:14> 'int' <LValueToRValue>
              `-DeclRefExpr 0x7fa0fb835140 <col:14> 'int' lvalue ParmVar 0x7fa0fb833620 'stepz' 'int'
