TranslationUnitDecl 0x7ff642838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7ff6428394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7ff6428391a0 '__int128'
|-TypedefDecl 0x7ff642839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7ff6428391c0 'unsigned __int128'
|-TypedefDecl 0x7ff6428397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7ff6428395f0 'struct __NSConstantString_tag'
|   `-Record 0x7ff642839568 '__NSConstantString_tag'
|-TypedefDecl 0x7ff642839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7ff642839850 'char *'
|   `-BuiltinType 0x7ff642838ca0 'char'
|-TypedefDecl 0x7ff642839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7ff642839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7ff642839970 'struct __va_list_tag'
|     `-Record 0x7ff6428398e8 '__va_list_tag'
`-FunctionDecl 0x7ff64302e768 <./tree_src/recurWholeVector_Order2VectorVec.c:3:1, line:11:1> line:3:6 Order2VectorVec 'void (int, double *, double *, double *)'
  |-ParmVarDecl 0x7ff64302e200 <line:4:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7ff64302e380 <col:12, col:22> col:19 used x 'double *':'double *'
  |-ParmVarDecl 0x7ff64302e4d0 <col:25, col:35> col:32 used b 'double *':'double *'
  |-ParmVarDecl 0x7ff64302e620 <col:38, col:48> col:45 used a 'double *':'double *'
  `-CompoundStmt 0x7ff64302efd8 <col:52, line:11:1>
    |-DeclStmt 0x7ff64302e8f0 <line:6:5, col:10>
    | `-VarDecl 0x7ff64302e888 <col:5, col:9> col:9 used i 'int'
    |-BinaryOperator 0x7ff64302ea10 <line:7:5, col:15> 'double' '='
    | |-ArraySubscriptExpr 0x7ff64302e960 <col:5, col:8> 'double' lvalue
    | | |-ImplicitCastExpr 0x7ff64302e948 <col:5> 'double *':'double *' <LValueToRValue>
    | | | `-DeclRefExpr 0x7ff64302e908 <col:5> 'double *':'double *' lvalue ParmVar 0x7ff64302e380 'x' 'double *':'double *'
    | | `-IntegerLiteral 0x7ff64302e928 <col:7> 'int' 0
    | `-ImplicitCastExpr 0x7ff64302e9f8 <col:12, col:15> 'double' <LValueToRValue>
    |   `-ArraySubscriptExpr 0x7ff64302e9d8 <col:12, col:15> 'double' lvalue
    |     |-ImplicitCastExpr 0x7ff64302e9c0 <col:12> 'double *':'double *' <LValueToRValue>
    |     | `-DeclRefExpr 0x7ff64302e980 <col:12> 'double *':'double *' lvalue ParmVar 0x7ff64302e4d0 'b' 'double *':'double *'
    |     `-IntegerLiteral 0x7ff64302e9a0 <col:14> 'int' 0
    `-ForStmt 0x7ff64302efa0 <line:8:5, line:10:5>
      |-BinaryOperator 0x7ff64302ea70 <line:8:10, col:13> 'int' '='
      | |-DeclRefExpr 0x7ff64302ea30 <col:10> 'int' lvalue Var 0x7ff64302e888 'i' 'int'
      | `-IntegerLiteral 0x7ff64302ea50 <col:13> 'int' 2
      |-<<<NULL>>>
      |-BinaryOperator 0x7ff64302eb00 <col:16, col:18> 'int' '<'
      | |-ImplicitCastExpr 0x7ff64302ead0 <col:16> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7ff64302ea90 <col:16> 'int' lvalue Var 0x7ff64302e888 'i' 'int'
      | `-ImplicitCastExpr 0x7ff64302eae8 <col:18> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7ff64302eab0 <col:18> 'int' lvalue ParmVar 0x7ff64302e200 'n' 'int'
      |-UnaryOperator 0x7ff64302eb40 <col:21, col:22> 'int' postfix '++'
      | `-DeclRefExpr 0x7ff64302eb20 <col:21> 'int' lvalue Var 0x7ff64302e888 'i' 'int'
      `-CompoundStmt 0x7ff64302ef88 <col:27, line:10:5>
        `-BinaryOperator 0x7ff64302ef68 <line:9:9, col:44> 'double' '='
          |-ArraySubscriptExpr 0x7ff64302ebc8 <col:9, col:12> 'double' lvalue
          | |-ImplicitCastExpr 0x7ff64302eb98 <col:9> 'double *':'double *' <LValueToRValue>
          | | `-DeclRefExpr 0x7ff64302eb58 <col:9> 'double *':'double *' lvalue ParmVar 0x7ff64302e380 'x' 'double *':'double *'
          | `-ImplicitCastExpr 0x7ff64302ebb0 <col:11> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x7ff64302eb78 <col:11> 'int' lvalue Var 0x7ff64302e888 'i' 'int'
          `-BinaryOperator 0x7ff64302ef48 <col:16, col:44> 'double' '+'
            |-BinaryOperator 0x7ff64302ed78 <col:16, col:28> 'double' '*'
            | |-ImplicitCastExpr 0x7ff64302ed48 <col:16, col:21> 'double' <LValueToRValue>
            | | `-ArraySubscriptExpr 0x7ff64302ec98 <col:16, col:21> 'double' lvalue
            | |   |-ImplicitCastExpr 0x7ff64302ec80 <col:16> 'double *':'double *' <LValueToRValue>
            | |   | `-DeclRefExpr 0x7ff64302ebe8 <col:16> 'double *':'double *' lvalue ParmVar 0x7ff64302e380 'x' 'double *':'double *'
            | |   `-BinaryOperator 0x7ff64302ec60 <col:18, col:20> 'int' '-'
            | |     |-ImplicitCastExpr 0x7ff64302ec48 <col:18> 'int' <LValueToRValue>
            | |     | `-DeclRefExpr 0x7ff64302ec08 <col:18> 'int' lvalue Var 0x7ff64302e888 'i' 'int'
            | |     `-IntegerLiteral 0x7ff64302ec28 <col:20> 'int' 1
            | `-ImplicitCastExpr 0x7ff64302ed60 <col:25, col:28> 'double' <LValueToRValue>
            |   `-ArraySubscriptExpr 0x7ff64302ed28 <col:25, col:28> 'double' lvalue
            |     |-ImplicitCastExpr 0x7ff64302ecf8 <col:25> 'double *':'double *' <LValueToRValue>
            |     | `-DeclRefExpr 0x7ff64302ecb8 <col:25> 'double *':'double *' lvalue ParmVar 0x7ff64302e620 'a' 'double *':'double *'
            |     `-ImplicitCastExpr 0x7ff64302ed10 <col:27> 'int' <LValueToRValue>
            |       `-DeclRefExpr 0x7ff64302ecd8 <col:27> 'int' lvalue Var 0x7ff64302e888 'i' 'int'
            `-BinaryOperator 0x7ff64302ef28 <col:32, col:44> 'double' '*'
              |-ImplicitCastExpr 0x7ff64302eef8 <col:32, col:37> 'double' <LValueToRValue>
              | `-ArraySubscriptExpr 0x7ff64302ee48 <col:32, col:37> 'double' lvalue
              |   |-ImplicitCastExpr 0x7ff64302ee30 <col:32> 'double *':'double *' <LValueToRValue>
              |   | `-DeclRefExpr 0x7ff64302ed98 <col:32> 'double *':'double *' lvalue ParmVar 0x7ff64302e380 'x' 'double *':'double *'
              |   `-BinaryOperator 0x7ff64302ee10 <col:34, col:36> 'int' '-'
              |     |-ImplicitCastExpr 0x7ff64302edf8 <col:34> 'int' <LValueToRValue>
              |     | `-DeclRefExpr 0x7ff64302edb8 <col:34> 'int' lvalue Var 0x7ff64302e888 'i' 'int'
              |     `-IntegerLiteral 0x7ff64302edd8 <col:36> 'int' 2
              `-ImplicitCastExpr 0x7ff64302ef10 <col:41, col:44> 'double' <LValueToRValue>
                `-ArraySubscriptExpr 0x7ff64302eed8 <col:41, col:44> 'double' lvalue
                  |-ImplicitCastExpr 0x7ff64302eea8 <col:41> 'double *':'double *' <LValueToRValue>
                  | `-DeclRefExpr 0x7ff64302ee68 <col:41> 'double *':'double *' lvalue ParmVar 0x7ff64302e4d0 'b' 'double *':'double *'
                  `-ImplicitCastExpr 0x7ff64302eec0 <col:43> 'int' <LValueToRValue>
                    `-DeclRefExpr 0x7ff64302ee88 <col:43> 'int' lvalue Var 0x7ff64302e888 'i' 'int'
