TranslationUnitDecl 0x7fb0df038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fb0df0394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fb0df0391a0 '__int128'
|-TypedefDecl 0x7fb0df039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fb0df0391c0 'unsigned __int128'
|-TypedefDecl 0x7fb0df0397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fb0df0395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fb0df039568 '__NSConstantString_tag'
|-TypedefDecl 0x7fb0df039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fb0df039850 'char *'
|   `-BuiltinType 0x7fb0df038ca0 'char'
|-TypedefDecl 0x7fb0df039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fb0df039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fb0df039970 'struct __va_list_tag'
|     `-Record 0x7fb0df0398e8 '__va_list_tag'
|-TypedefDecl 0x7fb0df82f200 <./tree_src/extendSectMatrix_AndSectScaMat.c:3:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x7fb0df038d60 'unsigned char'
`-FunctionDecl 0x7fb0df831378 <line:6:1, line:22:1> line:6:6 AndSectScaMat 'void (int, int, int, int, BOOL, BOOL (*)[my], BOOL (*)[mz], int, int, int, int, int, int, int, int, int, int, int, int)'
  |-ParmVarDecl 0x7fb0df82f270 <line:7:5, col:9> col:9 used ny 'int'
  |-ParmVarDecl 0x7fb0df82f2f0 <col:13, col:17> col:17 used my 'int'
  |-ParmVarDecl 0x7fb0df82f370 <col:21, col:25> col:25 used nz 'int'
  |-ParmVarDecl 0x7fb0df82f3f0 <col:29, col:33> col:33 used mz 'int'
  |-ParmVarDecl 0x7fb0df82f490 <line:8:5, col:10> col:10 used x 'BOOL':'unsigned char'
  |-ParmVarDecl 0x7fb0df82f740 <col:13, col:26> col:18 used y 'BOOL (*)[my]':'BOOL (*)[my]'
  |-ParmVarDecl 0x7fb0df82f9f0 <col:29, col:42> col:34 used z 'BOOL (*)[mz]':'BOOL (*)[mz]'
  |-ParmVarDecl 0x7fb0df82fa70 <line:9:5, col:9> col:9 used starty1 'int'
  |-ParmVarDecl 0x7fb0df82faf0 <col:18, col:22> col:22 used stopy1 'int'
  |-ParmVarDecl 0x7fb0df82fb70 <col:30, col:34> col:34 used stepy1 'int'
  |-ParmVarDecl 0x7fb0df82fbf0 <col:42, col:46> col:46 used starty2 'int'
  |-ParmVarDecl 0x7fb0df82fc70 <col:55, col:59> col:59 used stopy2 'int'
  |-ParmVarDecl 0x7fb0df82fcf0 <col:67, col:71> col:71 used stepy2 'int'
  |-ParmVarDecl 0x7fb0df82fd70 <line:10:5, col:9> col:9 used startz1 'int'
  |-ParmVarDecl 0x7fb0df82fdf0 <col:18, col:22> col:22 stopz1 'int'
  |-ParmVarDecl 0x7fb0df82fe70 <col:30, col:34> col:34 used stepz1 'int'
  |-ParmVarDecl 0x7fb0df82fef0 <col:42, col:46> col:46 used startz2 'int'
  |-ParmVarDecl 0x7fb0df82ff70 <col:55, col:59> col:59 stopz2 'int'
  |-ParmVarDecl 0x7fb0df82fff0 <col:67, col:71> col:71 used stepz2 'int'
  `-CompoundStmt 0x7fb0df8320d8 <col:80, line:22:1>
    |-DeclStmt 0x7fb0df831720 <line:12:5, col:23>
    | |-VarDecl 0x7fb0df831510 <col:5, col:9> col:9 used iy 'int'
    | |-VarDecl 0x7fb0df831590 <col:5, col:13> col:13 used jy 'int'
    | |-VarDecl 0x7fb0df831610 <col:5, col:17> col:17 used iz 'int'
    | `-VarDecl 0x7fb0df831690 <col:5, col:21> col:21 used jz 'int'
    |-BinaryOperator 0x7fb0df831790 <line:13:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7fb0df831738 <col:5> 'int' lvalue Var 0x7fb0df831610 'iz' 'int'
    | `-ImplicitCastExpr 0x7fb0df831778 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7fb0df831758 <col:10> 'int' lvalue ParmVar 0x7fb0df82fd70 'startz1' 'int'
    `-ForStmt 0x7fb0df8320a0 <line:14:5, line:21:5>
      |-BinaryOperator 0x7fb0df831808 <line:14:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7fb0df8317b0 <col:10> 'int' lvalue Var 0x7fb0df831510 'iy' 'int'
      | `-ImplicitCastExpr 0x7fb0df8317f0 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fb0df8317d0 <col:14> 'int' lvalue ParmVar 0x7fb0df82fa70 'starty1' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7fb0df831898 <col:23, col:26> 'int' '<'
      | |-ImplicitCastExpr 0x7fb0df831868 <col:23> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fb0df831828 <col:23> 'int' lvalue Var 0x7fb0df831510 'iy' 'int'
      | `-ImplicitCastExpr 0x7fb0df831880 <col:26> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fb0df831848 <col:26> 'int' lvalue ParmVar 0x7fb0df82faf0 'stopy1' 'int'
      |-CompoundAssignOperator 0x7fb0df831910 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7fb0df8318b8 <col:34> 'int' lvalue Var 0x7fb0df831510 'iy' 'int'
      | `-ImplicitCastExpr 0x7fb0df8318f8 <col:39> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fb0df8318d8 <col:39> 'int' lvalue ParmVar 0x7fb0df82fb70 'stepy1' 'int'
      `-CompoundStmt 0x7fb0df832078 <col:48, line:21:5>
        |-BinaryOperator 0x7fb0df831998 <line:15:9, col:14> 'int' '='
        | |-DeclRefExpr 0x7fb0df831940 <col:9> 'int' lvalue Var 0x7fb0df831690 'jz' 'int'
        | `-ImplicitCastExpr 0x7fb0df831980 <col:14> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x7fb0df831960 <col:14> 'int' lvalue ParmVar 0x7fb0df82fef0 'startz2' 'int'
        |-ForStmt 0x7fb0df831f70 <line:16:9, line:19:9>
        | |-BinaryOperator 0x7fb0df831a10 <line:16:14, col:18> 'int' '='
        | | |-DeclRefExpr 0x7fb0df8319b8 <col:14> 'int' lvalue Var 0x7fb0df831590 'jy' 'int'
        | | `-ImplicitCastExpr 0x7fb0df8319f8 <col:18> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fb0df8319d8 <col:18> 'int' lvalue ParmVar 0x7fb0df82fbf0 'starty2' 'int'
        | |-<<<NULL>>>
        | |-BinaryOperator 0x7fb0df831aa0 <col:27, col:30> 'int' '<'
        | | |-ImplicitCastExpr 0x7fb0df831a70 <col:27> 'int' <LValueToRValue>
        | | | `-DeclRefExpr 0x7fb0df831a30 <col:27> 'int' lvalue Var 0x7fb0df831590 'jy' 'int'
        | | `-ImplicitCastExpr 0x7fb0df831a88 <col:30> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fb0df831a50 <col:30> 'int' lvalue ParmVar 0x7fb0df82fc70 'stopy2' 'int'
        | |-CompoundAssignOperator 0x7fb0df831b18 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
        | | |-DeclRefExpr 0x7fb0df831ac0 <col:38> 'int' lvalue Var 0x7fb0df831590 'jy' 'int'
        | | `-ImplicitCastExpr 0x7fb0df831b00 <col:43> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fb0df831ae0 <col:43> 'int' lvalue ParmVar 0x7fb0df82fcf0 'stepy2' 'int'
        | `-CompoundStmt 0x7fb0df831f50 <col:52, line:19:9>
        |   |-BinaryOperator 0x7fb0df831e60 <line:17:6, col:30> 'BOOL':'unsigned char' '='
        |   | |-ArraySubscriptExpr 0x7fb0df831c88 <col:6, col:14> 'BOOL':'unsigned char' lvalue
        |   | | |-ImplicitCastExpr 0x7fb0df831c58 <col:6, col:10> 'BOOL *' <ArrayToPointerDecay>
        |   | | | `-ArraySubscriptExpr 0x7fb0df831bb8 <col:6, col:10> 'BOOL [mz]' lvalue
        |   | | |   |-ImplicitCastExpr 0x7fb0df831b88 <col:6> 'BOOL (*)[mz]':'BOOL (*)[mz]' <LValueToRValue>
        |   | | |   | `-DeclRefExpr 0x7fb0df831b48 <col:6> 'BOOL (*)[mz]':'BOOL (*)[mz]' lvalue ParmVar 0x7fb0df82f9f0 'z' 'BOOL (*)[mz]':'BOOL (*)[mz]'
        |   | | |   `-ImplicitCastExpr 0x7fb0df831ba0 <col:8> 'int' <LValueToRValue>
        |   | | |     `-DeclRefExpr 0x7fb0df831b68 <col:8> 'int' lvalue Var 0x7fb0df831610 'iz' 'int'
        |   | | `-ImplicitCastExpr 0x7fb0df831c70 <col:12> 'int' <LValueToRValue>
        |   | |   `-DeclRefExpr 0x7fb0df831bd8 <col:12> 'int' lvalue Var 0x7fb0df831690 'jz' 'int'
        |   | `-ImplicitCastExpr 0x7fb0df831e48 <col:18, col:30> 'BOOL':'unsigned char' <IntegralCast>
        |   |   `-BinaryOperator 0x7fb0df831e28 <col:18, col:30> 'int' '&'
        |   |     |-ImplicitCastExpr 0x7fb0df831de0 <col:18> 'int' <IntegralCast>
        |   |     | `-ImplicitCastExpr 0x7fb0df831dc8 <col:18> 'BOOL':'unsigned char' <LValueToRValue>
        |   |     |   `-DeclRefExpr 0x7fb0df831ca8 <col:18> 'BOOL':'unsigned char' lvalue ParmVar 0x7fb0df82f490 'x' 'BOOL':'unsigned char'
        |   |     `-ImplicitCastExpr 0x7fb0df831e10 <col:22, col:30> 'int' <IntegralCast>
        |   |       `-ImplicitCastExpr 0x7fb0df831df8 <col:22, col:30> 'BOOL':'unsigned char' <LValueToRValue>
        |   |         `-ArraySubscriptExpr 0x7fb0df831da8 <col:22, col:30> 'BOOL':'unsigned char' lvalue
        |   |           |-ImplicitCastExpr 0x7fb0df831d78 <col:22, col:26> 'BOOL *' <ArrayToPointerDecay>
        |   |           | `-ArraySubscriptExpr 0x7fb0df831d38 <col:22, col:26> 'BOOL [my]' lvalue
        |   |           |   |-ImplicitCastExpr 0x7fb0df831d08 <col:22> 'BOOL (*)[my]':'BOOL (*)[my]' <LValueToRValue>
        |   |           |   | `-DeclRefExpr 0x7fb0df831cc8 <col:22> 'BOOL (*)[my]':'BOOL (*)[my]' lvalue ParmVar 0x7fb0df82f740 'y' 'BOOL (*)[my]':'BOOL (*)[my]'
        |   |           |   `-ImplicitCastExpr 0x7fb0df831d20 <col:24> 'int' <LValueToRValue>
        |   |           |     `-DeclRefExpr 0x7fb0df831ce8 <col:24> 'int' lvalue Var 0x7fb0df831510 'iy' 'int'
        |   |           `-ImplicitCastExpr 0x7fb0df831d90 <col:28> 'int' <LValueToRValue>
        |   |             `-DeclRefExpr 0x7fb0df831d58 <col:28> 'int' lvalue Var 0x7fb0df831590 'jy' 'int'
        |   `-BinaryOperator 0x7fb0df831f30 <line:18:6, col:16> 'int' '='
        |     |-DeclRefExpr 0x7fb0df831e80 <col:6> 'int' lvalue Var 0x7fb0df831690 'jz' 'int'
        |     `-BinaryOperator 0x7fb0df831f10 <col:11, col:16> 'int' '+'
        |       |-ImplicitCastExpr 0x7fb0df831ee0 <col:11> 'int' <LValueToRValue>
        |       | `-DeclRefExpr 0x7fb0df831ea0 <col:11> 'int' lvalue Var 0x7fb0df831690 'jz' 'int'
        |       `-ImplicitCastExpr 0x7fb0df831ef8 <col:16> 'int' <LValueToRValue>
        |         `-DeclRefExpr 0x7fb0df831ec0 <col:16> 'int' lvalue ParmVar 0x7fb0df82fff0 'stepz2' 'int'
        `-BinaryOperator 0x7fb0df832058 <line:20:9, col:19> 'int' '='
          |-DeclRefExpr 0x7fb0df831fa8 <col:9> 'int' lvalue Var 0x7fb0df831610 'iz' 'int'
          `-BinaryOperator 0x7fb0df832038 <col:14, col:19> 'int' '+'
            |-ImplicitCastExpr 0x7fb0df832008 <col:14> 'int' <LValueToRValue>
            | `-DeclRefExpr 0x7fb0df831fc8 <col:14> 'int' lvalue Var 0x7fb0df831610 'iz' 'int'
            `-ImplicitCastExpr 0x7fb0df832020 <col:19> 'int' <LValueToRValue>
              `-DeclRefExpr 0x7fb0df831fe8 <col:19> 'int' lvalue ParmVar 0x7fb0df82fe70 'stepz1' 'int'
