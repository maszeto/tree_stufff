TranslationUnitDecl 0x7fbba8838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fbba88394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fbba88391a0 '__int128'
|-TypedefDecl 0x7fbba8839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fbba88391c0 'unsigned __int128'
|-TypedefDecl 0x7fbba88397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fbba88395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fbba8839568 '__NSConstantString_tag'
|-TypedefDecl 0x7fbba8839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fbba8839850 'char *'
|   `-BuiltinType 0x7fbba8838ca0 'char'
|-TypedefDecl 0x7fbba8839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fbba8839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fbba8839970 'struct __va_list_tag'
|     `-Record 0x7fbba88398e8 '__va_list_tag'
|-TypedefDecl 0x7fbba8891600 <./tree_src/extendSectMatrix_PowSectMatRowVec.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fbba8838d60 'unsigned char'
|-FunctionDecl 0x7fbba8893978 <line:6:1, line:25:1> line:6:6 PowSectMatRowVec 'void (int, int, int, int, int, double (*)[mx], double *, double (*)[mz], int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)'
| |-ParmVarDecl 0x7fbba8891670 <line:7:5, col:9> col:9 used nx 'int'
| |-ParmVarDecl 0x7fbba88916f0 <col:13, col:17> col:17 used mx 'int'
| |-ParmVarDecl 0x7fbba8891770 <col:21, col:25> col:25 used ny 'int'
| |-ParmVarDecl 0x7fbba88917f0 <col:29, col:33> col:33 used nz 'int'
| |-ParmVarDecl 0x7fbba8891870 <col:37, col:41> col:41 used mz 'int'
| |-ParmVarDecl 0x7fbba8891a70 <line:8:5, col:20> col:12 used x 'double (*)[mx]':'double (*)[mx]'
| |-ParmVarDecl 0x7fbba8891bf0 <col:23, col:34> col:30 used y 'double *':'double *'
| |-ParmVarDecl 0x7fbba8891df0 <col:37, col:52> col:44 used z 'double (*)[mz]':'double (*)[mz]'
| |-ParmVarDecl 0x7fbba8891e70 <line:9:5, col:9> col:9 used startx1 'int'
| |-ParmVarDecl 0x7fbba8891ef0 <col:18, col:22> col:22 used stopx1 'int'
| |-ParmVarDecl 0x7fbba8891f70 <col:30, col:34> col:34 used stepx1 'int'
| |-ParmVarDecl 0x7fbba8891ff0 <col:42, col:46> col:46 used startx2 'int'
| |-ParmVarDecl 0x7fbba8892070 <col:55, col:59> col:59 used stopx2 'int'
| |-ParmVarDecl 0x7fbba88920f0 <col:67, col:71> col:71 used stepx2 'int'
| |-ParmVarDecl 0x7fbba8892170 <line:10:5, col:9> col:9 used starty 'int'
| |-ParmVarDecl 0x7fbba88921f0 <col:17, col:21> col:21 stopy 'int'
| |-ParmVarDecl 0x7fbba8892270 <col:28, col:32> col:32 used stepy 'int'
| |-ParmVarDecl 0x7fbba88922f0 <line:11:5, col:9> col:9 used startz1 'int'
| |-ParmVarDecl 0x7fbba8892370 <col:18, col:22> col:22 stopz1 'int'
| |-ParmVarDecl 0x7fbba88923f0 <col:30, col:34> col:34 used stepz1 'int'
| |-ParmVarDecl 0x7fbba8892470 <col:42, col:46> col:46 used startz2 'int'
| |-ParmVarDecl 0x7fbba88924f0 <col:55, col:59> col:59 stopz2 'int'
| |-ParmVarDecl 0x7fbba8892570 <col:67, col:71> col:71 used stepz2 'int'
| `-CompoundStmt 0x7fbba8894ba8 <col:80, line:25:1>
|   |-DeclStmt 0x7fbba8893e50 <line:13:5, col:31>
|   | |-VarDecl 0x7fbba8893b30 <col:5, col:9> col:9 used ix 'int'
|   | |-VarDecl 0x7fbba8893bb0 <col:5, col:13> col:13 used jx 'int'
|   | |-VarDecl 0x7fbba8893c30 <col:5, col:17> col:17 iy 'int'
|   | |-VarDecl 0x7fbba8893cb0 <col:5, col:21> col:21 used jy 'int'
|   | |-VarDecl 0x7fbba8893d30 <col:5, col:25> col:25 used iz 'int'
|   | `-VarDecl 0x7fbba8893db0 <col:5, col:29> col:29 used jz 'int'
|   |-BinaryOperator 0x7fbba8893ec0 <line:14:5, col:10> 'int' '='
|   | |-DeclRefExpr 0x7fbba8893e68 <col:5> 'int' lvalue Var 0x7fbba8893d30 'iz' 'int'
|   | `-ImplicitCastExpr 0x7fbba8893ea8 <col:10> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fbba8893e88 <col:10> 'int' lvalue ParmVar 0x7fbba88922f0 'startz1' 'int'
|   `-ForStmt 0x7fbba8894b70 <line:15:5, line:24:5>
|     |-BinaryOperator 0x7fbba8893f38 <line:15:10, col:14> 'int' '='
|     | |-DeclRefExpr 0x7fbba8893ee0 <col:10> 'int' lvalue Var 0x7fbba8893b30 'ix' 'int'
|     | `-ImplicitCastExpr 0x7fbba8893f20 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fbba8893f00 <col:14> 'int' lvalue ParmVar 0x7fbba8891e70 'startx1' 'int'
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fbba8893fc8 <col:23, col:26> 'int' '<'
|     | |-ImplicitCastExpr 0x7fbba8893f98 <col:23> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fbba8893f58 <col:23> 'int' lvalue Var 0x7fbba8893b30 'ix' 'int'
|     | `-ImplicitCastExpr 0x7fbba8893fb0 <col:26> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fbba8893f78 <col:26> 'int' lvalue ParmVar 0x7fbba8891ef0 'stopx1' 'int'
|     |-CompoundAssignOperator 0x7fbba8894040 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     | |-DeclRefExpr 0x7fbba8893fe8 <col:34> 'int' lvalue Var 0x7fbba8893b30 'ix' 'int'
|     | `-ImplicitCastExpr 0x7fbba8894028 <col:39> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fbba8894008 <col:39> 'int' lvalue ParmVar 0x7fbba8891f70 'stepx1' 'int'
|     `-CompoundStmt 0x7fbba8894b40 <col:48, line:24:5>
|       |-BinaryOperator 0x7fbba88940c8 <line:16:9, col:14> 'int' '='
|       | |-DeclRefExpr 0x7fbba8894070 <col:9> 'int' lvalue Var 0x7fbba8893cb0 'jy' 'int'
|       | `-ImplicitCastExpr 0x7fbba88940b0 <col:14> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x7fbba8894090 <col:14> 'int' lvalue ParmVar 0x7fbba8892170 'starty' 'int'
|       |-BinaryOperator 0x7fbba8894140 <line:17:9, col:14> 'int' '='
|       | |-DeclRefExpr 0x7fbba88940e8 <col:9> 'int' lvalue Var 0x7fbba8893db0 'jz' 'int'
|       | `-ImplicitCastExpr 0x7fbba8894128 <col:14> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x7fbba8894108 <col:14> 'int' lvalue ParmVar 0x7fbba8892470 'startz2' 'int'
|       |-ForStmt 0x7fbba8894a38 <line:18:9, line:22:9>
|       | |-BinaryOperator 0x7fbba88941b8 <line:18:14, col:18> 'int' '='
|       | | |-DeclRefExpr 0x7fbba8894160 <col:14> 'int' lvalue Var 0x7fbba8893bb0 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7fbba88941a0 <col:18> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fbba8894180 <col:18> 'int' lvalue ParmVar 0x7fbba8891ff0 'startx2' 'int'
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x7fbba8894248 <col:27, col:30> 'int' '<'
|       | | |-ImplicitCastExpr 0x7fbba8894218 <col:27> 'int' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7fbba88941d8 <col:27> 'int' lvalue Var 0x7fbba8893bb0 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7fbba8894230 <col:30> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fbba88941f8 <col:30> 'int' lvalue ParmVar 0x7fbba8892070 'stopx2' 'int'
|       | |-CompoundAssignOperator 0x7fbba88942c0 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|       | | |-DeclRefExpr 0x7fbba8894268 <col:38> 'int' lvalue Var 0x7fbba8893bb0 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7fbba88942a8 <col:43> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fbba8894288 <col:43> 'int' lvalue ParmVar 0x7fbba88920f0 'stepx2' 'int'
|       | `-CompoundStmt 0x7fbba8894a10 <col:52, line:22:9>
|       |   |-BinaryOperator 0x7fbba8894850 <line:19:6, col:38> 'double' '='
|       |   | |-ArraySubscriptExpr 0x7fbba88943d0 <col:6, col:14> 'double' lvalue
|       |   | | |-ImplicitCastExpr 0x7fbba88943a0 <col:6, col:10> 'double *' <ArrayToPointerDecay>
|       |   | | | `-ArraySubscriptExpr 0x7fbba8894360 <col:6, col:10> 'double [mz]' lvalue
|       |   | | |   |-ImplicitCastExpr 0x7fbba8894330 <col:6> 'double (*)[mz]':'double (*)[mz]' <LValueToRValue>
|       |   | | |   | `-DeclRefExpr 0x7fbba88942f0 <col:6> 'double (*)[mz]':'double (*)[mz]' lvalue ParmVar 0x7fbba8891df0 'z' 'double (*)[mz]':'double (*)[mz]'
|       |   | | |   `-ImplicitCastExpr 0x7fbba8894348 <col:8> 'int' <LValueToRValue>
|       |   | | |     `-DeclRefExpr 0x7fbba8894310 <col:8> 'int' lvalue Var 0x7fbba8893d30 'iz' 'int'
|       |   | | `-ImplicitCastExpr 0x7fbba88943b8 <col:12> 'int' <LValueToRValue>
|       |   | |   `-DeclRefExpr 0x7fbba8894380 <col:12> 'int' lvalue Var 0x7fbba8893db0 'jz' 'int'
|       |   | `-CallExpr 0x7fbba88947f0 <col:18, col:38> 'double'
|       |   |   |-ImplicitCastExpr 0x7fbba88947d8 <col:18> 'double (*)(double, double)' <FunctionToPointerDecay>
|       |   |   | `-DeclRefExpr 0x7fbba8894600 <col:18> 'double (double, double)' Function 0x7fbba8894428 'pow' 'double (double, double)'
|       |   |   |-ImplicitCastExpr 0x7fbba8894820 <col:22, col:30> 'double' <LValueToRValue>
|       |   |   | `-ArraySubscriptExpr 0x7fbba8894700 <col:22, col:30> 'double' lvalue
|       |   |   |   |-ImplicitCastExpr 0x7fbba88946d0 <col:22, col:26> 'double *' <ArrayToPointerDecay>
|       |   |   |   | `-ArraySubscriptExpr 0x7fbba8894690 <col:22, col:26> 'double [mx]' lvalue
|       |   |   |   |   |-ImplicitCastExpr 0x7fbba8894660 <col:22> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
|       |   |   |   |   | `-DeclRefExpr 0x7fbba8894620 <col:22> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7fbba8891a70 'x' 'double (*)[mx]':'double (*)[mx]'
|       |   |   |   |   `-ImplicitCastExpr 0x7fbba8894678 <col:24> 'int' <LValueToRValue>
|       |   |   |   |     `-DeclRefExpr 0x7fbba8894640 <col:24> 'int' lvalue Var 0x7fbba8893b30 'ix' 'int'
|       |   |   |   `-ImplicitCastExpr 0x7fbba88946e8 <col:28> 'int' <LValueToRValue>
|       |   |   |     `-DeclRefExpr 0x7fbba88946b0 <col:28> 'int' lvalue Var 0x7fbba8893bb0 'jx' 'int'
|       |   |   `-ImplicitCastExpr 0x7fbba8894838 <col:33, col:37> 'double' <LValueToRValue>
|       |   |     `-ArraySubscriptExpr 0x7fbba8894790 <col:33, col:37> 'double' lvalue
|       |   |       |-ImplicitCastExpr 0x7fbba8894760 <col:33> 'double *':'double *' <LValueToRValue>
|       |   |       | `-DeclRefExpr 0x7fbba8894720 <col:33> 'double *':'double *' lvalue ParmVar 0x7fbba8891bf0 'y' 'double *':'double *'
|       |   |       `-ImplicitCastExpr 0x7fbba8894778 <col:35> 'int' <LValueToRValue>
|       |   |         `-DeclRefExpr 0x7fbba8894740 <col:35> 'int' lvalue Var 0x7fbba8893cb0 'jy' 'int'
|       |   |-BinaryOperator 0x7fbba8894920 <line:20:6, col:16> 'int' '='
|       |   | |-DeclRefExpr 0x7fbba8894870 <col:6> 'int' lvalue Var 0x7fbba8893cb0 'jy' 'int'
|       |   | `-BinaryOperator 0x7fbba8894900 <col:11, col:16> 'int' '+'
|       |   |   |-ImplicitCastExpr 0x7fbba88948d0 <col:11> 'int' <LValueToRValue>
|       |   |   | `-DeclRefExpr 0x7fbba8894890 <col:11> 'int' lvalue Var 0x7fbba8893cb0 'jy' 'int'
|       |   |   `-ImplicitCastExpr 0x7fbba88948e8 <col:16> 'int' <LValueToRValue>
|       |   |     `-DeclRefExpr 0x7fbba88948b0 <col:16> 'int' lvalue ParmVar 0x7fbba8892270 'stepy' 'int'
|       |   `-BinaryOperator 0x7fbba88949f0 <line:21:6, col:16> 'int' '='
|       |     |-DeclRefExpr 0x7fbba8894940 <col:6> 'int' lvalue Var 0x7fbba8893db0 'jz' 'int'
|       |     `-BinaryOperator 0x7fbba88949d0 <col:11, col:16> 'int' '+'
|       |       |-ImplicitCastExpr 0x7fbba88949a0 <col:11> 'int' <LValueToRValue>
|       |       | `-DeclRefExpr 0x7fbba8894960 <col:11> 'int' lvalue Var 0x7fbba8893db0 'jz' 'int'
|       |       `-ImplicitCastExpr 0x7fbba88949b8 <col:16> 'int' <LValueToRValue>
|       |         `-DeclRefExpr 0x7fbba8894980 <col:16> 'int' lvalue ParmVar 0x7fbba8892570 'stepz2' 'int'
|       `-BinaryOperator 0x7fbba8894b20 <line:23:9, col:19> 'int' '='
|         |-DeclRefExpr 0x7fbba8894a70 <col:9> 'int' lvalue Var 0x7fbba8893d30 'iz' 'int'
|         `-BinaryOperator 0x7fbba8894b00 <col:14, col:19> 'int' '+'
|           |-ImplicitCastExpr 0x7fbba8894ad0 <col:14> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x7fbba8894a90 <col:14> 'int' lvalue Var 0x7fbba8893d30 'iz' 'int'
|           `-ImplicitCastExpr 0x7fbba8894ae8 <col:19> 'int' <LValueToRValue>
|             `-DeclRefExpr 0x7fbba8894ab0 <col:19> 'int' lvalue ParmVar 0x7fbba88923f0 'stepz1' 'int'
`-FunctionDecl 0x7fbba8894428 <line:19:18> col:18 implicit used pow 'double (double, double)' extern
  |-ParmVarDecl 0x7fbba88944c8 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x7fbba8894530 <<invalid sloc>> <invalid sloc> 'double'
  |-ConstAttr 0x7fbba88945a8 <col:18> Implicit
  `-NoThrowAttr 0x7fbba88945e8 <col:18> Implicit
