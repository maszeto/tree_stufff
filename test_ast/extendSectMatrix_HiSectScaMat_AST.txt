TranslationUnitDecl 0x7f82f9838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f82f98394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f82f98391a0 '__int128'
|-TypedefDecl 0x7f82f9839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f82f98391c0 'unsigned __int128'
|-TypedefDecl 0x7f82f98397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f82f98395f0 'struct __NSConstantString_tag'
|   `-Record 0x7f82f9839568 '__NSConstantString_tag'
|-TypedefDecl 0x7f82f9839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f82f9839850 'char *'
|   `-BuiltinType 0x7f82f9838ca0 'char'
|-TypedefDecl 0x7f82f9839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f82f9839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f82f9839970 'struct __va_list_tag'
|     `-Record 0x7f82f98398e8 '__va_list_tag'
|-TypedefDecl 0x7f82fa02f200 <./tree_src/extendSectMatrix_HiSectScaMat.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7f82f9838d60 'unsigned char'
|-FunctionDecl 0x7f82fa031200 <line:6:1, line:22:1> line:6:6 HiSectScaMat 'void (int, int, int, int, double, double (*)[my], double (*)[mz], int, int, int, int, int, int, int, int, int, int, int, int)'
| |-ParmVarDecl 0x7f82fa02f270 <line:7:5, col:9> col:9 used ny 'int'
| |-ParmVarDecl 0x7f82fa02f2f0 <col:13, col:17> col:17 used my 'int'
| |-ParmVarDecl 0x7f82fa02f370 <col:21, col:25> col:25 used nz 'int'
| |-ParmVarDecl 0x7f82fa02f3f0 <col:29, col:33> col:33 used mz 'int'
| |-ParmVarDecl 0x7f82fa02f470 <line:8:5, col:12> col:12 used x 'double'
| |-ParmVarDecl 0x7f82fa02f670 <col:15, col:30> col:22 used y 'double (*)[my]':'double (*)[my]'
| |-ParmVarDecl 0x7f82fa02f870 <col:33, col:48> col:40 used z 'double (*)[mz]':'double (*)[mz]'
| |-ParmVarDecl 0x7f82fa02f8f0 <line:9:5, col:9> col:9 used starty1 'int'
| |-ParmVarDecl 0x7f82fa02f970 <col:18, col:22> col:22 used stopy1 'int'
| |-ParmVarDecl 0x7f82fa02f9f0 <col:30, col:34> col:34 used stepy1 'int'
| |-ParmVarDecl 0x7f82fa02fa70 <col:42, col:46> col:46 used starty2 'int'
| |-ParmVarDecl 0x7f82fa02faf0 <col:55, col:59> col:59 used stopy2 'int'
| |-ParmVarDecl 0x7f82fa02fb70 <col:67, col:71> col:71 used stepy2 'int'
| |-ParmVarDecl 0x7f82fa02fbf0 <line:10:5, col:9> col:9 used startz1 'int'
| |-ParmVarDecl 0x7f82fa02fc70 <col:18, col:22> col:22 stopz1 'int'
| |-ParmVarDecl 0x7f82fa02fcf0 <col:30, col:34> col:34 used stepz1 'int'
| |-ParmVarDecl 0x7f82fa02fd70 <col:42, col:46> col:46 used startz2 'int'
| |-ParmVarDecl 0x7f82fa02fdf0 <col:55, col:59> col:59 stopz2 'int'
| |-ParmVarDecl 0x7f82fa02fe70 <col:67, col:71> col:71 used stepz2 'int'
| `-CompoundStmt 0x7f82fa032168 <col:80, line:22:1>
|   |-DeclStmt 0x7f82fa0315a8 <line:12:5, col:23>
|   | |-VarDecl 0x7f82fa031398 <col:5, col:9> col:9 used iy 'int'
|   | |-VarDecl 0x7f82fa031418 <col:5, col:13> col:13 used jy 'int'
|   | |-VarDecl 0x7f82fa031498 <col:5, col:17> col:17 used iz 'int'
|   | `-VarDecl 0x7f82fa031518 <col:5, col:21> col:21 used jz 'int'
|   |-BinaryOperator 0x7f82fa031618 <line:13:5, col:10> 'int' '='
|   | |-DeclRefExpr 0x7f82fa0315c0 <col:5> 'int' lvalue Var 0x7f82fa031498 'iz' 'int'
|   | `-ImplicitCastExpr 0x7f82fa031600 <col:10> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7f82fa0315e0 <col:10> 'int' lvalue ParmVar 0x7f82fa02fbf0 'startz1' 'int'
|   `-ForStmt 0x7f82fa032130 <line:14:5, line:21:5>
|     |-BinaryOperator 0x7f82fa031690 <line:14:10, col:14> 'int' '='
|     | |-DeclRefExpr 0x7f82fa031638 <col:10> 'int' lvalue Var 0x7f82fa031398 'iy' 'int'
|     | `-ImplicitCastExpr 0x7f82fa031678 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7f82fa031658 <col:14> 'int' lvalue ParmVar 0x7f82fa02f8f0 'starty1' 'int'
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7f82fa031720 <col:23, col:26> 'int' '<'
|     | |-ImplicitCastExpr 0x7f82fa0316f0 <col:23> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7f82fa0316b0 <col:23> 'int' lvalue Var 0x7f82fa031398 'iy' 'int'
|     | `-ImplicitCastExpr 0x7f82fa031708 <col:26> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7f82fa0316d0 <col:26> 'int' lvalue ParmVar 0x7f82fa02f970 'stopy1' 'int'
|     |-CompoundAssignOperator 0x7f82fa031798 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     | |-DeclRefExpr 0x7f82fa031740 <col:34> 'int' lvalue Var 0x7f82fa031398 'iy' 'int'
|     | `-ImplicitCastExpr 0x7f82fa031780 <col:39> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7f82fa031760 <col:39> 'int' lvalue ParmVar 0x7f82fa02f9f0 'stepy1' 'int'
|     `-CompoundStmt 0x7f82fa032108 <col:48, line:21:5>
|       |-BinaryOperator 0x7f82fa031820 <line:15:9, col:14> 'int' '='
|       | |-DeclRefExpr 0x7f82fa0317c8 <col:9> 'int' lvalue Var 0x7f82fa031518 'jz' 'int'
|       | `-ImplicitCastExpr 0x7f82fa031808 <col:14> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x7f82fa0317e8 <col:14> 'int' lvalue ParmVar 0x7f82fa02fd70 'startz2' 'int'
|       |-ForStmt 0x7f82fa032000 <line:16:9, line:19:9>
|       | |-BinaryOperator 0x7f82fa031898 <line:16:14, col:18> 'int' '='
|       | | |-DeclRefExpr 0x7f82fa031840 <col:14> 'int' lvalue Var 0x7f82fa031418 'jy' 'int'
|       | | `-ImplicitCastExpr 0x7f82fa031880 <col:18> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7f82fa031860 <col:18> 'int' lvalue ParmVar 0x7f82fa02fa70 'starty2' 'int'
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x7f82fa031928 <col:27, col:30> 'int' '<'
|       | | |-ImplicitCastExpr 0x7f82fa0318f8 <col:27> 'int' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7f82fa0318b8 <col:27> 'int' lvalue Var 0x7f82fa031418 'jy' 'int'
|       | | `-ImplicitCastExpr 0x7f82fa031910 <col:30> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7f82fa0318d8 <col:30> 'int' lvalue ParmVar 0x7f82fa02faf0 'stopy2' 'int'
|       | |-CompoundAssignOperator 0x7f82fa0319a0 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|       | | |-DeclRefExpr 0x7f82fa031948 <col:38> 'int' lvalue Var 0x7f82fa031418 'jy' 'int'
|       | | `-ImplicitCastExpr 0x7f82fa031988 <col:43> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7f82fa031968 <col:43> 'int' lvalue ParmVar 0x7f82fa02fb70 'stepy2' 'int'
|       | `-CompoundStmt 0x7f82fa031fe0 <col:52, line:19:9>
|       |   |-BinaryOperator 0x7f82fa031ef0 <line:17:6, col:34> 'double' '='
|       |   | |-ArraySubscriptExpr 0x7f82fa031ad8 <col:6, col:14> 'double' lvalue
|       |   | | |-ImplicitCastExpr 0x7f82fa031aa8 <col:6, col:10> 'double *' <ArrayToPointerDecay>
|       |   | | | `-ArraySubscriptExpr 0x7f82fa031a40 <col:6, col:10> 'double [mz]' lvalue
|       |   | | |   |-ImplicitCastExpr 0x7f82fa031a10 <col:6> 'double (*)[mz]':'double (*)[mz]' <LValueToRValue>
|       |   | | |   | `-DeclRefExpr 0x7f82fa0319d0 <col:6> 'double (*)[mz]':'double (*)[mz]' lvalue ParmVar 0x7f82fa02f870 'z' 'double (*)[mz]':'double (*)[mz]'
|       |   | | |   `-ImplicitCastExpr 0x7f82fa031a28 <col:8> 'int' <LValueToRValue>
|       |   | | |     `-DeclRefExpr 0x7f82fa0319f0 <col:8> 'int' lvalue Var 0x7f82fa031498 'iz' 'int'
|       |   | | `-ImplicitCastExpr 0x7f82fa031ac0 <col:12> 'int' <LValueToRValue>
|       |   | |   `-DeclRefExpr 0x7f82fa031a60 <col:12> 'int' lvalue Var 0x7f82fa031518 'jz' 'int'
|       |   | `-CallExpr 0x7f82fa031e90 <col:18, col:34> 'double'
|       |   |   |-ImplicitCastExpr 0x7f82fa031e78 <col:18> 'double (*)(double, double)' <FunctionToPointerDecay>
|       |   |   | `-DeclRefExpr 0x7f82fa031d08 <col:18> 'double (double, double)' Function 0x7f82fa031b38 'fmax' 'double (double, double)'
|       |   |   |-ImplicitCastExpr 0x7f82fa031ec0 <col:23> 'double' <LValueToRValue>
|       |   |   | `-DeclRefExpr 0x7f82fa031d28 <col:23> 'double' lvalue ParmVar 0x7f82fa02f470 'x' 'double'
|       |   |   `-ImplicitCastExpr 0x7f82fa031ed8 <col:25, col:33> 'double' <LValueToRValue>
|       |   |     `-ArraySubscriptExpr 0x7f82fa031e28 <col:25, col:33> 'double' lvalue
|       |   |       |-ImplicitCastExpr 0x7f82fa031df8 <col:25, col:29> 'double *' <ArrayToPointerDecay>
|       |   |       | `-ArraySubscriptExpr 0x7f82fa031db8 <col:25, col:29> 'double [my]' lvalue
|       |   |       |   |-ImplicitCastExpr 0x7f82fa031d88 <col:25> 'double (*)[my]':'double (*)[my]' <LValueToRValue>
|       |   |       |   | `-DeclRefExpr 0x7f82fa031d48 <col:25> 'double (*)[my]':'double (*)[my]' lvalue ParmVar 0x7f82fa02f670 'y' 'double (*)[my]':'double (*)[my]'
|       |   |       |   `-ImplicitCastExpr 0x7f82fa031da0 <col:27> 'int' <LValueToRValue>
|       |   |       |     `-DeclRefExpr 0x7f82fa031d68 <col:27> 'int' lvalue Var 0x7f82fa031398 'iy' 'int'
|       |   |       `-ImplicitCastExpr 0x7f82fa031e10 <col:31> 'int' <LValueToRValue>
|       |   |         `-DeclRefExpr 0x7f82fa031dd8 <col:31> 'int' lvalue Var 0x7f82fa031418 'jy' 'int'
|       |   `-BinaryOperator 0x7f82fa031fc0 <line:18:6, col:16> 'int' '='
|       |     |-DeclRefExpr 0x7f82fa031f10 <col:6> 'int' lvalue Var 0x7f82fa031518 'jz' 'int'
|       |     `-BinaryOperator 0x7f82fa031fa0 <col:11, col:16> 'int' '+'
|       |       |-ImplicitCastExpr 0x7f82fa031f70 <col:11> 'int' <LValueToRValue>
|       |       | `-DeclRefExpr 0x7f82fa031f30 <col:11> 'int' lvalue Var 0x7f82fa031518 'jz' 'int'
|       |       `-ImplicitCastExpr 0x7f82fa031f88 <col:16> 'int' <LValueToRValue>
|       |         `-DeclRefExpr 0x7f82fa031f50 <col:16> 'int' lvalue ParmVar 0x7f82fa02fe70 'stepz2' 'int'
|       `-BinaryOperator 0x7f82fa0320e8 <line:20:9, col:19> 'int' '='
|         |-DeclRefExpr 0x7f82fa032038 <col:9> 'int' lvalue Var 0x7f82fa031498 'iz' 'int'
|         `-BinaryOperator 0x7f82fa0320c8 <col:14, col:19> 'int' '+'
|           |-ImplicitCastExpr 0x7f82fa032098 <col:14> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x7f82fa032058 <col:14> 'int' lvalue Var 0x7f82fa031498 'iz' 'int'
|           `-ImplicitCastExpr 0x7f82fa0320b0 <col:19> 'int' <LValueToRValue>
|             `-DeclRefExpr 0x7f82fa032078 <col:19> 'int' lvalue ParmVar 0x7f82fa02fcf0 'stepz1' 'int'
`-FunctionDecl 0x7f82fa031b38 <line:17:18> col:18 implicit used fmax 'double (double, double)' extern
  |-ParmVarDecl 0x7f82fa031bd8 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x7f82fa031c40 <<invalid sloc>> <invalid sloc> 'double'
  |-NoThrowAttr 0x7f82fa031cb8 <col:18> Implicit
  `-ConstAttr 0x7f82fa031cf8 <col:18> Implicit
