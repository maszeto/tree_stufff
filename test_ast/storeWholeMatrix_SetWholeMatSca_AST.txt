TranslationUnitDecl 0x7fcf6f038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fcf6f0394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fcf6f0391a0 '__int128'
|-TypedefDecl 0x7fcf6f039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fcf6f0391c0 'unsigned __int128'
|-TypedefDecl 0x7fcf6f0397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fcf6f0395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fcf6f039568 '__NSConstantString_tag'
|-TypedefDecl 0x7fcf6f039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fcf6f039850 'char *'
|   `-BuiltinType 0x7fcf6f038ca0 'char'
|-TypedefDecl 0x7fcf6f039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fcf6f039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fcf6f039970 'struct __va_list_tag'
|     `-Record 0x7fcf6f0398e8 '__va_list_tag'
`-FunctionDecl 0x7fcf6f82e6b8 <./tree_src/storeWholeMatrix_SetWholeMatSca.c:3:1, line:12:1> line:3:6 SetWholeMatSca 'void (int, int, double, double (*)[m])'
  |-ParmVarDecl 0x7fcf6f82e200 <line:4:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7fcf6f82e280 <col:12, col:16> col:16 used m 'int'
  |-ParmVarDecl 0x7fcf6f82e300 <col:19, col:26> col:26 used x 'double'
  |-ParmVarDecl 0x7fcf6f82e500 <col:29, col:42> col:36 used z 'double (*)[m]':'double (*)[m]'
  `-CompoundStmt 0x7fcf6f82ed78 <col:46, line:12:1>
    |-DeclStmt 0x7fcf6f82e8d8 <line:6:5, col:13>
    | |-VarDecl 0x7fcf6f82e7d8 <col:5, col:9> col:9 used i 'int'
    | `-VarDecl 0x7fcf6f82e858 <col:5, col:12> col:12 used j 'int'
    `-ForStmt 0x7fcf6f82ed40 <line:7:5, line:11:5>
      |-BinaryOperator 0x7fcf6f82e930 <line:7:10, col:13> 'int' '='
      | |-DeclRefExpr 0x7fcf6f82e8f0 <col:10> 'int' lvalue Var 0x7fcf6f82e7d8 'i' 'int'
      | `-IntegerLiteral 0x7fcf6f82e910 <col:13> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x7fcf6f82e9c0 <col:16, col:18> 'int' '<'
      | |-ImplicitCastExpr 0x7fcf6f82e990 <col:16> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fcf6f82e950 <col:16> 'int' lvalue Var 0x7fcf6f82e7d8 'i' 'int'
      | `-ImplicitCastExpr 0x7fcf6f82e9a8 <col:18> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fcf6f82e970 <col:18> 'int' lvalue ParmVar 0x7fcf6f82e200 'n' 'int'
      |-UnaryOperator 0x7fcf6f82ea00 <col:21, col:22> 'int' postfix '++'
      | `-DeclRefExpr 0x7fcf6f82e9e0 <col:21> 'int' lvalue Var 0x7fcf6f82e7d8 'i' 'int'
      `-CompoundStmt 0x7fcf6f82ed20 <col:26, line:11:5>
        |-NullStmt 0x7fcf6f82ea18 <line:7:27>
        `-ForStmt 0x7fcf6f82ece8 <line:8:9, line:10:9>
          |-BinaryOperator 0x7fcf6f82ea60 <line:8:14, col:17> 'int' '='
          | |-DeclRefExpr 0x7fcf6f82ea20 <col:14> 'int' lvalue Var 0x7fcf6f82e858 'j' 'int'
          | `-IntegerLiteral 0x7fcf6f82ea40 <col:17> 'int' 0
          |-<<<NULL>>>
          |-BinaryOperator 0x7fcf6f82eaf0 <col:20, col:22> 'int' '<'
          | |-ImplicitCastExpr 0x7fcf6f82eac0 <col:20> 'int' <LValueToRValue>
          | | `-DeclRefExpr 0x7fcf6f82ea80 <col:20> 'int' lvalue Var 0x7fcf6f82e858 'j' 'int'
          | `-ImplicitCastExpr 0x7fcf6f82ead8 <col:22> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x7fcf6f82eaa0 <col:22> 'int' lvalue ParmVar 0x7fcf6f82e280 'm' 'int'
          |-UnaryOperator 0x7fcf6f82eb30 <col:25, col:26> 'int' postfix '++'
          | `-DeclRefExpr 0x7fcf6f82eb10 <col:25> 'int' lvalue Var 0x7fcf6f82e858 'j' 'int'
          `-CompoundStmt 0x7fcf6f82ecd0 <col:31, line:10:9>
            `-BinaryOperator 0x7fcf6f82ecb0 <line:9:13, col:23> 'double' '='
              |-ArraySubscriptExpr 0x7fcf6f82ec58 <col:13, col:19> 'double' lvalue
              | |-ImplicitCastExpr 0x7fcf6f82ec28 <col:13, col:16> 'double *' <ArrayToPointerDecay>
              | | `-ArraySubscriptExpr 0x7fcf6f82ebb8 <col:13, col:16> 'double [m]' lvalue
              | |   |-ImplicitCastExpr 0x7fcf6f82eb88 <col:13> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
              | |   | `-DeclRefExpr 0x7fcf6f82eb48 <col:13> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fcf6f82e500 'z' 'double (*)[m]':'double (*)[m]'
              | |   `-ImplicitCastExpr 0x7fcf6f82eba0 <col:15> 'int' <LValueToRValue>
              | |     `-DeclRefExpr 0x7fcf6f82eb68 <col:15> 'int' lvalue Var 0x7fcf6f82e7d8 'i' 'int'
              | `-ImplicitCastExpr 0x7fcf6f82ec40 <col:18> 'int' <LValueToRValue>
              |   `-DeclRefExpr 0x7fcf6f82ebd8 <col:18> 'int' lvalue Var 0x7fcf6f82e858 'j' 'int'
              `-ImplicitCastExpr 0x7fcf6f82ec98 <col:23> 'double' <LValueToRValue>
                `-DeclRefExpr 0x7fcf6f82ec78 <col:23> 'double' lvalue ParmVar 0x7fcf6f82e300 'x' 'double'
