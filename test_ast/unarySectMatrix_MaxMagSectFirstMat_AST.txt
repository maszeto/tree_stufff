TranslationUnitDecl 0x7ff38e838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7ff38e8394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7ff38e8391a0 '__int128'
|-TypedefDecl 0x7ff38e839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7ff38e8391c0 'unsigned __int128'
|-TypedefDecl 0x7ff38e8397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7ff38e8395f0 'struct __NSConstantString_tag'
|   `-Record 0x7ff38e839568 '__NSConstantString_tag'
|-TypedefDecl 0x7ff38e839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7ff38e839850 'char *'
|   `-BuiltinType 0x7ff38e838ca0 'char'
|-TypedefDecl 0x7ff38e839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7ff38e839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7ff38e839970 'struct __va_list_tag'
|     `-Record 0x7ff38e8398e8 '__va_list_tag'
|-TypedefDecl 0x7ff38f812c00 <./tree_src/unarySectMatrix_MaxMagSectFirstMat.c:4:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7ff38e838d60 'unsigned char'
|-FunctionDecl 0x7ff38f813818 <line:12:1, line:28:1> line:12:6 MaxMagSectFirstMat 'void (int, int, int, double (*)[mx], double *, int, int, int, int, int, int, int, int, int)'
| |-ParmVarDecl 0x7ff38f812c70 <line:13:5, col:9> col:9 used nx 'int'
| |-ParmVarDecl 0x7ff38f812cf0 <col:13, col:17> col:17 used mx 'int'
| |-ParmVarDecl 0x7ff38f812d70 <col:21, col:25> col:25 used nz 'int'
| |-ParmVarDecl 0x7ff38f812f70 <col:29, col:44> col:36 used x 'double (*)[mx]':'double (*)[mx]'
| |-ParmVarDecl 0x7ff38f8130f0 <col:47, col:58> col:54 used z 'double *':'double *'
| |-ParmVarDecl 0x7ff38f813170 <line:14:5, col:9> col:9 used startx1 'int'
| |-ParmVarDecl 0x7ff38f8131f0 <col:18, col:22> col:22 used stopx1 'int'
| |-ParmVarDecl 0x7ff38f813270 <col:30, col:34> col:34 used stepx1 'int'
| |-ParmVarDecl 0x7ff38f8132f0 <col:42, col:46> col:46 used startx2 'int'
| |-ParmVarDecl 0x7ff38f813370 <col:55, col:59> col:59 used stopx2 'int'
| |-ParmVarDecl 0x7ff38f8133f0 <col:67, col:71> col:71 used stepx2 'int'
| |-ParmVarDecl 0x7ff38f813470 <line:15:5, col:9> col:9 used startz 'int'
| |-ParmVarDecl 0x7ff38f8134f0 <col:17, col:21> col:21 stopz 'int'
| |-ParmVarDecl 0x7ff38f813570 <col:28, col:32> col:32 used stepz 'int'
| `-CompoundStmt 0x7ff38f816de8 <col:40, line:28:1>
|   |-DeclStmt 0x7ff38f813b10 <line:17:5, col:19>
|   | |-VarDecl 0x7ff38f813988 <col:5, col:9> col:9 used ix 'int'
|   | |-VarDecl 0x7ff38f813a08 <col:5, col:13> col:13 used jx 'int'
|   | `-VarDecl 0x7ff38f813a88 <col:5, col:17> col:17 used iz 'int'
|   |-DeclStmt 0x7ff38f813ba8 <line:18:5, col:15>
|   | `-VarDecl 0x7ff38f813b40 <col:5, col:12> col:12 used val 'double'
|   |-BinaryOperator 0x7ff38f816218 <line:19:5, col:10> 'int' '='
|   | |-DeclRefExpr 0x7ff38f813bc0 <col:5> 'int' lvalue Var 0x7ff38f813a88 'iz' 'int'
|   | `-ImplicitCastExpr 0x7ff38f816200 <col:10> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7ff38f813be0 <col:10> 'int' lvalue ParmVar 0x7ff38f813470 'startz' 'int'
|   `-ForStmt 0x7ff38f816db0 <line:20:5, line:27:5>
|     |-BinaryOperator 0x7ff38f816290 <line:20:10, col:14> 'int' '='
|     | |-DeclRefExpr 0x7ff38f816238 <col:10> 'int' lvalue Var 0x7ff38f813988 'ix' 'int'
|     | `-ImplicitCastExpr 0x7ff38f816278 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7ff38f816258 <col:14> 'int' lvalue ParmVar 0x7ff38f813170 'startx1' 'int'
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7ff38f816320 <col:23, col:26> 'int' '<'
|     | |-ImplicitCastExpr 0x7ff38f8162f0 <col:23> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7ff38f8162b0 <col:23> 'int' lvalue Var 0x7ff38f813988 'ix' 'int'
|     | `-ImplicitCastExpr 0x7ff38f816308 <col:26> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7ff38f8162d0 <col:26> 'int' lvalue ParmVar 0x7ff38f8131f0 'stopx1' 'int'
|     |-CompoundAssignOperator 0x7ff38f816398 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     | |-DeclRefExpr 0x7ff38f816340 <col:34> 'int' lvalue Var 0x7ff38f813988 'ix' 'int'
|     | `-ImplicitCastExpr 0x7ff38f816380 <col:39> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7ff38f816360 <col:39> 'int' lvalue ParmVar 0x7ff38f813270 'stepx1' 'int'
|     `-CompoundStmt 0x7ff38f816d88 <col:48, line:27:5>
|       |-ForStmt 0x7ff38f816be0 <line:22:9, line:24:9>
|       | |-BinaryOperator 0x7ff38f816440 <line:22:14, col:18> 'int' '='
|       | | |-DeclRefExpr 0x7ff38f8163e8 <col:14> 'int' lvalue Var 0x7ff38f813a08 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7ff38f816428 <col:18> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7ff38f816408 <col:18> 'int' lvalue ParmVar 0x7ff38f8132f0 'startx2' 'int'
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x7ff38f8164d0 <col:27, col:30> 'int' '<'
|       | | |-ImplicitCastExpr 0x7ff38f8164a0 <col:27> 'int' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7ff38f816460 <col:27> 'int' lvalue Var 0x7ff38f813a08 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7ff38f8164b8 <col:30> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7ff38f816480 <col:30> 'int' lvalue ParmVar 0x7ff38f813370 'stopx2' 'int'
|       | |-CompoundAssignOperator 0x7ff38f816548 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|       | | |-DeclRefExpr 0x7ff38f8164f0 <col:38> 'int' lvalue Var 0x7ff38f813a08 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7ff38f816530 <col:43> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7ff38f816510 <col:43> 'int' lvalue ParmVar 0x7ff38f8133f0 'stepx2' 'int'
|       | `-CompoundStmt 0x7ff38f816bc8 <col:52, line:24:9>
|       |   `-BinaryOperator 0x7ff38f816ba8 <line:23:13, col:46> 'double' '='
|       |     |-DeclRefExpr 0x7ff38f816578 <col:13> 'double' lvalue Var 0x7ff38f813b40 'val' 'double'
|       |     `-CallExpr 0x7ff38f816b60 <col:19, col:46> 'double'
|       |       |-ImplicitCastExpr 0x7ff38f816b48 <col:19> 'double (*)(double, double)' <FunctionToPointerDecay>
|       |       | `-DeclRefExpr 0x7ff38f8167a8 <col:19> 'double (double, double)' Function 0x7ff38f8165d8 'fmax' 'double (double, double)'
|       |       |-ImplicitCastExpr 0x7ff38f816b90 <col:25> 'double' <LValueToRValue>
|       |       | `-DeclRefExpr 0x7ff38f8167c8 <col:25> 'double' lvalue Var 0x7ff38f813b40 'val' 'double'
|       |       `-CallExpr 0x7ff38f816ae0 <col:30, col:45> 'double'
|       |         |-ImplicitCastExpr 0x7ff38f816ac8 <col:30> 'double (*)(double)' <FunctionToPointerDecay>
|       |         | `-DeclRefExpr 0x7ff38f816980 <col:30> 'double (double)' Function 0x7ff38f816820 'fabs' 'double (double)'
|       |         `-ImplicitCastExpr 0x7ff38f816b08 <col:36, col:44> 'double' <LValueToRValue>
|       |           `-ArraySubscriptExpr 0x7ff38f816a80 <col:36, col:44> 'double' lvalue
|       |             |-ImplicitCastExpr 0x7ff38f816a50 <col:36, col:40> 'double *' <ArrayToPointerDecay>
|       |             | `-ArraySubscriptExpr 0x7ff38f816a10 <col:36, col:40> 'double [mx]' lvalue
|       |             |   |-ImplicitCastExpr 0x7ff38f8169e0 <col:36> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
|       |             |   | `-DeclRefExpr 0x7ff38f8169a0 <col:36> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7ff38f812f70 'x' 'double (*)[mx]':'double (*)[mx]'
|       |             |   `-ImplicitCastExpr 0x7ff38f8169f8 <col:38> 'int' <LValueToRValue>
|       |             |     `-DeclRefExpr 0x7ff38f8169c0 <col:38> 'int' lvalue Var 0x7ff38f813a08 'jx' 'int'
|       |             `-ImplicitCastExpr 0x7ff38f816a68 <col:42> 'int' <LValueToRValue>
|       |               `-DeclRefExpr 0x7ff38f816a30 <col:42> 'int' lvalue Var 0x7ff38f813988 'ix' 'int'
|       |-BinaryOperator 0x7ff38f816ce0 <line:25:9, col:17> 'double' '='
|       | |-ArraySubscriptExpr 0x7ff38f816c88 <col:9, col:13> 'double' lvalue
|       | | |-ImplicitCastExpr 0x7ff38f816c58 <col:9> 'double *':'double *' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7ff38f816c18 <col:9> 'double *':'double *' lvalue ParmVar 0x7ff38f8130f0 'z' 'double *':'double *'
|       | | `-ImplicitCastExpr 0x7ff38f816c70 <col:11> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7ff38f816c38 <col:11> 'int' lvalue Var 0x7ff38f813a88 'iz' 'int'
|       | `-ImplicitCastExpr 0x7ff38f816cc8 <col:17> 'double' <LValueToRValue>
|       |   `-DeclRefExpr 0x7ff38f816ca8 <col:17> 'double' lvalue Var 0x7ff38f813b40 'val' 'double'
|       `-CompoundAssignOperator 0x7ff38f816d58 <line:26:9, col:15> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|         |-DeclRefExpr 0x7ff38f816d00 <col:9> 'int' lvalue Var 0x7ff38f813a88 'iz' 'int'
|         `-ImplicitCastExpr 0x7ff38f816d40 <col:15> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x7ff38f816d20 <col:15> 'int' lvalue ParmVar 0x7ff38f813570 'stepz' 'int'
|-FunctionDecl 0x7ff38f8165d8 <line:23:19> col:19 implicit used fmax 'double (double, double)' extern
| |-ParmVarDecl 0x7ff38f816678 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x7ff38f8166e0 <<invalid sloc>> <invalid sloc> 'double'
| |-NoThrowAttr 0x7ff38f816758 <col:19> Implicit
| `-ConstAttr 0x7ff38f816798 <col:19> Implicit
`-FunctionDecl 0x7ff38f816820 <col:30> col:30 implicit used fabs 'double (double)' extern
  |-ParmVarDecl 0x7ff38f8168c0 <<invalid sloc>> <invalid sloc> 'double'
  |-NoThrowAttr 0x7ff38f816930 <col:30> Implicit
  `-ConstAttr 0x7ff38f816970 <col:30> Implicit
