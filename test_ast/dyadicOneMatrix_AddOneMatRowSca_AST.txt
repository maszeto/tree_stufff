TranslationUnitDecl 0x7f91d0038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f91d00394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f91d00391a0 '__int128'
|-TypedefDecl 0x7f91d0039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f91d00391c0 'unsigned __int128'
|-TypedefDecl 0x7f91d00397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f91d00395f0 'struct __NSConstantString_tag'
|   `-Record 0x7f91d0039568 '__NSConstantString_tag'
|-TypedefDecl 0x7f91d0039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f91d0039850 'char *'
|   `-BuiltinType 0x7f91d0038ca0 'char'
|-TypedefDecl 0x7f91d0039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f91d0039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f91d0039970 'struct __va_list_tag'
|     `-Record 0x7f91d00398e8 '__va_list_tag'
|-TypedefDecl 0x7f91d0091600 <./tree_src/dyadicOneMatrix_AddOneMatRowSca.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7f91d0038d60 'unsigned char'
`-FunctionDecl 0x7f91d0091e48 <line:5:1, line:12:1> line:5:6 AddOneMatRowSca 'void (int, int, int, double (*)[m], double, double (*)[m])'
  |-ParmVarDecl 0x7f91d0091670 <line:6:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7f91d00916f0 <col:12, col:16> col:16 used m 'int'
  |-ParmVarDecl 0x7f91d0091770 <col:19, col:23> col:23 used p 'int'
  |-ParmVarDecl 0x7f91d0091970 <col:26, col:39> col:33 used x 'double (*)[m]':'double (*)[m]'
  |-ParmVarDecl 0x7f91d00919f0 <col:42, col:49> col:49 used y 'double'
  |-ParmVarDecl 0x7f91d0091bf0 <col:52, col:65> col:59 used z 'double (*)[m]':'double (*)[m]'
  `-CompoundStmt 0x7f91d00924c8 <col:69, line:12:1>
    |-DeclStmt 0x7f91d0092078 <line:8:5, col:13>
    | |-VarDecl 0x7f91d0091f78 <col:5, col:9> col:9 i 'int'
    | `-VarDecl 0x7f91d0091ff8 <col:5, col:12> col:12 used j 'int'
    `-ForStmt 0x7f91d0092490 <line:9:5, line:11:5>
      |-BinaryOperator 0x7f91d00920d0 <line:9:10, col:13> 'int' '='
      | |-DeclRefExpr 0x7f91d0092090 <col:10> 'int' lvalue Var 0x7f91d0091ff8 'j' 'int'
      | `-IntegerLiteral 0x7f91d00920b0 <col:13> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x7f91d0092160 <col:16, col:18> 'int' '<'
      | |-ImplicitCastExpr 0x7f91d0092130 <col:16> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7f91d00920f0 <col:16> 'int' lvalue Var 0x7f91d0091ff8 'j' 'int'
      | `-ImplicitCastExpr 0x7f91d0092148 <col:18> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f91d0092110 <col:18> 'int' lvalue ParmVar 0x7f91d00916f0 'm' 'int'
      |-UnaryOperator 0x7f91d00921a0 <col:21, col:22> 'int' postfix '++'
      | `-DeclRefExpr 0x7f91d0092180 <col:21> 'int' lvalue Var 0x7f91d0091ff8 'j' 'int'
      `-CompoundStmt 0x7f91d0092478 <col:27, line:11:5>
        `-BinaryOperator 0x7f91d0092458 <line:10:9, col:29> 'double' '='
          |-ArraySubscriptExpr 0x7f91d00922c8 <col:9, col:15> 'double' lvalue
          | |-ImplicitCastExpr 0x7f91d0092298 <col:9, col:12> 'double *' <ArrayToPointerDecay>
          | | `-ArraySubscriptExpr 0x7f91d0092228 <col:9, col:12> 'double [m]' lvalue
          | |   |-ImplicitCastExpr 0x7f91d00921f8 <col:9> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
          | |   | `-DeclRefExpr 0x7f91d00921b8 <col:9> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f91d0091bf0 'z' 'double (*)[m]':'double (*)[m]'
          | |   `-ImplicitCastExpr 0x7f91d0092210 <col:11> 'int' <LValueToRValue>
          | |     `-DeclRefExpr 0x7f91d00921d8 <col:11> 'int' lvalue ParmVar 0x7f91d0091770 'p' 'int'
          | `-ImplicitCastExpr 0x7f91d00922b0 <col:14> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x7f91d0092248 <col:14> 'int' lvalue Var 0x7f91d0091ff8 'j' 'int'
          `-BinaryOperator 0x7f91d0092438 <col:19, col:29> 'double' '+'
            |-ImplicitCastExpr 0x7f91d0092408 <col:19, col:25> 'double' <LValueToRValue>
            | `-ArraySubscriptExpr 0x7f91d00923c8 <col:19, col:25> 'double' lvalue
            |   |-ImplicitCastExpr 0x7f91d0092398 <col:19, col:22> 'double *' <ArrayToPointerDecay>
            |   | `-ArraySubscriptExpr 0x7f91d0092358 <col:19, col:22> 'double [m]' lvalue
            |   |   |-ImplicitCastExpr 0x7f91d0092328 <col:19> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
            |   |   | `-DeclRefExpr 0x7f91d00922e8 <col:19> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f91d0091970 'x' 'double (*)[m]':'double (*)[m]'
            |   |   `-ImplicitCastExpr 0x7f91d0092340 <col:21> 'int' <LValueToRValue>
            |   |     `-DeclRefExpr 0x7f91d0092308 <col:21> 'int' lvalue ParmVar 0x7f91d0091770 'p' 'int'
            |   `-ImplicitCastExpr 0x7f91d00923b0 <col:24> 'int' <LValueToRValue>
            |     `-DeclRefExpr 0x7f91d0092378 <col:24> 'int' lvalue Var 0x7f91d0091ff8 'j' 'int'
            `-ImplicitCastExpr 0x7f91d0092420 <col:29> 'double' <LValueToRValue>
              `-DeclRefExpr 0x7f91d00923e8 <col:29> 'double' lvalue ParmVar 0x7f91d00919f0 'y' 'double'
