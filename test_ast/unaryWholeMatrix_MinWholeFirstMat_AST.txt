TranslationUnitDecl 0x7fc7e5838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fc7e58394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fc7e58391a0 '__int128'
|-TypedefDecl 0x7fc7e5839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fc7e58391c0 'unsigned __int128'
|-TypedefDecl 0x7fc7e58397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fc7e58395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fc7e5839568 '__NSConstantString_tag'
|-TypedefDecl 0x7fc7e5839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fc7e5839850 'char *'
|   `-BuiltinType 0x7fc7e5838ca0 'char'
|-TypedefDecl 0x7fc7e5839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fc7e5839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fc7e5839970 'struct __va_list_tag'
|     `-Record 0x7fc7e58398e8 '__va_list_tag'
|-TypedefDecl 0x7fc7e602f200 <./tree_src/unaryWholeMatrix_MinWholeFirstMat.c:4:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fc7e5838d60 'unsigned char'
|-FunctionDecl 0x7fc7e602f828 <line:12:1, line:24:1> line:12:6 MinWholeFirstMat 'void (int, int, double (*)[m], double *)'
| |-ParmVarDecl 0x7fc7e602f270 <line:13:5, col:9> col:9 used n 'int'
| |-ParmVarDecl 0x7fc7e602f2f0 <col:12, col:16> col:16 used m 'int'
| |-ParmVarDecl 0x7fc7e602f4f0 <col:19, col:32> col:26 used x 'double (*)[m]':'double (*)[m]'
| |-ParmVarDecl 0x7fc7e602f670 <col:35, col:45> col:42 used z 'double *':'double *'
| `-CompoundStmt 0x7fc7e582e340 <col:49, line:24:1>
|   |-DeclStmt 0x7fc7e602fa48 <line:15:5, col:13>
|   | |-VarDecl 0x7fc7e602f948 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x7fc7e602f9c8 <col:5, col:12> col:12 used j 'int'
|   |-DeclStmt 0x7fc7e602fae0 <line:16:5, col:15>
|   | `-VarDecl 0x7fc7e602fa78 <col:5, col:12> col:12 used val 'double'
|   `-ForStmt 0x7fc7e582e308 <line:17:5, line:23:5>
|     |-BinaryOperator 0x7fc7e602fb38 <line:17:10, col:12> 'int' '='
|     | |-DeclRefExpr 0x7fc7e602faf8 <col:10> 'int' lvalue Var 0x7fc7e602f948 'i' 'int'
|     | `-IntegerLiteral 0x7fc7e602fb18 <col:12> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fc7e602fbc8 <col:15, col:17> 'int' '<'
|     | |-ImplicitCastExpr 0x7fc7e602fb98 <col:15> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fc7e602fb58 <col:15> 'int' lvalue Var 0x7fc7e602f948 'i' 'int'
|     | `-ImplicitCastExpr 0x7fc7e602fbb0 <col:17> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fc7e602fb78 <col:17> 'int' lvalue ParmVar 0x7fc7e602f270 'n' 'int'
|     |-UnaryOperator 0x7fc7e602fc08 <col:20, col:21> 'int' postfix '++'
|     | `-DeclRefExpr 0x7fc7e602fbe8 <col:20> 'int' lvalue Var 0x7fc7e602f948 'i' 'int'
|     `-CompoundStmt 0x7fc7e582e2e8 <col:26, line:23:5>
|       |-ForStmt 0x7fc7e60301b8 <line:19:9, line:21:9>
|       | |-BinaryOperator 0x7fc7e602fc80 <line:19:14, col:17> 'int' '='
|       | | |-DeclRefExpr 0x7fc7e602fc40 <col:14> 'int' lvalue Var 0x7fc7e602f9c8 'j' 'int'
|       | | `-IntegerLiteral 0x7fc7e602fc60 <col:17> 'int' 0
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x7fc7e602fd10 <col:20, col:22> 'int' '<'
|       | | |-ImplicitCastExpr 0x7fc7e602fce0 <col:20> 'int' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7fc7e602fca0 <col:20> 'int' lvalue Var 0x7fc7e602f9c8 'j' 'int'
|       | | `-ImplicitCastExpr 0x7fc7e602fcf8 <col:22> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fc7e602fcc0 <col:22> 'int' lvalue ParmVar 0x7fc7e602f2f0 'm' 'int'
|       | |-UnaryOperator 0x7fc7e602fd50 <col:25, col:26> 'int' postfix '++'
|       | | `-DeclRefExpr 0x7fc7e602fd30 <col:25> 'int' lvalue Var 0x7fc7e602f9c8 'j' 'int'
|       | `-CompoundStmt 0x7fc7e60301a0 <col:31, line:21:9>
|       |   `-BinaryOperator 0x7fc7e6030180 <line:20:6, col:29> 'double' '='
|       |     |-DeclRefExpr 0x7fc7e602fd68 <col:6> 'double' lvalue Var 0x7fc7e602fa78 'val' 'double'
|       |     `-CallExpr 0x7fc7e6030120 <col:12, col:29> 'double'
|       |       |-ImplicitCastExpr 0x7fc7e6030108 <col:12> 'double (*)(double, double)' <FunctionToPointerDecay>
|       |       | `-DeclRefExpr 0x7fc7e602ff98 <col:12> 'double (double, double)' Function 0x7fc7e602fdc8 'fmin' 'double (double, double)'
|       |       |-ImplicitCastExpr 0x7fc7e6030150 <col:17> 'double' <LValueToRValue>
|       |       | `-DeclRefExpr 0x7fc7e602ffb8 <col:17> 'double' lvalue Var 0x7fc7e602fa78 'val' 'double'
|       |       `-ImplicitCastExpr 0x7fc7e6030168 <col:22, col:28> 'double' <LValueToRValue>
|       |         `-ArraySubscriptExpr 0x7fc7e60300b8 <col:22, col:28> 'double' lvalue
|       |           |-ImplicitCastExpr 0x7fc7e6030088 <col:22, col:25> 'double *' <ArrayToPointerDecay>
|       |           | `-ArraySubscriptExpr 0x7fc7e6030048 <col:22, col:25> 'double [m]' lvalue
|       |           |   |-ImplicitCastExpr 0x7fc7e6030018 <col:22> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
|       |           |   | `-DeclRefExpr 0x7fc7e602ffd8 <col:22> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fc7e602f4f0 'x' 'double (*)[m]':'double (*)[m]'
|       |           |   `-ImplicitCastExpr 0x7fc7e6030030 <col:24> 'int' <LValueToRValue>
|       |           |     `-DeclRefExpr 0x7fc7e602fff8 <col:24> 'int' lvalue Var 0x7fc7e602f9c8 'j' 'int'
|       |           `-ImplicitCastExpr 0x7fc7e60300a0 <col:27> 'int' <LValueToRValue>
|       |             `-DeclRefExpr 0x7fc7e6030068 <col:27> 'int' lvalue Var 0x7fc7e602f948 'i' 'int'
|       `-BinaryOperator 0x7fc7e582e2c8 <line:22:9, col:16> 'double' '='
|         |-ArraySubscriptExpr 0x7fc7e582e270 <col:9, col:12> 'double' lvalue
|         | |-ImplicitCastExpr 0x7fc7e582e240 <col:9> 'double *':'double *' <LValueToRValue>
|         | | `-DeclRefExpr 0x7fc7e582e200 <col:9> 'double *':'double *' lvalue ParmVar 0x7fc7e602f670 'z' 'double *':'double *'
|         | `-ImplicitCastExpr 0x7fc7e582e258 <col:11> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x7fc7e582e220 <col:11> 'int' lvalue Var 0x7fc7e602f948 'i' 'int'
|         `-ImplicitCastExpr 0x7fc7e582e2b0 <col:16> 'double' <LValueToRValue>
|           `-DeclRefExpr 0x7fc7e582e290 <col:16> 'double' lvalue Var 0x7fc7e602fa78 'val' 'double'
`-FunctionDecl 0x7fc7e602fdc8 <line:20:12> col:12 implicit used fmin 'double (double, double)' extern
  |-ParmVarDecl 0x7fc7e602fe68 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x7fc7e602fed0 <<invalid sloc>> <invalid sloc> 'double'
  |-NoThrowAttr 0x7fc7e602ff48 <col:12> Implicit
  `-ConstAttr 0x7fc7e602ff88 <col:12> Implicit
