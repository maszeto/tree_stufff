TranslationUnitDecl 0x7fb64f838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fb64f8394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fb64f8391a0 '__int128'
|-TypedefDecl 0x7fb64f839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fb64f8391c0 'unsigned __int128'
|-TypedefDecl 0x7fb64f8397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fb64f8395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fb64f839568 '__NSConstantString_tag'
|-TypedefDecl 0x7fb64f839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fb64f839850 'char *'
|   `-BuiltinType 0x7fb64f838ca0 'char'
|-TypedefDecl 0x7fb64f839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fb64f839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fb64f839970 'struct __va_list_tag'
|     `-Record 0x7fb64f8398e8 '__va_list_tag'
|-TypedefDecl 0x7fb65002f200 <./tree_src/unarySectMatrix_IdxMinMagSectLastMat.c:4:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fb64f838d60 'unsigned char'
|-FunctionDecl 0x7fb65002fe18 <line:12:1, line:34:1> line:12:6 IdxMinMagSectLastMat 'void (int, int, int, double (*)[mx], int *, int, int, int, int, int, int, int, int, int)'
| |-ParmVarDecl 0x7fb65002f270 <line:13:5, col:9> col:9 used nx 'int'
| |-ParmVarDecl 0x7fb65002f2f0 <col:13, col:17> col:17 used mx 'int'
| |-ParmVarDecl 0x7fb65002f370 <col:21, col:25> col:25 used nz 'int'
| |-ParmVarDecl 0x7fb65002f570 <col:29, col:44> col:36 used x 'double (*)[mx]':'double (*)[mx]'
| |-ParmVarDecl 0x7fb65002f6f0 <col:47, col:55> col:51 used z 'int *':'int *'
| |-ParmVarDecl 0x7fb65002f770 <line:14:5, col:9> col:9 used startx1 'int'
| |-ParmVarDecl 0x7fb65002f7f0 <col:18, col:22> col:22 used stopx1 'int'
| |-ParmVarDecl 0x7fb65002f870 <col:30, col:34> col:34 used stepx1 'int'
| |-ParmVarDecl 0x7fb65002f8f0 <col:42, col:46> col:46 used startx2 'int'
| |-ParmVarDecl 0x7fb65002f970 <col:55, col:59> col:59 used stopx2 'int'
| |-ParmVarDecl 0x7fb65002f9f0 <col:67, col:71> col:71 used stepx2 'int'
| |-ParmVarDecl 0x7fb65002fa70 <line:15:5, col:9> col:9 used startz 'int'
| |-ParmVarDecl 0x7fb65002faf0 <col:17, col:21> col:21 stopz 'int'
| |-ParmVarDecl 0x7fb65002fb70 <col:28, col:32> col:32 used stepz 'int'
| `-CompoundStmt 0x7fb650033200 <col:40, line:34:1>
|   |-DeclStmt 0x7fb650030088 <line:17:5, col:19>
|   | |-VarDecl 0x7fb65002ff88 <col:5, col:12> col:12 used mag 'double'
|   | `-VarDecl 0x7fb650030008 <col:5, col:16> col:16 used val 'double'
|   |-DeclStmt 0x7fb650032398 <line:18:5, col:27>
|   | |-VarDecl 0x7fb6500300b8 <col:5, col:9> col:9 used ix 'int'
|   | |-VarDecl 0x7fb650030138 <col:5, col:13> col:13 used jx 'int'
|   | |-VarDecl 0x7fb650032200 <col:5, col:17> col:17 iy 'int'
|   | |-VarDecl 0x7fb650032280 <col:5, col:21> col:21 jy 'int'
|   | `-VarDecl 0x7fb650032300 <col:5, col:25> col:25 used iz 'int'
|   |-DeclStmt 0x7fb650032430 <line:19:5, col:12>
|   | `-VarDecl 0x7fb6500323c8 <col:5, col:9> col:9 used loc 'int'
|   |-BinaryOperator 0x7fb6500324a0 <line:20:5, col:10> 'int' '='
|   | |-DeclRefExpr 0x7fb650032448 <col:5> 'int' lvalue Var 0x7fb650032300 'iz' 'int'
|   | `-ImplicitCastExpr 0x7fb650032488 <col:10> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fb650032468 <col:10> 'int' lvalue ParmVar 0x7fb65002fa70 'startz' 'int'
|   `-ForStmt 0x7fb6500331c0 <line:21:5, line:33:5>
|     |-BinaryOperator 0x7fb650032518 <line:21:10, col:14> 'int' '='
|     | |-DeclRefExpr 0x7fb6500324c0 <col:10> 'int' lvalue Var 0x7fb6500300b8 'ix' 'int'
|     | `-ImplicitCastExpr 0x7fb650032500 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fb6500324e0 <col:14> 'int' lvalue ParmVar 0x7fb65002f770 'startx1' 'int'
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fb6500325a8 <col:23, col:26> 'int' '<'
|     | |-ImplicitCastExpr 0x7fb650032578 <col:23> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fb650032538 <col:23> 'int' lvalue Var 0x7fb6500300b8 'ix' 'int'
|     | `-ImplicitCastExpr 0x7fb650032590 <col:26> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fb650032558 <col:26> 'int' lvalue ParmVar 0x7fb65002f7f0 'stopx1' 'int'
|     |-CompoundAssignOperator 0x7fb650032620 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     | |-DeclRefExpr 0x7fb6500325c8 <col:34> 'int' lvalue Var 0x7fb6500300b8 'ix' 'int'
|     | `-ImplicitCastExpr 0x7fb650032608 <col:39> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fb6500325e8 <col:39> 'int' lvalue ParmVar 0x7fb65002f870 'stepx1' 'int'
|     `-CompoundStmt 0x7fb650033188 <col:48, line:33:5>
|       |-BinaryOperator 0x7fb6500326a8 <line:22:9, col:15> 'int' '='
|       | |-DeclRefExpr 0x7fb650032650 <col:9> 'int' lvalue Var 0x7fb6500323c8 'loc' 'int'
|       | `-ImplicitCastExpr 0x7fb650032690 <col:15> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x7fb650032670 <col:15> 'int' lvalue ParmVar 0x7fb65002f770 'startx1' 'int'
|       |-BinaryOperator 0x7fb650032a50 <line:23:9, col:38> 'double' '='
|       | |-DeclRefExpr 0x7fb6500326c8 <col:9> 'double' lvalue Var 0x7fb650030008 'val' 'double'
|       | `-CallExpr 0x7fb650032a10 <col:16, col:38> 'double'
|       |   |-ImplicitCastExpr 0x7fb6500329f8 <col:16> 'double (*)(double)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x7fb650032880 <col:16> 'double (double)' Function 0x7fb650032720 'fabs' 'double (double)'
|       |   `-ImplicitCastExpr 0x7fb650032a38 <col:23, col:36> 'double' <LValueToRValue>
|       |     `-ArraySubscriptExpr 0x7fb6500329a8 <col:23, col:36> 'double' lvalue
|       |       |-ImplicitCastExpr 0x7fb650032978 <col:23, col:27> 'double *' <ArrayToPointerDecay>
|       |       | `-ArraySubscriptExpr 0x7fb650032910 <col:23, col:27> 'double [mx]' lvalue
|       |       |   |-ImplicitCastExpr 0x7fb6500328e0 <col:23> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
|       |       |   | `-DeclRefExpr 0x7fb6500328a0 <col:23> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7fb65002f570 'x' 'double (*)[mx]':'double (*)[mx]'
|       |       |   `-ImplicitCastExpr 0x7fb6500328f8 <col:25> 'int' <LValueToRValue>
|       |       |     `-DeclRefExpr 0x7fb6500328c0 <col:25> 'int' lvalue Var 0x7fb6500300b8 'ix' 'int'
|       |       `-ImplicitCastExpr 0x7fb650032990 <col:29> 'int' <LValueToRValue>
|       |         `-DeclRefExpr 0x7fb650032930 <col:29> 'int' lvalue ParmVar 0x7fb65002f8f0 'startx2' 'int'
|       |-ForStmt 0x7fb650032fe0 <line:24:9, line:30:9>
|       | |-BinaryOperator 0x7fb650032b08 <line:24:14, col:26> 'int' '='
|       | | |-DeclRefExpr 0x7fb650032a70 <col:14> 'int' lvalue Var 0x7fb650030138 'jx' 'int'
|       | | `-BinaryOperator 0x7fb650032ae8 <col:18, col:26> 'int' '+'
|       | |   |-ImplicitCastExpr 0x7fb650032ad0 <col:18> 'int' <LValueToRValue>
|       | |   | `-DeclRefExpr 0x7fb650032a90 <col:18> 'int' lvalue ParmVar 0x7fb65002f8f0 'startx2' 'int'
|       | |   `-IntegerLiteral 0x7fb650032ab0 <col:26> 'int' 1
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x7fb650032b98 <col:29, col:32> 'int' '<'
|       | | |-ImplicitCastExpr 0x7fb650032b68 <col:29> 'int' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7fb650032b28 <col:29> 'int' lvalue Var 0x7fb650030138 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7fb650032b80 <col:32> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fb650032b48 <col:32> 'int' lvalue ParmVar 0x7fb65002f970 'stopx2' 'int'
|       | |-CompoundAssignOperator 0x7fb650032c10 <col:40, col:45> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|       | | |-DeclRefExpr 0x7fb650032bb8 <col:40> 'int' lvalue Var 0x7fb650030138 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7fb650032bf8 <col:45> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fb650032bd8 <col:45> 'int' lvalue ParmVar 0x7fb65002f9f0 'stepx2' 'int'
|       | `-CompoundStmt 0x7fb650032fb8 <col:54, line:30:9>
|       |   |-BinaryOperator 0x7fb650032dd8 <line:25:13, col:36> 'double' '='
|       |   | |-DeclRefExpr 0x7fb650032c40 <col:13> 'double' lvalue Var 0x7fb65002ff88 'mag' 'double'
|       |   | `-CallExpr 0x7fb650032d98 <col:19, col:36> 'double'
|       |   |   |-ImplicitCastExpr 0x7fb650032d80 <col:19> 'double (*)(double)' <FunctionToPointerDecay>
|       |   |   | `-DeclRefExpr 0x7fb650032c60 <col:19> 'double (double)' Function 0x7fb650032720 'fabs' 'double (double)'
|       |   |   `-ImplicitCastExpr 0x7fb650032dc0 <col:26, col:34> 'double' <LValueToRValue>
|       |   |     `-ArraySubscriptExpr 0x7fb650032d60 <col:26, col:34> 'double' lvalue
|       |   |       |-ImplicitCastExpr 0x7fb650032d30 <col:26, col:30> 'double *' <ArrayToPointerDecay>
|       |   |       | `-ArraySubscriptExpr 0x7fb650032cf0 <col:26, col:30> 'double [mx]' lvalue
|       |   |       |   |-ImplicitCastExpr 0x7fb650032cc0 <col:26> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
|       |   |       |   | `-DeclRefExpr 0x7fb650032c80 <col:26> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7fb65002f570 'x' 'double (*)[mx]':'double (*)[mx]'
|       |   |       |   `-ImplicitCastExpr 0x7fb650032cd8 <col:28> 'int' <LValueToRValue>
|       |   |       |     `-DeclRefExpr 0x7fb650032ca0 <col:28> 'int' lvalue Var 0x7fb6500300b8 'ix' 'int'
|       |   |       `-ImplicitCastExpr 0x7fb650032d48 <col:32> 'int' <LValueToRValue>
|       |   |         `-DeclRefExpr 0x7fb650032d10 <col:32> 'int' lvalue Var 0x7fb650030138 'jx' 'int'
|       |   |-IfStmt 0x7fb650032f98 <line:26:13, line:29:13>
|       |   | |-BinaryOperator 0x7fb650032e68 <line:26:17, col:23> 'int' '<'
|       |   | | |-ImplicitCastExpr 0x7fb650032e38 <col:17> 'double' <LValueToRValue>
|       |   | | | `-DeclRefExpr 0x7fb650032df8 <col:17> 'double' lvalue Var 0x7fb65002ff88 'mag' 'double'
|       |   | | `-ImplicitCastExpr 0x7fb650032e50 <col:23> 'double' <LValueToRValue>
|       |   | |   `-DeclRefExpr 0x7fb650032e18 <col:23> 'double' lvalue Var 0x7fb650030008 'val' 'double'
|       |   | `-CompoundStmt 0x7fb650032f78 <col:29, line:29:13>
|       |   |   |-BinaryOperator 0x7fb650032ee0 <line:27:17, col:23> 'int' '='
|       |   |   | |-DeclRefExpr 0x7fb650032e88 <col:17> 'int' lvalue Var 0x7fb6500323c8 'loc' 'int'
|       |   |   | `-ImplicitCastExpr 0x7fb650032ec8 <col:23> 'int' <LValueToRValue>
|       |   |   |   `-DeclRefExpr 0x7fb650032ea8 <col:23> 'int' lvalue Var 0x7fb650030138 'jx' 'int'
|       |   |   `-BinaryOperator 0x7fb650032f58 <line:28:17, col:23> 'double' '='
|       |   |     |-DeclRefExpr 0x7fb650032f00 <col:17> 'double' lvalue Var 0x7fb650030008 'val' 'double'
|       |   |     `-ImplicitCastExpr 0x7fb650032f40 <col:23> 'double' <LValueToRValue>
|       |   |       `-DeclRefExpr 0x7fb650032f20 <col:23> 'double' lvalue Var 0x7fb65002ff88 'mag' 'double'
|       |   `-NullStmt 0x7fb650032fb0 <line:29:14>
|       |-BinaryOperator 0x7fb6500330e0 <line:31:9, col:17> 'int' '='
|       | |-ArraySubscriptExpr 0x7fb650033088 <col:9, col:13> 'int' lvalue
|       | | |-ImplicitCastExpr 0x7fb650033058 <col:9> 'int *':'int *' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7fb650033018 <col:9> 'int *':'int *' lvalue ParmVar 0x7fb65002f6f0 'z' 'int *':'int *'
|       | | `-ImplicitCastExpr 0x7fb650033070 <col:11> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fb650033038 <col:11> 'int' lvalue Var 0x7fb650032300 'iz' 'int'
|       | `-ImplicitCastExpr 0x7fb6500330c8 <col:17> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x7fb6500330a8 <col:17> 'int' lvalue Var 0x7fb6500323c8 'loc' 'int'
|       `-CompoundAssignOperator 0x7fb650033158 <line:32:9, col:15> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|         |-DeclRefExpr 0x7fb650033100 <col:9> 'int' lvalue Var 0x7fb650032300 'iz' 'int'
|         `-ImplicitCastExpr 0x7fb650033140 <col:15> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x7fb650033120 <col:15> 'int' lvalue ParmVar 0x7fb65002fb70 'stepz' 'int'
`-FunctionDecl 0x7fb650032720 <line:23:16> col:16 implicit used fabs 'double (double)' extern
  |-ParmVarDecl 0x7fb6500327c0 <<invalid sloc>> <invalid sloc> 'double'
  |-NoThrowAttr 0x7fb650032830 <col:16> Implicit
  `-ConstAttr 0x7fb650032870 <col:16> Implicit
