TranslationUnitDecl 0x7f7ef1038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f7ef10394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f7ef10391a0 '__int128'
|-TypedefDecl 0x7f7ef1039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f7ef10391c0 'unsigned __int128'
|-TypedefDecl 0x7f7ef10397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f7ef10395f0 'struct __NSConstantString_tag'
|   `-Record 0x7f7ef1039568 '__NSConstantString_tag'
|-TypedefDecl 0x7f7ef1039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f7ef1039850 'char *'
|   `-BuiltinType 0x7f7ef1038ca0 'char'
|-TypedefDecl 0x7f7ef1039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f7ef1039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f7ef1039970 'struct __va_list_tag'
|     `-Record 0x7f7ef10398e8 '__va_list_tag'
|-TypedefDecl 0x7f7ef182f200 <./tree_src/dyadicSectMatrix_LoSectMat.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7f7ef1038d60 'unsigned char'
|-FunctionDecl 0x7f7ef18318b8 <line:6:1, line:27:1> line:6:6 LoSectMat 'void (int, int, int, int, int, int, double (*)[mx], double (*)[my], double (*)[mz], int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)'
| |-ParmVarDecl 0x7f7ef182f270 <line:7:5, col:9> col:9 used nx 'int'
| |-ParmVarDecl 0x7f7ef182f2f0 <col:13, col:17> col:17 used mx 'int'
| |-ParmVarDecl 0x7f7ef182f370 <col:21, col:25> col:25 used ny 'int'
| |-ParmVarDecl 0x7f7ef182f3f0 <col:29, col:33> col:33 used my 'int'
| |-ParmVarDecl 0x7f7ef182f470 <col:37, col:41> col:41 used nz 'int'
| |-ParmVarDecl 0x7f7ef182f4f0 <col:45, col:49> col:49 used mz 'int'
| |-ParmVarDecl 0x7f7ef182f6f0 <line:8:5, col:20> col:12 used x 'double (*)[mx]':'double (*)[mx]'
| |-ParmVarDecl 0x7f7ef182f8f0 <col:23, col:38> col:30 used y 'double (*)[my]':'double (*)[my]'
| |-ParmVarDecl 0x7f7ef182faf0 <col:41, col:56> col:48 used z 'double (*)[mz]':'double (*)[mz]'
| |-ParmVarDecl 0x7f7ef182fb70 <line:9:5, col:9> col:9 used startx1 'int'
| |-ParmVarDecl 0x7f7ef182fbf0 <col:18, col:22> col:22 used stopx1 'int'
| |-ParmVarDecl 0x7f7ef182fc70 <col:30, col:34> col:34 used stepx1 'int'
| |-ParmVarDecl 0x7f7ef182fcf0 <col:42, col:46> col:46 used startx2 'int'
| |-ParmVarDecl 0x7f7ef182fd70 <col:55, col:59> col:59 used stopx2 'int'
| |-ParmVarDecl 0x7f7ef182fdf0 <col:67, col:71> col:71 used stepx2 'int'
| |-ParmVarDecl 0x7f7ef182fe70 <line:10:5, col:9> col:9 used starty1 'int'
| |-ParmVarDecl 0x7f7ef182fef0 <col:18, col:22> col:22 stopy1 'int'
| |-ParmVarDecl 0x7f7ef182ff70 <col:30, col:34> col:34 used stepy1 'int'
| |-ParmVarDecl 0x7f7ef182fff0 <col:42, col:46> col:46 used starty2 'int'
| |-ParmVarDecl 0x7f7ef1830070 <col:55, col:59> col:59 stopy2 'int'
| |-ParmVarDecl 0x7f7ef18300f0 <col:67, col:71> col:71 used stepy2 'int'
| |-ParmVarDecl 0x7f7ef1830170 <line:11:5, col:9> col:9 used startz1 'int'
| |-ParmVarDecl 0x7f7ef1831200 <col:18, col:22> col:22 stopz1 'int'
| |-ParmVarDecl 0x7f7ef1831280 <col:30, col:34> col:34 used stepz1 'int'
| |-ParmVarDecl 0x7f7ef1831300 <col:42, col:46> col:46 used startz2 'int'
| |-ParmVarDecl 0x7f7ef1831380 <col:55, col:59> col:59 stopz2 'int'
| |-ParmVarDecl 0x7f7ef1831400 <col:67, col:71> col:71 used stepz2 'int'
| `-CompoundStmt 0x7f7ef102d680 <col:79, line:27:1>
|   |-DeclStmt 0x7f7ef1831db0 <line:13:5, col:31>
|   | |-VarDecl 0x7f7ef1831a90 <col:5, col:9> col:9 used ix 'int'
|   | |-VarDecl 0x7f7ef1831b10 <col:5, col:13> col:13 used jx 'int'
|   | |-VarDecl 0x7f7ef1831b90 <col:5, col:17> col:17 used iy 'int'
|   | |-VarDecl 0x7f7ef1831c10 <col:5, col:21> col:21 used jy 'int'
|   | |-VarDecl 0x7f7ef1831c90 <col:5, col:25> col:25 used iz 'int'
|   | `-VarDecl 0x7f7ef1831d10 <col:5, col:29> col:29 used jz 'int'
|   |-BinaryOperator 0x7f7ef1831e20 <line:14:5, col:10> 'int' '='
|   | |-DeclRefExpr 0x7f7ef1831dc8 <col:5> 'int' lvalue Var 0x7f7ef1831b90 'iy' 'int'
|   | `-ImplicitCastExpr 0x7f7ef1831e08 <col:10> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7f7ef1831de8 <col:10> 'int' lvalue ParmVar 0x7f7ef182fe70 'starty1' 'int'
|   |-BinaryOperator 0x7f7ef1831e98 <line:15:5, col:10> 'int' '='
|   | |-DeclRefExpr 0x7f7ef1831e40 <col:5> 'int' lvalue Var 0x7f7ef1831c90 'iz' 'int'
|   | `-ImplicitCastExpr 0x7f7ef1831e80 <col:10> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7f7ef1831e60 <col:10> 'int' lvalue ParmVar 0x7f7ef1830170 'startz1' 'int'
|   `-ForStmt 0x7f7ef102d648 <line:16:5, line:26:5>
|     |-BinaryOperator 0x7f7ef1831f10 <line:16:10, col:14> 'int' '='
|     | |-DeclRefExpr 0x7f7ef1831eb8 <col:10> 'int' lvalue Var 0x7f7ef1831a90 'ix' 'int'
|     | `-ImplicitCastExpr 0x7f7ef1831ef8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7f7ef1831ed8 <col:14> 'int' lvalue ParmVar 0x7f7ef182fb70 'startx1' 'int'
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7f7ef1831fa0 <col:23, col:26> 'int' '<'
|     | |-ImplicitCastExpr 0x7f7ef1831f70 <col:23> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7f7ef1831f30 <col:23> 'int' lvalue Var 0x7f7ef1831a90 'ix' 'int'
|     | `-ImplicitCastExpr 0x7f7ef1831f88 <col:26> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7f7ef1831f50 <col:26> 'int' lvalue ParmVar 0x7f7ef182fbf0 'stopx1' 'int'
|     |-CompoundAssignOperator 0x7f7ef1832018 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     | |-DeclRefExpr 0x7f7ef1831fc0 <col:34> 'int' lvalue Var 0x7f7ef1831a90 'ix' 'int'
|     | `-ImplicitCastExpr 0x7f7ef1832000 <col:39> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7f7ef1831fe0 <col:39> 'int' lvalue ParmVar 0x7f7ef182fc70 'stepx1' 'int'
|     `-CompoundStmt 0x7f7ef102d610 <col:48, line:26:5>
|       |-BinaryOperator 0x7f7ef18320a0 <line:17:9, col:14> 'int' '='
|       | |-DeclRefExpr 0x7f7ef1832048 <col:9> 'int' lvalue Var 0x7f7ef1831c10 'jy' 'int'
|       | `-ImplicitCastExpr 0x7f7ef1832088 <col:14> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x7f7ef1832068 <col:14> 'int' lvalue ParmVar 0x7f7ef182fff0 'starty2' 'int'
|       |-BinaryOperator 0x7f7ef1832118 <line:18:9, col:14> 'int' '='
|       | |-DeclRefExpr 0x7f7ef18320c0 <col:9> 'int' lvalue Var 0x7f7ef1831d10 'jz' 'int'
|       | `-ImplicitCastExpr 0x7f7ef1832100 <col:14> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x7f7ef18320e0 <col:14> 'int' lvalue ParmVar 0x7f7ef1831300 'startz2' 'int'
|       |-ForStmt 0x7f7ef102d4c8 <line:19:9, line:23:9>
|       | |-BinaryOperator 0x7f7ef1832190 <line:19:14, col:18> 'int' '='
|       | | |-DeclRefExpr 0x7f7ef1832138 <col:14> 'int' lvalue Var 0x7f7ef1831b10 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7f7ef1832178 <col:18> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7f7ef1832158 <col:18> 'int' lvalue ParmVar 0x7f7ef182fcf0 'startx2' 'int'
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x7f7ef102cc30 <col:27, col:30> 'int' '<'
|       | | |-ImplicitCastExpr 0x7f7ef102cc00 <col:27> 'int' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7f7ef18321b0 <col:27> 'int' lvalue Var 0x7f7ef1831b10 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7f7ef102cc18 <col:30> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7f7ef18321d0 <col:30> 'int' lvalue ParmVar 0x7f7ef182fd70 'stopx2' 'int'
|       | |-CompoundAssignOperator 0x7f7ef102cca8 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|       | | |-DeclRefExpr 0x7f7ef102cc50 <col:38> 'int' lvalue Var 0x7f7ef1831b10 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7f7ef102cc90 <col:43> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7f7ef102cc70 <col:43> 'int' lvalue ParmVar 0x7f7ef182fdf0 'stepx2' 'int'
|       | `-CompoundStmt 0x7f7ef102d4a0 <col:52, line:23:9>
|       |   |-BinaryOperator 0x7f7ef102d2e0 <line:20:6, col:42> 'double' '='
|       |   | |-ArraySubscriptExpr 0x7f7ef102cde8 <col:6, col:14> 'double' lvalue
|       |   | | |-ImplicitCastExpr 0x7f7ef102cdb8 <col:6, col:10> 'double *' <ArrayToPointerDecay>
|       |   | | | `-ArraySubscriptExpr 0x7f7ef102cd48 <col:6, col:10> 'double [mz]' lvalue
|       |   | | |   |-ImplicitCastExpr 0x7f7ef102cd18 <col:6> 'double (*)[mz]':'double (*)[mz]' <LValueToRValue>
|       |   | | |   | `-DeclRefExpr 0x7f7ef102ccd8 <col:6> 'double (*)[mz]':'double (*)[mz]' lvalue ParmVar 0x7f7ef182faf0 'z' 'double (*)[mz]':'double (*)[mz]'
|       |   | | |   `-ImplicitCastExpr 0x7f7ef102cd30 <col:8> 'int' <LValueToRValue>
|       |   | | |     `-DeclRefExpr 0x7f7ef102ccf8 <col:8> 'int' lvalue Var 0x7f7ef1831c90 'iz' 'int'
|       |   | | `-ImplicitCastExpr 0x7f7ef102cdd0 <col:12> 'int' <LValueToRValue>
|       |   | |   `-DeclRefExpr 0x7f7ef102cd68 <col:12> 'int' lvalue Var 0x7f7ef1831d10 'jz' 'int'
|       |   | `-CallExpr 0x7f7ef102d280 <col:18, col:42> 'double'
|       |   |   |-ImplicitCastExpr 0x7f7ef102d268 <col:18> 'double (*)(double, double)' <FunctionToPointerDecay>
|       |   |   | `-DeclRefExpr 0x7f7ef102d018 <col:18> 'double (double, double)' Function 0x7f7ef102ce48 'fmin' 'double (double, double)'
|       |   |   |-ImplicitCastExpr 0x7f7ef102d2b0 <col:23, col:31> 'double' <LValueToRValue>
|       |   |   | `-ArraySubscriptExpr 0x7f7ef102d118 <col:23, col:31> 'double' lvalue
|       |   |   |   |-ImplicitCastExpr 0x7f7ef102d0e8 <col:23, col:27> 'double *' <ArrayToPointerDecay>
|       |   |   |   | `-ArraySubscriptExpr 0x7f7ef102d0a8 <col:23, col:27> 'double [mx]' lvalue
|       |   |   |   |   |-ImplicitCastExpr 0x7f7ef102d078 <col:23> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
|       |   |   |   |   | `-DeclRefExpr 0x7f7ef102d038 <col:23> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7f7ef182f6f0 'x' 'double (*)[mx]':'double (*)[mx]'
|       |   |   |   |   `-ImplicitCastExpr 0x7f7ef102d090 <col:25> 'int' <LValueToRValue>
|       |   |   |   |     `-DeclRefExpr 0x7f7ef102d058 <col:25> 'int' lvalue Var 0x7f7ef1831a90 'ix' 'int'
|       |   |   |   `-ImplicitCastExpr 0x7f7ef102d100 <col:29> 'int' <LValueToRValue>
|       |   |   |     `-DeclRefExpr 0x7f7ef102d0c8 <col:29> 'int' lvalue Var 0x7f7ef1831b10 'jx' 'int'
|       |   |   `-ImplicitCastExpr 0x7f7ef102d2c8 <col:33, col:41> 'double' <LValueToRValue>
|       |   |     `-ArraySubscriptExpr 0x7f7ef102d218 <col:33, col:41> 'double' lvalue
|       |   |       |-ImplicitCastExpr 0x7f7ef102d1e8 <col:33, col:37> 'double *' <ArrayToPointerDecay>
|       |   |       | `-ArraySubscriptExpr 0x7f7ef102d1a8 <col:33, col:37> 'double [my]' lvalue
|       |   |       |   |-ImplicitCastExpr 0x7f7ef102d178 <col:33> 'double (*)[my]':'double (*)[my]' <LValueToRValue>
|       |   |       |   | `-DeclRefExpr 0x7f7ef102d138 <col:33> 'double (*)[my]':'double (*)[my]' lvalue ParmVar 0x7f7ef182f8f0 'y' 'double (*)[my]':'double (*)[my]'
|       |   |       |   `-ImplicitCastExpr 0x7f7ef102d190 <col:35> 'int' <LValueToRValue>
|       |   |       |     `-DeclRefExpr 0x7f7ef102d158 <col:35> 'int' lvalue Var 0x7f7ef1831b90 'iy' 'int'
|       |   |       `-ImplicitCastExpr 0x7f7ef102d200 <col:39> 'int' <LValueToRValue>
|       |   |         `-DeclRefExpr 0x7f7ef102d1c8 <col:39> 'int' lvalue Var 0x7f7ef1831c10 'jy' 'int'
|       |   |-BinaryOperator 0x7f7ef102d3b0 <line:21:6, col:16> 'int' '='
|       |   | |-DeclRefExpr 0x7f7ef102d300 <col:6> 'int' lvalue Var 0x7f7ef1831c10 'jy' 'int'
|       |   | `-BinaryOperator 0x7f7ef102d390 <col:11, col:16> 'int' '+'
|       |   |   |-ImplicitCastExpr 0x7f7ef102d360 <col:11> 'int' <LValueToRValue>
|       |   |   | `-DeclRefExpr 0x7f7ef102d320 <col:11> 'int' lvalue Var 0x7f7ef1831c10 'jy' 'int'
|       |   |   `-ImplicitCastExpr 0x7f7ef102d378 <col:16> 'int' <LValueToRValue>
|       |   |     `-DeclRefExpr 0x7f7ef102d340 <col:16> 'int' lvalue ParmVar 0x7f7ef18300f0 'stepy2' 'int'
|       |   `-BinaryOperator 0x7f7ef102d480 <line:22:6, col:16> 'int' '='
|       |     |-DeclRefExpr 0x7f7ef102d3d0 <col:6> 'int' lvalue Var 0x7f7ef1831d10 'jz' 'int'
|       |     `-BinaryOperator 0x7f7ef102d460 <col:11, col:16> 'int' '+'
|       |       |-ImplicitCastExpr 0x7f7ef102d430 <col:11> 'int' <LValueToRValue>
|       |       | `-DeclRefExpr 0x7f7ef102d3f0 <col:11> 'int' lvalue Var 0x7f7ef1831d10 'jz' 'int'
|       |       `-ImplicitCastExpr 0x7f7ef102d448 <col:16> 'int' <LValueToRValue>
|       |         `-DeclRefExpr 0x7f7ef102d410 <col:16> 'int' lvalue ParmVar 0x7f7ef1831400 'stepz2' 'int'
|       |-CompoundAssignOperator 0x7f7ef102d558 <line:24:9, col:15> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|       | |-DeclRefExpr 0x7f7ef102d500 <col:9> 'int' lvalue Var 0x7f7ef1831b90 'iy' 'int'
|       | `-ImplicitCastExpr 0x7f7ef102d540 <col:15> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x7f7ef102d520 <col:15> 'int' lvalue ParmVar 0x7f7ef182ff70 'stepy1' 'int'
|       `-CompoundAssignOperator 0x7f7ef102d5e0 <line:25:9, col:15> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|         |-DeclRefExpr 0x7f7ef102d588 <col:9> 'int' lvalue Var 0x7f7ef1831c90 'iz' 'int'
|         `-ImplicitCastExpr 0x7f7ef102d5c8 <col:15> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x7f7ef102d5a8 <col:15> 'int' lvalue ParmVar 0x7f7ef1831280 'stepz1' 'int'
`-FunctionDecl 0x7f7ef102ce48 <line:20:18> col:18 implicit used fmin 'double (double, double)' extern
  |-ParmVarDecl 0x7f7ef102cee8 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x7f7ef102cf50 <<invalid sloc>> <invalid sloc> 'double'
  |-NoThrowAttr 0x7f7ef102cfc8 <col:18> Implicit
  `-ConstAttr 0x7f7ef102d008 <col:18> Implicit
