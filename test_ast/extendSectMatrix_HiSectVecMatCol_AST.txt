TranslationUnitDecl 0x7faff3838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7faff38394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7faff38391a0 '__int128'
|-TypedefDecl 0x7faff3839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7faff38391c0 'unsigned __int128'
|-TypedefDecl 0x7faff38397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7faff38395f0 'struct __NSConstantString_tag'
|   `-Record 0x7faff3839568 '__NSConstantString_tag'
|-TypedefDecl 0x7faff3839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7faff3839850 'char *'
|   `-BuiltinType 0x7faff3838ca0 'char'
|-TypedefDecl 0x7faff3839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7faff3839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7faff3839970 'struct __va_list_tag'
|     `-Record 0x7faff38398e8 '__va_list_tag'
|-TypedefDecl 0x7faff402f200 <./tree_src/extendSectMatrix_HiSectVecMatCol.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7faff3838d60 'unsigned char'
|-FunctionDecl 0x7faff4031578 <line:6:1, line:25:1> line:6:6 HiSectVecMatCol 'void (int, int, int, int, int, double *, double (*)[my], double (*)[mz], int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)'
| |-ParmVarDecl 0x7faff402f270 <line:7:5, col:9> col:9 used mx 'int'
| |-ParmVarDecl 0x7faff402f2f0 <col:13, col:17> col:17 used ny 'int'
| |-ParmVarDecl 0x7faff402f370 <col:21, col:25> col:25 used my 'int'
| |-ParmVarDecl 0x7faff402f3f0 <col:29, col:33> col:33 used nz 'int'
| |-ParmVarDecl 0x7faff402f470 <col:37, col:41> col:41 used mz 'int'
| |-ParmVarDecl 0x7faff402f5f0 <line:8:5, col:16> col:12 used x 'double *':'double *'
| |-ParmVarDecl 0x7faff402f7f0 <col:19, col:34> col:26 used y 'double (*)[my]':'double (*)[my]'
| |-ParmVarDecl 0x7faff402f9f0 <col:37, col:52> col:44 used z 'double (*)[mz]':'double (*)[mz]'
| |-ParmVarDecl 0x7faff402fa70 <line:9:5, col:9> col:9 used startx 'int'
| |-ParmVarDecl 0x7faff402faf0 <col:17, col:21> col:21 stopx 'int'
| |-ParmVarDecl 0x7faff402fb70 <col:28, col:32> col:32 used stepx 'int'
| |-ParmVarDecl 0x7faff402fbf0 <line:10:5, col:9> col:9 used starty1 'int'
| |-ParmVarDecl 0x7faff402fc70 <col:18, col:22> col:22 used stopy1 'int'
| |-ParmVarDecl 0x7faff402fcf0 <col:30, col:34> col:34 used stepy1 'int'
| |-ParmVarDecl 0x7faff402fd70 <col:42, col:46> col:46 used starty2 'int'
| |-ParmVarDecl 0x7faff402fdf0 <col:55, col:59> col:59 used stopy2 'int'
| |-ParmVarDecl 0x7faff402fe70 <col:67, col:71> col:71 used stepy2 'int'
| |-ParmVarDecl 0x7faff402fef0 <line:11:5, col:9> col:9 used startz1 'int'
| |-ParmVarDecl 0x7faff402ff70 <col:18, col:22> col:22 stopz1 'int'
| |-ParmVarDecl 0x7faff402fff0 <col:30, col:34> col:34 used stepz1 'int'
| |-ParmVarDecl 0x7faff4030070 <col:42, col:46> col:46 used startz2 'int'
| |-ParmVarDecl 0x7faff40300f0 <col:55, col:59> col:59 stopz2 'int'
| |-ParmVarDecl 0x7faff4030170 <col:67, col:71> col:71 used stepz2 'int'
| `-CompoundStmt 0x7faff40327a8 <col:79, line:25:1>
|   |-DeclStmt 0x7faff4031a50 <line:13:5, col:31>
|   | |-VarDecl 0x7faff4031730 <col:5, col:9> col:9 ix 'int'
|   | |-VarDecl 0x7faff40317b0 <col:5, col:13> col:13 used jx 'int'
|   | |-VarDecl 0x7faff4031830 <col:5, col:17> col:17 used iy 'int'
|   | |-VarDecl 0x7faff40318b0 <col:5, col:21> col:21 used jy 'int'
|   | |-VarDecl 0x7faff4031930 <col:5, col:25> col:25 used iz 'int'
|   | `-VarDecl 0x7faff40319b0 <col:5, col:29> col:29 used jz 'int'
|   |-BinaryOperator 0x7faff4031ac0 <line:14:5, col:10> 'int' '='
|   | |-DeclRefExpr 0x7faff4031a68 <col:5> 'int' lvalue Var 0x7faff4031930 'iz' 'int'
|   | `-ImplicitCastExpr 0x7faff4031aa8 <col:10> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7faff4031a88 <col:10> 'int' lvalue ParmVar 0x7faff402fef0 'startz1' 'int'
|   `-ForStmt 0x7faff4032770 <line:15:5, line:24:5>
|     |-BinaryOperator 0x7faff4031b38 <line:15:10, col:14> 'int' '='
|     | |-DeclRefExpr 0x7faff4031ae0 <col:10> 'int' lvalue Var 0x7faff4031830 'iy' 'int'
|     | `-ImplicitCastExpr 0x7faff4031b20 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7faff4031b00 <col:14> 'int' lvalue ParmVar 0x7faff402fbf0 'starty1' 'int'
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7faff4031bc8 <col:23, col:26> 'int' '<'
|     | |-ImplicitCastExpr 0x7faff4031b98 <col:23> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7faff4031b58 <col:23> 'int' lvalue Var 0x7faff4031830 'iy' 'int'
|     | `-ImplicitCastExpr 0x7faff4031bb0 <col:26> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7faff4031b78 <col:26> 'int' lvalue ParmVar 0x7faff402fc70 'stopy1' 'int'
|     |-CompoundAssignOperator 0x7faff4031c40 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     | |-DeclRefExpr 0x7faff4031be8 <col:34> 'int' lvalue Var 0x7faff4031830 'iy' 'int'
|     | `-ImplicitCastExpr 0x7faff4031c28 <col:39> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7faff4031c08 <col:39> 'int' lvalue ParmVar 0x7faff402fcf0 'stepy1' 'int'
|     `-CompoundStmt 0x7faff4032740 <col:48, line:24:5>
|       |-BinaryOperator 0x7faff4031cc8 <line:16:9, col:14> 'int' '='
|       | |-DeclRefExpr 0x7faff4031c70 <col:9> 'int' lvalue Var 0x7faff40317b0 'jx' 'int'
|       | `-ImplicitCastExpr 0x7faff4031cb0 <col:14> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x7faff4031c90 <col:14> 'int' lvalue ParmVar 0x7faff402fa70 'startx' 'int'
|       |-BinaryOperator 0x7faff4031d40 <line:17:9, col:14> 'int' '='
|       | |-DeclRefExpr 0x7faff4031ce8 <col:9> 'int' lvalue Var 0x7faff40319b0 'jz' 'int'
|       | `-ImplicitCastExpr 0x7faff4031d28 <col:14> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x7faff4031d08 <col:14> 'int' lvalue ParmVar 0x7faff4030070 'startz2' 'int'
|       |-ForStmt 0x7faff4032638 <line:18:9, line:22:9>
|       | |-BinaryOperator 0x7faff4031db8 <line:18:14, col:18> 'int' '='
|       | | |-DeclRefExpr 0x7faff4031d60 <col:14> 'int' lvalue Var 0x7faff40318b0 'jy' 'int'
|       | | `-ImplicitCastExpr 0x7faff4031da0 <col:18> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7faff4031d80 <col:18> 'int' lvalue ParmVar 0x7faff402fd70 'starty2' 'int'
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x7faff4031e48 <col:27, col:30> 'int' '<'
|       | | |-ImplicitCastExpr 0x7faff4031e18 <col:27> 'int' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7faff4031dd8 <col:27> 'int' lvalue Var 0x7faff40318b0 'jy' 'int'
|       | | `-ImplicitCastExpr 0x7faff4031e30 <col:30> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7faff4031df8 <col:30> 'int' lvalue ParmVar 0x7faff402fdf0 'stopy2' 'int'
|       | |-CompoundAssignOperator 0x7faff4031ec0 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|       | | |-DeclRefExpr 0x7faff4031e68 <col:38> 'int' lvalue Var 0x7faff40318b0 'jy' 'int'
|       | | `-ImplicitCastExpr 0x7faff4031ea8 <col:43> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7faff4031e88 <col:43> 'int' lvalue ParmVar 0x7faff402fe70 'stepy2' 'int'
|       | `-CompoundStmt 0x7faff4032610 <col:52, line:22:9>
|       |   |-BinaryOperator 0x7faff4032450 <line:19:6, col:38> 'double' '='
|       |   | |-ArraySubscriptExpr 0x7faff4031fd0 <col:6, col:14> 'double' lvalue
|       |   | | |-ImplicitCastExpr 0x7faff4031fa0 <col:6, col:10> 'double *' <ArrayToPointerDecay>
|       |   | | | `-ArraySubscriptExpr 0x7faff4031f60 <col:6, col:10> 'double [mz]' lvalue
|       |   | | |   |-ImplicitCastExpr 0x7faff4031f30 <col:6> 'double (*)[mz]':'double (*)[mz]' <LValueToRValue>
|       |   | | |   | `-DeclRefExpr 0x7faff4031ef0 <col:6> 'double (*)[mz]':'double (*)[mz]' lvalue ParmVar 0x7faff402f9f0 'z' 'double (*)[mz]':'double (*)[mz]'
|       |   | | |   `-ImplicitCastExpr 0x7faff4031f48 <col:8> 'int' <LValueToRValue>
|       |   | | |     `-DeclRefExpr 0x7faff4031f10 <col:8> 'int' lvalue Var 0x7faff40319b0 'jz' 'int'
|       |   | | `-ImplicitCastExpr 0x7faff4031fb8 <col:12> 'int' <LValueToRValue>
|       |   | |   `-DeclRefExpr 0x7faff4031f80 <col:12> 'int' lvalue Var 0x7faff4031930 'iz' 'int'
|       |   | `-CallExpr 0x7faff40323f0 <col:18, col:38> 'double'
|       |   |   |-ImplicitCastExpr 0x7faff40323d8 <col:18> 'double (*)(double, double)' <FunctionToPointerDecay>
|       |   |   | `-DeclRefExpr 0x7faff4032200 <col:18> 'double (double, double)' Function 0x7faff4032028 'fmax' 'double (double, double)'
|       |   |   |-ImplicitCastExpr 0x7faff4032420 <col:23, col:27> 'double' <LValueToRValue>
|       |   |   | `-ArraySubscriptExpr 0x7faff4032290 <col:23, col:27> 'double' lvalue
|       |   |   |   |-ImplicitCastExpr 0x7faff4032260 <col:23> 'double *':'double *' <LValueToRValue>
|       |   |   |   | `-DeclRefExpr 0x7faff4032220 <col:23> 'double *':'double *' lvalue ParmVar 0x7faff402f5f0 'x' 'double *':'double *'
|       |   |   |   `-ImplicitCastExpr 0x7faff4032278 <col:25> 'int' <LValueToRValue>
|       |   |   |     `-DeclRefExpr 0x7faff4032240 <col:25> 'int' lvalue Var 0x7faff40317b0 'jx' 'int'
|       |   |   `-ImplicitCastExpr 0x7faff4032438 <col:29, col:37> 'double' <LValueToRValue>
|       |   |     `-ArraySubscriptExpr 0x7faff4032390 <col:29, col:37> 'double' lvalue
|       |   |       |-ImplicitCastExpr 0x7faff4032360 <col:29, col:33> 'double *' <ArrayToPointerDecay>
|       |   |       | `-ArraySubscriptExpr 0x7faff4032320 <col:29, col:33> 'double [my]' lvalue
|       |   |       |   |-ImplicitCastExpr 0x7faff40322f0 <col:29> 'double (*)[my]':'double (*)[my]' <LValueToRValue>
|       |   |       |   | `-DeclRefExpr 0x7faff40322b0 <col:29> 'double (*)[my]':'double (*)[my]' lvalue ParmVar 0x7faff402f7f0 'y' 'double (*)[my]':'double (*)[my]'
|       |   |       |   `-ImplicitCastExpr 0x7faff4032308 <col:31> 'int' <LValueToRValue>
|       |   |       |     `-DeclRefExpr 0x7faff40322d0 <col:31> 'int' lvalue Var 0x7faff40318b0 'jy' 'int'
|       |   |       `-ImplicitCastExpr 0x7faff4032378 <col:35> 'int' <LValueToRValue>
|       |   |         `-DeclRefExpr 0x7faff4032340 <col:35> 'int' lvalue Var 0x7faff4031830 'iy' 'int'
|       |   |-BinaryOperator 0x7faff4032520 <line:20:6, col:16> 'int' '='
|       |   | |-DeclRefExpr 0x7faff4032470 <col:6> 'int' lvalue Var 0x7faff40317b0 'jx' 'int'
|       |   | `-BinaryOperator 0x7faff4032500 <col:11, col:16> 'int' '+'
|       |   |   |-ImplicitCastExpr 0x7faff40324d0 <col:11> 'int' <LValueToRValue>
|       |   |   | `-DeclRefExpr 0x7faff4032490 <col:11> 'int' lvalue Var 0x7faff40317b0 'jx' 'int'
|       |   |   `-ImplicitCastExpr 0x7faff40324e8 <col:16> 'int' <LValueToRValue>
|       |   |     `-DeclRefExpr 0x7faff40324b0 <col:16> 'int' lvalue ParmVar 0x7faff402fb70 'stepx' 'int'
|       |   `-BinaryOperator 0x7faff40325f0 <line:21:6, col:16> 'int' '='
|       |     |-DeclRefExpr 0x7faff4032540 <col:6> 'int' lvalue Var 0x7faff40319b0 'jz' 'int'
|       |     `-BinaryOperator 0x7faff40325d0 <col:11, col:16> 'int' '+'
|       |       |-ImplicitCastExpr 0x7faff40325a0 <col:11> 'int' <LValueToRValue>
|       |       | `-DeclRefExpr 0x7faff4032560 <col:11> 'int' lvalue Var 0x7faff40319b0 'jz' 'int'
|       |       `-ImplicitCastExpr 0x7faff40325b8 <col:16> 'int' <LValueToRValue>
|       |         `-DeclRefExpr 0x7faff4032580 <col:16> 'int' lvalue ParmVar 0x7faff4030170 'stepz2' 'int'
|       `-BinaryOperator 0x7faff4032720 <line:23:9, col:19> 'int' '='
|         |-DeclRefExpr 0x7faff4032670 <col:9> 'int' lvalue Var 0x7faff4031930 'iz' 'int'
|         `-BinaryOperator 0x7faff4032700 <col:14, col:19> 'int' '+'
|           |-ImplicitCastExpr 0x7faff40326d0 <col:14> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x7faff4032690 <col:14> 'int' lvalue Var 0x7faff4031930 'iz' 'int'
|           `-ImplicitCastExpr 0x7faff40326e8 <col:19> 'int' <LValueToRValue>
|             `-DeclRefExpr 0x7faff40326b0 <col:19> 'int' lvalue ParmVar 0x7faff402fff0 'stepz1' 'int'
`-FunctionDecl 0x7faff4032028 <line:19:18> col:18 implicit used fmax 'double (double, double)' extern
  |-ParmVarDecl 0x7faff40320c8 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x7faff4032130 <<invalid sloc>> <invalid sloc> 'double'
  |-NoThrowAttr 0x7faff40321a8 <col:18> Implicit
  `-ConstAttr 0x7faff40321e8 <col:18> Implicit
