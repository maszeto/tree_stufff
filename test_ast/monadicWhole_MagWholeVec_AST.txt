TranslationUnitDecl 0x7f8b9c008208 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f8b9c008aa0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f8b9c0087a0 '__int128'
|-TypedefDecl 0x7f8b9c008b10 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f8b9c0087c0 'unsigned __int128'
|-TypedefDecl 0x7f8b9c008df8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f8b9c008bf0 'struct __NSConstantString_tag'
|   `-Record 0x7f8b9c008b68 '__NSConstantString_tag'
|-TypedefDecl 0x7f8b9c008e90 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f8b9c008e50 'char *'
|   `-BuiltinType 0x7f8b9c0082a0 'char'
|-TypedefDecl 0x7f8b9c009168 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f8b9c009110 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f8b9c008f70 'struct __va_list_tag'
|     `-Record 0x7f8b9c008ee8 '__va_list_tag'
|-FunctionDecl 0x7f8b9c8647f8 <./tree_src/monadicWhole_MagWholeVec.c:4:1, line:11:1> line:4:6 MagWholeVec 'void (int, double *, double *)'
| |-ParmVarDecl 0x7f8b9c864400 <line:5:5, col:9> col:9 used n 'int'
| |-ParmVarDecl 0x7f8b9c864580 <col:12, col:22> col:19 used x 'double *':'double *'
| |-ParmVarDecl 0x7f8b9c8646d0 <col:25, col:35> col:32 used z 'double *':'double *'
| `-CompoundStmt 0x7f8b9c864ee8 <col:39, line:11:1>
|   |-DeclStmt 0x7f8b9c864978 <line:7:5, col:10>
|   | `-VarDecl 0x7f8b9c864910 <col:5, col:9> col:9 used i 'int'
|   `-ForStmt 0x7f8b9c864eb0 <line:8:5, line:10:5>
|     |-BinaryOperator 0x7f8b9c8649d0 <line:8:10, col:14> 'int' '='
|     | |-DeclRefExpr 0x7f8b9c864990 <col:10> 'int' lvalue Var 0x7f8b9c864910 'i' 'int'
|     | `-IntegerLiteral 0x7f8b9c8649b0 <col:14> 'int' 0
|     |-<<<NULL>>>
|     |-ImplicitCastExpr 0x7f8b9c864a10 <col:17> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x7f8b9c8649f0 <col:17> 'int' lvalue ParmVar 0x7f8b9c864400 'n' 'int'
|     |-UnaryOperator 0x7f8b9c864a48 <col:20, col:21> 'int' postfix '++'
|     | `-DeclRefExpr 0x7f8b9c864a28 <col:20> 'int' lvalue Var 0x7f8b9c864910 'i' 'int'
|     `-CompoundStmt 0x7f8b9c864e98 <col:26, line:10:5>
|       `-BinaryOperator 0x7f8b9c864e78 <line:9:9, col:24> 'double' '='
|         |-ArraySubscriptExpr 0x7f8b9c864ad0 <col:9, col:12> 'double' lvalue
|         | |-ImplicitCastExpr 0x7f8b9c864aa0 <col:9> 'double *':'double *' <LValueToRValue>
|         | | `-DeclRefExpr 0x7f8b9c864a60 <col:9> 'double *':'double *' lvalue ParmVar 0x7f8b9c8646d0 'z' 'double *':'double *'
|         | `-ImplicitCastExpr 0x7f8b9c864ab8 <col:11> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x7f8b9c864a80 <col:11> 'int' lvalue Var 0x7f8b9c864910 'i' 'int'
|         `-ImplicitCastExpr 0x7f8b9c864e60 <col:16, col:24> 'double' <IntegralToFloating>
|           `-CallExpr 0x7f8b9c864d70 <col:16, col:24> 'int'
|             |-ImplicitCastExpr 0x7f8b9c864d58 <col:16> 'int (*)(int)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x7f8b9c864c80 <col:16> 'int (int)' Function 0x7f8b9c864b20 'abs' 'int (int)'
|             `-ImplicitCastExpr 0x7f8b9c864db0 <col:20, col:23> 'int' <FloatingToIntegral>
|               `-ImplicitCastExpr 0x7f8b9c864d98 <col:20, col:23> 'double' <LValueToRValue>
|                 `-ArraySubscriptExpr 0x7f8b9c864d10 <col:20, col:23> 'double' lvalue
|                   |-ImplicitCastExpr 0x7f8b9c864ce0 <col:20> 'double *':'double *' <LValueToRValue>
|                   | `-DeclRefExpr 0x7f8b9c864ca0 <col:20> 'double *':'double *' lvalue ParmVar 0x7f8b9c864580 'x' 'double *':'double *'
|                   `-ImplicitCastExpr 0x7f8b9c864cf8 <col:22> 'int' <LValueToRValue>
|                     `-DeclRefExpr 0x7f8b9c864cc0 <col:22> 'int' lvalue Var 0x7f8b9c864910 'i' 'int'
`-FunctionDecl 0x7f8b9c864b20 <col:16> col:16 implicit used abs 'int (int)' extern
  |-ParmVarDecl 0x7f8b9c864bc0 <<invalid sloc>> <invalid sloc> 'int'
  |-NoThrowAttr 0x7f8b9c864c30 <col:16> Implicit
  `-ConstAttr 0x7f8b9c864c70 <col:16> Implicit
