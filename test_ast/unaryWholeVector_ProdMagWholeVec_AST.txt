TranslationUnitDecl 0x7fb1e5038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fb1e50394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fb1e50391a0 '__int128'
|-TypedefDecl 0x7fb1e5039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fb1e50391c0 'unsigned __int128'
|-TypedefDecl 0x7fb1e50397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fb1e50395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fb1e5039568 '__NSConstantString_tag'
|-TypedefDecl 0x7fb1e5039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fb1e5039850 'char *'
|   `-BuiltinType 0x7fb1e5038ca0 'char'
|-TypedefDecl 0x7fb1e5039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fb1e5039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fb1e5039970 'struct __va_list_tag'
|     `-Record 0x7fb1e50398e8 '__va_list_tag'
|-TypedefDecl 0x7fb1e582f200 <./tree_src/unaryWholeVector_ProdMagWholeVec.c:4:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fb1e5038d60 'unsigned char'
|-FunctionDecl 0x7fb1e582f598 <line:10:1, line:19:1> line:10:6 ProdMagWholeVec 'void (int, double *, double *)'
| |-ParmVarDecl 0x7fb1e582f270 <line:11:5, col:9> col:9 used n 'int'
| |-ParmVarDecl 0x7fb1e582f3f0 <col:12, col:22> col:19 used x 'double *':'double *'
| |-ParmVarDecl 0x7fb1e582f470 <col:25, col:33> col:33 used z 'double *'
| `-CompoundStmt 0x7fb1e582fe08 <col:37, line:19:1>
|   |-DeclStmt 0x7fb1e582f718 <line:13:5, col:10>
|   | `-VarDecl 0x7fb1e582f6b0 <col:5, col:9> col:9 used i 'int'
|   |-DeclStmt 0x7fb1e582f7b0 <line:14:5, col:21>
|   | `-VarDecl 0x7fb1e582f748 <col:5, col:12> col:12 used val 'double'
|   |-ForStmt 0x7fb1e582fd28 <line:15:5, line:17:5>
|   | |-BinaryOperator 0x7fb1e582f808 <line:15:10, col:13> 'int' '='
|   | | |-DeclRefExpr 0x7fb1e582f7c8 <col:10> 'int' lvalue Var 0x7fb1e582f6b0 'i' 'int'
|   | | `-IntegerLiteral 0x7fb1e582f7e8 <col:13> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fb1e582f898 <col:16, col:18> 'int' '<'
|   | | |-ImplicitCastExpr 0x7fb1e582f868 <col:16> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fb1e582f828 <col:16> 'int' lvalue Var 0x7fb1e582f6b0 'i' 'int'
|   | | `-ImplicitCastExpr 0x7fb1e582f880 <col:18> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fb1e582f848 <col:18> 'int' lvalue ParmVar 0x7fb1e582f270 'n' 'int'
|   | |-UnaryOperator 0x7fb1e582f8d8 <col:21, col:22> 'int' postfix '++'
|   | | `-DeclRefExpr 0x7fb1e582f8b8 <col:21> 'int' lvalue Var 0x7fb1e582f6b0 'i' 'int'
|   | `-CompoundStmt 0x7fb1e582fd10 <col:27, line:17:5>
|   |   `-BinaryOperator 0x7fb1e582fcf0 <line:16:9, col:32> 'double' '='
|   |     |-DeclRefExpr 0x7fb1e582f8f0 <col:9> 'double' lvalue Var 0x7fb1e582f748 'val' 'double'
|   |     `-BinaryOperator 0x7fb1e582fcd0 <col:15, col:32> 'double' '*'
|   |       |-ImplicitCastExpr 0x7fb1e582fca0 <col:15> 'double' <LValueToRValue>
|   |       | `-DeclRefExpr 0x7fb1e582f910 <col:15> 'double' lvalue Var 0x7fb1e582f748 'val' 'double'
|   |       `-ImplicitCastExpr 0x7fb1e582fcb8 <col:21, col:32> 'double' <IntegralToFloating>
|   |         `-CallExpr 0x7fb1e582fbb0 <col:21, col:32> 'int'
|   |           |-ImplicitCastExpr 0x7fb1e582fb98 <col:21> 'int (*)(int)' <FunctionToPointerDecay>
|   |           | `-DeclRefExpr 0x7fb1e582fac0 <col:21> 'int (int)' Function 0x7fb1e582f960 'abs' 'int (int)'
|   |           `-ImplicitCastExpr 0x7fb1e582fbf0 <col:27, col:30> 'int' <FloatingToIntegral>
|   |             `-ImplicitCastExpr 0x7fb1e582fbd8 <col:27, col:30> 'double' <LValueToRValue>
|   |               `-ArraySubscriptExpr 0x7fb1e582fb50 <col:27, col:30> 'double' lvalue
|   |                 |-ImplicitCastExpr 0x7fb1e582fb20 <col:27> 'double *':'double *' <LValueToRValue>
|   |                 | `-DeclRefExpr 0x7fb1e582fae0 <col:27> 'double *':'double *' lvalue ParmVar 0x7fb1e582f3f0 'x' 'double *':'double *'
|   |                 `-ImplicitCastExpr 0x7fb1e582fb38 <col:29> 'int' <LValueToRValue>
|   |                   `-DeclRefExpr 0x7fb1e582fb00 <col:29> 'int' lvalue Var 0x7fb1e582f6b0 'i' 'int'
|   `-BinaryOperator 0x7fb1e582fde8 <line:18:5, col:10> 'double' '='
|     |-UnaryOperator 0x7fb1e582fd98 <col:5, col:6> 'double' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x7fb1e582fd80 <col:6> 'double *' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fb1e582fd60 <col:6> 'double *' lvalue ParmVar 0x7fb1e582f470 'z' 'double *'
|     `-ImplicitCastExpr 0x7fb1e582fdd0 <col:10> 'double' <LValueToRValue>
|       `-DeclRefExpr 0x7fb1e582fdb0 <col:10> 'double' lvalue Var 0x7fb1e582f748 'val' 'double'
`-FunctionDecl 0x7fb1e582f960 <line:16:21> col:21 implicit used abs 'int (int)' extern
  |-ParmVarDecl 0x7fb1e582fa00 <<invalid sloc>> <invalid sloc> 'int'
  |-NoThrowAttr 0x7fb1e582fa70 <col:21> Implicit
  `-ConstAttr 0x7fb1e582fab0 <col:21> Implicit
