TranslationUnitDecl 0x7f9fc5838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f9fc58394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f9fc58391a0 '__int128'
|-TypedefDecl 0x7f9fc5839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f9fc58391c0 'unsigned __int128'
|-TypedefDecl 0x7f9fc58397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f9fc58395f0 'struct __NSConstantString_tag'
|   `-Record 0x7f9fc5839568 '__NSConstantString_tag'
|-TypedefDecl 0x7f9fc5839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f9fc5839850 'char *'
|   `-BuiltinType 0x7f9fc5838ca0 'char'
|-TypedefDecl 0x7f9fc5839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f9fc5839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f9fc5839970 'struct __va_list_tag'
|     `-Record 0x7f9fc58398e8 '__va_list_tag'
`-FunctionDecl 0x7f9fc602e5f8 <./tree_src/recurWholeVector_Order2OffsetVec.c:3:1, line:10:1> line:3:6 Order2OffsetVec 'void (int, double *, double *)'
  |-ParmVarDecl 0x7f9fc602e200 <line:4:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7f9fc602e380 <col:12, col:22> col:19 used x 'double *':'double *'
  |-ParmVarDecl 0x7f9fc602e4d0 <col:25, col:35> col:32 used c 'double *':'double *'
  `-CompoundStmt 0x7f9fc602ec70 <col:39, line:10:1>
    |-DeclStmt 0x7f9fc602e778 <line:6:5, col:10>
    | `-VarDecl 0x7f9fc602e710 <col:5, col:9> col:9 used i 'int'
    `-ForStmt 0x7f9fc602ec38 <line:7:5, line:9:5>
      |-BinaryOperator 0x7f9fc602e7d0 <line:7:10, col:13> 'int' '='
      | |-DeclRefExpr 0x7f9fc602e790 <col:10> 'int' lvalue Var 0x7f9fc602e710 'i' 'int'
      | `-IntegerLiteral 0x7f9fc602e7b0 <col:13> 'int' 2
      |-<<<NULL>>>
      |-BinaryOperator 0x7f9fc602e860 <col:16, col:18> 'int' '<'
      | |-ImplicitCastExpr 0x7f9fc602e830 <col:16> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7f9fc602e7f0 <col:16> 'int' lvalue Var 0x7f9fc602e710 'i' 'int'
      | `-ImplicitCastExpr 0x7f9fc602e848 <col:18> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f9fc602e810 <col:18> 'int' lvalue ParmVar 0x7f9fc602e200 'n' 'int'
      |-UnaryOperator 0x7f9fc602e8a0 <col:21, col:22> 'int' postfix '++'
      | `-DeclRefExpr 0x7f9fc602e880 <col:21> 'int' lvalue Var 0x7f9fc602e710 'i' 'int'
      `-CompoundStmt 0x7f9fc602ec20 <col:27, line:9:5>
        `-BinaryOperator 0x7f9fc602ec00 <line:8:9, col:37> 'double' '='
          |-ArraySubscriptExpr 0x7f9fc602e928 <col:9, col:12> 'double' lvalue
          | |-ImplicitCastExpr 0x7f9fc602e8f8 <col:9> 'double *':'double *' <LValueToRValue>
          | | `-DeclRefExpr 0x7f9fc602e8b8 <col:9> 'double *':'double *' lvalue ParmVar 0x7f9fc602e380 'x' 'double *':'double *'
          | `-ImplicitCastExpr 0x7f9fc602e910 <col:11> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x7f9fc602e8d8 <col:11> 'int' lvalue Var 0x7f9fc602e710 'i' 'int'
          `-BinaryOperator 0x7f9fc602ebe0 <col:16, col:37> 'double' '+'
            |-BinaryOperator 0x7f9fc602eb18 <col:16, col:30> 'double' '+'
            | |-ImplicitCastExpr 0x7f9fc602eae8 <col:16, col:21> 'double' <LValueToRValue>
            | | `-ArraySubscriptExpr 0x7f9fc602e9f8 <col:16, col:21> 'double' lvalue
            | |   |-ImplicitCastExpr 0x7f9fc602e9e0 <col:16> 'double *':'double *' <LValueToRValue>
            | |   | `-DeclRefExpr 0x7f9fc602e948 <col:16> 'double *':'double *' lvalue ParmVar 0x7f9fc602e380 'x' 'double *':'double *'
            | |   `-BinaryOperator 0x7f9fc602e9c0 <col:18, col:20> 'int' '-'
            | |     |-ImplicitCastExpr 0x7f9fc602e9a8 <col:18> 'int' <LValueToRValue>
            | |     | `-DeclRefExpr 0x7f9fc602e968 <col:18> 'int' lvalue Var 0x7f9fc602e710 'i' 'int'
            | |     `-IntegerLiteral 0x7f9fc602e988 <col:20> 'int' 1
            | `-ImplicitCastExpr 0x7f9fc602eb00 <col:25, col:30> 'double' <LValueToRValue>
            |   `-ArraySubscriptExpr 0x7f9fc602eac8 <col:25, col:30> 'double' lvalue
            |     |-ImplicitCastExpr 0x7f9fc602eab0 <col:25> 'double *':'double *' <LValueToRValue>
            |     | `-DeclRefExpr 0x7f9fc602ea18 <col:25> 'double *':'double *' lvalue ParmVar 0x7f9fc602e380 'x' 'double *':'double *'
            |     `-BinaryOperator 0x7f9fc602ea90 <col:27, col:29> 'int' '-'
            |       |-ImplicitCastExpr 0x7f9fc602ea78 <col:27> 'int' <LValueToRValue>
            |       | `-DeclRefExpr 0x7f9fc602ea38 <col:27> 'int' lvalue Var 0x7f9fc602e710 'i' 'int'
            |       `-IntegerLiteral 0x7f9fc602ea58 <col:29> 'int' 2
            `-ImplicitCastExpr 0x7f9fc602ebc8 <col:34, col:37> 'double' <LValueToRValue>
              `-ArraySubscriptExpr 0x7f9fc602eba8 <col:34, col:37> 'double' lvalue
                |-ImplicitCastExpr 0x7f9fc602eb78 <col:34> 'double *':'double *' <LValueToRValue>
                | `-DeclRefExpr 0x7f9fc602eb38 <col:34> 'double *':'double *' lvalue ParmVar 0x7f9fc602e4d0 'c' 'double *':'double *'
                `-ImplicitCastExpr 0x7f9fc602eb90 <col:36> 'int' <LValueToRValue>
                  `-DeclRefExpr 0x7f9fc602eb58 <col:36> 'int' lvalue Var 0x7f9fc602e710 'i' 'int'
