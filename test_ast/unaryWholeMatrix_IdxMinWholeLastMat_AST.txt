TranslationUnitDecl 0x7fc9b4838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fc9b48394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fc9b48391a0 '__int128'
|-TypedefDecl 0x7fc9b4839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fc9b48391c0 'unsigned __int128'
|-TypedefDecl 0x7fc9b48397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fc9b48395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fc9b4839568 '__NSConstantString_tag'
|-TypedefDecl 0x7fc9b4839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fc9b4839850 'char *'
|   `-BuiltinType 0x7fc9b4838ca0 'char'
|-TypedefDecl 0x7fc9b4839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fc9b4839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fc9b4839970 'struct __va_list_tag'
|     `-Record 0x7fc9b48398e8 '__va_list_tag'
|-TypedefDecl 0x7fc9b502f200 <./tree_src/unaryWholeMatrix_IdxMinWholeLastMat.c:4:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fc9b4838d60 'unsigned char'
`-FunctionDecl 0x7fc9b502f828 <line:12:1, line:28:1> line:12:6 IdxMinWholeLastMat 'void (int, int, double (*)[m], int *)'
  |-ParmVarDecl 0x7fc9b502f270 <line:13:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7fc9b502f2f0 <col:12, col:16> col:16 used m 'int'
  |-ParmVarDecl 0x7fc9b502f4f0 <col:19, col:32> col:26 used x 'double (*)[m]':'double (*)[m]'
  |-ParmVarDecl 0x7fc9b502f670 <col:35, col:42> col:39 used z 'int *':'int *'
  `-CompoundStmt 0x7fc9b50324b8 <col:46, line:28:1>
    |-DeclStmt 0x7fc9b502f9b0 <line:15:5, col:15>
    | `-VarDecl 0x7fc9b502f948 <col:5, col:12> col:12 used val 'double'
    |-DeclStmt 0x7fc9b502fb68 <line:16:5, col:18>
    | |-VarDecl 0x7fc9b502f9e0 <col:5, col:9> col:9 used i 'int'
    | |-VarDecl 0x7fc9b502fa60 <col:5, col:12> col:12 used j 'int'
    | `-VarDecl 0x7fc9b502fae0 <col:5, col:15> col:15 used loc 'int'
    `-ForStmt 0x7fc9b5032480 <line:17:5, line:27:5>
      |-BinaryOperator 0x7fc9b502fbc0 <line:17:10, col:13> 'int' '='
      | |-DeclRefExpr 0x7fc9b502fb80 <col:10> 'int' lvalue Var 0x7fc9b502f9e0 'i' 'int'
      | `-IntegerLiteral 0x7fc9b502fba0 <col:13> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x7fc9b502fc50 <col:16, col:18> 'int' '<'
      | |-ImplicitCastExpr 0x7fc9b502fc20 <col:16> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fc9b502fbe0 <col:16> 'int' lvalue Var 0x7fc9b502f9e0 'i' 'int'
      | `-ImplicitCastExpr 0x7fc9b502fc38 <col:18> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fc9b502fc00 <col:18> 'int' lvalue ParmVar 0x7fc9b502f270 'n' 'int'
      |-UnaryOperator 0x7fc9b502fc90 <col:21, col:22> 'int' postfix '++'
      | `-DeclRefExpr 0x7fc9b502fc70 <col:21> 'int' lvalue Var 0x7fc9b502f9e0 'i' 'int'
      `-CompoundStmt 0x7fc9b5032450 <col:27, line:27:5>
        |-BinaryOperator 0x7fc9b502fce8 <line:18:9, col:15> 'int' '='
        | |-DeclRefExpr 0x7fc9b502fca8 <col:9> 'int' lvalue Var 0x7fc9b502fae0 'loc' 'int'
        | `-IntegerLiteral 0x7fc9b502fcc8 <col:15> 'int' 0
        |-BinaryOperator 0x7fc9b502fe58 <line:19:9, col:22> 'double' '='
        | |-DeclRefExpr 0x7fc9b502fd08 <col:9> 'double' lvalue Var 0x7fc9b502f948 'val' 'double'
        | `-ImplicitCastExpr 0x7fc9b502fe40 <col:16, col:22> 'double' <LValueToRValue>
        |   `-ArraySubscriptExpr 0x7fc9b502fe20 <col:16, col:22> 'double' lvalue
        |     |-ImplicitCastExpr 0x7fc9b502fe08 <col:16, col:19> 'double *' <ArrayToPointerDecay>
        |     | `-ArraySubscriptExpr 0x7fc9b502fd98 <col:16, col:19> 'double [m]' lvalue
        |     |   |-ImplicitCastExpr 0x7fc9b502fd68 <col:16> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
        |     |   | `-DeclRefExpr 0x7fc9b502fd28 <col:16> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fc9b502f4f0 'x' 'double (*)[m]':'double (*)[m]'
        |     |   `-ImplicitCastExpr 0x7fc9b502fd80 <col:18> 'int' <LValueToRValue>
        |     |     `-DeclRefExpr 0x7fc9b502fd48 <col:18> 'int' lvalue Var 0x7fc9b502f9e0 'i' 'int'
        |     `-IntegerLiteral 0x7fc9b502fdb8 <col:21> 'int' 0
        |-ForStmt 0x7fc9b5032330 <line:20:9, line:25:9>
        | |-BinaryOperator 0x7fc9b502feb8 <line:20:14, col:18> 'int' '='
        | | |-DeclRefExpr 0x7fc9b502fe78 <col:14> 'int' lvalue Var 0x7fc9b502fa60 'j' 'int'
        | | `-IntegerLiteral 0x7fc9b502fe98 <col:18> 'int' 1
        | |-<<<NULL>>>
        | |-BinaryOperator 0x7fc9b502ff48 <col:21, col:23> 'int' '<'
        | | |-ImplicitCastExpr 0x7fc9b502ff18 <col:21> 'int' <LValueToRValue>
        | | | `-DeclRefExpr 0x7fc9b502fed8 <col:21> 'int' lvalue Var 0x7fc9b502fa60 'j' 'int'
        | | `-ImplicitCastExpr 0x7fc9b502ff30 <col:23> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fc9b502fef8 <col:23> 'int' lvalue ParmVar 0x7fc9b502f2f0 'm' 'int'
        | |-UnaryOperator 0x7fc9b502ff88 <col:26, col:27> 'int' postfix '++'
        | | `-DeclRefExpr 0x7fc9b502ff68 <col:26> 'int' lvalue Var 0x7fc9b502fa60 'j' 'int'
        | `-CompoundStmt 0x7fc9b5032318 <col:32, line:25:9>
        |   `-IfStmt 0x7fc9b5032300 <line:21:6, line:24:6>
        |     |-BinaryOperator 0x7fc9b50300f0 <line:21:10, col:20> 'int' '<'
        |     | |-ImplicitCastExpr 0x7fc9b50300c0 <col:10, col:16> 'double' <LValueToRValue>
        |     | | `-ArraySubscriptExpr 0x7fc9b5030080 <col:10, col:16> 'double' lvalue
        |     | |   |-ImplicitCastExpr 0x7fc9b5030050 <col:10, col:13> 'double *' <ArrayToPointerDecay>
        |     | |   | `-ArraySubscriptExpr 0x7fc9b5030010 <col:10, col:13> 'double [m]' lvalue
        |     | |   |   |-ImplicitCastExpr 0x7fc9b502ffe0 <col:10> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
        |     | |   |   | `-DeclRefExpr 0x7fc9b502ffa0 <col:10> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fc9b502f4f0 'x' 'double (*)[m]':'double (*)[m]'
        |     | |   |   `-ImplicitCastExpr 0x7fc9b502fff8 <col:12> 'int' <LValueToRValue>
        |     | |   |     `-DeclRefExpr 0x7fc9b502ffc0 <col:12> 'int' lvalue Var 0x7fc9b502f9e0 'i' 'int'
        |     | |   `-ImplicitCastExpr 0x7fc9b5030068 <col:15> 'int' <LValueToRValue>
        |     | |     `-DeclRefExpr 0x7fc9b5030030 <col:15> 'int' lvalue Var 0x7fc9b502fa60 'j' 'int'
        |     | `-ImplicitCastExpr 0x7fc9b50300d8 <col:20> 'double' <LValueToRValue>
        |     |   `-DeclRefExpr 0x7fc9b50300a0 <col:20> 'double' lvalue Var 0x7fc9b502f948 'val' 'double'
        |     `-CompoundStmt 0x7fc9b50322e0 <col:26, line:24:6>
        |       |-BinaryOperator 0x7fc9b5030168 <line:22:7, col:13> 'int' '='
        |       | |-DeclRefExpr 0x7fc9b5030110 <col:7> 'int' lvalue Var 0x7fc9b502fae0 'loc' 'int'
        |       | `-ImplicitCastExpr 0x7fc9b5030150 <col:13> 'int' <LValueToRValue>
        |       |   `-DeclRefExpr 0x7fc9b5030130 <col:13> 'int' lvalue Var 0x7fc9b502fa60 'j' 'int'
        |       `-BinaryOperator 0x7fc9b50322c0 <line:23:7, col:20> 'double' '='
        |         |-DeclRefExpr 0x7fc9b5030188 <col:7> 'double' lvalue Var 0x7fc9b502f948 'val' 'double'
        |         `-ImplicitCastExpr 0x7fc9b50322a8 <col:14, col:20> 'double' <LValueToRValue>
        |           `-ArraySubscriptExpr 0x7fc9b5032288 <col:14, col:20> 'double' lvalue
        |             |-ImplicitCastExpr 0x7fc9b5032258 <col:14, col:17> 'double *' <ArrayToPointerDecay>
        |             | `-ArraySubscriptExpr 0x7fc9b5032218 <col:14, col:17> 'double [m]' lvalue
        |             |   |-ImplicitCastExpr 0x7fc9b50301e8 <col:14> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
        |             |   | `-DeclRefExpr 0x7fc9b50301a8 <col:14> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fc9b502f4f0 'x' 'double (*)[m]':'double (*)[m]'
        |             |   `-ImplicitCastExpr 0x7fc9b5032200 <col:16> 'int' <LValueToRValue>
        |             |     `-DeclRefExpr 0x7fc9b50301c8 <col:16> 'int' lvalue Var 0x7fc9b502f9e0 'i' 'int'
        |             `-ImplicitCastExpr 0x7fc9b5032270 <col:19> 'int' <LValueToRValue>
        |               `-DeclRefExpr 0x7fc9b5032238 <col:19> 'int' lvalue Var 0x7fc9b502fa60 'j' 'int'
        `-BinaryOperator 0x7fc9b5032430 <line:26:9, col:16> 'int' '='
          |-ArraySubscriptExpr 0x7fc9b50323d8 <col:9, col:12> 'int' lvalue
          | |-ImplicitCastExpr 0x7fc9b50323a8 <col:9> 'int *':'int *' <LValueToRValue>
          | | `-DeclRefExpr 0x7fc9b5032368 <col:9> 'int *':'int *' lvalue ParmVar 0x7fc9b502f670 'z' 'int *':'int *'
          | `-ImplicitCastExpr 0x7fc9b50323c0 <col:11> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x7fc9b5032388 <col:11> 'int' lvalue Var 0x7fc9b502f9e0 'i' 'int'
          `-ImplicitCastExpr 0x7fc9b5032418 <col:16> 'int' <LValueToRValue>
            `-DeclRefExpr 0x7fc9b50323f8 <col:16> 'int' lvalue Var 0x7fc9b502fae0 'loc' 'int'
