TranslationUnitDecl 0x7fd0c6038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fd0c60394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fd0c60391a0 '__int128'
|-TypedefDecl 0x7fd0c6039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fd0c60391c0 'unsigned __int128'
|-TypedefDecl 0x7fd0c60397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fd0c60395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fd0c6039568 '__NSConstantString_tag'
|-TypedefDecl 0x7fd0c6039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fd0c6039850 'char *'
|   `-BuiltinType 0x7fd0c6038ca0 'char'
|-TypedefDecl 0x7fd0c6039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fd0c6039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fd0c6039970 'struct __va_list_tag'
|     `-Record 0x7fd0c60398e8 '__va_list_tag'
|-TypedefDecl 0x7fd0c682f200 <./tree_src/unaryWholeMatrix_ProdSuffixWholeLastMat.c:4:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fd0c6038d60 'unsigned char'
`-FunctionDecl 0x7fd0c682f918 <line:11:1, line:21:1> line:11:6 ProdSuffixWholeLastMat 'void (int, int, double (*)[m], double (*)[m])'
  |-ParmVarDecl 0x7fd0c682f270 <line:12:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7fd0c682f2f0 <col:12, col:16> col:16 used m 'int'
  |-ParmVarDecl 0x7fd0c682f4f0 <col:19, col:32> col:26 used x 'double (*)[m]':'double (*)[m]'
  |-ParmVarDecl 0x7fd0c682f6f0 <col:35, col:48> col:42 used y 'double (*)[m]':'double (*)[m]'
  `-CompoundStmt 0x7fd0c6832500 <col:52, line:21:1>
    |-DeclStmt 0x7fd0c682fb38 <line:14:5, col:13>
    | |-VarDecl 0x7fd0c682fa38 <col:5, col:9> col:9 used i 'int'
    | `-VarDecl 0x7fd0c682fab8 <col:5, col:12> col:12 used j 'int'
    `-ForStmt 0x7fd0c68324c8 <line:15:5, line:20:5>
      |-BinaryOperator 0x7fd0c682fb90 <line:15:10, col:12> 'int' '='
      | |-DeclRefExpr 0x7fd0c682fb50 <col:10> 'int' lvalue Var 0x7fd0c682fa38 'i' 'int'
      | `-IntegerLiteral 0x7fd0c682fb70 <col:12> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x7fd0c682fc20 <col:15, col:17> 'int' '<'
      | |-ImplicitCastExpr 0x7fd0c682fbf0 <col:15> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fd0c682fbb0 <col:15> 'int' lvalue Var 0x7fd0c682fa38 'i' 'int'
      | `-ImplicitCastExpr 0x7fd0c682fc08 <col:17> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fd0c682fbd0 <col:17> 'int' lvalue ParmVar 0x7fd0c682f270 'n' 'int'
      |-UnaryOperator 0x7fd0c682fc60 <col:20, col:21> 'int' postfix '++'
      | `-DeclRefExpr 0x7fd0c682fc40 <col:20> 'int' lvalue Var 0x7fd0c682fa38 'i' 'int'
      `-CompoundStmt 0x7fd0c68324a8 <col:26, line:20:5>
        |-BinaryOperator 0x7fd0c682fec0 <line:16:2, col:18> 'double' '='
        | |-ArraySubscriptExpr 0x7fd0c682fd88 <col:2, col:8> 'double' lvalue
        | | |-ImplicitCastExpr 0x7fd0c682fd58 <col:2, col:5> 'double *' <ArrayToPointerDecay>
        | | | `-ArraySubscriptExpr 0x7fd0c682fce8 <col:2, col:5> 'double [m]' lvalue
        | | |   |-ImplicitCastExpr 0x7fd0c682fcb8 <col:2> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
        | | |   | `-DeclRefExpr 0x7fd0c682fc78 <col:2> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fd0c682f6f0 'y' 'double (*)[m]':'double (*)[m]'
        | | |   `-ImplicitCastExpr 0x7fd0c682fcd0 <col:4> 'int' <LValueToRValue>
        | | |     `-DeclRefExpr 0x7fd0c682fc98 <col:4> 'int' lvalue Var 0x7fd0c682fa38 'i' 'int'
        | | `-ImplicitCastExpr 0x7fd0c682fd70 <col:7> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fd0c682fd08 <col:7> 'int' lvalue ParmVar 0x7fd0c682f2f0 'm' 'int'
        | `-ImplicitCastExpr 0x7fd0c682fea8 <col:12, col:18> 'double' <LValueToRValue>
        |   `-ArraySubscriptExpr 0x7fd0c682fe88 <col:12, col:18> 'double' lvalue
        |     |-ImplicitCastExpr 0x7fd0c682fe58 <col:12, col:15> 'double *' <ArrayToPointerDecay>
        |     | `-ArraySubscriptExpr 0x7fd0c682fe18 <col:12, col:15> 'double [m]' lvalue
        |     |   |-ImplicitCastExpr 0x7fd0c682fde8 <col:12> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
        |     |   | `-DeclRefExpr 0x7fd0c682fda8 <col:12> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fd0c682f4f0 'x' 'double (*)[m]':'double (*)[m]'
        |     |   `-ImplicitCastExpr 0x7fd0c682fe00 <col:14> 'int' <LValueToRValue>
        |     |     `-DeclRefExpr 0x7fd0c682fdc8 <col:14> 'int' lvalue Var 0x7fd0c682fa38 'i' 'int'
        |     `-ImplicitCastExpr 0x7fd0c682fe70 <col:17> 'int' <LValueToRValue>
        |       `-DeclRefExpr 0x7fd0c682fe38 <col:17> 'int' lvalue ParmVar 0x7fd0c682f2f0 'm' 'int'
        `-ForStmt 0x7fd0c6832470 <line:17:9, line:19:9>
          |-BinaryOperator 0x7fd0c682ff78 <line:17:14, col:20> 'int' '='
          | |-DeclRefExpr 0x7fd0c682fee0 <col:14> 'int' lvalue Var 0x7fd0c682fab8 'j' 'int'
          | `-BinaryOperator 0x7fd0c682ff58 <col:18, col:20> 'int' '-'
          |   |-ImplicitCastExpr 0x7fd0c682ff40 <col:18> 'int' <LValueToRValue>
          |   | `-DeclRefExpr 0x7fd0c682ff00 <col:18> 'int' lvalue ParmVar 0x7fd0c682f2f0 'm' 'int'
          |   `-IntegerLiteral 0x7fd0c682ff20 <col:20> 'int' 1
          |-<<<NULL>>>
          |-BinaryOperator 0x7fd0c682fff0 <col:23, col:25> 'int' '>'
          | |-ImplicitCastExpr 0x7fd0c682ffd8 <col:23> 'int' <LValueToRValue>
          | | `-DeclRefExpr 0x7fd0c682ff98 <col:23> 'int' lvalue Var 0x7fd0c682fab8 'j' 'int'
          | `-IntegerLiteral 0x7fd0c682ffb8 <col:25> 'int' 0
          |-CompoundAssignOperator 0x7fd0c6830068 <col:28, col:33> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
          | |-DeclRefExpr 0x7fd0c6830010 <col:28> 'int' lvalue Var 0x7fd0c682fab8 'j' 'int'
          | `-UnaryOperator 0x7fd0c6830050 <col:32, col:33> 'int' prefix '-'
          |   `-IntegerLiteral 0x7fd0c6830030 <col:33> 'int' 1
          `-CompoundStmt 0x7fd0c6832458 <col:37, line:19:9>
            `-BinaryOperator 0x7fd0c6832438 <line:18:6, col:34> 'double' '='
              |-ArraySubscriptExpr 0x7fd0c6830178 <col:6, col:12> 'double' lvalue
              | |-ImplicitCastExpr 0x7fd0c6830148 <col:6, col:9> 'double *' <ArrayToPointerDecay>
              | | `-ArraySubscriptExpr 0x7fd0c6830108 <col:6, col:9> 'double [m]' lvalue
              | |   |-ImplicitCastExpr 0x7fd0c68300d8 <col:6> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
              | |   | `-DeclRefExpr 0x7fd0c6830098 <col:6> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fd0c682f6f0 'y' 'double (*)[m]':'double (*)[m]'
              | |   `-ImplicitCastExpr 0x7fd0c68300f0 <col:8> 'int' <LValueToRValue>
              | |     `-DeclRefExpr 0x7fd0c68300b8 <col:8> 'int' lvalue Var 0x7fd0c682fa38 'i' 'int'
              | `-ImplicitCastExpr 0x7fd0c6830160 <col:11> 'int' <LValueToRValue>
              |   `-DeclRefExpr 0x7fd0c6830128 <col:11> 'int' lvalue Var 0x7fd0c682fab8 'j' 'int'
              `-BinaryOperator 0x7fd0c6832418 <col:16, col:34> 'double' '*'
                |-ImplicitCastExpr 0x7fd0c68323e8 <col:16, col:24> 'double' <LValueToRValue>
                | `-ArraySubscriptExpr 0x7fd0c68322c8 <col:16, col:24> 'double' lvalue
                |   |-ImplicitCastExpr 0x7fd0c68322b0 <col:16, col:19> 'double *' <ArrayToPointerDecay>
                |   | `-ArraySubscriptExpr 0x7fd0c6832218 <col:16, col:19> 'double [m]' lvalue
                |   |   |-ImplicitCastExpr 0x7fd0c68301d8 <col:16> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
                |   |   | `-DeclRefExpr 0x7fd0c6830198 <col:16> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fd0c682f6f0 'y' 'double (*)[m]':'double (*)[m]'
                |   |   `-ImplicitCastExpr 0x7fd0c6832200 <col:18> 'int' <LValueToRValue>
                |   |     `-DeclRefExpr 0x7fd0c68301b8 <col:18> 'int' lvalue Var 0x7fd0c682fa38 'i' 'int'
                |   `-BinaryOperator 0x7fd0c6832290 <col:21, col:23> 'int' '+'
                |     |-ImplicitCastExpr 0x7fd0c6832278 <col:21> 'int' <LValueToRValue>
                |     | `-DeclRefExpr 0x7fd0c6832238 <col:21> 'int' lvalue Var 0x7fd0c682fab8 'j' 'int'
                |     `-IntegerLiteral 0x7fd0c6832258 <col:23> 'int' 1
                `-ImplicitCastExpr 0x7fd0c6832400 <col:28, col:34> 'double' <LValueToRValue>
                  `-ArraySubscriptExpr 0x7fd0c68323c8 <col:28, col:34> 'double' lvalue
                    |-ImplicitCastExpr 0x7fd0c6832398 <col:28, col:31> 'double *' <ArrayToPointerDecay>
                    | `-ArraySubscriptExpr 0x7fd0c6832358 <col:28, col:31> 'double [m]' lvalue
                    |   |-ImplicitCastExpr 0x7fd0c6832328 <col:28> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
                    |   | `-DeclRefExpr 0x7fd0c68322e8 <col:28> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fd0c682f4f0 'x' 'double (*)[m]':'double (*)[m]'
                    |   `-ImplicitCastExpr 0x7fd0c6832340 <col:30> 'int' <LValueToRValue>
                    |     `-DeclRefExpr 0x7fd0c6832308 <col:30> 'int' lvalue Var 0x7fd0c682fa38 'i' 'int'
                    `-ImplicitCastExpr 0x7fd0c68323b0 <col:33> 'int' <LValueToRValue>
                      `-DeclRefExpr 0x7fd0c6832378 <col:33> 'int' lvalue Var 0x7fd0c682fab8 'j' 'int'
