TranslationUnitDecl 0x7fdece038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fdece0394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fdece0391a0 '__int128'
|-TypedefDecl 0x7fdece039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fdece0391c0 'unsigned __int128'
|-TypedefDecl 0x7fdece0397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fdece0395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fdece039568 '__NSConstantString_tag'
|-TypedefDecl 0x7fdece039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fdece039850 'char *'
|   `-BuiltinType 0x7fdece038ca0 'char'
|-TypedefDecl 0x7fdece039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fdece039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fdece039970 'struct __va_list_tag'
|     `-Record 0x7fdece0398e8 '__va_list_tag'
|-TypedefDecl 0x7fdece82f200 <./tree_src/extendSectVector_MulSectScaVec.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fdece038d60 'unsigned char'
`-FunctionDecl 0x7fdece82fb28 <line:6:1, line:17:1> line:6:6 MulSectScaVec 'void (int, int, double, double *, double *, int, int, int, int, int, int)'
  |-ParmVarDecl 0x7fdece82f270 <line:7:5, col:9> col:9 used ny 'int'
  |-ParmVarDecl 0x7fdece82f2f0 <col:13, col:17> col:17 used nz 'int'
  |-ParmVarDecl 0x7fdece82f370 <line:8:5, col:12> col:12 used x 'double'
  |-ParmVarDecl 0x7fdece82f4f0 <col:15, col:26> col:22 used y 'double *':'double *'
  |-ParmVarDecl 0x7fdece82f640 <col:29, col:40> col:36 used z 'double *':'double *'
  |-ParmVarDecl 0x7fdece82f6c0 <line:9:5, col:9> col:9 used starty 'int'
  |-ParmVarDecl 0x7fdece82f740 <col:17, col:21> col:21 used stopy 'int'
  |-ParmVarDecl 0x7fdece82f7c0 <col:28, col:32> col:32 used stepy 'int'
  |-ParmVarDecl 0x7fdece82f840 <col:39, col:43> col:43 used startz 'int'
  |-ParmVarDecl 0x7fdece82f8c0 <col:51, col:55> col:55 stopz 'int'
  |-ParmVarDecl 0x7fdece82f940 <col:62, col:66> col:66 used stepz 'int'
  `-CompoundStmt 0x7fdece831238 <col:74, line:17:1>
    |-DeclStmt 0x7fdece82fd80 <line:11:5, col:15>
    | |-VarDecl 0x7fdece82fc80 <col:5, col:9> col:9 used iy 'int'
    | `-VarDecl 0x7fdece82fd00 <col:5, col:13> col:13 used iz 'int'
    |-BinaryOperator 0x7fdece82fdf0 <line:12:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7fdece82fd98 <col:5> 'int' lvalue Var 0x7fdece82fd00 'iz' 'int'
    | `-ImplicitCastExpr 0x7fdece82fdd8 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7fdece82fdb8 <col:10> 'int' lvalue ParmVar 0x7fdece82f840 'startz' 'int'
    `-ForStmt 0x7fdece831200 <line:13:5, line:16:5>
      |-BinaryOperator 0x7fdece82fe68 <line:13:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7fdece82fe10 <col:10> 'int' lvalue Var 0x7fdece82fc80 'iy' 'int'
      | `-ImplicitCastExpr 0x7fdece82fe50 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fdece82fe30 <col:14> 'int' lvalue ParmVar 0x7fdece82f6c0 'starty' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7fdece82fef8 <col:22, col:25> 'int' '<'
      | |-ImplicitCastExpr 0x7fdece82fec8 <col:22> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fdece82fe88 <col:22> 'int' lvalue Var 0x7fdece82fc80 'iy' 'int'
      | `-ImplicitCastExpr 0x7fdece82fee0 <col:25> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fdece82fea8 <col:25> 'int' lvalue ParmVar 0x7fdece82f740 'stopy' 'int'
      |-CompoundAssignOperator 0x7fdece82ff70 <col:32, col:37> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7fdece82ff18 <col:32> 'int' lvalue Var 0x7fdece82fc80 'iy' 'int'
      | `-ImplicitCastExpr 0x7fdece82ff58 <col:37> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fdece82ff38 <col:37> 'int' lvalue ParmVar 0x7fdece82f7c0 'stepy' 'int'
      `-CompoundStmt 0x7fdece8301d8 <col:45, line:16:5>
        |-BinaryOperator 0x7fdece830130 <line:14:4, col:20> 'double' '='
        | |-ArraySubscriptExpr 0x7fdece830010 <col:4, col:8> 'double' lvalue
        | | |-ImplicitCastExpr 0x7fdece82ffe0 <col:4> 'double *':'double *' <LValueToRValue>
        | | | `-DeclRefExpr 0x7fdece82ffa0 <col:4> 'double *':'double *' lvalue ParmVar 0x7fdece82f640 'z' 'double *':'double *'
        | | `-ImplicitCastExpr 0x7fdece82fff8 <col:6> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fdece82ffc0 <col:6> 'int' lvalue Var 0x7fdece82fd00 'iz' 'int'
        | `-BinaryOperator 0x7fdece830110 <col:12, col:20> 'double' '*'
        |   |-ImplicitCastExpr 0x7fdece8300e0 <col:12> 'double' <LValueToRValue>
        |   | `-DeclRefExpr 0x7fdece830030 <col:12> 'double' lvalue ParmVar 0x7fdece82f370 'x' 'double'
        |   `-ImplicitCastExpr 0x7fdece8300f8 <col:16, col:20> 'double' <LValueToRValue>
        |     `-ArraySubscriptExpr 0x7fdece8300c0 <col:16, col:20> 'double' lvalue
        |       |-ImplicitCastExpr 0x7fdece830090 <col:16> 'double *':'double *' <LValueToRValue>
        |       | `-DeclRefExpr 0x7fdece830050 <col:16> 'double *':'double *' lvalue ParmVar 0x7fdece82f4f0 'y' 'double *':'double *'
        |       `-ImplicitCastExpr 0x7fdece8300a8 <col:18> 'int' <LValueToRValue>
        |         `-DeclRefExpr 0x7fdece830070 <col:18> 'int' lvalue Var 0x7fdece82fc80 'iy' 'int'
        `-CompoundAssignOperator 0x7fdece8301a8 <line:15:4, col:10> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
          |-DeclRefExpr 0x7fdece830150 <col:4> 'int' lvalue Var 0x7fdece82fd00 'iz' 'int'
          `-ImplicitCastExpr 0x7fdece830190 <col:10> 'int' <LValueToRValue>
            `-DeclRefExpr 0x7fdece830170 <col:10> 'int' lvalue ParmVar 0x7fdece82f940 'stepz' 'int'
