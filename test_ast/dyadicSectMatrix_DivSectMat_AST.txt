TranslationUnitDecl 0x7fa49a819608 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fa49a819ea0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fa49a819ba0 '__int128'
|-TypedefDecl 0x7fa49a819f10 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fa49a819bc0 'unsigned __int128'
|-TypedefDecl 0x7fa49a81a1f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fa49a819ff0 'struct __NSConstantString_tag'
|   `-Record 0x7fa49a819f68 '__NSConstantString_tag'
|-TypedefDecl 0x7fa49a81a290 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fa49a81a250 'char *'
|   `-BuiltinType 0x7fa49a8196a0 'char'
|-TypedefDecl 0x7fa49a81a568 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fa49a81a510 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fa49a81a370 'struct __va_list_tag'
|     `-Record 0x7fa49a81a2e8 '__va_list_tag'
|-TypedefDecl 0x7fa49b02f200 <./tree_src/dyadicSectMatrix_DivSectMat.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fa49a819760 'unsigned char'
`-FunctionDecl 0x7fa49b0318b8 <line:6:1, line:27:1> line:6:6 DivSectMat 'void (int, int, int, int, int, int, double (*)[mx], double (*)[my], double (*)[mz], int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)'
  |-ParmVarDecl 0x7fa49b02f270 <line:7:5, col:9> col:9 used nx 'int'
  |-ParmVarDecl 0x7fa49b02f2f0 <col:13, col:17> col:17 used mx 'int'
  |-ParmVarDecl 0x7fa49b02f370 <col:21, col:25> col:25 used ny 'int'
  |-ParmVarDecl 0x7fa49b02f3f0 <col:29, col:33> col:33 used my 'int'
  |-ParmVarDecl 0x7fa49b02f470 <col:37, col:41> col:41 used nz 'int'
  |-ParmVarDecl 0x7fa49b02f4f0 <col:45, col:49> col:49 used mz 'int'
  |-ParmVarDecl 0x7fa49b02f6f0 <line:8:5, col:20> col:12 used x 'double (*)[mx]':'double (*)[mx]'
  |-ParmVarDecl 0x7fa49b02f8f0 <col:23, col:38> col:30 used y 'double (*)[my]':'double (*)[my]'
  |-ParmVarDecl 0x7fa49b02faf0 <col:41, col:56> col:48 used z 'double (*)[mz]':'double (*)[mz]'
  |-ParmVarDecl 0x7fa49b02fb70 <line:9:5, col:9> col:9 used startx1 'int'
  |-ParmVarDecl 0x7fa49b02fbf0 <col:18, col:22> col:22 used stopx1 'int'
  |-ParmVarDecl 0x7fa49b02fc70 <col:30, col:34> col:34 used stepx1 'int'
  |-ParmVarDecl 0x7fa49b02fcf0 <col:42, col:46> col:46 used startx2 'int'
  |-ParmVarDecl 0x7fa49b02fd70 <col:55, col:59> col:59 used stopx2 'int'
  |-ParmVarDecl 0x7fa49b02fdf0 <col:67, col:71> col:71 used stepx2 'int'
  |-ParmVarDecl 0x7fa49b02fe70 <line:10:5, col:9> col:9 used starty1 'int'
  |-ParmVarDecl 0x7fa49b02fef0 <col:18, col:22> col:22 stopy1 'int'
  |-ParmVarDecl 0x7fa49b02ff70 <col:30, col:34> col:34 used stepy1 'int'
  |-ParmVarDecl 0x7fa49b02fff0 <col:42, col:46> col:46 used starty2 'int'
  |-ParmVarDecl 0x7fa49b030070 <col:55, col:59> col:59 stopy2 'int'
  |-ParmVarDecl 0x7fa49b0300f0 <col:67, col:71> col:71 used stepy2 'int'
  |-ParmVarDecl 0x7fa49b030170 <line:11:5, col:9> col:9 used startz1 'int'
  |-ParmVarDecl 0x7fa49b031200 <col:18, col:22> col:22 stopz1 'int'
  |-ParmVarDecl 0x7fa49b031280 <col:30, col:34> col:34 used stepz1 'int'
  |-ParmVarDecl 0x7fa49b031300 <col:42, col:46> col:46 used startz2 'int'
  |-ParmVarDecl 0x7fa49b031380 <col:55, col:59> col:59 stopz2 'int'
  |-ParmVarDecl 0x7fa49b031400 <col:67, col:71> col:71 used stepz2 'int'
  `-CompoundStmt 0x7fa49b0329f8 <col:79, line:27:1>
    |-DeclStmt 0x7fa49b031db0 <line:13:5, col:31>
    | |-VarDecl 0x7fa49b031a90 <col:5, col:9> col:9 used ix 'int'
    | |-VarDecl 0x7fa49b031b10 <col:5, col:13> col:13 used jx 'int'
    | |-VarDecl 0x7fa49b031b90 <col:5, col:17> col:17 used iy 'int'
    | |-VarDecl 0x7fa49b031c10 <col:5, col:21> col:21 used jy 'int'
    | |-VarDecl 0x7fa49b031c90 <col:5, col:25> col:25 used iz 'int'
    | `-VarDecl 0x7fa49b031d10 <col:5, col:29> col:29 used jz 'int'
    |-BinaryOperator 0x7fa49b031e20 <line:14:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7fa49b031dc8 <col:5> 'int' lvalue Var 0x7fa49b031b90 'iy' 'int'
    | `-ImplicitCastExpr 0x7fa49b031e08 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7fa49b031de8 <col:10> 'int' lvalue ParmVar 0x7fa49b02fe70 'starty1' 'int'
    |-BinaryOperator 0x7fa49b031e98 <line:15:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7fa49b031e40 <col:5> 'int' lvalue Var 0x7fa49b031c90 'iz' 'int'
    | `-ImplicitCastExpr 0x7fa49b031e80 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7fa49b031e60 <col:10> 'int' lvalue ParmVar 0x7fa49b030170 'startz1' 'int'
    `-ForStmt 0x7fa49b0329c0 <line:16:5, line:26:5>
      |-BinaryOperator 0x7fa49b031f10 <line:16:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7fa49b031eb8 <col:10> 'int' lvalue Var 0x7fa49b031a90 'ix' 'int'
      | `-ImplicitCastExpr 0x7fa49b031ef8 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fa49b031ed8 <col:14> 'int' lvalue ParmVar 0x7fa49b02fb70 'startx1' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7fa49b031fa0 <col:23, col:26> 'int' '<'
      | |-ImplicitCastExpr 0x7fa49b031f70 <col:23> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fa49b031f30 <col:23> 'int' lvalue Var 0x7fa49b031a90 'ix' 'int'
      | `-ImplicitCastExpr 0x7fa49b031f88 <col:26> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fa49b031f50 <col:26> 'int' lvalue ParmVar 0x7fa49b02fbf0 'stopx1' 'int'
      |-CompoundAssignOperator 0x7fa49b032018 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7fa49b031fc0 <col:34> 'int' lvalue Var 0x7fa49b031a90 'ix' 'int'
      | `-ImplicitCastExpr 0x7fa49b032000 <col:39> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fa49b031fe0 <col:39> 'int' lvalue ParmVar 0x7fa49b02fc70 'stepx1' 'int'
      `-CompoundStmt 0x7fa49b032988 <col:48, line:26:5>
        |-BinaryOperator 0x7fa49b0320a0 <line:17:9, col:14> 'int' '='
        | |-DeclRefExpr 0x7fa49b032048 <col:9> 'int' lvalue Var 0x7fa49b031c10 'jy' 'int'
        | `-ImplicitCastExpr 0x7fa49b032088 <col:14> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x7fa49b032068 <col:14> 'int' lvalue ParmVar 0x7fa49b02fff0 'starty2' 'int'
        |-BinaryOperator 0x7fa49b032118 <line:18:9, col:14> 'int' '='
        | |-DeclRefExpr 0x7fa49b0320c0 <col:9> 'int' lvalue Var 0x7fa49b031d10 'jz' 'int'
        | `-ImplicitCastExpr 0x7fa49b032100 <col:14> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x7fa49b0320e0 <col:14> 'int' lvalue ParmVar 0x7fa49b031300 'startz2' 'int'
        |-ForStmt 0x7fa49b032840 <line:19:9, line:23:9>
        | |-BinaryOperator 0x7fa49b032190 <line:19:14, col:18> 'int' '='
        | | |-DeclRefExpr 0x7fa49b032138 <col:14> 'int' lvalue Var 0x7fa49b031b10 'jx' 'int'
        | | `-ImplicitCastExpr 0x7fa49b032178 <col:18> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fa49b032158 <col:18> 'int' lvalue ParmVar 0x7fa49b02fcf0 'startx2' 'int'
        | |-<<<NULL>>>
        | |-BinaryOperator 0x7fa49b032230 <col:27, col:30> 'int' '<'
        | | |-ImplicitCastExpr 0x7fa49b032200 <col:27> 'int' <LValueToRValue>
        | | | `-DeclRefExpr 0x7fa49b0321b0 <col:27> 'int' lvalue Var 0x7fa49b031b10 'jx' 'int'
        | | `-ImplicitCastExpr 0x7fa49b032218 <col:30> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fa49b0321d0 <col:30> 'int' lvalue ParmVar 0x7fa49b02fd70 'stopx2' 'int'
        | |-CompoundAssignOperator 0x7fa49b0322a8 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
        | | |-DeclRefExpr 0x7fa49b032250 <col:38> 'int' lvalue Var 0x7fa49b031b10 'jx' 'int'
        | | `-ImplicitCastExpr 0x7fa49b032290 <col:43> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fa49b032270 <col:43> 'int' lvalue ParmVar 0x7fa49b02fdf0 'stepx2' 'int'
        | `-CompoundStmt 0x7fa49b032818 <col:52, line:23:9>
        |   |-BinaryOperator 0x7fa49b032658 <line:20:6, col:38> 'double' '='
        |   | |-ArraySubscriptExpr 0x7fa49b0323e8 <col:6, col:14> 'double' lvalue
        |   | | |-ImplicitCastExpr 0x7fa49b0323b8 <col:6, col:10> 'double *' <ArrayToPointerDecay>
        |   | | | `-ArraySubscriptExpr 0x7fa49b032348 <col:6, col:10> 'double [mz]' lvalue
        |   | | |   |-ImplicitCastExpr 0x7fa49b032318 <col:6> 'double (*)[mz]':'double (*)[mz]' <LValueToRValue>
        |   | | |   | `-DeclRefExpr 0x7fa49b0322d8 <col:6> 'double (*)[mz]':'double (*)[mz]' lvalue ParmVar 0x7fa49b02faf0 'z' 'double (*)[mz]':'double (*)[mz]'
        |   | | |   `-ImplicitCastExpr 0x7fa49b032330 <col:8> 'int' <LValueToRValue>
        |   | | |     `-DeclRefExpr 0x7fa49b0322f8 <col:8> 'int' lvalue Var 0x7fa49b031c90 'iz' 'int'
        |   | | `-ImplicitCastExpr 0x7fa49b0323d0 <col:12> 'int' <LValueToRValue>
        |   | |   `-DeclRefExpr 0x7fa49b032368 <col:12> 'int' lvalue Var 0x7fa49b031d10 'jz' 'int'
        |   | `-BinaryOperator 0x7fa49b032638 <col:18, col:38> 'double' '/'
        |   |   |-ImplicitCastExpr 0x7fa49b032608 <col:18, col:26> 'double' <LValueToRValue>
        |   |   | `-ArraySubscriptExpr 0x7fa49b0324e8 <col:18, col:26> 'double' lvalue
        |   |   |   |-ImplicitCastExpr 0x7fa49b0324b8 <col:18, col:22> 'double *' <ArrayToPointerDecay>
        |   |   |   | `-ArraySubscriptExpr 0x7fa49b032478 <col:18, col:22> 'double [mx]' lvalue
        |   |   |   |   |-ImplicitCastExpr 0x7fa49b032448 <col:18> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
        |   |   |   |   | `-DeclRefExpr 0x7fa49b032408 <col:18> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7fa49b02f6f0 'x' 'double (*)[mx]':'double (*)[mx]'
        |   |   |   |   `-ImplicitCastExpr 0x7fa49b032460 <col:20> 'int' <LValueToRValue>
        |   |   |   |     `-DeclRefExpr 0x7fa49b032428 <col:20> 'int' lvalue Var 0x7fa49b031a90 'ix' 'int'
        |   |   |   `-ImplicitCastExpr 0x7fa49b0324d0 <col:24> 'int' <LValueToRValue>
        |   |   |     `-DeclRefExpr 0x7fa49b032498 <col:24> 'int' lvalue Var 0x7fa49b031b10 'jx' 'int'
        |   |   `-ImplicitCastExpr 0x7fa49b032620 <col:30, col:38> 'double' <LValueToRValue>
        |   |     `-ArraySubscriptExpr 0x7fa49b0325e8 <col:30, col:38> 'double' lvalue
        |   |       |-ImplicitCastExpr 0x7fa49b0325b8 <col:30, col:34> 'double *' <ArrayToPointerDecay>
        |   |       | `-ArraySubscriptExpr 0x7fa49b032578 <col:30, col:34> 'double [my]' lvalue
        |   |       |   |-ImplicitCastExpr 0x7fa49b032548 <col:30> 'double (*)[my]':'double (*)[my]' <LValueToRValue>
        |   |       |   | `-DeclRefExpr 0x7fa49b032508 <col:30> 'double (*)[my]':'double (*)[my]' lvalue ParmVar 0x7fa49b02f8f0 'y' 'double (*)[my]':'double (*)[my]'
        |   |       |   `-ImplicitCastExpr 0x7fa49b032560 <col:32> 'int' <LValueToRValue>
        |   |       |     `-DeclRefExpr 0x7fa49b032528 <col:32> 'int' lvalue Var 0x7fa49b031b90 'iy' 'int'
        |   |       `-ImplicitCastExpr 0x7fa49b0325d0 <col:36> 'int' <LValueToRValue>
        |   |         `-DeclRefExpr 0x7fa49b032598 <col:36> 'int' lvalue Var 0x7fa49b031c10 'jy' 'int'
        |   |-BinaryOperator 0x7fa49b032728 <line:21:6, col:16> 'int' '='
        |   | |-DeclRefExpr 0x7fa49b032678 <col:6> 'int' lvalue Var 0x7fa49b031c10 'jy' 'int'
        |   | `-BinaryOperator 0x7fa49b032708 <col:11, col:16> 'int' '+'
        |   |   |-ImplicitCastExpr 0x7fa49b0326d8 <col:11> 'int' <LValueToRValue>
        |   |   | `-DeclRefExpr 0x7fa49b032698 <col:11> 'int' lvalue Var 0x7fa49b031c10 'jy' 'int'
        |   |   `-ImplicitCastExpr 0x7fa49b0326f0 <col:16> 'int' <LValueToRValue>
        |   |     `-DeclRefExpr 0x7fa49b0326b8 <col:16> 'int' lvalue ParmVar 0x7fa49b0300f0 'stepy2' 'int'
        |   `-BinaryOperator 0x7fa49b0327f8 <line:22:6, col:16> 'int' '='
        |     |-DeclRefExpr 0x7fa49b032748 <col:6> 'int' lvalue Var 0x7fa49b031d10 'jz' 'int'
        |     `-BinaryOperator 0x7fa49b0327d8 <col:11, col:16> 'int' '+'
        |       |-ImplicitCastExpr 0x7fa49b0327a8 <col:11> 'int' <LValueToRValue>
        |       | `-DeclRefExpr 0x7fa49b032768 <col:11> 'int' lvalue Var 0x7fa49b031d10 'jz' 'int'
        |       `-ImplicitCastExpr 0x7fa49b0327c0 <col:16> 'int' <LValueToRValue>
        |         `-DeclRefExpr 0x7fa49b032788 <col:16> 'int' lvalue ParmVar 0x7fa49b031400 'stepz2' 'int'
        |-CompoundAssignOperator 0x7fa49b0328d0 <line:24:9, col:15> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
        | |-DeclRefExpr 0x7fa49b032878 <col:9> 'int' lvalue Var 0x7fa49b031b90 'iy' 'int'
        | `-ImplicitCastExpr 0x7fa49b0328b8 <col:15> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x7fa49b032898 <col:15> 'int' lvalue ParmVar 0x7fa49b02ff70 'stepy1' 'int'
        `-CompoundAssignOperator 0x7fa49b032958 <line:25:9, col:15> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
          |-DeclRefExpr 0x7fa49b032900 <col:9> 'int' lvalue Var 0x7fa49b031c90 'iz' 'int'
          `-ImplicitCastExpr 0x7fa49b032940 <col:15> 'int' <LValueToRValue>
            `-DeclRefExpr 0x7fa49b032920 <col:15> 'int' lvalue ParmVar 0x7fa49b031280 'stepz1' 'int'
