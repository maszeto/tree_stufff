TranslationUnitDecl 0x7fe118838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fe1188394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fe1188391a0 '__int128'
|-TypedefDecl 0x7fe118839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fe1188391c0 'unsigned __int128'
|-TypedefDecl 0x7fe1188397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fe1188395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fe118839568 '__NSConstantString_tag'
|-TypedefDecl 0x7fe118839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fe118839850 'char *'
|   `-BuiltinType 0x7fe118838ca0 'char'
|-TypedefDecl 0x7fe118839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fe118839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fe118839970 'struct __va_list_tag'
|     `-Record 0x7fe1188398e8 '__va_list_tag'
`-FunctionDecl 0x7fe11902eb38 <./tree_src/binaryWholeMatrix_DotSubOneMatRowRow.c:4:1, line:13:1> line:4:6 DotSubOneMatRowRow 'void (int, int, int, double (*)[m], double (*)[m], double *, int, int)'
  |-ParmVarDecl 0x7fe11902e200 <line:5:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7fe11902e280 <col:12, col:16> col:16 used m 'int'
  |-ParmVarDecl 0x7fe11902e300 <col:19, col:23> col:23 used p 'int'
  |-ParmVarDecl 0x7fe11902e500 <col:26, col:39> col:33 used x 'double (*)[m]':'double (*)[m]'
  |-ParmVarDecl 0x7fe11902e700 <col:42, col:55> col:49 used y 'double (*)[m]':'double (*)[m]'
  |-ParmVarDecl 0x7fe11902e7b0 <col:58, col:66> col:66 used z 'double *'
  |-ParmVarDecl 0x7fe11902e830 <col:69, col:73> col:73 used k 'int'
  |-ParmVarDecl 0x7fe11902e8b0 <col:76, col:80> col:80 used l 'int'
  `-CompoundStmt 0x7fe1190302a8 <col:84, line:13:1>
    |-DeclStmt 0x7fe11902ece0 <line:7:5, col:10>
    | `-VarDecl 0x7fe11902ec78 <col:5, col:9> col:9 used i 'int'
    |-DeclStmt 0x7fe11902ed78 <line:8:5, col:20>
    | `-VarDecl 0x7fe11902ed10 <col:5, col:12> col:12 used t 'double'
    |-ForStmt 0x7fe11902f1b8 <line:9:5, line:11:5>
    | |-BinaryOperator 0x7fe11902edd0 <line:9:10, col:13> 'int' '='
    | | |-DeclRefExpr 0x7fe11902ed90 <col:10> 'int' lvalue Var 0x7fe11902ec78 'i' 'int'
    | | `-IntegerLiteral 0x7fe11902edb0 <col:13> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x7fe11902ee60 <col:16, col:18> 'int' '<'
    | | |-ImplicitCastExpr 0x7fe11902ee30 <col:16> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x7fe11902edf0 <col:16> 'int' lvalue Var 0x7fe11902ec78 'i' 'int'
    | | `-ImplicitCastExpr 0x7fe11902ee48 <col:18> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x7fe11902ee10 <col:18> 'int' lvalue ParmVar 0x7fe11902e280 'm' 'int'
    | |-UnaryOperator 0x7fe11902eea0 <col:21, col:22> 'int' postfix '++'
    | | `-DeclRefExpr 0x7fe11902ee80 <col:21> 'int' lvalue Var 0x7fe11902ec78 'i' 'int'
    | `-CompoundStmt 0x7fe11902f1a0 <col:27, line:11:5>
    |   `-BinaryOperator 0x7fe11902f180 <line:10:9, col:33> 'double' '='
    |     |-DeclRefExpr 0x7fe11902eeb8 <col:9> 'double' lvalue Var 0x7fe11902ed10 't' 'double'
    |     `-BinaryOperator 0x7fe11902f160 <col:13, col:33> 'double' '-'
    |       |-ImplicitCastExpr 0x7fe11902f148 <col:13> 'double' <LValueToRValue>
    |       | `-DeclRefExpr 0x7fe11902eed8 <col:13> 'double' lvalue Var 0x7fe11902ed10 't' 'double'
    |       `-BinaryOperator 0x7fe11902f128 <col:17, col:33> 'double' '*'
    |         |-ImplicitCastExpr 0x7fe11902f0f8 <col:17, col:23> 'double' <LValueToRValue>
    |         | `-ArraySubscriptExpr 0x7fe11902efd8 <col:17, col:23> 'double' lvalue
    |         |   |-ImplicitCastExpr 0x7fe11902efa8 <col:17, col:20> 'double *' <ArrayToPointerDecay>
    |         |   | `-ArraySubscriptExpr 0x7fe11902ef68 <col:17, col:20> 'double [m]' lvalue
    |         |   |   |-ImplicitCastExpr 0x7fe11902ef38 <col:17> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
    |         |   |   | `-DeclRefExpr 0x7fe11902eef8 <col:17> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fe11902e500 'x' 'double (*)[m]':'double (*)[m]'
    |         |   |   `-ImplicitCastExpr 0x7fe11902ef50 <col:19> 'int' <LValueToRValue>
    |         |   |     `-DeclRefExpr 0x7fe11902ef18 <col:19> 'int' lvalue ParmVar 0x7fe11902e830 'k' 'int'
    |         |   `-ImplicitCastExpr 0x7fe11902efc0 <col:22> 'int' <LValueToRValue>
    |         |     `-DeclRefExpr 0x7fe11902ef88 <col:22> 'int' lvalue Var 0x7fe11902ec78 'i' 'int'
    |         `-ImplicitCastExpr 0x7fe11902f110 <col:27, col:33> 'double' <LValueToRValue>
    |           `-ArraySubscriptExpr 0x7fe11902f0d8 <col:27, col:33> 'double' lvalue
    |             |-ImplicitCastExpr 0x7fe11902f0a8 <col:27, col:30> 'double *' <ArrayToPointerDecay>
    |             | `-ArraySubscriptExpr 0x7fe11902f068 <col:27, col:30> 'double [m]' lvalue
    |             |   |-ImplicitCastExpr 0x7fe11902f038 <col:27> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
    |             |   | `-DeclRefExpr 0x7fe11902eff8 <col:27> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fe11902e700 'y' 'double (*)[m]':'double (*)[m]'
    |             |   `-ImplicitCastExpr 0x7fe11902f050 <col:29> 'int' <LValueToRValue>
    |             |     `-DeclRefExpr 0x7fe11902f018 <col:29> 'int' lvalue ParmVar 0x7fe11902e8b0 'l' 'int'
    |             `-ImplicitCastExpr 0x7fe11902f0c0 <col:32> 'int' <LValueToRValue>
    |               `-DeclRefExpr 0x7fe11902f088 <col:32> 'int' lvalue Var 0x7fe11902ec78 'i' 'int'
    `-BinaryOperator 0x7fe119030288 <line:12:5, col:10> 'double' '='
      |-UnaryOperator 0x7fe119030238 <col:5, col:6> 'double' lvalue prefix '*' cannot overflow
      | `-ImplicitCastExpr 0x7fe119030220 <col:6> 'double *' <LValueToRValue>
      |   `-DeclRefExpr 0x7fe119030200 <col:6> 'double *' lvalue ParmVar 0x7fe11902e7b0 'z' 'double *'
      `-ImplicitCastExpr 0x7fe119030270 <col:10> 'double' <LValueToRValue>
        `-DeclRefExpr 0x7fe119030250 <col:10> 'double' lvalue Var 0x7fe11902ed10 't' 'double'
