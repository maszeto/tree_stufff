TranslationUnitDecl 0x7faf1c838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7faf1c8394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7faf1c8391a0 '__int128'
|-TypedefDecl 0x7faf1c839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7faf1c8391c0 'unsigned __int128'
|-TypedefDecl 0x7faf1c8397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7faf1c8395f0 'struct __NSConstantString_tag'
|   `-Record 0x7faf1c839568 '__NSConstantString_tag'
|-TypedefDecl 0x7faf1c839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7faf1c839850 'char *'
|   `-BuiltinType 0x7faf1c838ca0 'char'
|-TypedefDecl 0x7faf1c839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7faf1c839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7faf1c839970 'struct __va_list_tag'
|     `-Record 0x7faf1c8398e8 '__va_list_tag'
|-FunctionDecl 0x7faf1d02f988 <./tree_src/monadicSect_MagSectVec.c:4:1, line:14:1> line:4:6 MagSectVec 'void (int, double *, double *, int, int, int, int, int, int)'
| |-ParmVarDecl 0x7faf1d02f200 <line:5:5, col:9> col:9 used n 'int'
| |-ParmVarDecl 0x7faf1d02f380 <col:12, col:22> col:19 used x 'double *':'double *'
| |-ParmVarDecl 0x7faf1d02f4d0 <col:25, col:35> col:32 used z 'double *':'double *'
| |-ParmVarDecl 0x7faf1d02f550 <line:6:5, col:9> col:9 used bx 'int'
| |-ParmVarDecl 0x7faf1d02f5d0 <col:13, col:17> col:17 ex 'int'
| |-ParmVarDecl 0x7faf1d02f650 <col:21, col:25> col:25 used sx 'int'
| |-ParmVarDecl 0x7faf1d02f6d0 <col:29, col:33> col:33 used bz 'int'
| |-ParmVarDecl 0x7faf1d02f750 <col:37, col:41> col:41 used ez 'int'
| |-ParmVarDecl 0x7faf1d02f7d0 <col:45, col:49> col:49 used sz 'int'
| `-CompoundStmt 0x7faf1d031318 <col:54, line:14:1>
|   |-DeclStmt 0x7faf1d02fbd0 <line:8:5, col:15>
|   | |-VarDecl 0x7faf1d02fad0 <col:5, col:9> col:9 used ix 'int'
|   | `-VarDecl 0x7faf1d02fb50 <col:5, col:13> col:13 used iz 'int'
|   |-BinaryOperator 0x7faf1d02fc40 <line:9:5, col:10> 'int' '='
|   | |-DeclRefExpr 0x7faf1d02fbe8 <col:5> 'int' lvalue Var 0x7faf1d02fad0 'ix' 'int'
|   | `-ImplicitCastExpr 0x7faf1d02fc28 <col:10> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7faf1d02fc08 <col:10> 'int' lvalue ParmVar 0x7faf1d02f550 'bx' 'int'
|   `-ForStmt 0x7faf1d0312e0 <line:10:5, line:13:5>
|     |-BinaryOperator 0x7faf1d02fcb8 <line:10:10, col:14> 'int' '='
|     | |-DeclRefExpr 0x7faf1d02fc60 <col:10> 'int' lvalue Var 0x7faf1d02fb50 'iz' 'int'
|     | `-ImplicitCastExpr 0x7faf1d02fca0 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7faf1d02fc80 <col:14> 'int' lvalue ParmVar 0x7faf1d02f6d0 'bz' 'int'
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7faf1d02fd48 <col:18, col:21> 'int' '<'
|     | |-ImplicitCastExpr 0x7faf1d02fd18 <col:18> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7faf1d02fcd8 <col:18> 'int' lvalue Var 0x7faf1d02fb50 'iz' 'int'
|     | `-ImplicitCastExpr 0x7faf1d02fd30 <col:21> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7faf1d02fcf8 <col:21> 'int' lvalue ParmVar 0x7faf1d02f750 'ez' 'int'
|     |-CompoundAssignOperator 0x7faf1d02fdc0 <col:25, col:30> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     | |-DeclRefExpr 0x7faf1d02fd68 <col:25> 'int' lvalue Var 0x7faf1d02fb50 'iz' 'int'
|     | `-ImplicitCastExpr 0x7faf1d02fda8 <col:30> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7faf1d02fd88 <col:30> 'int' lvalue ParmVar 0x7faf1d02f7d0 'sz' 'int'
|     `-CompoundStmt 0x7faf1d0312c0 <col:34, line:13:5>
|       |-BinaryOperator 0x7faf1d031218 <line:11:9, col:26> 'double' '='
|       | |-ArraySubscriptExpr 0x7faf1d02fe60 <col:9, col:13> 'double' lvalue
|       | | |-ImplicitCastExpr 0x7faf1d02fe30 <col:9> 'double *':'double *' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7faf1d02fdf0 <col:9> 'double *':'double *' lvalue ParmVar 0x7faf1d02f4d0 'z' 'double *':'double *'
|       | | `-ImplicitCastExpr 0x7faf1d02fe48 <col:11> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7faf1d02fe10 <col:11> 'int' lvalue Var 0x7faf1d02fb50 'iz' 'int'
|       | `-ImplicitCastExpr 0x7faf1d031200 <col:17, col:26> 'double' <IntegralToFloating>
|       |   `-CallExpr 0x7faf1d030100 <col:17, col:26> 'int'
|       |     |-ImplicitCastExpr 0x7faf1d0300e8 <col:17> 'int (*)(int)' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x7faf1d030010 <col:17> 'int (int)' Function 0x7faf1d02feb0 'abs' 'int (int)'
|       |     `-ImplicitCastExpr 0x7faf1d030140 <col:21, col:25> 'int' <FloatingToIntegral>
|       |       `-ImplicitCastExpr 0x7faf1d030128 <col:21, col:25> 'double' <LValueToRValue>
|       |         `-ArraySubscriptExpr 0x7faf1d0300a0 <col:21, col:25> 'double' lvalue
|       |           |-ImplicitCastExpr 0x7faf1d030070 <col:21> 'double *':'double *' <LValueToRValue>
|       |           | `-DeclRefExpr 0x7faf1d030030 <col:21> 'double *':'double *' lvalue ParmVar 0x7faf1d02f380 'x' 'double *':'double *'
|       |           `-ImplicitCastExpr 0x7faf1d030088 <col:23> 'int' <LValueToRValue>
|       |             `-DeclRefExpr 0x7faf1d030050 <col:23> 'int' lvalue Var 0x7faf1d02fad0 'ix' 'int'
|       `-CompoundAssignOperator 0x7faf1d031290 <line:12:9, col:15> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|         |-DeclRefExpr 0x7faf1d031238 <col:9> 'int' lvalue Var 0x7faf1d02fad0 'ix' 'int'
|         `-ImplicitCastExpr 0x7faf1d031278 <col:15> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x7faf1d031258 <col:15> 'int' lvalue ParmVar 0x7faf1d02f650 'sx' 'int'
`-FunctionDecl 0x7faf1d02feb0 <line:11:17> col:17 implicit used abs 'int (int)' extern
  |-ParmVarDecl 0x7faf1d02ff50 <<invalid sloc>> <invalid sloc> 'int'
  |-NoThrowAttr 0x7faf1d02ffc0 <col:17> Implicit
  `-ConstAttr 0x7faf1d030000 <col:17> Implicit
