TranslationUnitDecl 0x7fa182012e08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fa1820136a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fa1820133a0 '__int128'
|-TypedefDecl 0x7fa182013710 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fa1820133c0 'unsigned __int128'
|-TypedefDecl 0x7fa1820139f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fa1820137f0 'struct __NSConstantString_tag'
|   `-Record 0x7fa182013768 '__NSConstantString_tag'
|-TypedefDecl 0x7fa182013a90 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fa182013a50 'char *'
|   `-BuiltinType 0x7fa182012ea0 'char'
|-TypedefDecl 0x7fa182013d68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fa182013d10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fa182013b70 'struct __va_list_tag'
|     `-Record 0x7fa182013ae8 '__va_list_tag'
|-TypedefDecl 0x7fa18282f200 <./tree_src/dyadicSectVector_OrSectVec.c:3:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x7fa182012f60 'unsigned char'
`-FunctionDecl 0x7fa18282fe38 <line:6:1, line:19:1> line:6:6 OrSectVec 'void (int, BOOL *, BOOL *, BOOL *, int, int, int, int, int, int, int, int, int)'
  |-ParmVarDecl 0x7fa18282f270 <line:7:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7fa18282f480 <col:12, col:20> col:17 used x 'BOOL *':'BOOL *'
  |-ParmVarDecl 0x7fa18282f610 <col:23, col:31> col:28 used y 'BOOL *':'BOOL *'
  |-ParmVarDecl 0x7fa18282f7a0 <col:34, col:42> col:39 used z 'BOOL *':'BOOL *'
  |-ParmVarDecl 0x7fa18282f820 <line:8:5, col:9> col:9 used startx 'int'
  |-ParmVarDecl 0x7fa18282f8a0 <col:17, col:21> col:21 used stopx 'int'
  |-ParmVarDecl 0x7fa18282f920 <col:28, col:32> col:32 used stepx 'int'
  |-ParmVarDecl 0x7fa18282f9a0 <col:39, col:43> col:43 used starty 'int'
  |-ParmVarDecl 0x7fa18282fa20 <col:51, col:55> col:55 stopy 'int'
  |-ParmVarDecl 0x7fa18282faa0 <col:62, col:66> col:66 used stepy 'int'
  |-ParmVarDecl 0x7fa18282fb20 <line:9:5, col:9> col:9 used startz 'int'
  |-ParmVarDecl 0x7fa18282fba0 <col:17, col:21> col:21 stopz 'int'
  |-ParmVarDecl 0x7fa18282fc20 <col:28, col:32> col:32 used stepz 'int'
  `-CompoundStmt 0x7fa182831830 <col:40, line:19:1>
    |-DeclStmt 0x7fa182830128 <line:11:5, col:17>
    | |-VarDecl 0x7fa18282ffa0 <col:5, col:9> col:9 used ix 'int'
    | |-VarDecl 0x7fa182830020 <col:5, col:12> col:12 used iy 'int'
    | `-VarDecl 0x7fa1828300a0 <col:5, col:15> col:15 used iz 'int'
    |-BinaryOperator 0x7fa182830198 <line:12:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7fa182830140 <col:5> 'int' lvalue Var 0x7fa182830020 'iy' 'int'
    | `-ImplicitCastExpr 0x7fa182830180 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7fa182830160 <col:10> 'int' lvalue ParmVar 0x7fa18282f9a0 'starty' 'int'
    |-BinaryOperator 0x7fa182831218 <line:13:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7fa1828301b8 <col:5> 'int' lvalue Var 0x7fa1828300a0 'iz' 'int'
    | `-ImplicitCastExpr 0x7fa182831200 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7fa1828301d8 <col:10> 'int' lvalue ParmVar 0x7fa18282fb20 'startz' 'int'
    `-ForStmt 0x7fa1828317f8 <line:14:5, line:18:5>
      |-BinaryOperator 0x7fa182831290 <line:14:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7fa182831238 <col:10> 'int' lvalue Var 0x7fa18282ffa0 'ix' 'int'
      | `-ImplicitCastExpr 0x7fa182831278 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fa182831258 <col:14> 'int' lvalue ParmVar 0x7fa18282f820 'startx' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7fa182831320 <col:22, col:25> 'int' '<'
      | |-ImplicitCastExpr 0x7fa1828312f0 <col:22> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fa1828312b0 <col:22> 'int' lvalue Var 0x7fa18282ffa0 'ix' 'int'
      | `-ImplicitCastExpr 0x7fa182831308 <col:25> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fa1828312d0 <col:25> 'int' lvalue ParmVar 0x7fa18282f8a0 'stopx' 'int'
      |-CompoundAssignOperator 0x7fa182831398 <col:32, col:37> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7fa182831340 <col:32> 'int' lvalue Var 0x7fa18282ffa0 'ix' 'int'
      | `-ImplicitCastExpr 0x7fa182831380 <col:37> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fa182831360 <col:37> 'int' lvalue ParmVar 0x7fa18282f920 'stepx' 'int'
      `-CompoundStmt 0x7fa1828317d0 <col:45, line:18:5>
        |-BinaryOperator 0x7fa182831610 <line:15:4, col:24> 'BOOL':'unsigned char' '='
        | |-ArraySubscriptExpr 0x7fa182831438 <col:4, col:8> 'BOOL':'unsigned char' lvalue
        | | |-ImplicitCastExpr 0x7fa182831408 <col:4> 'BOOL *':'BOOL *' <LValueToRValue>
        | | | `-DeclRefExpr 0x7fa1828313c8 <col:4> 'BOOL *':'BOOL *' lvalue ParmVar 0x7fa18282f7a0 'z' 'BOOL *':'BOOL *'
        | | `-ImplicitCastExpr 0x7fa182831420 <col:6> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fa1828313e8 <col:6> 'int' lvalue Var 0x7fa1828300a0 'iz' 'int'
        | `-ImplicitCastExpr 0x7fa1828315f8 <col:12, col:24> 'BOOL':'unsigned char' <IntegralCast>
        |   `-BinaryOperator 0x7fa1828315d8 <col:12, col:24> 'int' '|'
        |     |-ImplicitCastExpr 0x7fa182831590 <col:12, col:16> 'int' <IntegralCast>
        |     | `-ImplicitCastExpr 0x7fa182831578 <col:12, col:16> 'BOOL':'unsigned char' <LValueToRValue>
        |     |   `-ArraySubscriptExpr 0x7fa1828314c8 <col:12, col:16> 'BOOL':'unsigned char' lvalue
        |     |     |-ImplicitCastExpr 0x7fa182831498 <col:12> 'BOOL *':'BOOL *' <LValueToRValue>
        |     |     | `-DeclRefExpr 0x7fa182831458 <col:12> 'BOOL *':'BOOL *' lvalue ParmVar 0x7fa18282f480 'x' 'BOOL *':'BOOL *'
        |     |     `-ImplicitCastExpr 0x7fa1828314b0 <col:14> 'int' <LValueToRValue>
        |     |       `-DeclRefExpr 0x7fa182831478 <col:14> 'int' lvalue Var 0x7fa18282ffa0 'ix' 'int'
        |     `-ImplicitCastExpr 0x7fa1828315c0 <col:20, col:24> 'int' <IntegralCast>
        |       `-ImplicitCastExpr 0x7fa1828315a8 <col:20, col:24> 'BOOL':'unsigned char' <LValueToRValue>
        |         `-ArraySubscriptExpr 0x7fa182831558 <col:20, col:24> 'BOOL':'unsigned char' lvalue
        |           |-ImplicitCastExpr 0x7fa182831528 <col:20> 'BOOL *':'BOOL *' <LValueToRValue>
        |           | `-DeclRefExpr 0x7fa1828314e8 <col:20> 'BOOL *':'BOOL *' lvalue ParmVar 0x7fa18282f610 'y' 'BOOL *':'BOOL *'
        |           `-ImplicitCastExpr 0x7fa182831540 <col:22> 'int' <LValueToRValue>
        |             `-DeclRefExpr 0x7fa182831508 <col:22> 'int' lvalue Var 0x7fa182830020 'iy' 'int'
        |-BinaryOperator 0x7fa1828316e0 <line:16:4, col:14> 'int' '='
        | |-DeclRefExpr 0x7fa182831630 <col:4> 'int' lvalue Var 0x7fa182830020 'iy' 'int'
        | `-BinaryOperator 0x7fa1828316c0 <col:9, col:14> 'int' '+'
        |   |-ImplicitCastExpr 0x7fa182831690 <col:9> 'int' <LValueToRValue>
        |   | `-DeclRefExpr 0x7fa182831650 <col:9> 'int' lvalue Var 0x7fa182830020 'iy' 'int'
        |   `-ImplicitCastExpr 0x7fa1828316a8 <col:14> 'int' <LValueToRValue>
        |     `-DeclRefExpr 0x7fa182831670 <col:14> 'int' lvalue ParmVar 0x7fa18282faa0 'stepy' 'int'
        `-BinaryOperator 0x7fa1828317b0 <line:17:4, col:14> 'int' '='
          |-DeclRefExpr 0x7fa182831700 <col:4> 'int' lvalue Var 0x7fa1828300a0 'iz' 'int'
          `-BinaryOperator 0x7fa182831790 <col:9, col:14> 'int' '+'
            |-ImplicitCastExpr 0x7fa182831760 <col:9> 'int' <LValueToRValue>
            | `-DeclRefExpr 0x7fa182831720 <col:9> 'int' lvalue Var 0x7fa1828300a0 'iz' 'int'
            `-ImplicitCastExpr 0x7fa182831778 <col:14> 'int' <LValueToRValue>
              `-DeclRefExpr 0x7fa182831740 <col:14> 'int' lvalue ParmVar 0x7fa18282fc20 'stepz' 'int'
