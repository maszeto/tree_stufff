TranslationUnitDecl 0x7f9f52038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f9f520394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f9f520391a0 '__int128'
|-TypedefDecl 0x7f9f52039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f9f520391c0 'unsigned __int128'
|-TypedefDecl 0x7f9f520397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f9f520395f0 'struct __NSConstantString_tag'
|   `-Record 0x7f9f52039568 '__NSConstantString_tag'
|-TypedefDecl 0x7f9f52039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f9f52039850 'char *'
|   `-BuiltinType 0x7f9f52038ca0 'char'
|-TypedefDecl 0x7f9f52039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f9f52039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f9f52039970 'struct __va_list_tag'
|     `-Record 0x7f9f520398e8 '__va_list_tag'
|-TypedefDecl 0x7f9f5208a800 <./tree_src/extendSectMatrix_HiSectMatColVec.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7f9f52038d60 'unsigned char'
|-FunctionDecl 0x7f9f5208cb78 <line:6:1, line:25:1> line:6:6 HiSectMatColVec 'void (int, int, int, int, int, double (*)[mx], double *, double (*)[mz], int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)'
| |-ParmVarDecl 0x7f9f5208a870 <line:7:5, col:9> col:9 used nx 'int'
| |-ParmVarDecl 0x7f9f5208a8f0 <col:13, col:17> col:17 used mx 'int'
| |-ParmVarDecl 0x7f9f5208a970 <col:21, col:25> col:25 used my 'int'
| |-ParmVarDecl 0x7f9f5208a9f0 <col:29, col:33> col:33 used nz 'int'
| |-ParmVarDecl 0x7f9f5208aa70 <col:37, col:41> col:41 used mz 'int'
| |-ParmVarDecl 0x7f9f5208ac70 <line:8:5, col:20> col:12 used x 'double (*)[mx]':'double (*)[mx]'
| |-ParmVarDecl 0x7f9f5208adf0 <col:23, col:34> col:30 used y 'double *':'double *'
| |-ParmVarDecl 0x7f9f5208aff0 <col:37, col:52> col:44 used z 'double (*)[mz]':'double (*)[mz]'
| |-ParmVarDecl 0x7f9f5208b070 <line:9:5, col:9> col:9 used startx1 'int'
| |-ParmVarDecl 0x7f9f5208b0f0 <col:18, col:22> col:22 used stopx1 'int'
| |-ParmVarDecl 0x7f9f5208b170 <col:30, col:34> col:34 used stepx1 'int'
| |-ParmVarDecl 0x7f9f5208b1f0 <col:42, col:46> col:46 used startx2 'int'
| |-ParmVarDecl 0x7f9f5208b270 <col:55, col:59> col:59 used stopx2 'int'
| |-ParmVarDecl 0x7f9f5208b2f0 <col:67, col:71> col:71 used stepx2 'int'
| |-ParmVarDecl 0x7f9f5208b370 <line:10:5, col:9> col:9 used starty 'int'
| |-ParmVarDecl 0x7f9f5208b3f0 <col:17, col:21> col:21 stopy 'int'
| |-ParmVarDecl 0x7f9f5208b470 <col:28, col:32> col:32 used stepy 'int'
| |-ParmVarDecl 0x7f9f5208b4f0 <line:11:5, col:9> col:9 used startz1 'int'
| |-ParmVarDecl 0x7f9f5208b570 <col:18, col:22> col:22 stopz1 'int'
| |-ParmVarDecl 0x7f9f5208b5f0 <col:30, col:34> col:34 used stepz1 'int'
| |-ParmVarDecl 0x7f9f5208b670 <col:42, col:46> col:46 used startz2 'int'
| |-ParmVarDecl 0x7f9f5208b6f0 <col:55, col:59> col:59 stopz2 'int'
| |-ParmVarDecl 0x7f9f5208b770 <col:67, col:71> col:71 used stepz2 'int'
| `-CompoundStmt 0x7f9f5208dda8 <col:80, line:25:1>
|   |-DeclStmt 0x7f9f5208d050 <line:13:5, col:31>
|   | |-VarDecl 0x7f9f5208cd30 <col:5, col:9> col:9 used ix 'int'
|   | |-VarDecl 0x7f9f5208cdb0 <col:5, col:13> col:13 used jx 'int'
|   | |-VarDecl 0x7f9f5208ce30 <col:5, col:17> col:17 iy 'int'
|   | |-VarDecl 0x7f9f5208ceb0 <col:5, col:21> col:21 used jy 'int'
|   | |-VarDecl 0x7f9f5208cf30 <col:5, col:25> col:25 used iz 'int'
|   | `-VarDecl 0x7f9f5208cfb0 <col:5, col:29> col:29 used jz 'int'
|   |-BinaryOperator 0x7f9f5208d0c0 <line:14:5, col:10> 'int' '='
|   | |-DeclRefExpr 0x7f9f5208d068 <col:5> 'int' lvalue Var 0x7f9f5208cf30 'iz' 'int'
|   | `-ImplicitCastExpr 0x7f9f5208d0a8 <col:10> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7f9f5208d088 <col:10> 'int' lvalue ParmVar 0x7f9f5208b4f0 'startz1' 'int'
|   `-ForStmt 0x7f9f5208dd70 <line:15:5, line:24:5>
|     |-BinaryOperator 0x7f9f5208d138 <line:15:10, col:14> 'int' '='
|     | |-DeclRefExpr 0x7f9f5208d0e0 <col:10> 'int' lvalue Var 0x7f9f5208cd30 'ix' 'int'
|     | `-ImplicitCastExpr 0x7f9f5208d120 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7f9f5208d100 <col:14> 'int' lvalue ParmVar 0x7f9f5208b070 'startx1' 'int'
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7f9f5208d1c8 <col:23, col:26> 'int' '<'
|     | |-ImplicitCastExpr 0x7f9f5208d198 <col:23> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7f9f5208d158 <col:23> 'int' lvalue Var 0x7f9f5208cd30 'ix' 'int'
|     | `-ImplicitCastExpr 0x7f9f5208d1b0 <col:26> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7f9f5208d178 <col:26> 'int' lvalue ParmVar 0x7f9f5208b0f0 'stopx1' 'int'
|     |-CompoundAssignOperator 0x7f9f5208d240 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     | |-DeclRefExpr 0x7f9f5208d1e8 <col:34> 'int' lvalue Var 0x7f9f5208cd30 'ix' 'int'
|     | `-ImplicitCastExpr 0x7f9f5208d228 <col:39> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7f9f5208d208 <col:39> 'int' lvalue ParmVar 0x7f9f5208b170 'stepx1' 'int'
|     `-CompoundStmt 0x7f9f5208dd40 <col:48, line:24:5>
|       |-BinaryOperator 0x7f9f5208d2c8 <line:16:9, col:14> 'int' '='
|       | |-DeclRefExpr 0x7f9f5208d270 <col:9> 'int' lvalue Var 0x7f9f5208ceb0 'jy' 'int'
|       | `-ImplicitCastExpr 0x7f9f5208d2b0 <col:14> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x7f9f5208d290 <col:14> 'int' lvalue ParmVar 0x7f9f5208b370 'starty' 'int'
|       |-BinaryOperator 0x7f9f5208d340 <line:17:9, col:14> 'int' '='
|       | |-DeclRefExpr 0x7f9f5208d2e8 <col:9> 'int' lvalue Var 0x7f9f5208cfb0 'jz' 'int'
|       | `-ImplicitCastExpr 0x7f9f5208d328 <col:14> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x7f9f5208d308 <col:14> 'int' lvalue ParmVar 0x7f9f5208b670 'startz2' 'int'
|       |-ForStmt 0x7f9f5208dc38 <line:18:9, line:22:9>
|       | |-BinaryOperator 0x7f9f5208d3b8 <line:18:14, col:18> 'int' '='
|       | | |-DeclRefExpr 0x7f9f5208d360 <col:14> 'int' lvalue Var 0x7f9f5208cdb0 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7f9f5208d3a0 <col:18> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7f9f5208d380 <col:18> 'int' lvalue ParmVar 0x7f9f5208b1f0 'startx2' 'int'
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x7f9f5208d448 <col:27, col:30> 'int' '<'
|       | | |-ImplicitCastExpr 0x7f9f5208d418 <col:27> 'int' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7f9f5208d3d8 <col:27> 'int' lvalue Var 0x7f9f5208cdb0 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7f9f5208d430 <col:30> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7f9f5208d3f8 <col:30> 'int' lvalue ParmVar 0x7f9f5208b270 'stopx2' 'int'
|       | |-CompoundAssignOperator 0x7f9f5208d4c0 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|       | | |-DeclRefExpr 0x7f9f5208d468 <col:38> 'int' lvalue Var 0x7f9f5208cdb0 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7f9f5208d4a8 <col:43> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7f9f5208d488 <col:43> 'int' lvalue ParmVar 0x7f9f5208b2f0 'stepx2' 'int'
|       | `-CompoundStmt 0x7f9f5208dc10 <col:52, line:22:9>
|       |   |-BinaryOperator 0x7f9f5208da50 <line:19:6, col:38> 'double' '='
|       |   | |-ArraySubscriptExpr 0x7f9f5208d5d0 <col:6, col:14> 'double' lvalue
|       |   | | |-ImplicitCastExpr 0x7f9f5208d5a0 <col:6, col:10> 'double *' <ArrayToPointerDecay>
|       |   | | | `-ArraySubscriptExpr 0x7f9f5208d560 <col:6, col:10> 'double [mz]' lvalue
|       |   | | |   |-ImplicitCastExpr 0x7f9f5208d530 <col:6> 'double (*)[mz]':'double (*)[mz]' <LValueToRValue>
|       |   | | |   | `-DeclRefExpr 0x7f9f5208d4f0 <col:6> 'double (*)[mz]':'double (*)[mz]' lvalue ParmVar 0x7f9f5208aff0 'z' 'double (*)[mz]':'double (*)[mz]'
|       |   | | |   `-ImplicitCastExpr 0x7f9f5208d548 <col:8> 'int' <LValueToRValue>
|       |   | | |     `-DeclRefExpr 0x7f9f5208d510 <col:8> 'int' lvalue Var 0x7f9f5208cfb0 'jz' 'int'
|       |   | | `-ImplicitCastExpr 0x7f9f5208d5b8 <col:12> 'int' <LValueToRValue>
|       |   | |   `-DeclRefExpr 0x7f9f5208d580 <col:12> 'int' lvalue Var 0x7f9f5208cf30 'iz' 'int'
|       |   | `-CallExpr 0x7f9f5208d9f0 <col:18, col:38> 'double'
|       |   |   |-ImplicitCastExpr 0x7f9f5208d9d8 <col:18> 'double (*)(double, double)' <FunctionToPointerDecay>
|       |   |   | `-DeclRefExpr 0x7f9f5208d800 <col:18> 'double (double, double)' Function 0x7f9f5208d628 'fmax' 'double (double, double)'
|       |   |   |-ImplicitCastExpr 0x7f9f5208da20 <col:23, col:31> 'double' <LValueToRValue>
|       |   |   | `-ArraySubscriptExpr 0x7f9f5208d900 <col:23, col:31> 'double' lvalue
|       |   |   |   |-ImplicitCastExpr 0x7f9f5208d8d0 <col:23, col:27> 'double *' <ArrayToPointerDecay>
|       |   |   |   | `-ArraySubscriptExpr 0x7f9f5208d890 <col:23, col:27> 'double [mx]' lvalue
|       |   |   |   |   |-ImplicitCastExpr 0x7f9f5208d860 <col:23> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
|       |   |   |   |   | `-DeclRefExpr 0x7f9f5208d820 <col:23> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7f9f5208ac70 'x' 'double (*)[mx]':'double (*)[mx]'
|       |   |   |   |   `-ImplicitCastExpr 0x7f9f5208d878 <col:25> 'int' <LValueToRValue>
|       |   |   |   |     `-DeclRefExpr 0x7f9f5208d840 <col:25> 'int' lvalue Var 0x7f9f5208cdb0 'jx' 'int'
|       |   |   |   `-ImplicitCastExpr 0x7f9f5208d8e8 <col:29> 'int' <LValueToRValue>
|       |   |   |     `-DeclRefExpr 0x7f9f5208d8b0 <col:29> 'int' lvalue Var 0x7f9f5208cd30 'ix' 'int'
|       |   |   `-ImplicitCastExpr 0x7f9f5208da38 <col:33, col:37> 'double' <LValueToRValue>
|       |   |     `-ArraySubscriptExpr 0x7f9f5208d990 <col:33, col:37> 'double' lvalue
|       |   |       |-ImplicitCastExpr 0x7f9f5208d960 <col:33> 'double *':'double *' <LValueToRValue>
|       |   |       | `-DeclRefExpr 0x7f9f5208d920 <col:33> 'double *':'double *' lvalue ParmVar 0x7f9f5208adf0 'y' 'double *':'double *'
|       |   |       `-ImplicitCastExpr 0x7f9f5208d978 <col:35> 'int' <LValueToRValue>
|       |   |         `-DeclRefExpr 0x7f9f5208d940 <col:35> 'int' lvalue Var 0x7f9f5208ceb0 'jy' 'int'
|       |   |-BinaryOperator 0x7f9f5208db20 <line:20:6, col:16> 'int' '='
|       |   | |-DeclRefExpr 0x7f9f5208da70 <col:6> 'int' lvalue Var 0x7f9f5208ceb0 'jy' 'int'
|       |   | `-BinaryOperator 0x7f9f5208db00 <col:11, col:16> 'int' '+'
|       |   |   |-ImplicitCastExpr 0x7f9f5208dad0 <col:11> 'int' <LValueToRValue>
|       |   |   | `-DeclRefExpr 0x7f9f5208da90 <col:11> 'int' lvalue Var 0x7f9f5208ceb0 'jy' 'int'
|       |   |   `-ImplicitCastExpr 0x7f9f5208dae8 <col:16> 'int' <LValueToRValue>
|       |   |     `-DeclRefExpr 0x7f9f5208dab0 <col:16> 'int' lvalue ParmVar 0x7f9f5208b470 'stepy' 'int'
|       |   `-BinaryOperator 0x7f9f5208dbf0 <line:21:6, col:16> 'int' '='
|       |     |-DeclRefExpr 0x7f9f5208db40 <col:6> 'int' lvalue Var 0x7f9f5208cfb0 'jz' 'int'
|       |     `-BinaryOperator 0x7f9f5208dbd0 <col:11, col:16> 'int' '+'
|       |       |-ImplicitCastExpr 0x7f9f5208dba0 <col:11> 'int' <LValueToRValue>
|       |       | `-DeclRefExpr 0x7f9f5208db60 <col:11> 'int' lvalue Var 0x7f9f5208cfb0 'jz' 'int'
|       |       `-ImplicitCastExpr 0x7f9f5208dbb8 <col:16> 'int' <LValueToRValue>
|       |         `-DeclRefExpr 0x7f9f5208db80 <col:16> 'int' lvalue ParmVar 0x7f9f5208b770 'stepz2' 'int'
|       `-BinaryOperator 0x7f9f5208dd20 <line:23:9, col:19> 'int' '='
|         |-DeclRefExpr 0x7f9f5208dc70 <col:9> 'int' lvalue Var 0x7f9f5208cf30 'iz' 'int'
|         `-BinaryOperator 0x7f9f5208dd00 <col:14, col:19> 'int' '+'
|           |-ImplicitCastExpr 0x7f9f5208dcd0 <col:14> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x7f9f5208dc90 <col:14> 'int' lvalue Var 0x7f9f5208cf30 'iz' 'int'
|           `-ImplicitCastExpr 0x7f9f5208dce8 <col:19> 'int' <LValueToRValue>
|             `-DeclRefExpr 0x7f9f5208dcb0 <col:19> 'int' lvalue ParmVar 0x7f9f5208b5f0 'stepz1' 'int'
`-FunctionDecl 0x7f9f5208d628 <line:19:18> col:18 implicit used fmax 'double (double, double)' extern
  |-ParmVarDecl 0x7f9f5208d6c8 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x7f9f5208d730 <<invalid sloc>> <invalid sloc> 'double'
  |-NoThrowAttr 0x7f9f5208d7a8 <col:18> Implicit
  `-ConstAttr 0x7f9f5208d7e8 <col:18> Implicit
