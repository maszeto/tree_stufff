TranslationUnitDecl 0x7fedc7031008 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fedc70318a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fedc70315a0 '__int128'
|-TypedefDecl 0x7fedc7031910 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fedc70315c0 'unsigned __int128'
|-TypedefDecl 0x7fedc7031bf8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fedc70319f0 'struct __NSConstantString_tag'
|   `-Record 0x7fedc7031968 '__NSConstantString_tag'
|-TypedefDecl 0x7fedc7031c90 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fedc7031c50 'char *'
|   `-BuiltinType 0x7fedc70310a0 'char'
|-TypedefDecl 0x7fedc7031f68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fedc7031f10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fedc7031d70 'struct __va_list_tag'
|     `-Record 0x7fedc7031ce8 '__va_list_tag'
|-TypedefDecl 0x7fedc7089a00 <./tree_src/unarySectMatrix_SumPrefixSectLastMat.c:4:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fedc7031160 'unsigned char'
`-FunctionDecl 0x7fedc708ca00 <line:11:1, line:25:1> line:11:6 SumPrefixSectLastMat 'void (int, int, int, int, double (*)[mx], double (*)[my], int, int, int, int, int, int, int, int, int, int, int, int)'
  |-ParmVarDecl 0x7fedc7089a70 <line:12:5, col:9> col:9 used nx 'int'
  |-ParmVarDecl 0x7fedc7089af0 <col:13, col:17> col:17 used mx 'int'
  |-ParmVarDecl 0x7fedc7089b70 <col:21, col:25> col:25 used ny 'int'
  |-ParmVarDecl 0x7fedc7089bf0 <col:29, col:33> col:33 used my 'int'
  |-ParmVarDecl 0x7fedc7089df0 <col:37, col:52> col:44 used x 'double (*)[mx]':'double (*)[mx]'
  |-ParmVarDecl 0x7fedc7089ff0 <col:55, col:70> col:62 used y 'double (*)[my]':'double (*)[my]'
  |-ParmVarDecl 0x7fedc708a070 <line:13:5, col:9> col:9 used startx1 'int'
  |-ParmVarDecl 0x7fedc708a0f0 <col:18, col:22> col:22 used stopx1 'int'
  |-ParmVarDecl 0x7fedc708a170 <col:30, col:34> col:34 used stepx1 'int'
  |-ParmVarDecl 0x7fedc708a1f0 <col:42, col:46> col:46 used startx2 'int'
  |-ParmVarDecl 0x7fedc708a270 <col:55, col:59> col:59 used stopx2 'int'
  |-ParmVarDecl 0x7fedc708a2f0 <col:67, col:71> col:71 used stepx2 'int'
  |-ParmVarDecl 0x7fedc708a370 <line:14:5, col:9> col:9 used starty1 'int'
  |-ParmVarDecl 0x7fedc708a3f0 <col:18, col:22> col:22 stopy1 'int'
  |-ParmVarDecl 0x7fedc708a470 <col:30, col:34> col:34 stepy1 'int'
  |-ParmVarDecl 0x7fedc708a4f0 <col:42, col:46> col:46 used starty2 'int'
  |-ParmVarDecl 0x7fedc708a570 <col:55, col:59> col:59 stopy2 'int'
  |-ParmVarDecl 0x7fedc708a5f0 <col:67, col:71> col:71 stepy2 'int'
  `-CompoundStmt 0x7fedc708d908 <col:79, line:25:1>
    |-DeclStmt 0x7fedc708cda0 <line:16:5, col:23>
    | |-VarDecl 0x7fedc708cb90 <col:5, col:9> col:9 used ix 'int'
    | |-VarDecl 0x7fedc708cc10 <col:5, col:13> col:13 used jx 'int'
    | |-VarDecl 0x7fedc708cc90 <col:5, col:17> col:17 used iy 'int'
    | `-VarDecl 0x7fedc708cd10 <col:5, col:21> col:21 used jy 'int'
    |-BinaryOperator 0x7fedc708ce10 <line:17:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7fedc708cdb8 <col:5> 'int' lvalue Var 0x7fedc708cc90 'iy' 'int'
    | `-ImplicitCastExpr 0x7fedc708cdf8 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7fedc708cdd8 <col:10> 'int' lvalue ParmVar 0x7fedc708a370 'starty1' 'int'
    `-ForStmt 0x7fedc708d8d0 <line:18:5, line:24:5>
      |-BinaryOperator 0x7fedc708ce88 <line:18:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7fedc708ce30 <col:10> 'int' lvalue Var 0x7fedc708cb90 'ix' 'int'
      | `-ImplicitCastExpr 0x7fedc708ce70 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fedc708ce50 <col:14> 'int' lvalue ParmVar 0x7fedc708a070 'startx1' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7fedc708cf18 <col:23, col:26> 'int' '<'
      | |-ImplicitCastExpr 0x7fedc708cee8 <col:23> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fedc708cea8 <col:23> 'int' lvalue Var 0x7fedc708cb90 'ix' 'int'
      | `-ImplicitCastExpr 0x7fedc708cf00 <col:26> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fedc708cec8 <col:26> 'int' lvalue ParmVar 0x7fedc708a0f0 'stopx1' 'int'
      |-CompoundAssignOperator 0x7fedc708cf90 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7fedc708cf38 <col:34> 'int' lvalue Var 0x7fedc708cb90 'ix' 'int'
      | `-ImplicitCastExpr 0x7fedc708cf78 <col:39> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fedc708cf58 <col:39> 'int' lvalue ParmVar 0x7fedc708a170 'stepx1' 'int'
      `-CompoundStmt 0x7fedc708d8a8 <col:48, line:24:5>
        |-BinaryOperator 0x7fedc708d200 <line:19:9, col:39> 'double' '='
        | |-ArraySubscriptExpr 0x7fedc708d0c8 <col:9, col:22> 'double' lvalue
        | | |-ImplicitCastExpr 0x7fedc708d098 <col:9, col:13> 'double *' <ArrayToPointerDecay>
        | | | `-ArraySubscriptExpr 0x7fedc708d030 <col:9, col:13> 'double [my]' lvalue
        | | |   |-ImplicitCastExpr 0x7fedc708d000 <col:9> 'double (*)[my]':'double (*)[my]' <LValueToRValue>
        | | |   | `-DeclRefExpr 0x7fedc708cfc0 <col:9> 'double (*)[my]':'double (*)[my]' lvalue ParmVar 0x7fedc7089ff0 'y' 'double (*)[my]':'double (*)[my]'
        | | |   `-ImplicitCastExpr 0x7fedc708d018 <col:11> 'int' <LValueToRValue>
        | | |     `-DeclRefExpr 0x7fedc708cfe0 <col:11> 'int' lvalue Var 0x7fedc708cc90 'iy' 'int'
        | | `-ImplicitCastExpr 0x7fedc708d0b0 <col:15> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fedc708d050 <col:15> 'int' lvalue ParmVar 0x7fedc708a370 'starty1' 'int'
        | `-ImplicitCastExpr 0x7fedc708d1e8 <col:26, col:39> 'double' <LValueToRValue>
        |   `-ArraySubscriptExpr 0x7fedc708d1c8 <col:26, col:39> 'double' lvalue
        |     |-ImplicitCastExpr 0x7fedc708d198 <col:26, col:30> 'double *' <ArrayToPointerDecay>
        |     | `-ArraySubscriptExpr 0x7fedc708d158 <col:26, col:30> 'double [mx]' lvalue
        |     |   |-ImplicitCastExpr 0x7fedc708d128 <col:26> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
        |     |   | `-DeclRefExpr 0x7fedc708d0e8 <col:26> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7fedc7089df0 'x' 'double (*)[mx]':'double (*)[mx]'
        |     |   `-ImplicitCastExpr 0x7fedc708d140 <col:28> 'int' <LValueToRValue>
        |     |     `-DeclRefExpr 0x7fedc708d108 <col:28> 'int' lvalue Var 0x7fedc708cb90 'ix' 'int'
        |     `-ImplicitCastExpr 0x7fedc708d1b0 <col:32> 'int' <LValueToRValue>
        |       `-DeclRefExpr 0x7fedc708d178 <col:32> 'int' lvalue ParmVar 0x7fedc708a070 'startx1' 'int'
        |-BinaryOperator 0x7fedc708d2b8 <line:20:9, col:22> 'int' '='
        | |-DeclRefExpr 0x7fedc708d220 <col:9> 'int' lvalue Var 0x7fedc708cd10 'jy' 'int'
        | `-BinaryOperator 0x7fedc708d298 <col:14, col:22> 'int' '+'
        |   |-ImplicitCastExpr 0x7fedc708d280 <col:14> 'int' <LValueToRValue>
        |   | `-DeclRefExpr 0x7fedc708d240 <col:14> 'int' lvalue ParmVar 0x7fedc708a4f0 'starty2' 'int'
        |   `-IntegerLiteral 0x7fedc708d260 <col:22> 'int' 1
        `-ForStmt 0x7fedc708d870 <line:21:9, line:23:9>
          |-BinaryOperator 0x7fedc708d370 <line:21:14, col:26> 'int' '='
          | |-DeclRefExpr 0x7fedc708d2d8 <col:14> 'int' lvalue Var 0x7fedc708cc10 'jx' 'int'
          | `-BinaryOperator 0x7fedc708d350 <col:18, col:26> 'int' '+'
          |   |-ImplicitCastExpr 0x7fedc708d338 <col:18> 'int' <LValueToRValue>
          |   | `-DeclRefExpr 0x7fedc708d2f8 <col:18> 'int' lvalue ParmVar 0x7fedc708a1f0 'startx2' 'int'
          |   `-IntegerLiteral 0x7fedc708d318 <col:26> 'int' 1
          |-<<<NULL>>>
          |-BinaryOperator 0x7fedc708d400 <col:29, col:32> 'int' '<'
          | |-ImplicitCastExpr 0x7fedc708d3d0 <col:29> 'int' <LValueToRValue>
          | | `-DeclRefExpr 0x7fedc708d390 <col:29> 'int' lvalue Var 0x7fedc708cc10 'jx' 'int'
          | `-ImplicitCastExpr 0x7fedc708d3e8 <col:32> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x7fedc708d3b0 <col:32> 'int' lvalue ParmVar 0x7fedc708a270 'stopx2' 'int'
          |-CompoundAssignOperator 0x7fedc708d478 <col:40, col:45> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
          | |-DeclRefExpr 0x7fedc708d420 <col:40> 'int' lvalue Var 0x7fedc708cc10 'jx' 'int'
          | `-ImplicitCastExpr 0x7fedc708d460 <col:45> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x7fedc708d440 <col:45> 'int' lvalue ParmVar 0x7fedc708a2f0 'stepx2' 'int'
          `-CompoundStmt 0x7fedc708d858 <col:54, line:23:9>
            `-BinaryOperator 0x7fedc708d838 <line:22:13, col:47> 'double' '='
              |-ArraySubscriptExpr 0x7fedc708d588 <col:13, col:21> 'double' lvalue
              | |-ImplicitCastExpr 0x7fedc708d558 <col:13, col:17> 'double *' <ArrayToPointerDecay>
              | | `-ArraySubscriptExpr 0x7fedc708d518 <col:13, col:17> 'double [my]' lvalue
              | |   |-ImplicitCastExpr 0x7fedc708d4e8 <col:13> 'double (*)[my]':'double (*)[my]' <LValueToRValue>
              | |   | `-DeclRefExpr 0x7fedc708d4a8 <col:13> 'double (*)[my]':'double (*)[my]' lvalue ParmVar 0x7fedc7089ff0 'y' 'double (*)[my]':'double (*)[my]'
              | |   `-ImplicitCastExpr 0x7fedc708d500 <col:15> 'int' <LValueToRValue>
              | |     `-DeclRefExpr 0x7fedc708d4c8 <col:15> 'int' lvalue Var 0x7fedc708cc90 'iy' 'int'
              | `-ImplicitCastExpr 0x7fedc708d570 <col:19> 'int' <LValueToRValue>
              |   `-DeclRefExpr 0x7fedc708d538 <col:19> 'int' lvalue Var 0x7fedc708cd10 'jy' 'int'
              `-BinaryOperator 0x7fedc708d818 <col:25, col:47> 'double' '+'
                |-ImplicitCastExpr 0x7fedc708d7e8 <col:25, col:35> 'double' <LValueToRValue>
                | `-ArraySubscriptExpr 0x7fedc708d6c8 <col:25, col:35> 'double' lvalue
                |   |-ImplicitCastExpr 0x7fedc708d6b0 <col:25, col:29> 'double *' <ArrayToPointerDecay>
                |   | `-ArraySubscriptExpr 0x7fedc708d618 <col:25, col:29> 'double [my]' lvalue
                |   |   |-ImplicitCastExpr 0x7fedc708d5e8 <col:25> 'double (*)[my]':'double (*)[my]' <LValueToRValue>
                |   |   | `-DeclRefExpr 0x7fedc708d5a8 <col:25> 'double (*)[my]':'double (*)[my]' lvalue ParmVar 0x7fedc7089ff0 'y' 'double (*)[my]':'double (*)[my]'
                |   |   `-ImplicitCastExpr 0x7fedc708d600 <col:27> 'int' <LValueToRValue>
                |   |     `-DeclRefExpr 0x7fedc708d5c8 <col:27> 'int' lvalue Var 0x7fedc708cc90 'iy' 'int'
                |   `-BinaryOperator 0x7fedc708d690 <col:31, col:34> 'int' '-'
                |     |-ImplicitCastExpr 0x7fedc708d678 <col:31> 'int' <LValueToRValue>
                |     | `-DeclRefExpr 0x7fedc708d638 <col:31> 'int' lvalue Var 0x7fedc708cd10 'jy' 'int'
                |     `-IntegerLiteral 0x7fedc708d658 <col:34> 'int' 1
                `-ImplicitCastExpr 0x7fedc708d800 <col:39, col:47> 'double' <LValueToRValue>
                  `-ArraySubscriptExpr 0x7fedc708d7c8 <col:39, col:47> 'double' lvalue
                    |-ImplicitCastExpr 0x7fedc708d798 <col:39, col:43> 'double *' <ArrayToPointerDecay>
                    | `-ArraySubscriptExpr 0x7fedc708d758 <col:39, col:43> 'double [mx]' lvalue
                    |   |-ImplicitCastExpr 0x7fedc708d728 <col:39> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
                    |   | `-DeclRefExpr 0x7fedc708d6e8 <col:39> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7fedc7089df0 'x' 'double (*)[mx]':'double (*)[mx]'
                    |   `-ImplicitCastExpr 0x7fedc708d740 <col:41> 'int' <LValueToRValue>
                    |     `-DeclRefExpr 0x7fedc708d708 <col:41> 'int' lvalue Var 0x7fedc708cb90 'ix' 'int'
                    `-ImplicitCastExpr 0x7fedc708d7b0 <col:45> 'int' <LValueToRValue>
                      `-DeclRefExpr 0x7fedc708d778 <col:45> 'int' lvalue Var 0x7fedc708cc10 'jx' 'int'
