TranslationUnitDecl 0x7f891f838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f891f8394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f891f8391a0 '__int128'
|-TypedefDecl 0x7f891f839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f891f8391c0 'unsigned __int128'
|-TypedefDecl 0x7f891f8397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f891f8395f0 'struct __NSConstantString_tag'
|   `-Record 0x7f891f839568 '__NSConstantString_tag'
|-TypedefDecl 0x7f891f839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f891f839850 'char *'
|   `-BuiltinType 0x7f891f838ca0 'char'
|-TypedefDecl 0x7f891f839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f891f839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f891f839970 'struct __va_list_tag'
|     `-Record 0x7f891f8398e8 '__va_list_tag'
|-TypedefDecl 0x7f891f891600 <./tree_src/unaryWholeMatrix_ProdPrefixWholeLastMat.c:4:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7f891f838d60 'unsigned char'
`-FunctionDecl 0x7f891f891d18 <line:11:1, line:21:1> line:11:6 ProdPrefixWholeLastMat 'void (int, int, double (*)[m], double (*)[m])'
  |-ParmVarDecl 0x7f891f891670 <line:12:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7f891f8916f0 <col:12, col:16> col:16 used m 'int'
  |-ParmVarDecl 0x7f891f8918f0 <col:19, col:32> col:26 used x 'double (*)[m]':'double (*)[m]'
  |-ParmVarDecl 0x7f891f891af0 <col:35, col:48> col:42 used y 'double (*)[m]':'double (*)[m]'
  `-CompoundStmt 0x7f891f894838 <col:52, line:21:1>
    |-DeclStmt 0x7f891f891f38 <line:14:5, col:12>
    | |-VarDecl 0x7f891f891e38 <col:5, col:9> col:9 used i 'int'
    | `-VarDecl 0x7f891f891eb8 <col:5, col:11> col:11 used j 'int'
    `-ForStmt 0x7f891f894800 <line:15:5, line:20:5>
      |-BinaryOperator 0x7f891f891f90 <line:15:10, col:13> 'int' '='
      | |-DeclRefExpr 0x7f891f891f50 <col:10> 'int' lvalue Var 0x7f891f891e38 'i' 'int'
      | `-IntegerLiteral 0x7f891f891f70 <col:13> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x7f891f892020 <col:16, col:18> 'int' '<'
      | |-ImplicitCastExpr 0x7f891f891ff0 <col:16> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7f891f891fb0 <col:16> 'int' lvalue Var 0x7f891f891e38 'i' 'int'
      | `-ImplicitCastExpr 0x7f891f892008 <col:18> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f891f891fd0 <col:18> 'int' lvalue ParmVar 0x7f891f891670 'n' 'int'
      |-UnaryOperator 0x7f891f892060 <col:21, col:22> 'int' postfix '++'
      | `-DeclRefExpr 0x7f891f892040 <col:21> 'int' lvalue Var 0x7f891f891e38 'i' 'int'
      `-CompoundStmt 0x7f891f8947e0 <col:27, line:20:5>
        |-BinaryOperator 0x7f891f892290 <line:16:9, col:25> 'double' '='
        | |-ArraySubscriptExpr 0x7f891f892170 <col:9, col:15> 'double' lvalue
        | | |-ImplicitCastExpr 0x7f891f892158 <col:9, col:12> 'double *' <ArrayToPointerDecay>
        | | | `-ArraySubscriptExpr 0x7f891f8920e8 <col:9, col:12> 'double [m]' lvalue
        | | |   |-ImplicitCastExpr 0x7f891f8920b8 <col:9> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
        | | |   | `-DeclRefExpr 0x7f891f892078 <col:9> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f891f891af0 'y' 'double (*)[m]':'double (*)[m]'
        | | |   `-ImplicitCastExpr 0x7f891f8920d0 <col:11> 'int' <LValueToRValue>
        | | |     `-DeclRefExpr 0x7f891f892098 <col:11> 'int' lvalue Var 0x7f891f891e38 'i' 'int'
        | | `-IntegerLiteral 0x7f891f892108 <col:14> 'int' 0
        | `-ImplicitCastExpr 0x7f891f892278 <col:19, col:25> 'double' <LValueToRValue>
        |   `-ArraySubscriptExpr 0x7f891f892258 <col:19, col:25> 'double' lvalue
        |     |-ImplicitCastExpr 0x7f891f892240 <col:19, col:22> 'double *' <ArrayToPointerDecay>
        |     | `-ArraySubscriptExpr 0x7f891f892200 <col:19, col:22> 'double [m]' lvalue
        |     |   |-ImplicitCastExpr 0x7f891f8921d0 <col:19> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
        |     |   | `-DeclRefExpr 0x7f891f892190 <col:19> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f891f8918f0 'x' 'double (*)[m]':'double (*)[m]'
        |     |   `-ImplicitCastExpr 0x7f891f8921e8 <col:21> 'int' <LValueToRValue>
        |     |     `-DeclRefExpr 0x7f891f8921b0 <col:21> 'int' lvalue Var 0x7f891f891e38 'i' 'int'
        |     `-IntegerLiteral 0x7f891f892220 <col:24> 'int' 0
        `-ForStmt 0x7f891f8947a8 <line:17:9, line:19:9>
          |-BinaryOperator 0x7f891f8922f0 <line:17:14, col:18> 'int' '='
          | |-DeclRefExpr 0x7f891f8922b0 <col:14> 'int' lvalue Var 0x7f891f891eb8 'j' 'int'
          | `-IntegerLiteral 0x7f891f8922d0 <col:18> 'int' 1
          |-<<<NULL>>>
          |-BinaryOperator 0x7f891f892380 <col:21, col:23> 'int' '<'
          | |-ImplicitCastExpr 0x7f891f892350 <col:21> 'int' <LValueToRValue>
          | | `-DeclRefExpr 0x7f891f892310 <col:21> 'int' lvalue Var 0x7f891f891eb8 'j' 'int'
          | `-ImplicitCastExpr 0x7f891f892368 <col:23> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x7f891f892330 <col:23> 'int' lvalue ParmVar 0x7f891f8916f0 'm' 'int'
          |-UnaryOperator 0x7f891f8923c0 <col:26, col:27> 'int' postfix '++'
          | `-DeclRefExpr 0x7f891f8923a0 <col:26> 'int' lvalue Var 0x7f891f891eb8 'j' 'int'
          `-CompoundStmt 0x7f891f894790 <col:32, line:19:9>
            `-BinaryOperator 0x7f891f894770 <line:18:6, col:34> 'double' '='
              |-ArraySubscriptExpr 0x7f891f8924b8 <col:6, col:12> 'double' lvalue
              | |-ImplicitCastExpr 0x7f891f892488 <col:6, col:9> 'double *' <ArrayToPointerDecay>
              | | `-ArraySubscriptExpr 0x7f891f892448 <col:6, col:9> 'double [m]' lvalue
              | |   |-ImplicitCastExpr 0x7f891f892418 <col:6> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
              | |   | `-DeclRefExpr 0x7f891f8923d8 <col:6> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f891f891af0 'y' 'double (*)[m]':'double (*)[m]'
              | |   `-ImplicitCastExpr 0x7f891f892430 <col:8> 'int' <LValueToRValue>
              | |     `-DeclRefExpr 0x7f891f8923f8 <col:8> 'int' lvalue Var 0x7f891f891e38 'i' 'int'
              | `-ImplicitCastExpr 0x7f891f8924a0 <col:11> 'int' <LValueToRValue>
              |   `-DeclRefExpr 0x7f891f892468 <col:11> 'int' lvalue Var 0x7f891f891eb8 'j' 'int'
              `-BinaryOperator 0x7f891f894750 <col:16, col:34> 'double' '*'
                |-ImplicitCastExpr 0x7f891f894720 <col:16, col:24> 'double' <LValueToRValue>
                | `-ArraySubscriptExpr 0x7f891f894600 <col:16, col:24> 'double' lvalue
                |   |-ImplicitCastExpr 0x7f891f8925e0 <col:16, col:19> 'double *' <ArrayToPointerDecay>
                |   | `-ArraySubscriptExpr 0x7f891f892548 <col:16, col:19> 'double [m]' lvalue
                |   |   |-ImplicitCastExpr 0x7f891f892518 <col:16> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
                |   |   | `-DeclRefExpr 0x7f891f8924d8 <col:16> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f891f891af0 'y' 'double (*)[m]':'double (*)[m]'
                |   |   `-ImplicitCastExpr 0x7f891f892530 <col:18> 'int' <LValueToRValue>
                |   |     `-DeclRefExpr 0x7f891f8924f8 <col:18> 'int' lvalue Var 0x7f891f891e38 'i' 'int'
                |   `-BinaryOperator 0x7f891f8925c0 <col:21, col:23> 'int' '-'
                |     |-ImplicitCastExpr 0x7f891f8925a8 <col:21> 'int' <LValueToRValue>
                |     | `-DeclRefExpr 0x7f891f892568 <col:21> 'int' lvalue Var 0x7f891f891eb8 'j' 'int'
                |     `-IntegerLiteral 0x7f891f892588 <col:23> 'int' 1
                `-ImplicitCastExpr 0x7f891f894738 <col:28, col:34> 'double' <LValueToRValue>
                  `-ArraySubscriptExpr 0x7f891f894700 <col:28, col:34> 'double' lvalue
                    |-ImplicitCastExpr 0x7f891f8946d0 <col:28, col:31> 'double *' <ArrayToPointerDecay>
                    | `-ArraySubscriptExpr 0x7f891f894690 <col:28, col:31> 'double [m]' lvalue
                    |   |-ImplicitCastExpr 0x7f891f894660 <col:28> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
                    |   | `-DeclRefExpr 0x7f891f894620 <col:28> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7f891f8918f0 'x' 'double (*)[m]':'double (*)[m]'
                    |   `-ImplicitCastExpr 0x7f891f894678 <col:30> 'int' <LValueToRValue>
                    |     `-DeclRefExpr 0x7f891f894640 <col:30> 'int' lvalue Var 0x7f891f891e38 'i' 'int'
                    `-ImplicitCastExpr 0x7f891f8946e8 <col:33> 'int' <LValueToRValue>
                      `-DeclRefExpr 0x7f891f8946b0 <col:33> 'int' lvalue Var 0x7f891f891eb8 'j' 'int'
