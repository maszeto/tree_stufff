TranslationUnitDecl 0x7f9db5038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f9db50394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f9db50391a0 '__int128'
|-TypedefDecl 0x7f9db5039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f9db50391c0 'unsigned __int128'
|-TypedefDecl 0x7f9db50397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f9db50395f0 'struct __NSConstantString_tag'
|   `-Record 0x7f9db5039568 '__NSConstantString_tag'
|-TypedefDecl 0x7f9db5039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f9db5039850 'char *'
|   `-BuiltinType 0x7f9db5038ca0 'char'
|-TypedefDecl 0x7f9db5039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f9db5039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f9db5039970 'struct __va_list_tag'
|     `-Record 0x7f9db50398e8 '__va_list_tag'
|-TypedefDecl 0x7f9db5091600 <./tree_src/unarySectMatrix_IdxMinSectLastMat.c:4:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7f9db5038d60 'unsigned char'
`-FunctionDecl 0x7f9db5092218 <line:12:1, line:33:1> line:12:6 IdxMinSectLastMat 'void (int, int, int, double (*)[mx], int *, int, int, int, int, int, int, int, int, int)'
  |-ParmVarDecl 0x7f9db5091670 <line:13:5, col:9> col:9 used nx 'int'
  |-ParmVarDecl 0x7f9db50916f0 <col:13, col:17> col:17 used mx 'int'
  |-ParmVarDecl 0x7f9db5091770 <col:21, col:25> col:25 used nz 'int'
  |-ParmVarDecl 0x7f9db5091970 <col:29, col:44> col:36 used x 'double (*)[mx]':'double (*)[mx]'
  |-ParmVarDecl 0x7f9db5091af0 <col:47, col:55> col:51 used z 'int *':'int *'
  |-ParmVarDecl 0x7f9db5091b70 <line:14:5, col:9> col:9 used startx1 'int'
  |-ParmVarDecl 0x7f9db5091bf0 <col:18, col:22> col:22 used stopx1 'int'
  |-ParmVarDecl 0x7f9db5091c70 <col:30, col:34> col:34 used stepx1 'int'
  |-ParmVarDecl 0x7f9db5091cf0 <col:42, col:46> col:46 used startx2 'int'
  |-ParmVarDecl 0x7f9db5091d70 <col:55, col:59> col:59 used stopx2 'int'
  |-ParmVarDecl 0x7f9db5091df0 <col:67, col:71> col:71 used stepx2 'int'
  |-ParmVarDecl 0x7f9db5091e70 <line:15:5, col:9> col:9 used startz 'int'
  |-ParmVarDecl 0x7f9db5091ef0 <col:17, col:21> col:21 stopz 'int'
  |-ParmVarDecl 0x7f9db5091f70 <col:28, col:32> col:32 used stepz 'int'
  `-CompoundStmt 0x7f9db5095358 <col:40, line:33:1>
    |-DeclStmt 0x7f9db50923f0 <line:17:5, col:15>
    | `-VarDecl 0x7f9db5092388 <col:5, col:12> col:12 used val 'double'
    |-DeclStmt 0x7f9db5094718 <line:18:5, col:27>
    | |-VarDecl 0x7f9db5092420 <col:5, col:9> col:9 used ix 'int'
    | |-VarDecl 0x7f9db50924a0 <col:5, col:13> col:13 used jx 'int'
    | |-VarDecl 0x7f9db5092520 <col:5, col:17> col:17 iy 'int'
    | |-VarDecl 0x7f9db5094600 <col:5, col:21> col:21 jy 'int'
    | `-VarDecl 0x7f9db5094680 <col:5, col:25> col:25 used iz 'int'
    |-DeclStmt 0x7f9db50947b0 <line:19:5, col:12>
    | `-VarDecl 0x7f9db5094748 <col:5, col:9> col:9 used loc 'int'
    |-BinaryOperator 0x7f9db5094820 <line:20:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7f9db50947c8 <col:5> 'int' lvalue Var 0x7f9db5094680 'iz' 'int'
    | `-ImplicitCastExpr 0x7f9db5094808 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7f9db50947e8 <col:10> 'int' lvalue ParmVar 0x7f9db5091e70 'startz' 'int'
    `-ForStmt 0x7f9db5095320 <line:21:5, line:32:5>
      |-BinaryOperator 0x7f9db5094898 <line:21:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7f9db5094840 <col:10> 'int' lvalue Var 0x7f9db5092420 'ix' 'int'
      | `-ImplicitCastExpr 0x7f9db5094880 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f9db5094860 <col:14> 'int' lvalue ParmVar 0x7f9db5091b70 'startx1' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7f9db5094928 <col:23, col:26> 'int' '<'
      | |-ImplicitCastExpr 0x7f9db50948f8 <col:23> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7f9db50948b8 <col:23> 'int' lvalue Var 0x7f9db5092420 'ix' 'int'
      | `-ImplicitCastExpr 0x7f9db5094910 <col:26> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f9db50948d8 <col:26> 'int' lvalue ParmVar 0x7f9db5091bf0 'stopx1' 'int'
      |-CompoundAssignOperator 0x7f9db50949a0 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7f9db5094948 <col:34> 'int' lvalue Var 0x7f9db5092420 'ix' 'int'
      | `-ImplicitCastExpr 0x7f9db5094988 <col:39> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f9db5094968 <col:39> 'int' lvalue ParmVar 0x7f9db5091c70 'stepx1' 'int'
      `-CompoundStmt 0x7f9db50952e8 <col:48, line:32:5>
        |-BinaryOperator 0x7f9db5094a28 <line:22:9, col:15> 'int' '='
        | |-DeclRefExpr 0x7f9db50949d0 <col:9> 'int' lvalue Var 0x7f9db5094748 'loc' 'int'
        | `-ImplicitCastExpr 0x7f9db5094a10 <col:15> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x7f9db50949f0 <col:15> 'int' lvalue ParmVar 0x7f9db5091b70 'startx1' 'int'
        |-BinaryOperator 0x7f9db5094bb0 <line:23:9, col:29> 'double' '='
        | |-DeclRefExpr 0x7f9db5094a48 <col:9> 'double' lvalue Var 0x7f9db5092388 'val' 'double'
        | `-ImplicitCastExpr 0x7f9db5094b98 <col:16, col:29> 'double' <LValueToRValue>
        |   `-ArraySubscriptExpr 0x7f9db5094b78 <col:16, col:29> 'double' lvalue
        |     |-ImplicitCastExpr 0x7f9db5094b48 <col:16, col:20> 'double *' <ArrayToPointerDecay>
        |     | `-ArraySubscriptExpr 0x7f9db5094ad8 <col:16, col:20> 'double [mx]' lvalue
        |     |   |-ImplicitCastExpr 0x7f9db5094aa8 <col:16> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
        |     |   | `-DeclRefExpr 0x7f9db5094a68 <col:16> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7f9db5091970 'x' 'double (*)[mx]':'double (*)[mx]'
        |     |   `-ImplicitCastExpr 0x7f9db5094ac0 <col:18> 'int' <LValueToRValue>
        |     |     `-DeclRefExpr 0x7f9db5094a88 <col:18> 'int' lvalue Var 0x7f9db5092420 'ix' 'int'
        |     `-ImplicitCastExpr 0x7f9db5094b60 <col:22> 'int' <LValueToRValue>
        |       `-DeclRefExpr 0x7f9db5094af8 <col:22> 'int' lvalue ParmVar 0x7f9db5091cf0 'startx2' 'int'
        |-ForStmt 0x7f9db5095140 <line:24:9, line:29:9>
        | |-BinaryOperator 0x7f9db5094c68 <line:24:14, col:26> 'int' '='
        | | |-DeclRefExpr 0x7f9db5094bd0 <col:14> 'int' lvalue Var 0x7f9db50924a0 'jx' 'int'
        | | `-BinaryOperator 0x7f9db5094c48 <col:18, col:26> 'int' '+'
        | |   |-ImplicitCastExpr 0x7f9db5094c30 <col:18> 'int' <LValueToRValue>
        | |   | `-DeclRefExpr 0x7f9db5094bf0 <col:18> 'int' lvalue ParmVar 0x7f9db5091cf0 'startx2' 'int'
        | |   `-IntegerLiteral 0x7f9db5094c10 <col:26> 'int' 1
        | |-<<<NULL>>>
        | |-BinaryOperator 0x7f9db5094cf8 <col:29, col:32> 'int' '<'
        | | |-ImplicitCastExpr 0x7f9db5094cc8 <col:29> 'int' <LValueToRValue>
        | | | `-DeclRefExpr 0x7f9db5094c88 <col:29> 'int' lvalue Var 0x7f9db50924a0 'jx' 'int'
        | | `-ImplicitCastExpr 0x7f9db5094ce0 <col:32> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7f9db5094ca8 <col:32> 'int' lvalue ParmVar 0x7f9db5091d70 'stopx2' 'int'
        | |-CompoundAssignOperator 0x7f9db5094d70 <col:40, col:45> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
        | | |-DeclRefExpr 0x7f9db5094d18 <col:40> 'int' lvalue Var 0x7f9db50924a0 'jx' 'int'
        | | `-ImplicitCastExpr 0x7f9db5094d58 <col:45> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7f9db5094d38 <col:45> 'int' lvalue ParmVar 0x7f9db5091df0 'stepx2' 'int'
        | `-CompoundStmt 0x7f9db5095120 <col:54, line:29:9>
        |   |-IfStmt 0x7f9db5095100 <line:25:13, line:28:13>
        |   | |-BinaryOperator 0x7f9db5094ef0 <line:25:17, col:29> 'int' '<'
        |   | | |-ImplicitCastExpr 0x7f9db5094ec0 <col:17, col:25> 'double' <LValueToRValue>
        |   | | | `-ArraySubscriptExpr 0x7f9db5094e80 <col:17, col:25> 'double' lvalue
        |   | | |   |-ImplicitCastExpr 0x7f9db5094e50 <col:17, col:21> 'double *' <ArrayToPointerDecay>
        |   | | |   | `-ArraySubscriptExpr 0x7f9db5094e10 <col:17, col:21> 'double [mx]' lvalue
        |   | | |   |   |-ImplicitCastExpr 0x7f9db5094de0 <col:17> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
        |   | | |   |   | `-DeclRefExpr 0x7f9db5094da0 <col:17> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7f9db5091970 'x' 'double (*)[mx]':'double (*)[mx]'
        |   | | |   |   `-ImplicitCastExpr 0x7f9db5094df8 <col:19> 'int' <LValueToRValue>
        |   | | |   |     `-DeclRefExpr 0x7f9db5094dc0 <col:19> 'int' lvalue Var 0x7f9db5092420 'ix' 'int'
        |   | | |   `-ImplicitCastExpr 0x7f9db5094e68 <col:23> 'int' <LValueToRValue>
        |   | | |     `-DeclRefExpr 0x7f9db5094e30 <col:23> 'int' lvalue Var 0x7f9db50924a0 'jx' 'int'
        |   | | `-ImplicitCastExpr 0x7f9db5094ed8 <col:29> 'double' <LValueToRValue>
        |   | |   `-DeclRefExpr 0x7f9db5094ea0 <col:29> 'double' lvalue Var 0x7f9db5092388 'val' 'double'
        |   | `-CompoundStmt 0x7f9db50950e0 <col:35, line:28:13>
        |   |   |-BinaryOperator 0x7f9db5094f68 <line:26:14, col:20> 'int' '='
        |   |   | |-DeclRefExpr 0x7f9db5094f10 <col:14> 'int' lvalue Var 0x7f9db5094748 'loc' 'int'
        |   |   | `-ImplicitCastExpr 0x7f9db5094f50 <col:20> 'int' <LValueToRValue>
        |   |   |   `-DeclRefExpr 0x7f9db5094f30 <col:20> 'int' lvalue Var 0x7f9db50924a0 'jx' 'int'
        |   |   `-BinaryOperator 0x7f9db50950c0 <line:27:14, col:29> 'double' '='
        |   |     |-DeclRefExpr 0x7f9db5094f88 <col:14> 'double' lvalue Var 0x7f9db5092388 'val' 'double'
        |   |     `-ImplicitCastExpr 0x7f9db50950a8 <col:21, col:29> 'double' <LValueToRValue>
        |   |       `-ArraySubscriptExpr 0x7f9db5095088 <col:21, col:29> 'double' lvalue
        |   |         |-ImplicitCastExpr 0x7f9db5095058 <col:21, col:25> 'double *' <ArrayToPointerDecay>
        |   |         | `-ArraySubscriptExpr 0x7f9db5095018 <col:21, col:25> 'double [mx]' lvalue
        |   |         |   |-ImplicitCastExpr 0x7f9db5094fe8 <col:21> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
        |   |         |   | `-DeclRefExpr 0x7f9db5094fa8 <col:21> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7f9db5091970 'x' 'double (*)[mx]':'double (*)[mx]'
        |   |         |   `-ImplicitCastExpr 0x7f9db5095000 <col:23> 'int' <LValueToRValue>
        |   |         |     `-DeclRefExpr 0x7f9db5094fc8 <col:23> 'int' lvalue Var 0x7f9db5092420 'ix' 'int'
        |   |         `-ImplicitCastExpr 0x7f9db5095070 <col:27> 'int' <LValueToRValue>
        |   |           `-DeclRefExpr 0x7f9db5095038 <col:27> 'int' lvalue Var 0x7f9db50924a0 'jx' 'int'
        |   `-NullStmt 0x7f9db5095118 <line:28:14>
        |-BinaryOperator 0x7f9db5095240 <line:30:9, col:17> 'int' '='
        | |-ArraySubscriptExpr 0x7f9db50951e8 <col:9, col:13> 'int' lvalue
        | | |-ImplicitCastExpr 0x7f9db50951b8 <col:9> 'int *':'int *' <LValueToRValue>
        | | | `-DeclRefExpr 0x7f9db5095178 <col:9> 'int *':'int *' lvalue ParmVar 0x7f9db5091af0 'z' 'int *':'int *'
        | | `-ImplicitCastExpr 0x7f9db50951d0 <col:11> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7f9db5095198 <col:11> 'int' lvalue Var 0x7f9db5094680 'iz' 'int'
        | `-ImplicitCastExpr 0x7f9db5095228 <col:17> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x7f9db5095208 <col:17> 'int' lvalue Var 0x7f9db5094748 'loc' 'int'
        `-CompoundAssignOperator 0x7f9db50952b8 <line:31:9, col:15> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
          |-DeclRefExpr 0x7f9db5095260 <col:9> 'int' lvalue Var 0x7f9db5094680 'iz' 'int'
          `-ImplicitCastExpr 0x7f9db50952a0 <col:15> 'int' <LValueToRValue>
            `-DeclRefExpr 0x7f9db5095280 <col:15> 'int' lvalue ParmVar 0x7f9db5091f70 'stepz' 'int'
