TranslationUnitDecl 0x7ff7ac827208 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7ff7ac827aa0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7ff7ac8277a0 '__int128'
|-TypedefDecl 0x7ff7ac827b10 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7ff7ac8277c0 'unsigned __int128'
|-TypedefDecl 0x7ff7ac827df8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7ff7ac827bf0 'struct __NSConstantString_tag'
|   `-Record 0x7ff7ac827b68 '__NSConstantString_tag'
|-TypedefDecl 0x7ff7ac827e90 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7ff7ac827e50 'char *'
|   `-BuiltinType 0x7ff7ac8272a0 'char'
|-TypedefDecl 0x7ff7ac828168 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7ff7ac828110 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7ff7ac827f70 'struct __va_list_tag'
|     `-Record 0x7ff7ac827ee8 '__va_list_tag'
|-TypedefDecl 0x7ff7ad82f200 <./tree_src/unarySectMatrix_MaxSectLastMat.c:4:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7ff7ac827360 'unsigned char'
|-FunctionDecl 0x7ff7ad82fe18 <line:12:1, line:28:1> line:12:6 MaxSectLastMat 'void (int, int, int, double (*)[mx], double *, int, int, int, int, int, int, int, int, int)'
| |-ParmVarDecl 0x7ff7ad82f270 <line:13:5, col:9> col:9 used nx 'int'
| |-ParmVarDecl 0x7ff7ad82f2f0 <col:13, col:17> col:17 used mx 'int'
| |-ParmVarDecl 0x7ff7ad82f370 <col:21, col:25> col:25 used nz 'int'
| |-ParmVarDecl 0x7ff7ad82f570 <col:29, col:44> col:36 used x 'double (*)[mx]':'double (*)[mx]'
| |-ParmVarDecl 0x7ff7ad82f6f0 <col:47, col:58> col:54 used z 'double *':'double *'
| |-ParmVarDecl 0x7ff7ad82f770 <line:14:5, col:9> col:9 used startx1 'int'
| |-ParmVarDecl 0x7ff7ad82f7f0 <col:18, col:22> col:22 used stopx1 'int'
| |-ParmVarDecl 0x7ff7ad82f870 <col:30, col:34> col:34 used stepx1 'int'
| |-ParmVarDecl 0x7ff7ad82f8f0 <col:42, col:46> col:46 used startx2 'int'
| |-ParmVarDecl 0x7ff7ad82f970 <col:55, col:59> col:59 used stopx2 'int'
| |-ParmVarDecl 0x7ff7ad82f9f0 <col:67, col:71> col:71 used stepx2 'int'
| |-ParmVarDecl 0x7ff7ad82fa70 <line:15:5, col:9> col:9 used startz 'int'
| |-ParmVarDecl 0x7ff7ad82faf0 <col:17, col:21> col:21 stopz 'int'
| |-ParmVarDecl 0x7ff7ad82fb70 <col:28, col:32> col:32 used stepz 'int'
| `-CompoundStmt 0x7ff7ad832cf0 <col:40, line:28:1>
|   |-DeclStmt 0x7ff7ad832230 <line:17:5, col:27>
|   | |-VarDecl 0x7ff7ad82ff88 <col:5, col:9> col:9 used ix 'int'
|   | |-VarDecl 0x7ff7ad830008 <col:5, col:13> col:13 used jx 'int'
|   | |-VarDecl 0x7ff7ad830088 <col:5, col:17> col:17 iy 'int'
|   | |-VarDecl 0x7ff7ad830108 <col:5, col:21> col:21 jy 'int'
|   | `-VarDecl 0x7ff7ad830188 <col:5, col:25> col:25 used iz 'int'
|   |-DeclStmt 0x7ff7ad8322c8 <line:18:5, col:15>
|   | `-VarDecl 0x7ff7ad832260 <col:5, col:12> col:12 used val 'double'
|   |-BinaryOperator 0x7ff7ad832338 <line:19:5, col:10> 'int' '='
|   | |-DeclRefExpr 0x7ff7ad8322e0 <col:5> 'int' lvalue Var 0x7ff7ad830188 'iz' 'int'
|   | `-ImplicitCastExpr 0x7ff7ad832320 <col:10> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7ff7ad832300 <col:10> 'int' lvalue ParmVar 0x7ff7ad82fa70 'startz' 'int'
|   `-ForStmt 0x7ff7ad832cb8 <line:20:5, line:27:5>
|     |-BinaryOperator 0x7ff7ad8323b0 <line:20:10, col:14> 'int' '='
|     | |-DeclRefExpr 0x7ff7ad832358 <col:10> 'int' lvalue Var 0x7ff7ad82ff88 'ix' 'int'
|     | `-ImplicitCastExpr 0x7ff7ad832398 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7ff7ad832378 <col:14> 'int' lvalue ParmVar 0x7ff7ad82f770 'startx1' 'int'
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7ff7ad832440 <col:23, col:26> 'int' '<'
|     | |-ImplicitCastExpr 0x7ff7ad832410 <col:23> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7ff7ad8323d0 <col:23> 'int' lvalue Var 0x7ff7ad82ff88 'ix' 'int'
|     | `-ImplicitCastExpr 0x7ff7ad832428 <col:26> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7ff7ad8323f0 <col:26> 'int' lvalue ParmVar 0x7ff7ad82f7f0 'stopx1' 'int'
|     |-CompoundAssignOperator 0x7ff7ad8324b8 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     | |-DeclRefExpr 0x7ff7ad832460 <col:34> 'int' lvalue Var 0x7ff7ad82ff88 'ix' 'int'
|     | `-ImplicitCastExpr 0x7ff7ad8324a0 <col:39> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7ff7ad832480 <col:39> 'int' lvalue ParmVar 0x7ff7ad82f870 'stepx1' 'int'
|     `-CompoundStmt 0x7ff7ad832c90 <col:48, line:27:5>
|       |-ForStmt 0x7ff7ad832ae8 <line:22:9, line:24:9>
|       | |-BinaryOperator 0x7ff7ad832560 <line:22:14, col:18> 'int' '='
|       | | |-DeclRefExpr 0x7ff7ad832508 <col:14> 'int' lvalue Var 0x7ff7ad830008 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7ff7ad832548 <col:18> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7ff7ad832528 <col:18> 'int' lvalue ParmVar 0x7ff7ad82f8f0 'startx2' 'int'
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x7ff7ad8325f0 <col:27, col:30> 'int' '<'
|       | | |-ImplicitCastExpr 0x7ff7ad8325c0 <col:27> 'int' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7ff7ad832580 <col:27> 'int' lvalue Var 0x7ff7ad830008 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7ff7ad8325d8 <col:30> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7ff7ad8325a0 <col:30> 'int' lvalue ParmVar 0x7ff7ad82f970 'stopx2' 'int'
|       | |-CompoundAssignOperator 0x7ff7ad832668 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|       | | |-DeclRefExpr 0x7ff7ad832610 <col:38> 'int' lvalue Var 0x7ff7ad830008 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7ff7ad832650 <col:43> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7ff7ad832630 <col:43> 'int' lvalue ParmVar 0x7ff7ad82f9f0 'stepx2' 'int'
|       | `-CompoundStmt 0x7ff7ad832ad0 <col:52, line:24:9>
|       |   `-BinaryOperator 0x7ff7ad832ab0 <line:23:13, col:38> 'double' '='
|       |     |-DeclRefExpr 0x7ff7ad832698 <col:13> 'double' lvalue Var 0x7ff7ad832260 'val' 'double'
|       |     `-CallExpr 0x7ff7ad832a50 <col:19, col:38> 'double'
|       |       |-ImplicitCastExpr 0x7ff7ad832a38 <col:19> 'double (*)(double, double)' <FunctionToPointerDecay>
|       |       | `-DeclRefExpr 0x7ff7ad8328c8 <col:19> 'double (double, double)' Function 0x7ff7ad8326f8 'fmax' 'double (double, double)'
|       |       |-ImplicitCastExpr 0x7ff7ad832a80 <col:24> 'double' <LValueToRValue>
|       |       | `-DeclRefExpr 0x7ff7ad8328e8 <col:24> 'double' lvalue Var 0x7ff7ad832260 'val' 'double'
|       |       `-ImplicitCastExpr 0x7ff7ad832a98 <col:29, col:37> 'double' <LValueToRValue>
|       |         `-ArraySubscriptExpr 0x7ff7ad8329e8 <col:29, col:37> 'double' lvalue
|       |           |-ImplicitCastExpr 0x7ff7ad8329b8 <col:29, col:33> 'double *' <ArrayToPointerDecay>
|       |           | `-ArraySubscriptExpr 0x7ff7ad832978 <col:29, col:33> 'double [mx]' lvalue
|       |           |   |-ImplicitCastExpr 0x7ff7ad832948 <col:29> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
|       |           |   | `-DeclRefExpr 0x7ff7ad832908 <col:29> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7ff7ad82f570 'x' 'double (*)[mx]':'double (*)[mx]'
|       |           |   `-ImplicitCastExpr 0x7ff7ad832960 <col:31> 'int' <LValueToRValue>
|       |           |     `-DeclRefExpr 0x7ff7ad832928 <col:31> 'int' lvalue Var 0x7ff7ad82ff88 'ix' 'int'
|       |           `-ImplicitCastExpr 0x7ff7ad8329d0 <col:35> 'int' <LValueToRValue>
|       |             `-DeclRefExpr 0x7ff7ad832998 <col:35> 'int' lvalue Var 0x7ff7ad830008 'jx' 'int'
|       |-BinaryOperator 0x7ff7ad832be8 <line:25:9, col:17> 'double' '='
|       | |-ArraySubscriptExpr 0x7ff7ad832b90 <col:9, col:13> 'double' lvalue
|       | | |-ImplicitCastExpr 0x7ff7ad832b60 <col:9> 'double *':'double *' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7ff7ad832b20 <col:9> 'double *':'double *' lvalue ParmVar 0x7ff7ad82f6f0 'z' 'double *':'double *'
|       | | `-ImplicitCastExpr 0x7ff7ad832b78 <col:11> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7ff7ad832b40 <col:11> 'int' lvalue Var 0x7ff7ad830188 'iz' 'int'
|       | `-ImplicitCastExpr 0x7ff7ad832bd0 <col:17> 'double' <LValueToRValue>
|       |   `-DeclRefExpr 0x7ff7ad832bb0 <col:17> 'double' lvalue Var 0x7ff7ad832260 'val' 'double'
|       `-CompoundAssignOperator 0x7ff7ad832c60 <line:26:9, col:15> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|         |-DeclRefExpr 0x7ff7ad832c08 <col:9> 'int' lvalue Var 0x7ff7ad830188 'iz' 'int'
|         `-ImplicitCastExpr 0x7ff7ad832c48 <col:15> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x7ff7ad832c28 <col:15> 'int' lvalue ParmVar 0x7ff7ad82fb70 'stepz' 'int'
`-FunctionDecl 0x7ff7ad8326f8 <line:23:19> col:19 implicit used fmax 'double (double, double)' extern
  |-ParmVarDecl 0x7ff7ad832798 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x7ff7ad832800 <<invalid sloc>> <invalid sloc> 'double'
  |-NoThrowAttr 0x7ff7ad832878 <col:19> Implicit
  `-ConstAttr 0x7ff7ad8328b8 <col:19> Implicit
