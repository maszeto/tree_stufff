TranslationUnitDecl 0x7fa093038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fa0930394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fa0930391a0 '__int128'
|-TypedefDecl 0x7fa093039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fa0930391c0 'unsigned __int128'
|-TypedefDecl 0x7fa0930397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fa0930395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fa093039568 '__NSConstantString_tag'
|-TypedefDecl 0x7fa093039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fa093039850 'char *'
|   `-BuiltinType 0x7fa093038ca0 'char'
|-TypedefDecl 0x7fa093039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fa093039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fa093039970 'struct __va_list_tag'
|     `-Record 0x7fa0930398e8 '__va_list_tag'
|-TypedefDecl 0x7fa093808200 <./tree_src/extendSectMatrix_PowSectScaMat.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fa093038d60 'unsigned char'
|-FunctionDecl 0x7fa09380a600 <line:6:1, line:22:1> line:6:6 PowSectScaMat 'void (int, int, int, int, double, double (*)[my], double (*)[mz], int, int, int, int, int, int, int, int, int, int, int, int)'
| |-ParmVarDecl 0x7fa093808270 <line:7:5, col:9> col:9 used ny 'int'
| |-ParmVarDecl 0x7fa0938082f0 <col:13, col:17> col:17 used my 'int'
| |-ParmVarDecl 0x7fa093808370 <col:21, col:25> col:25 used nz 'int'
| |-ParmVarDecl 0x7fa0938083f0 <col:29, col:33> col:33 used mz 'int'
| |-ParmVarDecl 0x7fa093808470 <line:8:5, col:12> col:12 used x 'double'
| |-ParmVarDecl 0x7fa093808670 <col:15, col:30> col:22 used y 'double (*)[my]':'double (*)[my]'
| |-ParmVarDecl 0x7fa093808870 <col:33, col:48> col:40 used z 'double (*)[mz]':'double (*)[mz]'
| |-ParmVarDecl 0x7fa0938088f0 <line:9:5, col:9> col:9 used starty1 'int'
| |-ParmVarDecl 0x7fa093808970 <col:18, col:22> col:22 used stopy1 'int'
| |-ParmVarDecl 0x7fa0938089f0 <col:30, col:34> col:34 used stepy1 'int'
| |-ParmVarDecl 0x7fa093808a70 <col:42, col:46> col:46 used starty2 'int'
| |-ParmVarDecl 0x7fa093808af0 <col:55, col:59> col:59 used stopy2 'int'
| |-ParmVarDecl 0x7fa093808b70 <col:67, col:71> col:71 used stepy2 'int'
| |-ParmVarDecl 0x7fa093808bf0 <line:10:5, col:9> col:9 used startz1 'int'
| |-ParmVarDecl 0x7fa093808c70 <col:18, col:22> col:22 stopz1 'int'
| |-ParmVarDecl 0x7fa093808cf0 <col:30, col:34> col:34 used stepz1 'int'
| |-ParmVarDecl 0x7fa093808d70 <col:42, col:46> col:46 used startz2 'int'
| |-ParmVarDecl 0x7fa093808df0 <col:55, col:59> col:59 stopz2 'int'
| |-ParmVarDecl 0x7fa093808e70 <col:67, col:71> col:71 used stepz2 'int'
| `-CompoundStmt 0x7fa09380b568 <col:80, line:22:1>
|   |-DeclStmt 0x7fa09380a9a8 <line:12:5, col:23>
|   | |-VarDecl 0x7fa09380a798 <col:5, col:9> col:9 used iy 'int'
|   | |-VarDecl 0x7fa09380a818 <col:5, col:13> col:13 used jy 'int'
|   | |-VarDecl 0x7fa09380a898 <col:5, col:17> col:17 used iz 'int'
|   | `-VarDecl 0x7fa09380a918 <col:5, col:21> col:21 used jz 'int'
|   |-BinaryOperator 0x7fa09380aa18 <line:13:5, col:10> 'int' '='
|   | |-DeclRefExpr 0x7fa09380a9c0 <col:5> 'int' lvalue Var 0x7fa09380a898 'iz' 'int'
|   | `-ImplicitCastExpr 0x7fa09380aa00 <col:10> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fa09380a9e0 <col:10> 'int' lvalue ParmVar 0x7fa093808bf0 'startz1' 'int'
|   `-ForStmt 0x7fa09380b530 <line:14:5, line:21:5>
|     |-BinaryOperator 0x7fa09380aa90 <line:14:10, col:14> 'int' '='
|     | |-DeclRefExpr 0x7fa09380aa38 <col:10> 'int' lvalue Var 0x7fa09380a798 'iy' 'int'
|     | `-ImplicitCastExpr 0x7fa09380aa78 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fa09380aa58 <col:14> 'int' lvalue ParmVar 0x7fa0938088f0 'starty1' 'int'
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fa09380ab20 <col:23, col:26> 'int' '<'
|     | |-ImplicitCastExpr 0x7fa09380aaf0 <col:23> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fa09380aab0 <col:23> 'int' lvalue Var 0x7fa09380a798 'iy' 'int'
|     | `-ImplicitCastExpr 0x7fa09380ab08 <col:26> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fa09380aad0 <col:26> 'int' lvalue ParmVar 0x7fa093808970 'stopy1' 'int'
|     |-CompoundAssignOperator 0x7fa09380ab98 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     | |-DeclRefExpr 0x7fa09380ab40 <col:34> 'int' lvalue Var 0x7fa09380a798 'iy' 'int'
|     | `-ImplicitCastExpr 0x7fa09380ab80 <col:39> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fa09380ab60 <col:39> 'int' lvalue ParmVar 0x7fa0938089f0 'stepy1' 'int'
|     `-CompoundStmt 0x7fa09380b508 <col:48, line:21:5>
|       |-BinaryOperator 0x7fa09380ac20 <line:15:9, col:14> 'int' '='
|       | |-DeclRefExpr 0x7fa09380abc8 <col:9> 'int' lvalue Var 0x7fa09380a918 'jz' 'int'
|       | `-ImplicitCastExpr 0x7fa09380ac08 <col:14> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x7fa09380abe8 <col:14> 'int' lvalue ParmVar 0x7fa093808d70 'startz2' 'int'
|       |-ForStmt 0x7fa09380b400 <line:16:9, line:19:9>
|       | |-BinaryOperator 0x7fa09380ac98 <line:16:14, col:18> 'int' '='
|       | | |-DeclRefExpr 0x7fa09380ac40 <col:14> 'int' lvalue Var 0x7fa09380a818 'jy' 'int'
|       | | `-ImplicitCastExpr 0x7fa09380ac80 <col:18> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fa09380ac60 <col:18> 'int' lvalue ParmVar 0x7fa093808a70 'starty2' 'int'
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x7fa09380ad28 <col:27, col:30> 'int' '<'
|       | | |-ImplicitCastExpr 0x7fa09380acf8 <col:27> 'int' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7fa09380acb8 <col:27> 'int' lvalue Var 0x7fa09380a818 'jy' 'int'
|       | | `-ImplicitCastExpr 0x7fa09380ad10 <col:30> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fa09380acd8 <col:30> 'int' lvalue ParmVar 0x7fa093808af0 'stopy2' 'int'
|       | |-CompoundAssignOperator 0x7fa09380ada0 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|       | | |-DeclRefExpr 0x7fa09380ad48 <col:38> 'int' lvalue Var 0x7fa09380a818 'jy' 'int'
|       | | `-ImplicitCastExpr 0x7fa09380ad88 <col:43> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fa09380ad68 <col:43> 'int' lvalue ParmVar 0x7fa093808b70 'stepy2' 'int'
|       | `-CompoundStmt 0x7fa09380b3e0 <col:52, line:19:9>
|       |   |-BinaryOperator 0x7fa09380b2f0 <line:17:6, col:34> 'double' '='
|       |   | |-ArraySubscriptExpr 0x7fa09380aed8 <col:6, col:14> 'double' lvalue
|       |   | | |-ImplicitCastExpr 0x7fa09380aea8 <col:6, col:10> 'double *' <ArrayToPointerDecay>
|       |   | | | `-ArraySubscriptExpr 0x7fa09380ae40 <col:6, col:10> 'double [mz]' lvalue
|       |   | | |   |-ImplicitCastExpr 0x7fa09380ae10 <col:6> 'double (*)[mz]':'double (*)[mz]' <LValueToRValue>
|       |   | | |   | `-DeclRefExpr 0x7fa09380add0 <col:6> 'double (*)[mz]':'double (*)[mz]' lvalue ParmVar 0x7fa093808870 'z' 'double (*)[mz]':'double (*)[mz]'
|       |   | | |   `-ImplicitCastExpr 0x7fa09380ae28 <col:8> 'int' <LValueToRValue>
|       |   | | |     `-DeclRefExpr 0x7fa09380adf0 <col:8> 'int' lvalue Var 0x7fa09380a898 'iz' 'int'
|       |   | | `-ImplicitCastExpr 0x7fa09380aec0 <col:12> 'int' <LValueToRValue>
|       |   | |   `-DeclRefExpr 0x7fa09380ae60 <col:12> 'int' lvalue Var 0x7fa09380a918 'jz' 'int'
|       |   | `-CallExpr 0x7fa09380b290 <col:18, col:34> 'double'
|       |   |   |-ImplicitCastExpr 0x7fa09380b278 <col:18> 'double (*)(double, double)' <FunctionToPointerDecay>
|       |   |   | `-DeclRefExpr 0x7fa09380b108 <col:18> 'double (double, double)' Function 0x7fa09380af38 'pow' 'double (double, double)'
|       |   |   |-ImplicitCastExpr 0x7fa09380b2c0 <col:22> 'double' <LValueToRValue>
|       |   |   | `-DeclRefExpr 0x7fa09380b128 <col:22> 'double' lvalue ParmVar 0x7fa093808470 'x' 'double'
|       |   |   `-ImplicitCastExpr 0x7fa09380b2d8 <col:25, col:33> 'double' <LValueToRValue>
|       |   |     `-ArraySubscriptExpr 0x7fa09380b228 <col:25, col:33> 'double' lvalue
|       |   |       |-ImplicitCastExpr 0x7fa09380b1f8 <col:25, col:29> 'double *' <ArrayToPointerDecay>
|       |   |       | `-ArraySubscriptExpr 0x7fa09380b1b8 <col:25, col:29> 'double [my]' lvalue
|       |   |       |   |-ImplicitCastExpr 0x7fa09380b188 <col:25> 'double (*)[my]':'double (*)[my]' <LValueToRValue>
|       |   |       |   | `-DeclRefExpr 0x7fa09380b148 <col:25> 'double (*)[my]':'double (*)[my]' lvalue ParmVar 0x7fa093808670 'y' 'double (*)[my]':'double (*)[my]'
|       |   |       |   `-ImplicitCastExpr 0x7fa09380b1a0 <col:27> 'int' <LValueToRValue>
|       |   |       |     `-DeclRefExpr 0x7fa09380b168 <col:27> 'int' lvalue Var 0x7fa09380a798 'iy' 'int'
|       |   |       `-ImplicitCastExpr 0x7fa09380b210 <col:31> 'int' <LValueToRValue>
|       |   |         `-DeclRefExpr 0x7fa09380b1d8 <col:31> 'int' lvalue Var 0x7fa09380a818 'jy' 'int'
|       |   `-BinaryOperator 0x7fa09380b3c0 <line:18:6, col:16> 'int' '='
|       |     |-DeclRefExpr 0x7fa09380b310 <col:6> 'int' lvalue Var 0x7fa09380a918 'jz' 'int'
|       |     `-BinaryOperator 0x7fa09380b3a0 <col:11, col:16> 'int' '+'
|       |       |-ImplicitCastExpr 0x7fa09380b370 <col:11> 'int' <LValueToRValue>
|       |       | `-DeclRefExpr 0x7fa09380b330 <col:11> 'int' lvalue Var 0x7fa09380a918 'jz' 'int'
|       |       `-ImplicitCastExpr 0x7fa09380b388 <col:16> 'int' <LValueToRValue>
|       |         `-DeclRefExpr 0x7fa09380b350 <col:16> 'int' lvalue ParmVar 0x7fa093808e70 'stepz2' 'int'
|       `-BinaryOperator 0x7fa09380b4e8 <line:20:9, col:19> 'int' '='
|         |-DeclRefExpr 0x7fa09380b438 <col:9> 'int' lvalue Var 0x7fa09380a898 'iz' 'int'
|         `-BinaryOperator 0x7fa09380b4c8 <col:14, col:19> 'int' '+'
|           |-ImplicitCastExpr 0x7fa09380b498 <col:14> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x7fa09380b458 <col:14> 'int' lvalue Var 0x7fa09380a898 'iz' 'int'
|           `-ImplicitCastExpr 0x7fa09380b4b0 <col:19> 'int' <LValueToRValue>
|             `-DeclRefExpr 0x7fa09380b478 <col:19> 'int' lvalue ParmVar 0x7fa093808cf0 'stepz1' 'int'
`-FunctionDecl 0x7fa09380af38 <line:17:18> col:18 implicit used pow 'double (double, double)' extern
  |-ParmVarDecl 0x7fa09380afd8 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x7fa09380b040 <<invalid sloc>> <invalid sloc> 'double'
  |-ConstAttr 0x7fa09380b0b8 <col:18> Implicit
  `-NoThrowAttr 0x7fa09380b0f8 <col:18> Implicit
