TranslationUnitDecl 0x7f975c838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f975c8394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f975c8391a0 '__int128'
|-TypedefDecl 0x7f975c839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f975c8391c0 'unsigned __int128'
|-TypedefDecl 0x7f975c8397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f975c8395f0 'struct __NSConstantString_tag'
|   `-Record 0x7f975c839568 '__NSConstantString_tag'
|-TypedefDecl 0x7f975c839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f975c839850 'char *'
|   `-BuiltinType 0x7f975c838ca0 'char'
|-TypedefDecl 0x7f975c839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f975c839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f975c839970 'struct __va_list_tag'
|     `-Record 0x7f975c8398e8 '__va_list_tag'
|-TypedefDecl 0x7f975d02f200 <./tree_src/unarySectMatrix_SumMagSectFirstMat.c:4:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7f975c838d60 'unsigned char'
|-FunctionDecl 0x7f975d02fe18 <line:12:1, line:28:1> line:12:6 SumMagSectFirstMat 'void (int, int, int, double (*)[mx], int *, int, int, int, int, int, int, int, int, int)'
| |-ParmVarDecl 0x7f975d02f270 <line:13:5, col:9> col:9 used nx 'int'
| |-ParmVarDecl 0x7f975d02f2f0 <col:13, col:17> col:17 used mx 'int'
| |-ParmVarDecl 0x7f975d02f370 <col:21, col:25> col:25 used nz 'int'
| |-ParmVarDecl 0x7f975d02f570 <col:29, col:44> col:36 used x 'double (*)[mx]':'double (*)[mx]'
| |-ParmVarDecl 0x7f975d02f6f0 <col:47, col:55> col:51 used z 'int *':'int *'
| |-ParmVarDecl 0x7f975d02f770 <line:14:5, col:9> col:9 used startx1 'int'
| |-ParmVarDecl 0x7f975d02f7f0 <col:18, col:22> col:22 used stopx1 'int'
| |-ParmVarDecl 0x7f975d02f870 <col:30, col:34> col:34 used stepx1 'int'
| |-ParmVarDecl 0x7f975d02f8f0 <col:42, col:46> col:46 used startx2 'int'
| |-ParmVarDecl 0x7f975d02f970 <col:55, col:59> col:59 used stopx2 'int'
| |-ParmVarDecl 0x7f975d02f9f0 <col:67, col:71> col:71 used stepx2 'int'
| |-ParmVarDecl 0x7f975d02fa70 <line:15:5, col:9> col:9 used startz 'int'
| |-ParmVarDecl 0x7f975d02faf0 <col:17, col:21> col:21 stopz 'int'
| |-ParmVarDecl 0x7f975d02fb70 <col:28, col:32> col:32 used stepz 'int'
| `-CompoundStmt 0x7f975d8091b0 <col:40, line:28:1>
|   |-DeclStmt 0x7f975d030110 <line:17:5, col:19>
|   | |-VarDecl 0x7f975d02ff88 <col:5, col:9> col:9 used ix 'int'
|   | |-VarDecl 0x7f975d030008 <col:5, col:13> col:13 used jx 'int'
|   | `-VarDecl 0x7f975d030088 <col:5, col:17> col:17 used iz 'int'
|   |-DeclStmt 0x7f975d0301a8 <line:18:5, col:15>
|   | `-VarDecl 0x7f975d030140 <col:5, col:12> col:12 used val 'double'
|   |-BinaryOperator 0x7f975d808818 <line:19:5, col:10> 'int' '='
|   | |-DeclRefExpr 0x7f975d0301c0 <col:5> 'int' lvalue Var 0x7f975d030088 'iz' 'int'
|   | `-ImplicitCastExpr 0x7f975d808800 <col:10> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7f975d0301e0 <col:10> 'int' lvalue ParmVar 0x7f975d02fa70 'startz' 'int'
|   `-ForStmt 0x7f975d809178 <line:20:5, line:27:5>
|     |-BinaryOperator 0x7f975d808890 <line:20:10, col:14> 'int' '='
|     | |-DeclRefExpr 0x7f975d808838 <col:10> 'int' lvalue Var 0x7f975d02ff88 'ix' 'int'
|     | `-ImplicitCastExpr 0x7f975d808878 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7f975d808858 <col:14> 'int' lvalue ParmVar 0x7f975d02f770 'startx1' 'int'
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7f975d808920 <col:23, col:26> 'int' '<'
|     | |-ImplicitCastExpr 0x7f975d8088f0 <col:23> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7f975d8088b0 <col:23> 'int' lvalue Var 0x7f975d02ff88 'ix' 'int'
|     | `-ImplicitCastExpr 0x7f975d808908 <col:26> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7f975d8088d0 <col:26> 'int' lvalue ParmVar 0x7f975d02f7f0 'stopx1' 'int'
|     |-CompoundAssignOperator 0x7f975d808998 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     | |-DeclRefExpr 0x7f975d808940 <col:34> 'int' lvalue Var 0x7f975d02ff88 'ix' 'int'
|     | `-ImplicitCastExpr 0x7f975d808980 <col:39> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7f975d808960 <col:39> 'int' lvalue ParmVar 0x7f975d02f870 'stepx1' 'int'
|     `-CompoundStmt 0x7f975d809150 <col:48, line:27:5>
|       |-ForStmt 0x7f975d808f90 <line:22:9, line:24:9>
|       | |-BinaryOperator 0x7f975d808a40 <line:22:14, col:18> 'int' '='
|       | | |-DeclRefExpr 0x7f975d8089e8 <col:14> 'int' lvalue Var 0x7f975d030008 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7f975d808a28 <col:18> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7f975d808a08 <col:18> 'int' lvalue ParmVar 0x7f975d02f8f0 'startx2' 'int'
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x7f975d808ad0 <col:27, col:30> 'int' '<'
|       | | |-ImplicitCastExpr 0x7f975d808aa0 <col:27> 'int' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7f975d808a60 <col:27> 'int' lvalue Var 0x7f975d030008 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7f975d808ab8 <col:30> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7f975d808a80 <col:30> 'int' lvalue ParmVar 0x7f975d02f970 'stopx2' 'int'
|       | |-CompoundAssignOperator 0x7f975d808b48 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|       | | |-DeclRefExpr 0x7f975d808af0 <col:38> 'int' lvalue Var 0x7f975d030008 'jx' 'int'
|       | | `-ImplicitCastExpr 0x7f975d808b30 <col:43> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7f975d808b10 <col:43> 'int' lvalue ParmVar 0x7f975d02f9f0 'stepx2' 'int'
|       | `-CompoundStmt 0x7f975d808f78 <col:52, line:24:9>
|       |   `-BinaryOperator 0x7f975d808f58 <line:23:13, col:42> 'double' '='
|       |     |-DeclRefExpr 0x7f975d808b78 <col:13> 'double' lvalue Var 0x7f975d030140 'val' 'double'
|       |     `-BinaryOperator 0x7f975d808f38 <col:19, col:42> 'double' '+'
|       |       |-ImplicitCastExpr 0x7f975d808f20 <col:19> 'double' <LValueToRValue>
|       |       | `-DeclRefExpr 0x7f975d808b98 <col:19> 'double' lvalue Var 0x7f975d030140 'val' 'double'
|       |       `-CallExpr 0x7f975d808ee0 <col:25, col:42> 'double'
|       |         |-ImplicitCastExpr 0x7f975d808ec8 <col:25> 'double (*)(double)' <FunctionToPointerDecay>
|       |         | `-DeclRefExpr 0x7f975d808d50 <col:25> 'double (double)' Function 0x7f975d808bf0 'fabs' 'double (double)'
|       |         `-ImplicitCastExpr 0x7f975d808f08 <col:32, col:40> 'double' <LValueToRValue>
|       |           `-ArraySubscriptExpr 0x7f975d808e78 <col:32, col:40> 'double' lvalue
|       |             |-ImplicitCastExpr 0x7f975d808e48 <col:32, col:36> 'double *' <ArrayToPointerDecay>
|       |             | `-ArraySubscriptExpr 0x7f975d808de0 <col:32, col:36> 'double [mx]' lvalue
|       |             |   |-ImplicitCastExpr 0x7f975d808db0 <col:32> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
|       |             |   | `-DeclRefExpr 0x7f975d808d70 <col:32> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7f975d02f570 'x' 'double (*)[mx]':'double (*)[mx]'
|       |             |   `-ImplicitCastExpr 0x7f975d808dc8 <col:34> 'int' <LValueToRValue>
|       |             |     `-DeclRefExpr 0x7f975d808d90 <col:34> 'int' lvalue Var 0x7f975d030008 'jx' 'int'
|       |             `-ImplicitCastExpr 0x7f975d808e60 <col:38> 'int' <LValueToRValue>
|       |               `-DeclRefExpr 0x7f975d808e00 <col:38> 'int' lvalue Var 0x7f975d02ff88 'ix' 'int'
|       |-BinaryOperator 0x7f975d8090a8 <line:25:9, col:17> 'int' '='
|       | |-ArraySubscriptExpr 0x7f975d809038 <col:9, col:13> 'int' lvalue
|       | | |-ImplicitCastExpr 0x7f975d809008 <col:9> 'int *':'int *' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7f975d808fc8 <col:9> 'int *':'int *' lvalue ParmVar 0x7f975d02f6f0 'z' 'int *':'int *'
|       | | `-ImplicitCastExpr 0x7f975d809020 <col:11> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7f975d808fe8 <col:11> 'int' lvalue Var 0x7f975d030088 'iz' 'int'
|       | `-ImplicitCastExpr 0x7f975d809090 <col:17> 'int' <FloatingToIntegral>
|       |   `-ImplicitCastExpr 0x7f975d809078 <col:17> 'double' <LValueToRValue>
|       |     `-DeclRefExpr 0x7f975d809058 <col:17> 'double' lvalue Var 0x7f975d030140 'val' 'double'
|       `-CompoundAssignOperator 0x7f975d809120 <line:26:9, col:15> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|         |-DeclRefExpr 0x7f975d8090c8 <col:9> 'int' lvalue Var 0x7f975d030088 'iz' 'int'
|         `-ImplicitCastExpr 0x7f975d809108 <col:15> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x7f975d8090e8 <col:15> 'int' lvalue ParmVar 0x7f975d02fb70 'stepz' 'int'
`-FunctionDecl 0x7f975d808bf0 <line:23:25> col:25 implicit used fabs 'double (double)' extern
  |-ParmVarDecl 0x7f975d808c90 <<invalid sloc>> <invalid sloc> 'double'
  |-NoThrowAttr 0x7f975d808d00 <col:25> Implicit
  `-ConstAttr 0x7f975d808d40 <col:25> Implicit
