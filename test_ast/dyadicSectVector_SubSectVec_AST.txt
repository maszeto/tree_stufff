TranslationUnitDecl 0x7fb129038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fb1290394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fb1290391a0 '__int128'
|-TypedefDecl 0x7fb129039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fb1290391c0 'unsigned __int128'
|-TypedefDecl 0x7fb1290397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fb1290395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fb129039568 '__NSConstantString_tag'
|-TypedefDecl 0x7fb129039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fb129039850 'char *'
|   `-BuiltinType 0x7fb129038ca0 'char'
|-TypedefDecl 0x7fb129039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fb129039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fb129039970 'struct __va_list_tag'
|     `-Record 0x7fb1290398e8 '__va_list_tag'
|-TypedefDecl 0x7fb12982f200 <./tree_src/dyadicSectVector_SubSectVec.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fb129038d60 'unsigned char'
`-FunctionDecl 0x7fb12982fd28 <line:6:1, line:19:1> line:6:6 SubSectVec 'void (int, double *, double *, double *, int, int, int, int, int, int, int, int, int)'
  |-ParmVarDecl 0x7fb12982f270 <line:7:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7fb12982f3f0 <col:12, col:22> col:19 used x 'double *':'double *'
  |-ParmVarDecl 0x7fb12982f540 <col:25, col:35> col:32 used y 'double *':'double *'
  |-ParmVarDecl 0x7fb12982f690 <col:38, col:48> col:45 used z 'double *':'double *'
  |-ParmVarDecl 0x7fb12982f710 <line:8:5, col:9> col:9 used startx 'int'
  |-ParmVarDecl 0x7fb12982f790 <col:17, col:21> col:21 used stopx 'int'
  |-ParmVarDecl 0x7fb12982f810 <col:28, col:32> col:32 used stepx 'int'
  |-ParmVarDecl 0x7fb12982f890 <col:39, col:43> col:43 used starty 'int'
  |-ParmVarDecl 0x7fb12982f910 <col:51, col:55> col:55 stopy 'int'
  |-ParmVarDecl 0x7fb12982f990 <col:62, col:66> col:66 used stepy 'int'
  |-ParmVarDecl 0x7fb12982fa10 <line:9:5, col:9> col:9 used startz 'int'
  |-ParmVarDecl 0x7fb12982fa90 <col:17, col:21> col:21 stopz 'int'
  |-ParmVarDecl 0x7fb12982fb10 <col:28, col:32> col:32 used stepz 'int'
  `-CompoundStmt 0x7fb1298316e0 <col:40, line:19:1>
    |-DeclStmt 0x7fb129830018 <line:11:5, col:17>
    | |-VarDecl 0x7fb12982fe90 <col:5, col:9> col:9 used ix 'int'
    | |-VarDecl 0x7fb12982ff10 <col:5, col:12> col:12 used iy 'int'
    | `-VarDecl 0x7fb12982ff90 <col:5, col:15> col:15 used iz 'int'
    |-BinaryOperator 0x7fb129830088 <line:12:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7fb129830030 <col:5> 'int' lvalue Var 0x7fb12982ff10 'iy' 'int'
    | `-ImplicitCastExpr 0x7fb129830070 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7fb129830050 <col:10> 'int' lvalue ParmVar 0x7fb12982f890 'starty' 'int'
    |-BinaryOperator 0x7fb129830100 <line:13:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7fb1298300a8 <col:5> 'int' lvalue Var 0x7fb12982ff90 'iz' 'int'
    | `-ImplicitCastExpr 0x7fb1298300e8 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7fb1298300c8 <col:10> 'int' lvalue ParmVar 0x7fb12982fa10 'startz' 'int'
    `-ForStmt 0x7fb1298316a8 <line:14:5, line:18:5>
      |-BinaryOperator 0x7fb129830178 <line:14:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7fb129830120 <col:10> 'int' lvalue Var 0x7fb12982fe90 'ix' 'int'
      | `-ImplicitCastExpr 0x7fb129830160 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fb129830140 <col:14> 'int' lvalue ParmVar 0x7fb12982f710 'startx' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7fb129831218 <col:22, col:25> 'int' '<'
      | |-ImplicitCastExpr 0x7fb1298301d8 <col:22> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fb129830198 <col:22> 'int' lvalue Var 0x7fb12982fe90 'ix' 'int'
      | `-ImplicitCastExpr 0x7fb129831200 <col:25> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fb1298301b8 <col:25> 'int' lvalue ParmVar 0x7fb12982f790 'stopx' 'int'
      |-CompoundAssignOperator 0x7fb129831290 <col:32, col:37> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7fb129831238 <col:32> 'int' lvalue Var 0x7fb12982fe90 'ix' 'int'
      | `-ImplicitCastExpr 0x7fb129831278 <col:37> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fb129831258 <col:37> 'int' lvalue ParmVar 0x7fb12982f810 'stepx' 'int'
      `-CompoundStmt 0x7fb129831680 <col:45, line:18:5>
        |-BinaryOperator 0x7fb1298314c0 <line:15:4, col:24> 'double' '='
        | |-ArraySubscriptExpr 0x7fb129831330 <col:4, col:8> 'double' lvalue
        | | |-ImplicitCastExpr 0x7fb129831300 <col:4> 'double *':'double *' <LValueToRValue>
        | | | `-DeclRefExpr 0x7fb1298312c0 <col:4> 'double *':'double *' lvalue ParmVar 0x7fb12982f690 'z' 'double *':'double *'
        | | `-ImplicitCastExpr 0x7fb129831318 <col:6> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fb1298312e0 <col:6> 'int' lvalue Var 0x7fb12982ff90 'iz' 'int'
        | `-BinaryOperator 0x7fb1298314a0 <col:12, col:24> 'double' '-'
        |   |-ImplicitCastExpr 0x7fb129831470 <col:12, col:16> 'double' <LValueToRValue>
        |   | `-ArraySubscriptExpr 0x7fb1298313c0 <col:12, col:16> 'double' lvalue
        |   |   |-ImplicitCastExpr 0x7fb129831390 <col:12> 'double *':'double *' <LValueToRValue>
        |   |   | `-DeclRefExpr 0x7fb129831350 <col:12> 'double *':'double *' lvalue ParmVar 0x7fb12982f3f0 'x' 'double *':'double *'
        |   |   `-ImplicitCastExpr 0x7fb1298313a8 <col:14> 'int' <LValueToRValue>
        |   |     `-DeclRefExpr 0x7fb129831370 <col:14> 'int' lvalue Var 0x7fb12982fe90 'ix' 'int'
        |   `-ImplicitCastExpr 0x7fb129831488 <col:20, col:24> 'double' <LValueToRValue>
        |     `-ArraySubscriptExpr 0x7fb129831450 <col:20, col:24> 'double' lvalue
        |       |-ImplicitCastExpr 0x7fb129831420 <col:20> 'double *':'double *' <LValueToRValue>
        |       | `-DeclRefExpr 0x7fb1298313e0 <col:20> 'double *':'double *' lvalue ParmVar 0x7fb12982f540 'y' 'double *':'double *'
        |       `-ImplicitCastExpr 0x7fb129831438 <col:22> 'int' <LValueToRValue>
        |         `-DeclRefExpr 0x7fb129831400 <col:22> 'int' lvalue Var 0x7fb12982ff10 'iy' 'int'
        |-BinaryOperator 0x7fb129831590 <line:16:4, col:14> 'int' '='
        | |-DeclRefExpr 0x7fb1298314e0 <col:4> 'int' lvalue Var 0x7fb12982ff10 'iy' 'int'
        | `-BinaryOperator 0x7fb129831570 <col:9, col:14> 'int' '+'
        |   |-ImplicitCastExpr 0x7fb129831540 <col:9> 'int' <LValueToRValue>
        |   | `-DeclRefExpr 0x7fb129831500 <col:9> 'int' lvalue Var 0x7fb12982ff10 'iy' 'int'
        |   `-ImplicitCastExpr 0x7fb129831558 <col:14> 'int' <LValueToRValue>
        |     `-DeclRefExpr 0x7fb129831520 <col:14> 'int' lvalue ParmVar 0x7fb12982f990 'stepy' 'int'
        `-BinaryOperator 0x7fb129831660 <line:17:4, col:14> 'int' '='
          |-DeclRefExpr 0x7fb1298315b0 <col:4> 'int' lvalue Var 0x7fb12982ff90 'iz' 'int'
          `-BinaryOperator 0x7fb129831640 <col:9, col:14> 'int' '+'
            |-ImplicitCastExpr 0x7fb129831610 <col:9> 'int' <LValueToRValue>
            | `-DeclRefExpr 0x7fb1298315d0 <col:9> 'int' lvalue Var 0x7fb12982ff90 'iz' 'int'
            `-ImplicitCastExpr 0x7fb129831628 <col:14> 'int' <LValueToRValue>
              `-DeclRefExpr 0x7fb1298315f0 <col:14> 'int' lvalue ParmVar 0x7fb12982fb10 'stepz' 'int'
