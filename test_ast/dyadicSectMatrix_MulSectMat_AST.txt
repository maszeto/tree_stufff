TranslationUnitDecl 0x7fc4b5838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fc4b58394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fc4b58391a0 '__int128'
|-TypedefDecl 0x7fc4b5839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fc4b58391c0 'unsigned __int128'
|-TypedefDecl 0x7fc4b58397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fc4b58395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fc4b5839568 '__NSConstantString_tag'
|-TypedefDecl 0x7fc4b5839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fc4b5839850 'char *'
|   `-BuiltinType 0x7fc4b5838ca0 'char'
|-TypedefDecl 0x7fc4b5839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fc4b5839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fc4b5839970 'struct __va_list_tag'
|     `-Record 0x7fc4b58398e8 '__va_list_tag'
|-TypedefDecl 0x7fc4b602f200 <./tree_src/dyadicSectMatrix_MulSectMat.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fc4b5838d60 'unsigned char'
`-FunctionDecl 0x7fc4b6808cb8 <line:6:1, line:27:1> line:6:6 MulSectMat 'void (int, int, int, int, int, int, double (*)[mx], double (*)[my], double (*)[mz], int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)'
  |-ParmVarDecl 0x7fc4b602f270 <line:7:5, col:9> col:9 used nx 'int'
  |-ParmVarDecl 0x7fc4b602f2f0 <col:13, col:17> col:17 used mx 'int'
  |-ParmVarDecl 0x7fc4b602f370 <col:21, col:25> col:25 used ny 'int'
  |-ParmVarDecl 0x7fc4b602f3f0 <col:29, col:33> col:33 used my 'int'
  |-ParmVarDecl 0x7fc4b602f470 <col:37, col:41> col:41 used nz 'int'
  |-ParmVarDecl 0x7fc4b602f4f0 <col:45, col:49> col:49 used mz 'int'
  |-ParmVarDecl 0x7fc4b602f6f0 <line:8:5, col:20> col:12 used x 'double (*)[mx]':'double (*)[mx]'
  |-ParmVarDecl 0x7fc4b602f8f0 <col:23, col:38> col:30 used y 'double (*)[my]':'double (*)[my]'
  |-ParmVarDecl 0x7fc4b602faf0 <col:41, col:56> col:48 used z 'double (*)[mz]':'double (*)[mz]'
  |-ParmVarDecl 0x7fc4b602fb70 <line:9:5, col:9> col:9 used startx1 'int'
  |-ParmVarDecl 0x7fc4b602fbf0 <col:18, col:22> col:22 used stopx1 'int'
  |-ParmVarDecl 0x7fc4b602fc70 <col:30, col:34> col:34 used stepx1 'int'
  |-ParmVarDecl 0x7fc4b602fcf0 <col:42, col:46> col:46 used startx2 'int'
  |-ParmVarDecl 0x7fc4b602fd70 <col:55, col:59> col:59 used stopx2 'int'
  |-ParmVarDecl 0x7fc4b602fdf0 <col:67, col:71> col:71 used stepx2 'int'
  |-ParmVarDecl 0x7fc4b602fe70 <line:10:5, col:9> col:9 used starty1 'int'
  |-ParmVarDecl 0x7fc4b602fef0 <col:18, col:22> col:22 stopy1 'int'
  |-ParmVarDecl 0x7fc4b602ff70 <col:30, col:34> col:34 used stepy1 'int'
  |-ParmVarDecl 0x7fc4b602fff0 <col:42, col:46> col:46 used starty2 'int'
  |-ParmVarDecl 0x7fc4b6030070 <col:55, col:59> col:59 stopy2 'int'
  |-ParmVarDecl 0x7fc4b60300f0 <col:67, col:71> col:71 used stepy2 'int'
  |-ParmVarDecl 0x7fc4b6030170 <line:11:5, col:9> col:9 used startz1 'int'
  |-ParmVarDecl 0x7fc4b6808600 <col:18, col:22> col:22 stopz1 'int'
  |-ParmVarDecl 0x7fc4b6808680 <col:30, col:34> col:34 used stepz1 'int'
  |-ParmVarDecl 0x7fc4b6808700 <col:42, col:46> col:46 used startz2 'int'
  |-ParmVarDecl 0x7fc4b6808780 <col:55, col:59> col:59 stopz2 'int'
  |-ParmVarDecl 0x7fc4b6808800 <col:67, col:71> col:71 used stepz2 'int'
  `-CompoundStmt 0x7fc4b680a3f8 <col:79, line:27:1>
    |-DeclStmt 0x7fc4b68091b0 <line:13:5, col:31>
    | |-VarDecl 0x7fc4b6808e90 <col:5, col:9> col:9 used ix 'int'
    | |-VarDecl 0x7fc4b6808f10 <col:5, col:13> col:13 used jx 'int'
    | |-VarDecl 0x7fc4b6808f90 <col:5, col:17> col:17 used iy 'int'
    | |-VarDecl 0x7fc4b6809010 <col:5, col:21> col:21 used jy 'int'
    | |-VarDecl 0x7fc4b6809090 <col:5, col:25> col:25 used iz 'int'
    | `-VarDecl 0x7fc4b6809110 <col:5, col:29> col:29 used jz 'int'
    |-BinaryOperator 0x7fc4b6809220 <line:14:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7fc4b68091c8 <col:5> 'int' lvalue Var 0x7fc4b6808f90 'iy' 'int'
    | `-ImplicitCastExpr 0x7fc4b6809208 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7fc4b68091e8 <col:10> 'int' lvalue ParmVar 0x7fc4b602fe70 'starty1' 'int'
    |-BinaryOperator 0x7fc4b6809298 <line:15:5, col:10> 'int' '='
    | |-DeclRefExpr 0x7fc4b6809240 <col:5> 'int' lvalue Var 0x7fc4b6809090 'iz' 'int'
    | `-ImplicitCastExpr 0x7fc4b6809280 <col:10> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7fc4b6809260 <col:10> 'int' lvalue ParmVar 0x7fc4b6030170 'startz1' 'int'
    `-ForStmt 0x7fc4b680a3c0 <line:16:5, line:26:5>
      |-BinaryOperator 0x7fc4b6809310 <line:16:10, col:14> 'int' '='
      | |-DeclRefExpr 0x7fc4b68092b8 <col:10> 'int' lvalue Var 0x7fc4b6808e90 'ix' 'int'
      | `-ImplicitCastExpr 0x7fc4b68092f8 <col:14> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fc4b68092d8 <col:14> 'int' lvalue ParmVar 0x7fc4b602fb70 'startx1' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7fc4b68093a0 <col:23, col:26> 'int' '<'
      | |-ImplicitCastExpr 0x7fc4b6809370 <col:23> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fc4b6809330 <col:23> 'int' lvalue Var 0x7fc4b6808e90 'ix' 'int'
      | `-ImplicitCastExpr 0x7fc4b6809388 <col:26> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fc4b6809350 <col:26> 'int' lvalue ParmVar 0x7fc4b602fbf0 'stopx1' 'int'
      |-CompoundAssignOperator 0x7fc4b6809418 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7fc4b68093c0 <col:34> 'int' lvalue Var 0x7fc4b6808e90 'ix' 'int'
      | `-ImplicitCastExpr 0x7fc4b6809400 <col:39> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fc4b68093e0 <col:39> 'int' lvalue ParmVar 0x7fc4b602fc70 'stepx1' 'int'
      `-CompoundStmt 0x7fc4b680a388 <col:48, line:26:5>
        |-BinaryOperator 0x7fc4b68094a0 <line:17:9, col:14> 'int' '='
        | |-DeclRefExpr 0x7fc4b6809448 <col:9> 'int' lvalue Var 0x7fc4b6809010 'jy' 'int'
        | `-ImplicitCastExpr 0x7fc4b6809488 <col:14> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x7fc4b6809468 <col:14> 'int' lvalue ParmVar 0x7fc4b602fff0 'starty2' 'int'
        |-BinaryOperator 0x7fc4b6809518 <line:18:9, col:14> 'int' '='
        | |-DeclRefExpr 0x7fc4b68094c0 <col:9> 'int' lvalue Var 0x7fc4b6809110 'jz' 'int'
        | `-ImplicitCastExpr 0x7fc4b6809500 <col:14> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x7fc4b68094e0 <col:14> 'int' lvalue ParmVar 0x7fc4b6808700 'startz2' 'int'
        |-ForStmt 0x7fc4b680a240 <line:19:9, line:23:9>
        | |-BinaryOperator 0x7fc4b6809590 <line:19:14, col:18> 'int' '='
        | | |-DeclRefExpr 0x7fc4b6809538 <col:14> 'int' lvalue Var 0x7fc4b6808f10 'jx' 'int'
        | | `-ImplicitCastExpr 0x7fc4b6809578 <col:18> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fc4b6809558 <col:18> 'int' lvalue ParmVar 0x7fc4b602fcf0 'startx2' 'int'
        | |-<<<NULL>>>
        | |-BinaryOperator 0x7fc4b6809c30 <col:27, col:30> 'int' '<'
        | | |-ImplicitCastExpr 0x7fc4b6809c00 <col:27> 'int' <LValueToRValue>
        | | | `-DeclRefExpr 0x7fc4b68095b0 <col:27> 'int' lvalue Var 0x7fc4b6808f10 'jx' 'int'
        | | `-ImplicitCastExpr 0x7fc4b6809c18 <col:30> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fc4b68095d0 <col:30> 'int' lvalue ParmVar 0x7fc4b602fd70 'stopx2' 'int'
        | |-CompoundAssignOperator 0x7fc4b6809ca8 <col:38, col:43> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
        | | |-DeclRefExpr 0x7fc4b6809c50 <col:38> 'int' lvalue Var 0x7fc4b6808f10 'jx' 'int'
        | | `-ImplicitCastExpr 0x7fc4b6809c90 <col:43> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fc4b6809c70 <col:43> 'int' lvalue ParmVar 0x7fc4b602fdf0 'stepx2' 'int'
        | `-CompoundStmt 0x7fc4b680a218 <col:52, line:23:9>
        |   |-BinaryOperator 0x7fc4b680a058 <line:20:6, col:38> 'double' '='
        |   | |-ArraySubscriptExpr 0x7fc4b6809de8 <col:6, col:14> 'double' lvalue
        |   | | |-ImplicitCastExpr 0x7fc4b6809db8 <col:6, col:10> 'double *' <ArrayToPointerDecay>
        |   | | | `-ArraySubscriptExpr 0x7fc4b6809d48 <col:6, col:10> 'double [mz]' lvalue
        |   | | |   |-ImplicitCastExpr 0x7fc4b6809d18 <col:6> 'double (*)[mz]':'double (*)[mz]' <LValueToRValue>
        |   | | |   | `-DeclRefExpr 0x7fc4b6809cd8 <col:6> 'double (*)[mz]':'double (*)[mz]' lvalue ParmVar 0x7fc4b602faf0 'z' 'double (*)[mz]':'double (*)[mz]'
        |   | | |   `-ImplicitCastExpr 0x7fc4b6809d30 <col:8> 'int' <LValueToRValue>
        |   | | |     `-DeclRefExpr 0x7fc4b6809cf8 <col:8> 'int' lvalue Var 0x7fc4b6809090 'iz' 'int'
        |   | | `-ImplicitCastExpr 0x7fc4b6809dd0 <col:12> 'int' <LValueToRValue>
        |   | |   `-DeclRefExpr 0x7fc4b6809d68 <col:12> 'int' lvalue Var 0x7fc4b6809110 'jz' 'int'
        |   | `-BinaryOperator 0x7fc4b680a038 <col:18, col:38> 'double' '*'
        |   |   |-ImplicitCastExpr 0x7fc4b680a008 <col:18, col:26> 'double' <LValueToRValue>
        |   |   | `-ArraySubscriptExpr 0x7fc4b6809ee8 <col:18, col:26> 'double' lvalue
        |   |   |   |-ImplicitCastExpr 0x7fc4b6809eb8 <col:18, col:22> 'double *' <ArrayToPointerDecay>
        |   |   |   | `-ArraySubscriptExpr 0x7fc4b6809e78 <col:18, col:22> 'double [mx]' lvalue
        |   |   |   |   |-ImplicitCastExpr 0x7fc4b6809e48 <col:18> 'double (*)[mx]':'double (*)[mx]' <LValueToRValue>
        |   |   |   |   | `-DeclRefExpr 0x7fc4b6809e08 <col:18> 'double (*)[mx]':'double (*)[mx]' lvalue ParmVar 0x7fc4b602f6f0 'x' 'double (*)[mx]':'double (*)[mx]'
        |   |   |   |   `-ImplicitCastExpr 0x7fc4b6809e60 <col:20> 'int' <LValueToRValue>
        |   |   |   |     `-DeclRefExpr 0x7fc4b6809e28 <col:20> 'int' lvalue Var 0x7fc4b6808e90 'ix' 'int'
        |   |   |   `-ImplicitCastExpr 0x7fc4b6809ed0 <col:24> 'int' <LValueToRValue>
        |   |   |     `-DeclRefExpr 0x7fc4b6809e98 <col:24> 'int' lvalue Var 0x7fc4b6808f10 'jx' 'int'
        |   |   `-ImplicitCastExpr 0x7fc4b680a020 <col:30, col:38> 'double' <LValueToRValue>
        |   |     `-ArraySubscriptExpr 0x7fc4b6809fe8 <col:30, col:38> 'double' lvalue
        |   |       |-ImplicitCastExpr 0x7fc4b6809fb8 <col:30, col:34> 'double *' <ArrayToPointerDecay>
        |   |       | `-ArraySubscriptExpr 0x7fc4b6809f78 <col:30, col:34> 'double [my]' lvalue
        |   |       |   |-ImplicitCastExpr 0x7fc4b6809f48 <col:30> 'double (*)[my]':'double (*)[my]' <LValueToRValue>
        |   |       |   | `-DeclRefExpr 0x7fc4b6809f08 <col:30> 'double (*)[my]':'double (*)[my]' lvalue ParmVar 0x7fc4b602f8f0 'y' 'double (*)[my]':'double (*)[my]'
        |   |       |   `-ImplicitCastExpr 0x7fc4b6809f60 <col:32> 'int' <LValueToRValue>
        |   |       |     `-DeclRefExpr 0x7fc4b6809f28 <col:32> 'int' lvalue Var 0x7fc4b6808f90 'iy' 'int'
        |   |       `-ImplicitCastExpr 0x7fc4b6809fd0 <col:36> 'int' <LValueToRValue>
        |   |         `-DeclRefExpr 0x7fc4b6809f98 <col:36> 'int' lvalue Var 0x7fc4b6809010 'jy' 'int'
        |   |-BinaryOperator 0x7fc4b680a128 <line:21:6, col:16> 'int' '='
        |   | |-DeclRefExpr 0x7fc4b680a078 <col:6> 'int' lvalue Var 0x7fc4b6809010 'jy' 'int'
        |   | `-BinaryOperator 0x7fc4b680a108 <col:11, col:16> 'int' '+'
        |   |   |-ImplicitCastExpr 0x7fc4b680a0d8 <col:11> 'int' <LValueToRValue>
        |   |   | `-DeclRefExpr 0x7fc4b680a098 <col:11> 'int' lvalue Var 0x7fc4b6809010 'jy' 'int'
        |   |   `-ImplicitCastExpr 0x7fc4b680a0f0 <col:16> 'int' <LValueToRValue>
        |   |     `-DeclRefExpr 0x7fc4b680a0b8 <col:16> 'int' lvalue ParmVar 0x7fc4b60300f0 'stepy2' 'int'
        |   `-BinaryOperator 0x7fc4b680a1f8 <line:22:6, col:16> 'int' '='
        |     |-DeclRefExpr 0x7fc4b680a148 <col:6> 'int' lvalue Var 0x7fc4b6809110 'jz' 'int'
        |     `-BinaryOperator 0x7fc4b680a1d8 <col:11, col:16> 'int' '+'
        |       |-ImplicitCastExpr 0x7fc4b680a1a8 <col:11> 'int' <LValueToRValue>
        |       | `-DeclRefExpr 0x7fc4b680a168 <col:11> 'int' lvalue Var 0x7fc4b6809110 'jz' 'int'
        |       `-ImplicitCastExpr 0x7fc4b680a1c0 <col:16> 'int' <LValueToRValue>
        |         `-DeclRefExpr 0x7fc4b680a188 <col:16> 'int' lvalue ParmVar 0x7fc4b6808800 'stepz2' 'int'
        |-CompoundAssignOperator 0x7fc4b680a2d0 <line:24:9, col:15> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
        | |-DeclRefExpr 0x7fc4b680a278 <col:9> 'int' lvalue Var 0x7fc4b6808f90 'iy' 'int'
        | `-ImplicitCastExpr 0x7fc4b680a2b8 <col:15> 'int' <LValueToRValue>
        |   `-DeclRefExpr 0x7fc4b680a298 <col:15> 'int' lvalue ParmVar 0x7fc4b602ff70 'stepy1' 'int'
        `-CompoundAssignOperator 0x7fc4b680a358 <line:25:9, col:15> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
          |-DeclRefExpr 0x7fc4b680a300 <col:9> 'int' lvalue Var 0x7fc4b6809090 'iz' 'int'
          `-ImplicitCastExpr 0x7fc4b680a340 <col:15> 'int' <LValueToRValue>
            `-DeclRefExpr 0x7fc4b680a320 <col:15> 'int' lvalue ParmVar 0x7fc4b6808680 'stepz1' 'int'
