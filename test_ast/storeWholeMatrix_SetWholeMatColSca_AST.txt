TranslationUnitDecl 0x7fcd20038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fcd200394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fcd200391a0 '__int128'
|-TypedefDecl 0x7fcd20039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fcd200391c0 'unsigned __int128'
|-TypedefDecl 0x7fcd200397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fcd200395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fcd20039568 '__NSConstantString_tag'
|-TypedefDecl 0x7fcd20039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fcd20039850 'char *'
|   `-BuiltinType 0x7fcd20038ca0 'char'
|-TypedefDecl 0x7fcd20039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fcd20039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fcd20039970 'struct __va_list_tag'
|     `-Record 0x7fcd200398e8 '__va_list_tag'
`-FunctionDecl 0x7fcd2082e748 <./tree_src/storeWholeMatrix_SetWholeMatColSca.c:3:1, line:10:1> line:3:6 SetWholeMatColSca 'void (int, int, double, double (*)[m], int)'
  |-ParmVarDecl 0x7fcd2082e200 <line:4:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7fcd2082e280 <col:12, col:16> col:16 used m 'int'
  |-ParmVarDecl 0x7fcd2082e300 <col:19, col:26> col:26 used x 'double'
  |-ParmVarDecl 0x7fcd2082e500 <col:29, col:42> col:36 used z 'double (*)[m]':'double (*)[m]'
  |-ParmVarDecl 0x7fcd2082e580 <col:45, col:49> col:49 used p 'int'
  `-CompoundStmt 0x7fcd2082ebf8 <col:53, line:10:1>
    |-DeclStmt 0x7fcd2082e8d8 <line:6:5, col:10>
    | `-VarDecl 0x7fcd2082e870 <col:5, col:9> col:9 used i 'int'
    `-ForStmt 0x7fcd2082ebc0 <line:7:5, line:9:5>
      |-BinaryOperator 0x7fcd2082e930 <line:7:10, col:13> 'int' '='
      | |-DeclRefExpr 0x7fcd2082e8f0 <col:10> 'int' lvalue Var 0x7fcd2082e870 'i' 'int'
      | `-IntegerLiteral 0x7fcd2082e910 <col:13> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x7fcd2082e9c0 <col:16, col:18> 'int' '<'
      | |-ImplicitCastExpr 0x7fcd2082e990 <col:16> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fcd2082e950 <col:16> 'int' lvalue Var 0x7fcd2082e870 'i' 'int'
      | `-ImplicitCastExpr 0x7fcd2082e9a8 <col:18> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fcd2082e970 <col:18> 'int' lvalue ParmVar 0x7fcd2082e200 'n' 'int'
      |-UnaryOperator 0x7fcd2082ea00 <col:21, col:22> 'int' postfix '++'
      | `-DeclRefExpr 0x7fcd2082e9e0 <col:21> 'int' lvalue Var 0x7fcd2082e870 'i' 'int'
      `-CompoundStmt 0x7fcd2082eba0 <col:26, line:9:5>
        |-NullStmt 0x7fcd2082ea18 <line:7:27>
        `-BinaryOperator 0x7fcd2082eb80 <line:8:9, col:19> 'double' '='
          |-ArraySubscriptExpr 0x7fcd2082eb28 <col:9, col:15> 'double' lvalue
          | |-ImplicitCastExpr 0x7fcd2082eaf8 <col:9, col:12> 'double *' <ArrayToPointerDecay>
          | | `-ArraySubscriptExpr 0x7fcd2082ea90 <col:9, col:12> 'double [m]' lvalue
          | |   |-ImplicitCastExpr 0x7fcd2082ea60 <col:9> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
          | |   | `-DeclRefExpr 0x7fcd2082ea20 <col:9> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fcd2082e500 'z' 'double (*)[m]':'double (*)[m]'
          | |   `-ImplicitCastExpr 0x7fcd2082ea78 <col:11> 'int' <LValueToRValue>
          | |     `-DeclRefExpr 0x7fcd2082ea40 <col:11> 'int' lvalue Var 0x7fcd2082e870 'i' 'int'
          | `-ImplicitCastExpr 0x7fcd2082eb10 <col:14> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x7fcd2082eab0 <col:14> 'int' lvalue ParmVar 0x7fcd2082e580 'p' 'int'
          `-ImplicitCastExpr 0x7fcd2082eb68 <col:19> 'double' <LValueToRValue>
            `-DeclRefExpr 0x7fcd2082eb48 <col:19> 'double' lvalue ParmVar 0x7fcd2082e300 'x' 'double'
