TranslationUnitDecl 0x7f8c12838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f8c128394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f8c128391a0 '__int128'
|-TypedefDecl 0x7f8c12839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f8c128391c0 'unsigned __int128'
|-TypedefDecl 0x7f8c128397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f8c128395f0 'struct __NSConstantString_tag'
|   `-Record 0x7f8c12839568 '__NSConstantString_tag'
|-TypedefDecl 0x7f8c12839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f8c12839850 'char *'
|   `-BuiltinType 0x7f8c12838ca0 'char'
|-TypedefDecl 0x7f8c12839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f8c12839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f8c12839970 'struct __va_list_tag'
|     `-Record 0x7f8c128398e8 '__va_list_tag'
|-TypedefDecl 0x7f8c1302f200 <./tree_src/unarySectVector_MaxPrefixSectVec.c:4:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7f8c12838d60 'unsigned char'
|-FunctionDecl 0x7f8c1302f9f8 <line:11:1, line:25:1> line:11:6 MaxPrefixSectVec 'void (int, double *, double *, int, int, int, int, int, int)'
| |-ParmVarDecl 0x7f8c1302f270 <line:12:5, col:9> col:9 used n 'int'
| |-ParmVarDecl 0x7f8c1302f3f0 <col:12, col:22> col:19 used x 'double *':'double *'
| |-ParmVarDecl 0x7f8c1302f540 <col:25, col:35> col:32 used y 'double *':'double *'
| |-ParmVarDecl 0x7f8c1302f5c0 <line:13:5, col:9> col:9 used startx 'int'
| |-ParmVarDecl 0x7f8c1302f640 <col:17, col:21> col:21 used stopx 'int'
| |-ParmVarDecl 0x7f8c1302f6c0 <col:28, col:32> col:32 used stepx 'int'
| |-ParmVarDecl 0x7f8c1302f740 <line:14:5, col:9> col:9 used starty 'int'
| |-ParmVarDecl 0x7f8c1302f7c0 <col:17, col:21> col:21 stopy 'int'
| |-ParmVarDecl 0x7f8c1302f840 <col:28, col:32> col:32 used stepy 'int'
| `-CompoundStmt 0x7f8c130329b8 <col:40, line:25:1>
|   |-DeclStmt 0x7f8c1302fc40 <line:16:5, col:15>
|   | |-VarDecl 0x7f8c1302fb40 <col:5, col:9> col:9 used ix 'int'
|   | `-VarDecl 0x7f8c1302fbc0 <col:5, col:13> col:13 used iy 'int'
|   |-BinaryOperator 0x7f8c1302fed0 <line:17:5, col:22> 'int' '='
|   | |-DeclRefExpr 0x7f8c1302fc58 <col:5> 'int' lvalue ParmVar 0x7f8c1302f6c0 'stepx' 'int'
|   | `-CallExpr 0x7f8c1302fe90 <col:13, col:22> 'int'
|   |   |-ImplicitCastExpr 0x7f8c1302fe78 <col:13> 'int (*)(int)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x7f8c1302fe10 <col:13> 'int (int)' Function 0x7f8c1302fcb0 'abs' 'int (int)'
|   |   `-ImplicitCastExpr 0x7f8c1302feb8 <col:17> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x7f8c1302fe30 <col:17> 'int' lvalue ParmVar 0x7f8c1302f6c0 'stepx' 'int'
|   |-BinaryOperator 0x7f8c1302ffa8 <line:18:5, col:22> 'int' '='
|   | |-DeclRefExpr 0x7f8c1302fef0 <col:5> 'int' lvalue ParmVar 0x7f8c1302f840 'stepy' 'int'
|   | `-CallExpr 0x7f8c1302ff68 <col:13, col:22> 'int'
|   |   |-ImplicitCastExpr 0x7f8c1302ff50 <col:13> 'int (*)(int)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x7f8c1302ff10 <col:13> 'int (int)' Function 0x7f8c1302fcb0 'abs' 'int (int)'
|   |   `-ImplicitCastExpr 0x7f8c1302ff90 <col:17> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x7f8c1302ff30 <col:17> 'int' lvalue ParmVar 0x7f8c1302f840 'stepy' 'int'
|   |-BinaryOperator 0x7f8c13030100 <line:19:5, col:25> 'double' '='
|   | |-ArraySubscriptExpr 0x7f8c13030038 <col:5, col:13> 'double' lvalue
|   | | |-ImplicitCastExpr 0x7f8c13030008 <col:5> 'double *':'double *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7f8c1302ffc8 <col:5> 'double *':'double *' lvalue ParmVar 0x7f8c1302f540 'y' 'double *':'double *'
|   | | `-ImplicitCastExpr 0x7f8c13030020 <col:7> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7f8c1302ffe8 <col:7> 'int' lvalue ParmVar 0x7f8c1302f740 'starty' 'int'
|   | `-ImplicitCastExpr 0x7f8c130300e8 <col:17, col:25> 'double' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x7f8c130300c8 <col:17, col:25> 'double' lvalue
|   |     |-ImplicitCastExpr 0x7f8c13030098 <col:17> 'double *':'double *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7f8c13030058 <col:17> 'double *':'double *' lvalue ParmVar 0x7f8c1302f3f0 'x' 'double *':'double *'
|   |     `-ImplicitCastExpr 0x7f8c130300b0 <col:19> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x7f8c13030078 <col:19> 'int' lvalue ParmVar 0x7f8c1302f5c0 'startx' 'int'
|   |-BinaryOperator 0x7f8c130301b8 <line:20:5, col:20> 'int' '='
|   | |-DeclRefExpr 0x7f8c13030120 <col:5> 'int' lvalue Var 0x7f8c1302fbc0 'iy' 'int'
|   | `-BinaryOperator 0x7f8c13030198 <col:13, col:20> 'int' '+'
|   |   |-ImplicitCastExpr 0x7f8c13030180 <col:13> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x7f8c13030140 <col:13> 'int' lvalue ParmVar 0x7f8c1302f740 'starty' 'int'
|   |   `-IntegerLiteral 0x7f8c13030160 <col:20> 'int' 1
|   `-ForStmt 0x7f8c13032980 <line:21:5, line:24:5>
|     |-BinaryOperator 0x7f8c13032278 <line:21:10, col:21> 'int' '='
|     | |-DeclRefExpr 0x7f8c130301d8 <col:10> 'int' lvalue Var 0x7f8c1302fb40 'ix' 'int'
|     | `-BinaryOperator 0x7f8c13032258 <col:14, col:21> 'int' '+'
|     |   |-ImplicitCastExpr 0x7f8c13032240 <col:14> 'int' <LValueToRValue>
|     |   | `-DeclRefExpr 0x7f8c13032200 <col:14> 'int' lvalue ParmVar 0x7f8c1302f5c0 'startx' 'int'
|     |   `-IntegerLiteral 0x7f8c13032220 <col:21> 'int' 1
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7f8c13032308 <col:24, col:27> 'int' '<'
|     | |-ImplicitCastExpr 0x7f8c130322d8 <col:24> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7f8c13032298 <col:24> 'int' lvalue Var 0x7f8c1302fb40 'ix' 'int'
|     | `-ImplicitCastExpr 0x7f8c130322f0 <col:27> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7f8c130322b8 <col:27> 'int' lvalue ParmVar 0x7f8c1302f640 'stopx' 'int'
|     |-CompoundAssignOperator 0x7f8c13032380 <col:34, col:39> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     | |-DeclRefExpr 0x7f8c13032328 <col:34> 'int' lvalue Var 0x7f8c1302fb40 'ix' 'int'
|     | `-ImplicitCastExpr 0x7f8c13032368 <col:39> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7f8c13032348 <col:39> 'int' lvalue ParmVar 0x7f8c1302f6c0 'stepx' 'int'
|     `-CompoundStmt 0x7f8c13032960 <col:47, line:24:5>
|       |-BinaryOperator 0x7f8c13032870 <line:22:9, col:36> 'double' '='
|       | |-ArraySubscriptExpr 0x7f8c13032420 <col:9, col:13> 'double' lvalue
|       | | |-ImplicitCastExpr 0x7f8c130323f0 <col:9> 'double *':'double *' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7f8c130323b0 <col:9> 'double *':'double *' lvalue ParmVar 0x7f8c1302f540 'y' 'double *':'double *'
|       | | `-ImplicitCastExpr 0x7f8c13032408 <col:11> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7f8c130323d0 <col:11> 'int' lvalue Var 0x7f8c1302fbc0 'iy' 'int'
|       | `-CallExpr 0x7f8c13032810 <col:17, col:36> 'double'
|       |   |-ImplicitCastExpr 0x7f8c130327f8 <col:17> 'double (*)(double, double)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x7f8c13032648 <col:17> 'double (double, double)' Function 0x7f8c13032478 'fmax' 'double (double, double)'
|       |   |-ImplicitCastExpr 0x7f8c13032840 <col:22, col:28> 'double' <LValueToRValue>
|       |   | `-ArraySubscriptExpr 0x7f8c13032718 <col:22, col:28> 'double' lvalue
|       |   |   |-ImplicitCastExpr 0x7f8c13032700 <col:22> 'double *':'double *' <LValueToRValue>
|       |   |   | `-DeclRefExpr 0x7f8c13032668 <col:22> 'double *':'double *' lvalue ParmVar 0x7f8c1302f540 'y' 'double *':'double *'
|       |   |   `-BinaryOperator 0x7f8c130326e0 <col:24, col:27> 'int' '-'
|       |   |     |-ImplicitCastExpr 0x7f8c130326c8 <col:24> 'int' <LValueToRValue>
|       |   |     | `-DeclRefExpr 0x7f8c13032688 <col:24> 'int' lvalue Var 0x7f8c1302fbc0 'iy' 'int'
|       |   |     `-IntegerLiteral 0x7f8c130326a8 <col:27> 'int' 1
|       |   `-ImplicitCastExpr 0x7f8c13032858 <col:31, col:35> 'double' <LValueToRValue>
|       |     `-ArraySubscriptExpr 0x7f8c130327a8 <col:31, col:35> 'double' lvalue
|       |       |-ImplicitCastExpr 0x7f8c13032778 <col:31> 'double *':'double *' <LValueToRValue>
|       |       | `-DeclRefExpr 0x7f8c13032738 <col:31> 'double *':'double *' lvalue ParmVar 0x7f8c1302f3f0 'x' 'double *':'double *'
|       |       `-ImplicitCastExpr 0x7f8c13032790 <col:33> 'int' <LValueToRValue>
|       |         `-DeclRefExpr 0x7f8c13032758 <col:33> 'int' lvalue Var 0x7f8c1302fb40 'ix' 'int'
|       `-BinaryOperator 0x7f8c13032940 <line:23:9, col:21> 'int' '='
|         |-DeclRefExpr 0x7f8c13032890 <col:9> 'int' lvalue Var 0x7f8c1302fbc0 'iy' 'int'
|         `-BinaryOperator 0x7f8c13032920 <col:16, col:21> 'int' '+'
|           |-ImplicitCastExpr 0x7f8c130328f0 <col:16> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x7f8c130328b0 <col:16> 'int' lvalue Var 0x7f8c1302fbc0 'iy' 'int'
|           `-ImplicitCastExpr 0x7f8c13032908 <col:21> 'int' <LValueToRValue>
|             `-DeclRefExpr 0x7f8c130328d0 <col:21> 'int' lvalue ParmVar 0x7f8c1302f840 'stepy' 'int'
|-FunctionDecl 0x7f8c1302fcb0 <line:17:13> col:13 implicit used abs 'int (int)' extern
| |-ParmVarDecl 0x7f8c1302fd50 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x7f8c1302fdc0 <col:13> Implicit
| `-ConstAttr 0x7f8c1302fe00 <col:13> Implicit
`-FunctionDecl 0x7f8c13032478 <line:22:17> col:17 implicit used fmax 'double (double, double)' extern
  |-ParmVarDecl 0x7f8c13032518 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x7f8c13032580 <<invalid sloc>> <invalid sloc> 'double'
  |-NoThrowAttr 0x7f8c130325f8 <col:17> Implicit
  `-ConstAttr 0x7f8c13032638 <col:17> Implicit
