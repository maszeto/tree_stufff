TranslationUnitDecl 0x7fe8f6838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fe8f68394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fe8f68391a0 '__int128'
|-TypedefDecl 0x7fe8f6839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fe8f68391c0 'unsigned __int128'
|-TypedefDecl 0x7fe8f68397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fe8f68395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fe8f6839568 '__NSConstantString_tag'
|-TypedefDecl 0x7fe8f6839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fe8f6839850 'char *'
|   `-BuiltinType 0x7fe8f6838ca0 'char'
|-TypedefDecl 0x7fe8f6839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fe8f6839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fe8f6839970 'struct __va_list_tag'
|     `-Record 0x7fe8f68398e8 '__va_list_tag'
`-FunctionDecl 0x7fe8f702e9b8 <./tree_src/binaryWholeMatrix_MatMulMatVec.c:4:1, line:14:1> line:4:6 MatMulMatVec 'void (int, int, int, double (*)[p], double *, double *)'
  |-ParmVarDecl 0x7fe8f702e200 <line:5:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7fe8f702e280 <col:12, col:16> col:16 m 'int'
  |-ParmVarDecl 0x7fe8f702e300 <col:19, col:23> col:23 used p 'int'
  |-ParmVarDecl 0x7fe8f702e500 <col:26, col:39> col:33 used x 'double (*)[p]':'double (*)[p]'
  |-ParmVarDecl 0x7fe8f702e680 <col:42, col:52> col:49 used y 'double *':'double *'
  |-ParmVarDecl 0x7fe8f702e7d0 <col:55, col:65> col:62 used z 'double *':'double *'
  `-CompoundStmt 0x7fe8f7030368 <col:69, line:14:1>
    |-DeclStmt 0x7fe8f702ec70 <line:7:5, col:16>
    | |-VarDecl 0x7fe8f702eae8 <col:5, col:9> col:9 used i 'int'
    | |-VarDecl 0x7fe8f702eb68 <col:5, col:12> col:12 j 'int'
    | `-VarDecl 0x7fe8f702ebe8 <col:5, col:15> col:15 used k 'int'
    `-ForStmt 0x7fe8f7030330 <line:8:5, line:13:5>
      |-BinaryOperator 0x7fe8f702ecc8 <line:8:10, col:13> 'int' '='
      | |-DeclRefExpr 0x7fe8f702ec88 <col:10> 'int' lvalue Var 0x7fe8f702eae8 'i' 'int'
      | `-IntegerLiteral 0x7fe8f702eca8 <col:13> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x7fe8f702ed58 <col:16, col:18> 'int' '<'
      | |-ImplicitCastExpr 0x7fe8f702ed28 <col:16> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fe8f702ece8 <col:16> 'int' lvalue Var 0x7fe8f702eae8 'i' 'int'
      | `-ImplicitCastExpr 0x7fe8f702ed40 <col:18> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fe8f702ed08 <col:18> 'int' lvalue ParmVar 0x7fe8f702e200 'n' 'int'
      |-UnaryOperator 0x7fe8f702ed98 <col:21, col:22> 'int' postfix '++'
      | `-DeclRefExpr 0x7fe8f702ed78 <col:21> 'int' lvalue Var 0x7fe8f702eae8 'i' 'int'
      `-CompoundStmt 0x7fe8f7030318 <col:27, line:13:5>
        `-ForStmt 0x7fe8f70302e0 <line:10:9, line:12:9>
          |-BinaryOperator 0x7fe8f702ee80 <line:10:14, col:16> 'int' '='
          | |-DeclRefExpr 0x7fe8f702ee40 <col:14> 'int' lvalue Var 0x7fe8f702ebe8 'k' 'int'
          | `-IntegerLiteral 0x7fe8f702ee60 <col:16> 'int' 0
          |-<<<NULL>>>
          |-BinaryOperator 0x7fe8f702ef10 <col:19, col:21> 'int' '<'
          | |-ImplicitCastExpr 0x7fe8f702eee0 <col:19> 'int' <LValueToRValue>
          | | `-DeclRefExpr 0x7fe8f702eea0 <col:19> 'int' lvalue Var 0x7fe8f702ebe8 'k' 'int'
          | `-ImplicitCastExpr 0x7fe8f702eef8 <col:21> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x7fe8f702eec0 <col:21> 'int' lvalue ParmVar 0x7fe8f702e300 'p' 'int'
          |-UnaryOperator 0x7fe8f702ef50 <col:24, col:25> 'int' postfix '++'
          | `-DeclRefExpr 0x7fe8f702ef30 <col:24> 'int' lvalue Var 0x7fe8f702ebe8 'k' 'int'
          `-CompoundStmt 0x7fe8f70302c8 <col:30, line:12:9>
            `-BinaryOperator 0x7fe8f70302a8 <line:11:6, col:33> 'double' '='
              |-ArraySubscriptExpr 0x7fe8f702efd8 <col:6, col:9> 'double' lvalue
              | |-ImplicitCastExpr 0x7fe8f702efa8 <col:6> 'double *':'double *' <LValueToRValue>
              | | `-DeclRefExpr 0x7fe8f702ef68 <col:6> 'double *':'double *' lvalue ParmVar 0x7fe8f702e7d0 'z' 'double *':'double *'
              | `-ImplicitCastExpr 0x7fe8f702efc0 <col:8> 'int' <LValueToRValue>
              |   `-DeclRefExpr 0x7fe8f702ef88 <col:8> 'int' lvalue Var 0x7fe8f702eae8 'i' 'int'
              `-BinaryOperator 0x7fe8f7030288 <col:13, col:33> 'double' '+'
                |-ImplicitCastExpr 0x7fe8f7030270 <col:13, col:16> 'double' <LValueToRValue>
                | `-ArraySubscriptExpr 0x7fe8f702f068 <col:13, col:16> 'double' lvalue
                |   |-ImplicitCastExpr 0x7fe8f702f038 <col:13> 'double *':'double *' <LValueToRValue>
                |   | `-DeclRefExpr 0x7fe8f702eff8 <col:13> 'double *':'double *' lvalue ParmVar 0x7fe8f702e7d0 'z' 'double *':'double *'
                |   `-ImplicitCastExpr 0x7fe8f702f050 <col:15> 'int' <LValueToRValue>
                |     `-DeclRefExpr 0x7fe8f702f018 <col:15> 'int' lvalue Var 0x7fe8f702eae8 'i' 'int'
                `-BinaryOperator 0x7fe8f7030250 <col:20, col:33> 'double' '*'
                  |-ImplicitCastExpr 0x7fe8f7030220 <col:20, col:26> 'double' <LValueToRValue>
                  | `-ArraySubscriptExpr 0x7fe8f702f168 <col:20, col:26> 'double' lvalue
                  |   |-ImplicitCastExpr 0x7fe8f702f138 <col:20, col:23> 'double *' <ArrayToPointerDecay>
                  |   | `-ArraySubscriptExpr 0x7fe8f702f0f8 <col:20, col:23> 'double [p]' lvalue
                  |   |   |-ImplicitCastExpr 0x7fe8f702f0c8 <col:20> 'double (*)[p]':'double (*)[p]' <LValueToRValue>
                  |   |   | `-DeclRefExpr 0x7fe8f702f088 <col:20> 'double (*)[p]':'double (*)[p]' lvalue ParmVar 0x7fe8f702e500 'x' 'double (*)[p]':'double (*)[p]'
                  |   |   `-ImplicitCastExpr 0x7fe8f702f0e0 <col:22> 'int' <LValueToRValue>
                  |   |     `-DeclRefExpr 0x7fe8f702f0a8 <col:22> 'int' lvalue Var 0x7fe8f702eae8 'i' 'int'
                  |   `-ImplicitCastExpr 0x7fe8f702f150 <col:25> 'int' <LValueToRValue>
                  |     `-DeclRefExpr 0x7fe8f702f118 <col:25> 'int' lvalue Var 0x7fe8f702ebe8 'k' 'int'
                  `-ImplicitCastExpr 0x7fe8f7030238 <col:30, col:33> 'double' <LValueToRValue>
                    `-ArraySubscriptExpr 0x7fe8f7030200 <col:30, col:33> 'double' lvalue
                      |-ImplicitCastExpr 0x7fe8f702f1c8 <col:30> 'double *':'double *' <LValueToRValue>
                      | `-DeclRefExpr 0x7fe8f702f188 <col:30> 'double *':'double *' lvalue ParmVar 0x7fe8f702e680 'y' 'double *':'double *'
                      `-ImplicitCastExpr 0x7fe8f702f1e0 <col:32> 'int' <LValueToRValue>
                        `-DeclRefExpr 0x7fe8f702f1a8 <col:32> 'int' lvalue Var 0x7fe8f702ebe8 'k' 'int'
