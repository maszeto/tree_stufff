TranslationUnitDecl 0x7fd653038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fd6530394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fd6530391a0 '__int128'
|-TypedefDecl 0x7fd653039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fd6530391c0 'unsigned __int128'
|-TypedefDecl 0x7fd6530397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fd6530395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fd653039568 '__NSConstantString_tag'
|-TypedefDecl 0x7fd653039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fd653039850 'char *'
|   `-BuiltinType 0x7fd653038ca0 'char'
|-TypedefDecl 0x7fd653039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fd653039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fd653039970 'struct __va_list_tag'
|     `-Record 0x7fd6530398e8 '__va_list_tag'
|-TypedefDecl 0x7fd65382f200 <./tree_src/unaryWholeMatrix_SumPrefixWholeFirstMat.c:4:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fd653038d60 'unsigned char'
`-FunctionDecl 0x7fd65382f918 <line:11:1, line:21:1> line:11:6 SumPrefixWholeFirstMat 'void (int, int, double (*)[m], double (*)[m])'
  |-ParmVarDecl 0x7fd65382f270 <line:12:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7fd65382f2f0 <col:12, col:16> col:16 used m 'int'
  |-ParmVarDecl 0x7fd65382f4f0 <col:19, col:32> col:26 used x 'double (*)[m]':'double (*)[m]'
  |-ParmVarDecl 0x7fd65382f6f0 <col:35, col:48> col:42 used y 'double (*)[m]':'double (*)[m]'
  `-CompoundStmt 0x7fd653832438 <col:52, line:21:1>
    |-DeclStmt 0x7fd65382fb38 <line:14:5, col:13>
    | |-VarDecl 0x7fd65382fa38 <col:5, col:9> col:9 used i 'int'
    | `-VarDecl 0x7fd65382fab8 <col:5, col:12> col:12 used j 'int'
    `-ForStmt 0x7fd653832400 <line:15:5, line:20:5>
      |-BinaryOperator 0x7fd65382fb90 <line:15:10, col:13> 'int' '='
      | |-DeclRefExpr 0x7fd65382fb50 <col:10> 'int' lvalue Var 0x7fd65382fa38 'i' 'int'
      | `-IntegerLiteral 0x7fd65382fb70 <col:13> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x7fd65382fc20 <col:16, col:18> 'int' '<'
      | |-ImplicitCastExpr 0x7fd65382fbf0 <col:16> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fd65382fbb0 <col:16> 'int' lvalue Var 0x7fd65382fa38 'i' 'int'
      | `-ImplicitCastExpr 0x7fd65382fc08 <col:18> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fd65382fbd0 <col:18> 'int' lvalue ParmVar 0x7fd65382f270 'n' 'int'
      |-UnaryOperator 0x7fd65382fc60 <col:21, col:22> 'int' postfix '++'
      | `-DeclRefExpr 0x7fd65382fc40 <col:21> 'int' lvalue Var 0x7fd65382fa38 'i' 'int'
      `-CompoundStmt 0x7fd6538323e0 <col:27, line:20:5>
        |-BinaryOperator 0x7fd65382fe88 <line:16:9, col:25> 'double' '='
        | |-ArraySubscriptExpr 0x7fd65382fd68 <col:9, col:15> 'double' lvalue
        | | |-ImplicitCastExpr 0x7fd65382fd38 <col:9, col:12> 'double *' <ArrayToPointerDecay>
        | | | `-ArraySubscriptExpr 0x7fd65382fcd0 <col:9, col:12> 'double [m]' lvalue
        | | |   |-ImplicitCastExpr 0x7fd65382fcb8 <col:9> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
        | | |   | `-DeclRefExpr 0x7fd65382fc78 <col:9> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fd65382f6f0 'y' 'double (*)[m]':'double (*)[m]'
        | | |   `-IntegerLiteral 0x7fd65382fc98 <col:11> 'int' 0
        | | `-ImplicitCastExpr 0x7fd65382fd50 <col:14> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7fd65382fcf0 <col:14> 'int' lvalue Var 0x7fd65382fa38 'i' 'int'
        | `-ImplicitCastExpr 0x7fd65382fe70 <col:19, col:25> 'double' <LValueToRValue>
        |   `-ArraySubscriptExpr 0x7fd65382fe50 <col:19, col:25> 'double' lvalue
        |     |-ImplicitCastExpr 0x7fd65382fe20 <col:19, col:22> 'double *' <ArrayToPointerDecay>
        |     | `-ArraySubscriptExpr 0x7fd65382fde0 <col:19, col:22> 'double [m]' lvalue
        |     |   |-ImplicitCastExpr 0x7fd65382fdc8 <col:19> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
        |     |   | `-DeclRefExpr 0x7fd65382fd88 <col:19> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fd65382f4f0 'x' 'double (*)[m]':'double (*)[m]'
        |     |   `-IntegerLiteral 0x7fd65382fda8 <col:21> 'int' 0
        |     `-ImplicitCastExpr 0x7fd65382fe38 <col:24> 'int' <LValueToRValue>
        |       `-DeclRefExpr 0x7fd65382fe00 <col:24> 'int' lvalue Var 0x7fd65382fa38 'i' 'int'
        `-ForStmt 0x7fd6538323a8 <line:17:9, line:19:9>
          |-BinaryOperator 0x7fd65382fee8 <line:17:14, col:18> 'int' '='
          | |-DeclRefExpr 0x7fd65382fea8 <col:14> 'int' lvalue Var 0x7fd65382fab8 'j' 'int'
          | `-IntegerLiteral 0x7fd65382fec8 <col:18> 'int' 1
          |-<<<NULL>>>
          |-BinaryOperator 0x7fd65382ff78 <col:21, col:23> 'int' '<'
          | |-ImplicitCastExpr 0x7fd65382ff48 <col:21> 'int' <LValueToRValue>
          | | `-DeclRefExpr 0x7fd65382ff08 <col:21> 'int' lvalue Var 0x7fd65382fab8 'j' 'int'
          | `-ImplicitCastExpr 0x7fd65382ff60 <col:23> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x7fd65382ff28 <col:23> 'int' lvalue ParmVar 0x7fd65382f2f0 'm' 'int'
          |-UnaryOperator 0x7fd65382ffb8 <col:26, col:27> 'int' postfix '++'
          | `-DeclRefExpr 0x7fd65382ff98 <col:26> 'int' lvalue Var 0x7fd65382fab8 'j' 'int'
          `-CompoundStmt 0x7fd653832390 <col:32, line:19:9>
            `-BinaryOperator 0x7fd653832370 <line:18:6, col:34> 'double' '='
              |-ArraySubscriptExpr 0x7fd6538300b0 <col:6, col:12> 'double' lvalue
              | |-ImplicitCastExpr 0x7fd653830080 <col:6, col:9> 'double *' <ArrayToPointerDecay>
              | | `-ArraySubscriptExpr 0x7fd653830040 <col:6, col:9> 'double [m]' lvalue
              | |   |-ImplicitCastExpr 0x7fd653830010 <col:6> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
              | |   | `-DeclRefExpr 0x7fd65382ffd0 <col:6> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fd65382f6f0 'y' 'double (*)[m]':'double (*)[m]'
              | |   `-ImplicitCastExpr 0x7fd653830028 <col:8> 'int' <LValueToRValue>
              | |     `-DeclRefExpr 0x7fd65382fff0 <col:8> 'int' lvalue Var 0x7fd65382fab8 'j' 'int'
              | `-ImplicitCastExpr 0x7fd653830098 <col:11> 'int' <LValueToRValue>
              |   `-DeclRefExpr 0x7fd653830060 <col:11> 'int' lvalue Var 0x7fd65382fa38 'i' 'int'
              `-BinaryOperator 0x7fd653832350 <col:16, col:34> 'double' '+'
                |-ImplicitCastExpr 0x7fd653832320 <col:16, col:24> 'double' <LValueToRValue>
                | `-ArraySubscriptExpr 0x7fd653832200 <col:16, col:24> 'double' lvalue
                |   |-ImplicitCastExpr 0x7fd6538301c0 <col:16, col:21> 'double *' <ArrayToPointerDecay>
                |   | `-ArraySubscriptExpr 0x7fd653830180 <col:16, col:21> 'double [m]' lvalue
                |   |   |-ImplicitCastExpr 0x7fd653830168 <col:16> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
                |   |   | `-DeclRefExpr 0x7fd6538300d0 <col:16> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fd65382f6f0 'y' 'double (*)[m]':'double (*)[m]'
                |   |   `-BinaryOperator 0x7fd653830148 <col:18, col:20> 'int' '-'
                |   |     |-ImplicitCastExpr 0x7fd653830130 <col:18> 'int' <LValueToRValue>
                |   |     | `-DeclRefExpr 0x7fd6538300f0 <col:18> 'int' lvalue Var 0x7fd65382fab8 'j' 'int'
                |   |     `-IntegerLiteral 0x7fd653830110 <col:20> 'int' 1
                |   `-ImplicitCastExpr 0x7fd6538301d8 <col:23> 'int' <LValueToRValue>
                |     `-DeclRefExpr 0x7fd6538301a0 <col:23> 'int' lvalue Var 0x7fd65382fa38 'i' 'int'
                `-ImplicitCastExpr 0x7fd653832338 <col:28, col:34> 'double' <LValueToRValue>
                  `-ArraySubscriptExpr 0x7fd653832300 <col:28, col:34> 'double' lvalue
                    |-ImplicitCastExpr 0x7fd6538322d0 <col:28, col:31> 'double *' <ArrayToPointerDecay>
                    | `-ArraySubscriptExpr 0x7fd653832290 <col:28, col:31> 'double [m]' lvalue
                    |   |-ImplicitCastExpr 0x7fd653832260 <col:28> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
                    |   | `-DeclRefExpr 0x7fd653832220 <col:28> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fd65382f4f0 'x' 'double (*)[m]':'double (*)[m]'
                    |   `-ImplicitCastExpr 0x7fd653832278 <col:30> 'int' <LValueToRValue>
                    |     `-DeclRefExpr 0x7fd653832240 <col:30> 'int' lvalue Var 0x7fd65382fab8 'j' 'int'
                    `-ImplicitCastExpr 0x7fd6538322e8 <col:33> 'int' <LValueToRValue>
                      `-DeclRefExpr 0x7fd6538322b0 <col:33> 'int' lvalue Var 0x7fd65382fa38 'i' 'int'
