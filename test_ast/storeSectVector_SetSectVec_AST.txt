TranslationUnitDecl 0x7f9024838c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f90248394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f90248391a0 '__int128'
|-TypedefDecl 0x7f9024839510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f90248391c0 'unsigned __int128'
|-TypedefDecl 0x7f90248397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f90248395f0 'struct __NSConstantString_tag'
|   `-Record 0x7f9024839568 '__NSConstantString_tag'
|-TypedefDecl 0x7f9024839890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f9024839850 'char *'
|   `-BuiltinType 0x7f9024838ca0 'char'
|-TypedefDecl 0x7f9024839b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f9024839b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f9024839970 'struct __va_list_tag'
|     `-Record 0x7f90248398e8 '__va_list_tag'
`-FunctionDecl 0x7f9024890908 <./tree_src/storeSectVector_SetSectVec.c:1:1, line:8:1> line:1:6 SetSectVec 'void (double *, double *, int, int, int)'
  |-ParmVarDecl 0x7f9024890600 <line:2:5, col:13> col:13 used x 'double *'
  |-ParmVarDecl 0x7f9024890680 <col:16, col:24> col:24 used z 'double *'
  |-ParmVarDecl 0x7f9024890700 <col:27, col:31> col:31 used startz 'int'
  |-ParmVarDecl 0x7f9024890780 <col:39, col:43> col:43 used stopz 'int'
  |-ParmVarDecl 0x7f9024890800 <col:50, col:54> col:54 used stepz 'int'
  `-CompoundStmt 0x7f9024890de8 <col:62, line:8:1>
    |-DeclStmt 0x7f9024890a98 <line:4:5, col:10>
    | `-VarDecl 0x7f9024890a30 <col:5, col:9> col:9 used i 'int'
    `-ForStmt 0x7f9024890db0 <line:5:5, line:7:5>
      |-BinaryOperator 0x7f9024890b08 <line:5:10, col:12> 'int' '='
      | |-DeclRefExpr 0x7f9024890ab0 <col:10> 'int' lvalue Var 0x7f9024890a30 'i' 'int'
      | `-ImplicitCastExpr 0x7f9024890af0 <col:12> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f9024890ad0 <col:12> 'int' lvalue ParmVar 0x7f9024890700 'startz' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7f9024890b98 <col:20, col:22> 'int' '<'
      | |-ImplicitCastExpr 0x7f9024890b68 <col:20> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7f9024890b28 <col:20> 'int' lvalue Var 0x7f9024890a30 'i' 'int'
      | `-ImplicitCastExpr 0x7f9024890b80 <col:22> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f9024890b48 <col:22> 'int' lvalue ParmVar 0x7f9024890780 'stopz' 'int'
      |-CompoundAssignOperator 0x7f9024890c10 <col:29, col:33> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7f9024890bb8 <col:29> 'int' lvalue Var 0x7f9024890a30 'i' 'int'
      | `-ImplicitCastExpr 0x7f9024890bf8 <col:33> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f9024890bd8 <col:33> 'int' lvalue ParmVar 0x7f9024890800 'stepz' 'int'
      `-CompoundStmt 0x7f9024890d98 <col:41, line:7:5>
        `-BinaryOperator 0x7f9024890d78 <line:6:9, col:19> 'double' '='
          |-ArraySubscriptExpr 0x7f9024890cb0 <col:9, col:12> 'double' lvalue
          | |-ImplicitCastExpr 0x7f9024890c80 <col:9> 'double *' <LValueToRValue>
          | | `-DeclRefExpr 0x7f9024890c40 <col:9> 'double *' lvalue ParmVar 0x7f9024890680 'z' 'double *'
          | `-ImplicitCastExpr 0x7f9024890c98 <col:11> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x7f9024890c60 <col:11> 'int' lvalue Var 0x7f9024890a30 'i' 'int'
          `-ImplicitCastExpr 0x7f9024890d60 <col:16, col:19> 'double' <LValueToRValue>
            `-ArraySubscriptExpr 0x7f9024890d40 <col:16, col:19> 'double' lvalue
              |-ImplicitCastExpr 0x7f9024890d10 <col:16> 'double *' <LValueToRValue>
              | `-DeclRefExpr 0x7f9024890cd0 <col:16> 'double *' lvalue ParmVar 0x7f9024890600 'x' 'double *'
              `-ImplicitCastExpr 0x7f9024890d28 <col:18> 'int' <LValueToRValue>
                `-DeclRefExpr 0x7f9024890cf0 <col:18> 'int' lvalue Var 0x7f9024890a30 'i' 'int'
