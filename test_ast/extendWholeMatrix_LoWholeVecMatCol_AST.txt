TranslationUnitDecl 0x7fd962038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fd9620394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fd9620391a0 '__int128'
|-TypedefDecl 0x7fd962039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fd9620391c0 'unsigned __int128'
|-TypedefDecl 0x7fd9620397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fd9620395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fd962039568 '__NSConstantString_tag'
|-TypedefDecl 0x7fd962039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fd962039850 'char *'
|   `-BuiltinType 0x7fd962038ca0 'char'
|-TypedefDecl 0x7fd962039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fd962039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fd962039970 'struct __va_list_tag'
|     `-Record 0x7fd9620398e8 '__va_list_tag'
|-TypedefDecl 0x7fd96282f200 <./tree_src/extendWholeMatrix_LoWholeVecMatCol.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fd962038d60 'unsigned char'
|-FunctionDecl 0x7fd96282faa8 <line:6:1, line:15:1> line:6:6 LoWholeVecMatCol 'void (int, int, double *, double (*)[m], double (*)[m])'
| |-ParmVarDecl 0x7fd96282f270 <line:7:5, col:9> col:9 used n 'int'
| |-ParmVarDecl 0x7fd96282f2f0 <col:12, col:16> col:16 used m 'int'
| |-ParmVarDecl 0x7fd96282f470 <col:19, col:29> col:26 used x 'double *':'double *'
| |-ParmVarDecl 0x7fd96282f670 <col:32, col:45> col:39 used y 'double (*)[m]':'double (*)[m]'
| |-ParmVarDecl 0x7fd96282f870 <col:48, col:61> col:55 used z 'double (*)[m]':'double (*)[m]'
| `-CompoundStmt 0x7fd962831560 <col:65, line:15:1>
|   |-DeclStmt 0x7fd96282fcd0 <line:9:5, col:13>
|   | |-VarDecl 0x7fd96282fbd0 <col:5, col:9> col:9 used i 'int'
|   | `-VarDecl 0x7fd96282fc50 <col:5, col:12> col:12 used j 'int'
|   `-ForStmt 0x7fd962831528 <line:10:5, line:14:5>
|     |-BinaryOperator 0x7fd96282fd28 <line:10:10, col:13> 'int' '='
|     | |-DeclRefExpr 0x7fd96282fce8 <col:10> 'int' lvalue Var 0x7fd96282fbd0 'i' 'int'
|     | `-IntegerLiteral 0x7fd96282fd08 <col:13> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fd96282fdb8 <col:16, col:18> 'int' '<'
|     | |-ImplicitCastExpr 0x7fd96282fd88 <col:16> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fd96282fd48 <col:16> 'int' lvalue Var 0x7fd96282fbd0 'i' 'int'
|     | `-ImplicitCastExpr 0x7fd96282fda0 <col:18> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fd96282fd68 <col:18> 'int' lvalue ParmVar 0x7fd96282f270 'n' 'int'
|     |-UnaryOperator 0x7fd96282fdf8 <col:21, col:22> 'int' postfix '++'
|     | `-DeclRefExpr 0x7fd96282fdd8 <col:21> 'int' lvalue Var 0x7fd96282fbd0 'i' 'int'
|     `-CompoundStmt 0x7fd962831510 <col:27, line:14:5>
|       `-ForStmt 0x7fd9628314d8 <line:11:9, line:13:9>
|         |-BinaryOperator 0x7fd96282fe50 <line:11:14, col:17> 'int' '='
|         | |-DeclRefExpr 0x7fd96282fe10 <col:14> 'int' lvalue Var 0x7fd96282fc50 'j' 'int'
|         | `-IntegerLiteral 0x7fd96282fe30 <col:17> 'int' 0
|         |-<<<NULL>>>
|         |-BinaryOperator 0x7fd96282fee0 <col:20, col:22> 'int' '<'
|         | |-ImplicitCastExpr 0x7fd96282feb0 <col:20> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x7fd96282fe70 <col:20> 'int' lvalue Var 0x7fd96282fc50 'j' 'int'
|         | `-ImplicitCastExpr 0x7fd96282fec8 <col:22> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x7fd96282fe90 <col:22> 'int' lvalue ParmVar 0x7fd96282f2f0 'm' 'int'
|         |-UnaryOperator 0x7fd96282ff20 <col:25, col:26> 'int' postfix '++'
|         | `-DeclRefExpr 0x7fd96282ff00 <col:25> 'int' lvalue Var 0x7fd96282fc50 'j' 'int'
|         `-CompoundStmt 0x7fd9628314c0 <col:31, line:13:9>
|           `-BinaryOperator 0x7fd9628314a0 <line:12:6, col:33> 'double' '='
|             |-ArraySubscriptExpr 0x7fd962830018 <col:6, col:12> 'double' lvalue
|             | |-ImplicitCastExpr 0x7fd96282ffe8 <col:6, col:9> 'double *' <ArrayToPointerDecay>
|             | | `-ArraySubscriptExpr 0x7fd96282ffa8 <col:6, col:9> 'double [m]' lvalue
|             | |   |-ImplicitCastExpr 0x7fd96282ff78 <col:6> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
|             | |   | `-DeclRefExpr 0x7fd96282ff38 <col:6> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fd96282f870 'z' 'double (*)[m]':'double (*)[m]'
|             | |   `-ImplicitCastExpr 0x7fd96282ff90 <col:8> 'int' <LValueToRValue>
|             | |     `-DeclRefExpr 0x7fd96282ff58 <col:8> 'int' lvalue Var 0x7fd96282fc50 'j' 'int'
|             | `-ImplicitCastExpr 0x7fd962830000 <col:11> 'int' <LValueToRValue>
|             |   `-DeclRefExpr 0x7fd96282ffc8 <col:11> 'int' lvalue Var 0x7fd96282fbd0 'i' 'int'
|             `-CallExpr 0x7fd962831440 <col:16, col:33> 'double'
|               |-ImplicitCastExpr 0x7fd962831428 <col:16> 'double (*)(double, double)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x7fd962831250 <col:16> 'double (double, double)' Function 0x7fd962830078 'fmin' 'double (double, double)'
|               |-ImplicitCastExpr 0x7fd962831470 <col:21, col:24> 'double' <LValueToRValue>
|               | `-ArraySubscriptExpr 0x7fd9628312e0 <col:21, col:24> 'double' lvalue
|               |   |-ImplicitCastExpr 0x7fd9628312b0 <col:21> 'double *':'double *' <LValueToRValue>
|               |   | `-DeclRefExpr 0x7fd962831270 <col:21> 'double *':'double *' lvalue ParmVar 0x7fd96282f470 'x' 'double *':'double *'
|               |   `-ImplicitCastExpr 0x7fd9628312c8 <col:23> 'int' <LValueToRValue>
|               |     `-DeclRefExpr 0x7fd962831290 <col:23> 'int' lvalue Var 0x7fd96282fc50 'j' 'int'
|               `-ImplicitCastExpr 0x7fd962831488 <col:26, col:32> 'double' <LValueToRValue>
|                 `-ArraySubscriptExpr 0x7fd9628313e0 <col:26, col:32> 'double' lvalue
|                   |-ImplicitCastExpr 0x7fd9628313b0 <col:26, col:29> 'double *' <ArrayToPointerDecay>
|                   | `-ArraySubscriptExpr 0x7fd962831370 <col:26, col:29> 'double [m]' lvalue
|                   |   |-ImplicitCastExpr 0x7fd962831340 <col:26> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
|                   |   | `-DeclRefExpr 0x7fd962831300 <col:26> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fd96282f670 'y' 'double (*)[m]':'double (*)[m]'
|                   |   `-ImplicitCastExpr 0x7fd962831358 <col:28> 'int' <LValueToRValue>
|                   |     `-DeclRefExpr 0x7fd962831320 <col:28> 'int' lvalue Var 0x7fd96282fc50 'j' 'int'
|                   `-ImplicitCastExpr 0x7fd9628313c8 <col:31> 'int' <LValueToRValue>
|                     `-DeclRefExpr 0x7fd962831390 <col:31> 'int' lvalue Var 0x7fd96282fbd0 'i' 'int'
`-FunctionDecl 0x7fd962830078 <col:16> col:16 implicit used fmin 'double (double, double)' extern
  |-ParmVarDecl 0x7fd962830118 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x7fd962830180 <<invalid sloc>> <invalid sloc> 'double'
  |-NoThrowAttr 0x7fd962831200 <col:16> Implicit
  `-ConstAttr 0x7fd962831240 <col:16> Implicit
