TranslationUnitDecl 0x7fd7fb038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fd7fb0394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fd7fb0391a0 '__int128'
|-TypedefDecl 0x7fd7fb039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fd7fb0391c0 'unsigned __int128'
|-TypedefDecl 0x7fd7fb0397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fd7fb0395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fd7fb039568 '__NSConstantString_tag'
|-TypedefDecl 0x7fd7fb039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fd7fb039850 'char *'
|   `-BuiltinType 0x7fd7fb038ca0 'char'
|-TypedefDecl 0x7fd7fb039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fd7fb039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fd7fb039970 'struct __va_list_tag'
|     `-Record 0x7fd7fb0398e8 '__va_list_tag'
|-TypedefDecl 0x7fd7fb091600 <./tree_src/extendWholeVector_LoWholeScaVec.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fd7fb038d60 'unsigned char'
|-FunctionDecl 0x7fd7fb091b08 <line:6:1, line:13:1> line:6:6 LoWholeScaVec 'void (int, double, double *, double *)'
| |-ParmVarDecl 0x7fd7fb091670 <line:7:5, col:9> col:9 used n 'int'
| |-ParmVarDecl 0x7fd7fb0916f0 <col:12, col:19> col:19 used x 'double'
| |-ParmVarDecl 0x7fd7fb091870 <col:22, col:32> col:29 used y 'double *':'double *'
| |-ParmVarDecl 0x7fd7fb0919c0 <col:35, col:45> col:42 used z 'double *':'double *'
| `-CompoundStmt 0x7fd7fb092200 <col:49, line:13:1>
|   |-DeclStmt 0x7fd7fb091c90 <line:9:5, col:10>
|   | `-VarDecl 0x7fd7fb091c28 <col:5, col:9> col:9 used i 'int'
|   `-ForStmt 0x7fd7fb0921c8 <line:10:5, line:12:5>
|     |-BinaryOperator 0x7fd7fb091ce8 <line:10:10, col:14> 'int' '='
|     | |-DeclRefExpr 0x7fd7fb091ca8 <col:10> 'int' lvalue Var 0x7fd7fb091c28 'i' 'int'
|     | `-IntegerLiteral 0x7fd7fb091cc8 <col:14> 'int' 0
|     |-<<<NULL>>>
|     |-ImplicitCastExpr 0x7fd7fb091d28 <col:17> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x7fd7fb091d08 <col:17> 'int' lvalue ParmVar 0x7fd7fb091670 'n' 'int'
|     |-UnaryOperator 0x7fd7fb091d60 <col:20, col:22> 'int' prefix '++'
|     | `-DeclRefExpr 0x7fd7fb091d40 <col:22> 'int' lvalue Var 0x7fd7fb091c28 'i' 'int'
|     `-CompoundStmt 0x7fd7fb0921b0 <col:26, line:12:5>
|       `-BinaryOperator 0x7fd7fb092190 <line:11:9, col:27> 'double' '='
|         |-ArraySubscriptExpr 0x7fd7fb091de8 <col:9, col:12> 'double' lvalue
|         | |-ImplicitCastExpr 0x7fd7fb091db8 <col:9> 'double *':'double *' <LValueToRValue>
|         | | `-DeclRefExpr 0x7fd7fb091d78 <col:9> 'double *':'double *' lvalue ParmVar 0x7fd7fb0919c0 'z' 'double *':'double *'
|         | `-ImplicitCastExpr 0x7fd7fb091dd0 <col:11> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x7fd7fb091d98 <col:11> 'int' lvalue Var 0x7fd7fb091c28 'i' 'int'
|         `-CallExpr 0x7fd7fb092130 <col:16, col:27> 'double'
|           |-ImplicitCastExpr 0x7fd7fb092118 <col:16> 'double (*)(double, double)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x7fd7fb092018 <col:16> 'double (double, double)' Function 0x7fd7fb091e48 'fmin' 'double (double, double)'
|           |-ImplicitCastExpr 0x7fd7fb092160 <col:21> 'double' <LValueToRValue>
|           | `-DeclRefExpr 0x7fd7fb092038 <col:21> 'double' lvalue ParmVar 0x7fd7fb0916f0 'x' 'double'
|           `-ImplicitCastExpr 0x7fd7fb092178 <col:23, col:26> 'double' <LValueToRValue>
|             `-ArraySubscriptExpr 0x7fd7fb0920c8 <col:23, col:26> 'double' lvalue
|               |-ImplicitCastExpr 0x7fd7fb092098 <col:23> 'double *':'double *' <LValueToRValue>
|               | `-DeclRefExpr 0x7fd7fb092058 <col:23> 'double *':'double *' lvalue ParmVar 0x7fd7fb091870 'y' 'double *':'double *'
|               `-ImplicitCastExpr 0x7fd7fb0920b0 <col:25> 'int' <LValueToRValue>
|                 `-DeclRefExpr 0x7fd7fb092078 <col:25> 'int' lvalue Var 0x7fd7fb091c28 'i' 'int'
`-FunctionDecl 0x7fd7fb091e48 <col:16> col:16 implicit used fmin 'double (double, double)' extern
  |-ParmVarDecl 0x7fd7fb091ee8 <<invalid sloc>> <invalid sloc> 'double'
  |-ParmVarDecl 0x7fd7fb091f50 <<invalid sloc>> <invalid sloc> 'double'
  |-NoThrowAttr 0x7fd7fb091fc8 <col:16> Implicit
  `-ConstAttr 0x7fd7fb092008 <col:16> Implicit
