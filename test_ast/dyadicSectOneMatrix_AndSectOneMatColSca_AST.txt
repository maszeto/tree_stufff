TranslationUnitDecl 0x7f90f8038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7f90f80394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7f90f80391a0 '__int128'
|-TypedefDecl 0x7f90f8039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7f90f80391c0 'unsigned __int128'
|-TypedefDecl 0x7f90f80397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7f90f80395f0 'struct __NSConstantString_tag'
|   `-Record 0x7f90f8039568 '__NSConstantString_tag'
|-TypedefDecl 0x7f90f8039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7f90f8039850 'char *'
|   `-BuiltinType 0x7f90f8038ca0 'char'
|-TypedefDecl 0x7f90f8039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7f90f8039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7f90f8039970 'struct __va_list_tag'
|     `-Record 0x7f90f80398e8 '__va_list_tag'
|-TypedefDecl 0x7f90f882f200 <./tree_src/dyadicSectOneMatrix_AndSectOneMatColSca.c:3:1, col:23> col:23 referenced BOOL 'unsigned char'
| `-BuiltinType 0x7f90f8038d60 'unsigned char'
`-FunctionDecl 0x7f90f882ff58 <line:6:1, line:16:1> line:6:6 AndSectOneMatColSca 'void (int, int, int, BOOL, BOOL (*)[m], BOOL (*)[m], int, int, int, int, int, int)'
  |-ParmVarDecl 0x7f90f882f270 <line:7:5, col:9> col:9 used m 'int'
  |-ParmVarDecl 0x7f90f882f2f0 <col:12, col:16> col:16 used n 'int'
  |-ParmVarDecl 0x7f90f882f370 <col:19, col:23> col:23 used p 'int'
  |-ParmVarDecl 0x7f90f882f410 <col:26, col:31> col:31 used y 'BOOL':'unsigned char'
  |-ParmVarDecl 0x7f90f882f6c0 <col:34, col:45> col:39 used z 'BOOL (*)[m]':'BOOL (*)[m]'
  |-ParmVarDecl 0x7f90f882f970 <col:48, col:59> col:53 used x 'BOOL (*)[m]':'BOOL (*)[m]'
  |-ParmVarDecl 0x7f90f882f9f0 <line:8:5, col:9> col:9 used sz1 'int'
  |-ParmVarDecl 0x7f90f882fa70 <col:14, col:18> col:18 ez1 'int'
  |-ParmVarDecl 0x7f90f882faf0 <col:23, col:27> col:27 used bz1 'int'
  |-ParmVarDecl 0x7f90f882fb70 <col:32, col:36> col:36 used sx1 'int'
  |-ParmVarDecl 0x7f90f882fbf0 <col:41, col:45> col:45 used ex1 'int'
  |-ParmVarDecl 0x7f90f882fc70 <col:50, col:54> col:54 used bx1 'int'
  `-CompoundStmt 0x7f90f8831800 <col:60, line:16:1>
    |-DeclStmt 0x7f90f88301b8 <line:10:5, col:12>
    | |-VarDecl 0x7f90f88300b8 <col:5, col:9> col:9 used j 'int'
    | `-VarDecl 0x7f90f8830138 <col:5, col:11> col:11 used i 'int'
    |-BinaryOperator 0x7f90f8831238 <line:11:5, col:8> 'int' '='
    | |-DeclRefExpr 0x7f90f88301d0 <col:5> 'int' lvalue Var 0x7f90f88300b8 'j' 'int'
    | `-ImplicitCastExpr 0x7f90f8831220 <col:8> 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x7f90f8831200 <col:8> 'int' lvalue ParmVar 0x7f90f882faf0 'bz1' 'int'
    `-ForStmt 0x7f90f88317c8 <line:12:5, line:15:5>
      |-BinaryOperator 0x7f90f88312b0 <line:12:9, col:12> 'int' '='
      | |-DeclRefExpr 0x7f90f8831258 <col:9> 'int' lvalue Var 0x7f90f8830138 'i' 'int'
      | `-ImplicitCastExpr 0x7f90f8831298 <col:12> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f90f8831278 <col:12> 'int' lvalue ParmVar 0x7f90f882fc70 'bx1' 'int'
      |-<<<NULL>>>
      |-BinaryOperator 0x7f90f8831340 <col:17, col:19> 'int' '<'
      | |-ImplicitCastExpr 0x7f90f8831310 <col:17> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7f90f88312d0 <col:17> 'int' lvalue Var 0x7f90f8830138 'i' 'int'
      | `-ImplicitCastExpr 0x7f90f8831328 <col:19> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f90f88312f0 <col:19> 'int' lvalue ParmVar 0x7f90f882fbf0 'ex1' 'int'
      |-CompoundAssignOperator 0x7f90f88313b8 <col:24, col:28> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | |-DeclRefExpr 0x7f90f8831360 <col:24> 'int' lvalue Var 0x7f90f8830138 'i' 'int'
      | `-ImplicitCastExpr 0x7f90f88313a0 <col:28> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7f90f8831380 <col:28> 'int' lvalue ParmVar 0x7f90f882fb70 'sx1' 'int'
      `-CompoundStmt 0x7f90f88317a8 <col:34, line:15:5>
        |-BinaryOperator 0x7f90f8831700 <line:13:2, col:21> 'BOOL':'unsigned char' '='
        | |-ArraySubscriptExpr 0x7f90f8831528 <col:2, col:8> 'BOOL':'unsigned char' lvalue
        | | |-ImplicitCastExpr 0x7f90f88314f8 <col:2, col:5> 'BOOL *' <ArrayToPointerDecay>
        | | | `-ArraySubscriptExpr 0x7f90f8831458 <col:2, col:5> 'BOOL [m]' lvalue
        | | |   |-ImplicitCastExpr 0x7f90f8831428 <col:2> 'BOOL (*)[m]':'BOOL (*)[m]' <LValueToRValue>
        | | |   | `-DeclRefExpr 0x7f90f88313e8 <col:2> 'BOOL (*)[m]':'BOOL (*)[m]' lvalue ParmVar 0x7f90f882f6c0 'z' 'BOOL (*)[m]':'BOOL (*)[m]'
        | | |   `-ImplicitCastExpr 0x7f90f8831440 <col:4> 'int' <LValueToRValue>
        | | |     `-DeclRefExpr 0x7f90f8831408 <col:4> 'int' lvalue Var 0x7f90f88300b8 'j' 'int'
        | | `-ImplicitCastExpr 0x7f90f8831510 <col:7> 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x7f90f8831478 <col:7> 'int' lvalue ParmVar 0x7f90f882f370 'p' 'int'
        | `-ImplicitCastExpr 0x7f90f88316e8 <col:11, col:21> 'BOOL':'unsigned char' <IntegralCast>
        |   `-BinaryOperator 0x7f90f88316c8 <col:11, col:21> 'int' '&'
        |     |-ImplicitCastExpr 0x7f90f8831680 <col:11, col:17> 'int' <IntegralCast>
        |     | `-ImplicitCastExpr 0x7f90f8831668 <col:11, col:17> 'BOOL':'unsigned char' <LValueToRValue>
        |     |   `-ArraySubscriptExpr 0x7f90f8831628 <col:11, col:17> 'BOOL':'unsigned char' lvalue
        |     |     |-ImplicitCastExpr 0x7f90f88315f8 <col:11, col:14> 'BOOL *' <ArrayToPointerDecay>
        |     |     | `-ArraySubscriptExpr 0x7f90f88315b8 <col:11, col:14> 'BOOL [m]' lvalue
        |     |     |   |-ImplicitCastExpr 0x7f90f8831588 <col:11> 'BOOL (*)[m]':'BOOL (*)[m]' <LValueToRValue>
        |     |     |   | `-DeclRefExpr 0x7f90f8831548 <col:11> 'BOOL (*)[m]':'BOOL (*)[m]' lvalue ParmVar 0x7f90f882f970 'x' 'BOOL (*)[m]':'BOOL (*)[m]'
        |     |     |   `-ImplicitCastExpr 0x7f90f88315a0 <col:13> 'int' <LValueToRValue>
        |     |     |     `-DeclRefExpr 0x7f90f8831568 <col:13> 'int' lvalue Var 0x7f90f8830138 'i' 'int'
        |     |     `-ImplicitCastExpr 0x7f90f8831610 <col:16> 'int' <LValueToRValue>
        |     |       `-DeclRefExpr 0x7f90f88315d8 <col:16> 'int' lvalue ParmVar 0x7f90f882f370 'p' 'int'
        |     `-ImplicitCastExpr 0x7f90f88316b0 <col:21> 'int' <IntegralCast>
        |       `-ImplicitCastExpr 0x7f90f8831698 <col:21> 'BOOL':'unsigned char' <LValueToRValue>
        |         `-DeclRefExpr 0x7f90f8831648 <col:21> 'BOOL':'unsigned char' lvalue ParmVar 0x7f90f882f410 'y' 'BOOL':'unsigned char'
        `-CompoundAssignOperator 0x7f90f8831778 <line:14:9, col:13> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
          |-DeclRefExpr 0x7f90f8831720 <col:9> 'int' lvalue Var 0x7f90f88300b8 'j' 'int'
          `-ImplicitCastExpr 0x7f90f8831760 <col:13> 'int' <LValueToRValue>
            `-DeclRefExpr 0x7f90f8831740 <col:13> 'int' lvalue ParmVar 0x7f90f882f9f0 'sz1' 'int'
