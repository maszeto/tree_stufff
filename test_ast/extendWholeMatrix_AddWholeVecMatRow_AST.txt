TranslationUnitDecl 0x7fa3f3038c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fa3f30394a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fa3f30391a0 '__int128'
|-TypedefDecl 0x7fa3f3039510 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fa3f30391c0 'unsigned __int128'
|-TypedefDecl 0x7fa3f30397f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fa3f30395f0 'struct __NSConstantString_tag'
|   `-Record 0x7fa3f3039568 '__NSConstantString_tag'
|-TypedefDecl 0x7fa3f3039890 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fa3f3039850 'char *'
|   `-BuiltinType 0x7fa3f3038ca0 'char'
|-TypedefDecl 0x7fa3f3039b68 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fa3f3039b10 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fa3f3039970 'struct __va_list_tag'
|     `-Record 0x7fa3f30398e8 '__va_list_tag'
|-TypedefDecl 0x7fa3f382f200 <./tree_src/extendWholeMatrix_AddWholeVecMatRow.c:3:1, col:23> col:23 BOOL 'unsigned char'
| `-BuiltinType 0x7fa3f3038d60 'unsigned char'
`-FunctionDecl 0x7fa3f382faa8 <line:6:1, line:15:1> line:6:6 AddWholeVecMatRow 'void (int, int, double *, double (*)[m], double (*)[m])'
  |-ParmVarDecl 0x7fa3f382f270 <line:7:5, col:9> col:9 used n 'int'
  |-ParmVarDecl 0x7fa3f382f2f0 <col:12, col:16> col:16 used m 'int'
  |-ParmVarDecl 0x7fa3f382f470 <col:19, col:29> col:26 used x 'double *':'double *'
  |-ParmVarDecl 0x7fa3f382f670 <col:32, col:45> col:39 used y 'double (*)[m]':'double (*)[m]'
  |-ParmVarDecl 0x7fa3f382f870 <col:48, col:61> col:55 used z 'double (*)[m]':'double (*)[m]'
  `-CompoundStmt 0x7fa3f38312e0 <col:65, line:15:1>
    |-DeclStmt 0x7fa3f382fcd0 <line:9:5, col:13>
    | |-VarDecl 0x7fa3f382fbd0 <col:5, col:9> col:9 used i 'int'
    | `-VarDecl 0x7fa3f382fc50 <col:5, col:12> col:12 used j 'int'
    `-ForStmt 0x7fa3f38312a8 <line:10:5, line:14:5>
      |-BinaryOperator 0x7fa3f382fd28 <line:10:10, col:13> 'int' '='
      | |-DeclRefExpr 0x7fa3f382fce8 <col:10> 'int' lvalue Var 0x7fa3f382fbd0 'i' 'int'
      | `-IntegerLiteral 0x7fa3f382fd08 <col:13> 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x7fa3f382fdb8 <col:16, col:18> 'int' '<'
      | |-ImplicitCastExpr 0x7fa3f382fd88 <col:16> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x7fa3f382fd48 <col:16> 'int' lvalue Var 0x7fa3f382fbd0 'i' 'int'
      | `-ImplicitCastExpr 0x7fa3f382fda0 <col:18> 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x7fa3f382fd68 <col:18> 'int' lvalue ParmVar 0x7fa3f382f270 'n' 'int'
      |-UnaryOperator 0x7fa3f382fdf8 <col:21, col:22> 'int' postfix '++'
      | `-DeclRefExpr 0x7fa3f382fdd8 <col:21> 'int' lvalue Var 0x7fa3f382fbd0 'i' 'int'
      `-CompoundStmt 0x7fa3f3831290 <col:27, line:14:5>
        `-ForStmt 0x7fa3f3831258 <line:11:9, line:13:9>
          |-BinaryOperator 0x7fa3f382fe50 <line:11:14, col:17> 'int' '='
          | |-DeclRefExpr 0x7fa3f382fe10 <col:14> 'int' lvalue Var 0x7fa3f382fc50 'j' 'int'
          | `-IntegerLiteral 0x7fa3f382fe30 <col:17> 'int' 0
          |-<<<NULL>>>
          |-BinaryOperator 0x7fa3f382fee0 <col:20, col:22> 'int' '<'
          | |-ImplicitCastExpr 0x7fa3f382feb0 <col:20> 'int' <LValueToRValue>
          | | `-DeclRefExpr 0x7fa3f382fe70 <col:20> 'int' lvalue Var 0x7fa3f382fc50 'j' 'int'
          | `-ImplicitCastExpr 0x7fa3f382fec8 <col:22> 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x7fa3f382fe90 <col:22> 'int' lvalue ParmVar 0x7fa3f382f2f0 'm' 'int'
          |-UnaryOperator 0x7fa3f382ff20 <col:25, col:26> 'int' postfix '++'
          | `-DeclRefExpr 0x7fa3f382ff00 <col:25> 'int' lvalue Var 0x7fa3f382fc50 'j' 'int'
          `-CompoundStmt 0x7fa3f3831240 <col:31, line:13:9>
            `-BinaryOperator 0x7fa3f3831220 <line:12:6, col:29> 'double' '='
              |-ArraySubscriptExpr 0x7fa3f3830018 <col:6, col:12> 'double' lvalue
              | |-ImplicitCastExpr 0x7fa3f382ffe8 <col:6, col:9> 'double *' <ArrayToPointerDecay>
              | | `-ArraySubscriptExpr 0x7fa3f382ffa8 <col:6, col:9> 'double [m]' lvalue
              | |   |-ImplicitCastExpr 0x7fa3f382ff78 <col:6> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
              | |   | `-DeclRefExpr 0x7fa3f382ff38 <col:6> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fa3f382f870 'z' 'double (*)[m]':'double (*)[m]'
              | |   `-ImplicitCastExpr 0x7fa3f382ff90 <col:8> 'int' <LValueToRValue>
              | |     `-DeclRefExpr 0x7fa3f382ff58 <col:8> 'int' lvalue Var 0x7fa3f382fbd0 'i' 'int'
              | `-ImplicitCastExpr 0x7fa3f3830000 <col:11> 'int' <LValueToRValue>
              |   `-DeclRefExpr 0x7fa3f382ffc8 <col:11> 'int' lvalue Var 0x7fa3f382fc50 'j' 'int'
              `-BinaryOperator 0x7fa3f3831200 <col:16, col:29> 'double' '+'
                |-ImplicitCastExpr 0x7fa3f38301c8 <col:16, col:19> 'double' <LValueToRValue>
                | `-ArraySubscriptExpr 0x7fa3f38300a8 <col:16, col:19> 'double' lvalue
                |   |-ImplicitCastExpr 0x7fa3f3830078 <col:16> 'double *':'double *' <LValueToRValue>
                |   | `-DeclRefExpr 0x7fa3f3830038 <col:16> 'double *':'double *' lvalue ParmVar 0x7fa3f382f470 'x' 'double *':'double *'
                |   `-ImplicitCastExpr 0x7fa3f3830090 <col:18> 'int' <LValueToRValue>
                |     `-DeclRefExpr 0x7fa3f3830058 <col:18> 'int' lvalue Var 0x7fa3f382fc50 'j' 'int'
                `-ImplicitCastExpr 0x7fa3f38301e0 <col:23, col:29> 'double' <LValueToRValue>
                  `-ArraySubscriptExpr 0x7fa3f38301a8 <col:23, col:29> 'double' lvalue
                    |-ImplicitCastExpr 0x7fa3f3830178 <col:23, col:26> 'double *' <ArrayToPointerDecay>
                    | `-ArraySubscriptExpr 0x7fa3f3830138 <col:23, col:26> 'double [m]' lvalue
                    |   |-ImplicitCastExpr 0x7fa3f3830108 <col:23> 'double (*)[m]':'double (*)[m]' <LValueToRValue>
                    |   | `-DeclRefExpr 0x7fa3f38300c8 <col:23> 'double (*)[m]':'double (*)[m]' lvalue ParmVar 0x7fa3f382f670 'y' 'double (*)[m]':'double (*)[m]'
                    |   `-ImplicitCastExpr 0x7fa3f3830120 <col:25> 'int' <LValueToRValue>
                    |     `-DeclRefExpr 0x7fa3f38300e8 <col:25> 'int' lvalue Var 0x7fa3f382fbd0 'i' 'int'
                    `-ImplicitCastExpr 0x7fa3f3830190 <col:28> 'int' <LValueToRValue>
                      `-DeclRefExpr 0x7fa3f3830158 <col:28> 'int' lvalue Var 0x7fa3f382fc50 'j' 'int'
